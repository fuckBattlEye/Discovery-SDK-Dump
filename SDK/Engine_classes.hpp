#pragma once

//   SDK By:if

#ifdef _MSC_VER
	#pragma pack(push, 0x8)
#endif

namespace sdk
{
//---------------------------------------------------------------------------
// Classes
//---------------------------------------------------------------------------

// Class Engine.Actor
// 0x02A0 (0x02C8 - 0x0028)
class AActor : public UObject
{
public:
	struct FActorTickFunction                          PrimaryActorTick;                                         // 0x0028(0x0030) (Edit, DisableEditOnInstance)
	unsigned char                                      bNetTemporary : 1;                                        // 0x0058(0x0001)
	unsigned char                                      bNetStartup : 1;                                          // 0x0058(0x0001)
	unsigned char                                      bOnlyRelevantToOwner : 1;                                 // 0x0058(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	unsigned char                                      bAlwaysRelevant : 1;                                      // 0x0058(0x0001) (Edit, BlueprintVisible, DisableEditOnInstance)
	unsigned char                                      bReplicateAttachment : 1;                                 // 0x0058(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      bReplicateMovement : 1;                                   // 0x0058(0x0001) (Edit, Net, DisableEditOnInstance)
	unsigned char                                      bCallPreReplication : 1;                                  // 0x0058(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      bCallPreReplicationForReplay : 1;                         // 0x0058(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      bHidden : 1;                                              // 0x0059(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, Net)
	unsigned char                                      bTearOff : 1;                                             // 0x0059(0x0001) (Net)
	unsigned char                                      bForceNetAddressable : 1;                                 // 0x0059(0x0001)
	unsigned char                                      bExchangedRoles : 1;                                      // 0x0059(0x0001) (Transient)
	unsigned char                                      bNetLoadOnClient : 1;                                     // 0x0059(0x0001) (Edit)
	unsigned char                                      bNetUseOwnerRelevancy : 1;                                // 0x0059(0x0001) (Edit, BlueprintVisible, DisableEditOnInstance)
	unsigned char                                      bRelevantForNetworkReplays : 1;                           // 0x0059(0x0001)
	unsigned char                                      bRelevantForLevelBounds : 1;                              // 0x0059(0x0001) (Edit)
	unsigned char                                      bReplayRewindable : 1;                                    // 0x005A(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      bAllowTickBeforeBeginPlay : 1;                            // 0x005A(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      bAutoDestroyWhenFinished : 1;                             // 0x005A(0x0001) (BlueprintVisible)
	unsigned char                                      bCanBeDamaged : 1;                                        // 0x005A(0x0001) (Edit, BlueprintVisible, Net, SaveGame)
	unsigned char                                      bBlockInput : 1;                                          // 0x005A(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      bCollideWhenPlacing : 1;                                  // 0x005A(0x0001)
	unsigned char                                      bFindCameraComponentWhenViewTarget : 1;                   // 0x005A(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bGenerateOverlapEventsDuringLevelStreaming : 1;           // 0x005A(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bIgnoresOriginShifting : 1;                               // 0x005B(0x0001) (Edit)
	unsigned char                                      bEnableAutoLODGeneration : 1;                             // 0x005B(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bIsEditorOnlyActor : 1;                                   // 0x005B(0x0001) (Edit)
	unsigned char                                      bActorSeamlessTraveled : 1;                               // 0x005B(0x0001)
	unsigned char                                      bReplicates : 1;                                          // 0x005B(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	unsigned char                                      bCanBeInCluster : 1;                                      // 0x005B(0x0001) (Edit)
	unsigned char                                      bAllowReceiveTickEventOnDedicatedServer : 1;              // 0x005B(0x0001)
	unsigned char                                      UnknownData00 : 1;                                        // 0x005B(0x0001)
	unsigned char                                      UnknownData01 : 6;                                        // 0x005C(0x0001)
	unsigned char                                      bActorEnableCollision : 1;                                // 0x005C(0x0001)
	unsigned char                                      bActorIsBeingDestroyed : 1;                               // 0x005C(0x0001) (Transient, DuplicateTransient)
	unsigned char                                      UnknownData02[0x1];                                       // 0x005D(0x0001) MISSED OFFSET
	enum class EActorUpdateOverlapsMethod              UpdateOverlapsMethodDuringLevelStreaming;                 // 0x005E(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	enum class EActorUpdateOverlapsMethod              DefaultUpdateOverlapsMethodDuringLevelStreaming;          // 0x005F(0x0001) (Edit, ZeroConstructor, Config, EditConst, IsPlainOldData)
	TEnumAsByte<ENetRole>                              RemoteRole;                                               // 0x0060(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData03[0x7];                                       // 0x0061(0x0007) MISSED OFFSET
	struct FRepMovement                                ReplicatedMovement;                                       // 0x0068(0x0068) (Edit, Net, DisableEditOnInstance)
	float                                              InitialLifeSpan;                                          // 0x00D0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              CustomTimeDilation;                                       // 0x00D4(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x8];                                       // 0x00D8(0x0008) MISSED OFFSET
	struct FRepAttachment                              AttachmentReplication;                                    // 0x00E0(0x0060) (Net, Transient)
	class AActor*                                      Owner;                                                    // 0x0140(0x0008) (Net, ZeroConstructor, IsPlainOldData)
	struct FName                                       NetDriverName;                                            // 0x0148(0x0008) (ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ENetRole>                              Role;                                                     // 0x0150(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ENetDormancy>                          NetDormancy;                                              // 0x0151(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	enum class ESpawnActorCollisionHandlingMethod      SpawnCollisionHandlingMethod;                             // 0x0152(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EAutoReceiveInput>                     AutoReceiveInput;                                         // 0x0153(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                InputPriority;                                            // 0x0154(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	class UInputComponent*                             InputComponent;                                           // 0x0158(0x0008) (ExportObject, ZeroConstructor, InstancedReference, DuplicateTransient, IsPlainOldData)
	float                                              NetCullDistanceSquared;                                   // 0x0160(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                NetTag;                                                   // 0x0164(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              NetUpdateFrequency;                                       // 0x0168(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinNetUpdateFrequency;                                    // 0x016C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NetPriority;                                              // 0x0170(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x0174(0x0004) MISSED OFFSET
	class APawn*                                       Instigator;                                               // 0x0178(0x0008) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	TArray<class AActor*>                              Children;                                                 // 0x0180(0x0010) (ZeroConstructor, Transient)
	class USceneComponent*                             RootComponent;                                            // 0x0190(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData06[0x8];                                       // 0x0198(0x0008) MISSED OFFSET
	int                                                RayTracingGroupId;                                        // 0x01A0(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x4];                                       // 0x01A4(0x0004) MISSED OFFSET
	TArray<struct FName>                               Layers;                                                   // 0x01A8(0x0010) (Edit, ZeroConstructor)
	TWeakObjectPtr<class UChildActorComponent>         ParentComponent;                                          // 0x01B8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData08[0x8];                                       // 0x01C0(0x0008) MISSED OFFSET
	TArray<struct FName>                               Tags;                                                     // 0x01C8(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FScriptMulticastDelegate                    OnTakeAnyDamage;                                          // 0x01D8(0x0010) (InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnTakePointDamage;                                        // 0x01D9(0x0010) (InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnTakeRadialDamage;                                       // 0x01DA(0x0010) (InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnActorBeginOverlap;                                      // 0x01DB(0x0010) (InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnActorEndOverlap;                                        // 0x01DC(0x0010) (InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBeginCursorOver;                                        // 0x01DD(0x0010) (InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnEndCursorOver;                                          // 0x01DE(0x0010) (InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnClicked;                                                // 0x01DF(0x0010) (InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnReleased;                                               // 0x01E0(0x0010) (InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnInputTouchBegin;                                        // 0x01E1(0x0010) (InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnInputTouchEnd;                                          // 0x01E2(0x0010) (InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnInputTouchEnter;                                        // 0x01E3(0x0010) (InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnInputTouchLeave;                                        // 0x01E4(0x0010) (InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnActorHit;                                               // 0x01E5(0x0010) (InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDestroyed;                                              // 0x01E6(0x0010) (InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnEndPlay;                                                // 0x01E7(0x0010) (InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData09[0xB0];                                      // 0x01E8(0x00B0) MISSED OFFSET
	TArray<class UActorComponent*>                     InstanceComponents;                                       // 0x0298(0x0010) (ExportObject, ZeroConstructor)
	TArray<class UActorComponent*>                     BlueprintCreatedComponents;                               // 0x02A8(0x0010) (ExportObject, ZeroConstructor)
	unsigned char                                      UnknownData10[0x10];                                      // 0x02B8(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.Actor"));
		return ptr;
	}


	bool WasRecentlyRendered(float Tolerance);//Offset:Discovery.exe+0x5667CD0
	void UserConstructionScript();//Offset:Discovery.exe+0x327F8B0
	void TearOff();//Offset:Discovery.exe+0x14618E0
	void SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup);//Offset:Discovery.exe+0x5667D70
	void SetTickableWhenPaused(bool bTickableWhenPaused);//Offset:Discovery.exe+0x56689F0
	void SetReplicates(bool bInReplicates);//Offset:Discovery.exe+0x566D5C0
	void SetReplicateMovement(bool bInReplicateMovement);//Offset:Discovery.exe+0x566D520
	void SetRayTracingGroupId(int InRaytracingGroupId);//Offset:Discovery.exe+0x566D460
	void SetOwner(class AActor* NewOwner);//Offset:Discovery.exe+0x56684C0
	void SetNetDormancy(TEnumAsByte<ENetDormancy> NewDormancy);//Offset:Discovery.exe+0x5668370
	void SetLifeSpan(float InLifespan);//Offset:Discovery.exe+0x5668730
	void SetAutoDestroyWhenFinished(bool bVal);//Offset:Discovery.exe+0x566D660
	void SetActorTickInterval(float TickInterval);//Offset:Discovery.exe+0x5668590
	void SetActorTickEnabled(bool bEnabled);//Offset:Discovery.exe+0x5668660
	void SetActorScale3D(const struct FVector& NewScale3D);//Offset:Discovery.exe+0x566C2B0
	void SetActorRelativeScale3D(const struct FVector& NewRelativeScale);//Offset:Discovery.exe+0x5669F30
	void SetActorHiddenInGame(bool bNewHidden);//Offset:Discovery.exe+0x5669E30
	void SetActorEnableCollision(bool bNewActorEnableCollision);//Offset:Discovery.exe+0x5669D90
	void RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);//Offset:Discovery.exe+0x5668AC0
	void RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor);//Offset:Discovery.exe+0x5668B60
	void ReceiveTick(float DeltaSeconds);//Offset:Discovery.exe+0x327F8B0
	void ReceiveRadialDamage(float DamageReceived, class UDamageType* DamageType, const struct FVector& Origin, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser);//Offset:Discovery.exe+0x327F8B0
	void ReceivePointDamage(float Damage, class UDamageType* DamageType, const struct FVector& HitLocation, const struct FVector& HitNormal, class UPrimitiveComponent* HitComponent, const struct FName& BoneName, const struct FVector& ShotFromDirection, class AController* InstigatedBy, class AActor* DamageCauser, const struct FHitResult& HitInfo);//Offset:Discovery.exe+0x327F8B0
	void ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);//Offset:Discovery.exe+0x327F8B0
	void ReceiveEndPlay(TEnumAsByte<EEndPlayReason> EndPlayReason);//Offset:Discovery.exe+0x327F8B0
	void ReceiveDestroyed();//Offset:Discovery.exe+0x327F8B0
	void ReceiveBeginPlay();//Offset:Discovery.exe+0x327F8B0
	void ReceiveAnyDamage(float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);//Offset:Discovery.exe+0x327F8B0
	void ReceiveActorOnReleased(const struct FKey& ButtonReleased);//Offset:Discovery.exe+0x327F8B0
	void ReceiveActorOnInputTouchLeave(TEnumAsByte<ETouchIndex> FingerIndex);//Offset:Discovery.exe+0x327F8B0
	void ReceiveActorOnInputTouchEnter(TEnumAsByte<ETouchIndex> FingerIndex);//Offset:Discovery.exe+0x327F8B0
	void ReceiveActorOnInputTouchEnd(TEnumAsByte<ETouchIndex> FingerIndex);//Offset:Discovery.exe+0x327F8B0
	void ReceiveActorOnInputTouchBegin(TEnumAsByte<ETouchIndex> FingerIndex);//Offset:Discovery.exe+0x327F8B0
	void ReceiveActorOnClicked(const struct FKey& ButtonPressed);//Offset:Discovery.exe+0x327F8B0
	void ReceiveActorEndOverlap(class AActor* OtherActor);//Offset:Discovery.exe+0x327F8B0
	void ReceiveActorEndCursorOver();//Offset:Discovery.exe+0x327F8B0
	void ReceiveActorBeginOverlap(class AActor* OtherActor);//Offset:Discovery.exe+0x327F8B0
	void ReceiveActorBeginCursorOver();//Offset:Discovery.exe+0x327F8B0
	void PrestreamTextures(float Seconds, bool bEnableStreaming, int CinematicTextureGroups);//Offset:Discovery.exe+0x5667B70
	void OnRep_ReplicateMovement();//Offset:Discovery.exe+0x191D9E0
	void OnRep_ReplicatedMovement();//Offset:Discovery.exe+0x304A0
	void OnRep_Owner();//Offset:Discovery.exe+0x11B97D0
	void OnRep_Instigator();//Offset:Discovery.exe+0x1DB6730
	void OnRep_AttachmentReplication();//Offset:Discovery.exe+0x1DC09C0
	void MakeNoise(float Loudness, class APawn* NoiseInstigator, const struct FVector& NoiseLocation, float MaxRange, const struct FName& Tag);//Offset:Discovery.exe+0x5667510
	bool K2_TeleportTo(const struct FVector& DestLocation, const struct FRotator& DestRotation);//Offset:Discovery.exe+0x56680A0
	bool K2_SetActorTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);//Offset:Discovery.exe+0x566B010
	bool K2_SetActorRotation(const struct FRotator& NewRotation, bool bTeleportPhysics);//Offset:Discovery.exe+0x566C660
	void K2_SetActorRelativeTransform(const struct FTransform& NewRelativeTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);//Offset:Discovery.exe+0x5669FD0
	void K2_SetActorRelativeRotation(const struct FRotator& NewRelativeRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);//Offset:Discovery.exe+0x566A2B0
	void K2_SetActorRelativeLocation(const struct FVector& NewRelativeLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);//Offset:Discovery.exe+0x566A550
	bool K2_SetActorLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);//Offset:Discovery.exe+0x566C350
	bool K2_SetActorLocation(const struct FVector& NewLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);//Offset:Discovery.exe+0x566CDC0
	void K2_OnReset();//Offset:Discovery.exe+0x327F8B0
	void K2_OnEndViewTarget(class APlayerController* PC);//Offset:Discovery.exe+0x327F8B0
	void K2_OnBecomeViewTarget(class APlayerController* PC);//Offset:Discovery.exe+0x327F8B0
	class USceneComponent* K2_GetRootComponent();//Offset:Discovery.exe+0x566C7C0
	TArray<class UActorComponent*> K2_GetComponentsByClass(class UClass* ComponentClass);//Offset:Discovery.exe+0x5667900
	struct FRotator K2_GetActorRotation();//Offset:Discovery.exe+0x566CBC0
	struct FVector K2_GetActorLocation();//Offset:Discovery.exe+0x566D060
	void K2_DetachFromActor(enum class EDetachmentRule LocationRule, enum class EDetachmentRule RotationRule, enum class EDetachmentRule ScaleRule);//Offset:Discovery.exe+0x5668E10
	void K2_DestroyActor();//Offset:Discovery.exe+0x5669D40
	void K2_AttachToComponent(class USceneComponent* Parent, const struct FName& SocketName, enum class EAttachmentRule LocationRule, enum class EAttachmentRule RotationRule, enum class EAttachmentRule ScaleRule, bool bWeldSimulatedBodies);//Offset:Discovery.exe+0x5669380
	void K2_AttachToActor(class AActor* ParentActor, const struct FName& SocketName, enum class EAttachmentRule LocationRule, enum class EAttachmentRule RotationRule, enum class EAttachmentRule ScaleRule, bool bWeldSimulatedBodies);//Offset:Discovery.exe+0x5668FE0
	void K2_AttachRootComponentToActor(class AActor* InParentActor, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);//Offset:Discovery.exe+0x5669200
	void K2_AttachRootComponentTo(class USceneComponent* InParent, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);//Offset:Discovery.exe+0x56695A0
	void K2_AddActorWorldTransformKeepScale(const struct FTransform& DeltaTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);//Offset:Discovery.exe+0x566B2F0
	void K2_AddActorWorldTransform(const struct FTransform& DeltaTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);//Offset:Discovery.exe+0x566B5D0
	void K2_AddActorWorldRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);//Offset:Discovery.exe+0x566B8B0
	void K2_AddActorWorldOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);//Offset:Discovery.exe+0x566BB50
	void K2_AddActorLocalTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);//Offset:Discovery.exe+0x566A7F0
	void K2_AddActorLocalRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);//Offset:Discovery.exe+0x566AAD0
	void K2_AddActorLocalOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);//Offset:Discovery.exe+0x566AD70
	bool IsOverlappingActor(class AActor* Other);//Offset:Discovery.exe+0x5668400
	bool IsChildActor();//Offset:Discovery.exe+0x5668320
	bool IsActorTickEnabled();//Offset:Discovery.exe+0x5668630
	bool IsActorBeingDestroyed();//Offset:Discovery.exe+0x5668990
	bool HasAuthority();//Offset:Discovery.exe+0x5669D10
	float GetVerticalDistanceTo(class AActor* OtherActor);//Offset:Discovery.exe+0x566BF30
	struct FVector GetVelocity();//Offset:Discovery.exe+0x566C760
	struct FTransform GetTransform();//Offset:Discovery.exe+0x566D0B0
	bool GetTickableWhenPaused();//Offset:Discovery.exe+0x5668A90
	float GetSquaredHorizontalDistanceTo(class AActor* OtherActor);//Offset:Discovery.exe+0x566BFD0
	float GetSquaredDistanceTo(class AActor* OtherActor);//Offset:Discovery.exe+0x566C110
	TEnumAsByte<ENetRole> GetRemoteRole();//Offset:Discovery.exe+0x566D500
	int GetRayTracingGroupId();//Offset:Discovery.exe+0x566D430
	class UChildActorComponent* GetParentComponent();//Offset:Discovery.exe+0x56681E0
	class AActor* GetParentActor();//Offset:Discovery.exe+0x56681B0
	class AActor* GetOwner();//Offset:Discovery.exe+0x56684A0
	void GetOverlappingComponents(TArray<class UPrimitiveComponent*>* OverlappingComponents);//Offset:Discovery.exe+0x56687D0
	void GetOverlappingActors(class UClass* ClassFilter, TArray<class AActor*>* OverlappingActors);//Offset:Discovery.exe+0x5668880
	TEnumAsByte<ENetRole> GetLocalRole();//Offset:Discovery.exe+0x1BB7DC0
	float GetLifeSpan();//Offset:Discovery.exe+0x5668700
	struct FTransform GetLevelTransform();//Offset:Discovery.exe+0x5667FE0
	class ULevel* GetLevel();//Offset:Discovery.exe+0x5668070
	class AController* GetInstigatorController();//Offset:Discovery.exe+0x566D140
	class APawn* GetInstigator();//Offset:Discovery.exe+0x566D170
	struct FVector GetInputVectorAxisValue(const struct FKey& InputAxisKey);//Offset:Discovery.exe+0x566D1A0
	float GetInputAxisValue(const struct FName& InputAxisName);//Offset:Discovery.exe+0x566D390
	float GetInputAxisKeyValue(const struct FKey& InputAxisKey);//Offset:Discovery.exe+0x566D2A0
	float GetHorizontalDotProductTo(class AActor* OtherActor);//Offset:Discovery.exe+0x566BDF0
	float GetHorizontalDistanceTo(class AActor* OtherActor);//Offset:Discovery.exe+0x566C070
	float GetGameTimeSinceCreation();//Offset:Discovery.exe+0x56689C0
	float GetDotProductTo(class AActor* OtherActor);//Offset:Discovery.exe+0x566BE90
	float GetDistanceTo(class AActor* OtherActor);//Offset:Discovery.exe+0x566C1B0
	TArray<class UActorComponent*> GetComponentsByTag(class UClass* ComponentClass, const struct FName& Tag);//Offset:Discovery.exe+0x56677E0
	TArray<class UActorComponent*> GetComponentsByInterface(class UClass* Interface);//Offset:Discovery.exe+0x5667700
	class UActorComponent* GetComponentByClass(class UClass* ComponentClass);//Offset:Discovery.exe+0x56679E0
	struct FName GetAttachParentSocketName();//Offset:Discovery.exe+0x5667F60
	class AActor* GetAttachParentActor();//Offset:Discovery.exe+0x5667FB0
	void GetAttachedActors(bool bResetArray, bool bRecursivelyIncludeAttachedActors, TArray<class AActor*>* OutActors);//Offset:Discovery.exe+0x5667E00
	void GetAllChildActors(bool bIncludeDescendants, TArray<class AActor*>* ChildActors);//Offset:Discovery.exe+0x5668210
	struct FVector GetActorUpVector();//Offset:Discovery.exe+0x566CA40
	float GetActorTimeDilation();//Offset:Discovery.exe+0x5668D40
	float GetActorTickInterval();//Offset:Discovery.exe+0x5668560
	struct FVector GetActorScale3D();//Offset:Discovery.exe+0x566C250
	struct FVector GetActorRightVector();//Offset:Discovery.exe+0x566C980
	struct FVector GetActorRelativeScale3D();//Offset:Discovery.exe+0x5669ED0
	struct FVector GetActorForwardVector();//Offset:Discovery.exe+0x566CB00
	void GetActorEyesViewPoint(struct FVector* OutLocation, struct FRotator* OutRotation);//Offset:Discovery.exe+0x5667A80
	bool GetActorEnableCollision();//Offset:Discovery.exe+0x5669D60
	void GetActorBounds(bool bOnlyCollidingComponents, bool bIncludeFromChildActors, struct FVector* Origin, struct FVector* BoxExtent);//Offset:Discovery.exe+0x566C7E0
	void ForceNetUpdate();//Offset:Discovery.exe+0x5667CB0
	void FlushNetDormancy();//Offset:Discovery.exe+0x5668350
	void FinishAddComponent(class UActorComponent* Component, bool bManualAttachment, const struct FTransform& RelativeTransform);//Offset:Discovery.exe+0x5669720
	void EnableInput(class APlayerController* PlayerController);//Offset:Discovery.exe+0x4B6E770
	void DisableInput(class APlayerController* PlayerController);//Offset:Discovery.exe+0x1DB91F0
	void DetachRootComponentFromParent(bool bMaintainWorldPosition);//Offset:Discovery.exe+0x5668F40
	void AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);//Offset:Discovery.exe+0x5668C00
	void AddTickPrerequisiteActor(class AActor* PrerequisiteActor);//Offset:Discovery.exe+0x5668CA0
	class UActorComponent* AddComponentByClass(class UClass* Class, bool bManualAttachment, const struct FTransform& RelativeTransform, bool bDeferredFinish);//Offset:Discovery.exe+0x56698C0
	class UActorComponent* AddComponent(const struct FName& TemplateName, bool bManualAttachment, const struct FTransform& RelativeTransform, class UObject* ComponentTemplateContext, bool bDeferredFinish);//Offset:Discovery.exe+0x5669AC0
	bool ActorHasTag(const struct FName& Tag);//Offset:Discovery.exe+0x5668D70
};


// Class Engine.Pawn
// 0x0080 (0x0348 - 0x02C8)
class APawn : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x02C8(0x0008) MISSED OFFSET
	unsigned char                                      bUseControllerRotationPitch : 1;                          // 0x02D0(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUseControllerRotationYaw : 1;                            // 0x02D0(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUseControllerRotationRoll : 1;                           // 0x02D0(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bCanAffectNavigationGeneration : 1;                       // 0x02D0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData01 : 2;                                        // 0x02D0(0x0001)
	unsigned char                                      bIsLocalViewTarget : 1;                                   // 0x02D0(0x0001) (Transient)
	unsigned char                                      UnknownData02[0x3];                                       // 0x02D1(0x0003) MISSED OFFSET
	float                                              BaseEyeHeight;                                            // 0x02D4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EAutoReceiveInput>                     AutoPossessPlayer;                                        // 0x02D8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	enum class EAutoPossessAI                          AutoPossessAI;                                            // 0x02D9(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      RemoteViewPitch;                                          // 0x02DA(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x5];                                       // 0x02DB(0x0005) MISSED OFFSET
	class UClass*                                      AIControllerClass;                                        // 0x02E0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class APlayerState*                                PlayerState;                                              // 0x02E8(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x8];                                       // 0x02F0(0x0008) MISSED OFFSET
	class AController*                                 LastHitBy;                                                // 0x02F8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	class AController*                                 Controller;                                               // 0x0300(0x0008) (Net, ZeroConstructor, IsPlainOldData)
	class AController*                                 PreviousController;                                       // 0x0308(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x0310(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    ReceiveControllerChangedDelegate;                         // 0x0314(0x0010) (InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ReceiveRestartedDelegate;                                 // 0x0315(0x0010) (InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData06[0x2];                                       // 0x0316(0x0002) MISSED OFFSET
	struct FVector                                     ControlInputVector;                                       // 0x0318(0x0018) (ZeroConstructor, Transient, IsPlainOldData)
	struct FVector                                     LastControlInputVector;                                   // 0x0330(0x0018) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.Pawn"));
		return ptr;
	}


	void SpawnDefaultController();//Offset:Discovery.exe+0x56DEE30
	void SetCanAffectNavigationGeneration(bool bNewValue, bool bForceUpdate);//Offset:Discovery.exe+0x5815E30
	void ReceiveUnpossessed(class AController* OldController);//Offset:Discovery.exe+0x327F8B0
	void ReceiveRestarted();//Offset:Discovery.exe+0x327F8B0
	void ReceivePossessed(class AController* NewController);//Offset:Discovery.exe+0x327F8B0
	void ReceiveControllerChanged(class AController* OldController, class AController* NewController);//Offset:Discovery.exe+0x327F8B0
	void PawnMakeNoise(float Loudness, const struct FVector& NoiseLocation, bool bUseNoiseMakerLocation, class AActor* NoiseMaker);//Offset:Discovery.exe+0x5816120
	void OnRep_PlayerState();//Offset:Discovery.exe+0x5815F20
	void OnRep_Controller();//Offset:Discovery.exe+0x1F9DD30
	bool IsPlayerControlled();//Offset:Discovery.exe+0x5815D60
	bool IsPawnControlled();//Offset:Discovery.exe+0x5815FC0
	bool IsMoveInputIgnored();//Offset:Discovery.exe+0x5815840
	bool IsLocallyViewed();//Offset:Discovery.exe+0x58160C0
	bool IsLocallyControlled();//Offset:Discovery.exe+0x5815D90
	bool IsControlled();//Offset:Discovery.exe+0x5815FF0
	bool IsBotControlled();//Offset:Discovery.exe+0x5815D30
	struct FVector GetPendingMovementInputVector();//Offset:Discovery.exe+0x5815B10
	struct FVector GetNavAgentLocation();//Offset:Discovery.exe+0x5815DC0
	class UPawnMovementComponent* GetMovementComponent();//Offset:Discovery.exe+0x56E9D70
	class AActor* STATIC_GetMovementBaseActor(class APawn* Pawn);//Offset:Discovery.exe+0x5816020
	class APlayerController* GetLocalViewingPlayerController();//Offset:Discovery.exe+0x58160F0
	struct FVector GetLastMovementInputVector();//Offset:Discovery.exe+0x5815AB0
	struct FRotator GetControlRotation();//Offset:Discovery.exe+0x5815F40
	class AController* GetController();//Offset:Discovery.exe+0x5815FA0
	struct FRotator GetBaseAimRotation();//Offset:Discovery.exe+0x5815CD0
	void DetachFromControllerPendingDestroy();//Offset:Discovery.exe+0x5815CB0
	struct FVector ConsumeMovementInputVector();//Offset:Discovery.exe+0x5815A50
	void AddMovementInput(const struct FVector& WorldDirection, float ScaleValue, bool bForce);//Offset:Discovery.exe+0x5815B70
	void AddControllerYawInput(float Val);//Offset:Discovery.exe+0x5815910
	void AddControllerRollInput(float Val);//Offset:Discovery.exe+0x5815870
	void AddControllerPitchInput(float Val);//Offset:Discovery.exe+0x58159B0
};


// Class Engine.Character
// 0x0308 (0x0650 - 0x0348)
class ACharacter : public APawn
{
public:
	class USkeletalMeshComponent*                      Mesh;                                                     // 0x0348(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UCharacterMovementComponent*                 CharacterMovement;                                        // 0x0350(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UCapsuleComponent*                           CapsuleComponent;                                         // 0x0358(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	struct FBasedMovementInfo                          BasedMovement;                                            // 0x0360(0x0048)
	struct FBasedMovementInfo                          ReplicatedBasedMovement;                                  // 0x03A8(0x0048) (Net)
	float                                              AnimRootMotionTranslationScale;                           // 0x03F0(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x03F4(0x0004) MISSED OFFSET
	struct FVector                                     BaseTranslationOffset;                                    // 0x03F8(0x0018) (ZeroConstructor, IsPlainOldData)
	struct FQuat                                       BaseRotationOffset;                                       // 0x0410(0x0020) (IsPlainOldData)
	float                                              ReplicatedServerLastTransformUpdateTimeStamp;             // 0x0430(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	float                                              ReplayLastTransformUpdateTimeStamp;                       // 0x0434(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      ReplicatedMovementMode;                                   // 0x0438(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	bool                                               bInBaseReplication;                                       // 0x0439(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x043A(0x0002) MISSED OFFSET
	float                                              CrouchedEyeHeight;                                        // 0x043C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bIsCrouched : 1;                                          // 0x0440(0x0001) (BlueprintVisible, BlueprintReadOnly, Net)
	unsigned char                                      bProxyIsJumpForceApplied : 1;                             // 0x0440(0x0001) (Net, Transient)
	unsigned char                                      bPressedJump : 1;                                         // 0x0440(0x0001) (BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bClientUpdating : 1;                                      // 0x0440(0x0001) (Transient)
	unsigned char                                      bClientWasFalling : 1;                                    // 0x0440(0x0001) (Transient)
	unsigned char                                      bClientResimulateRootMotion : 1;                          // 0x0440(0x0001) (Transient)
	unsigned char                                      bClientResimulateRootMotionSources : 1;                   // 0x0440(0x0001) (Transient)
	unsigned char                                      bSimGravityDisabled : 1;                                  // 0x0440(0x0001)
	unsigned char                                      bClientCheckEncroachmentOnNetUpdate : 1;                  // 0x0441(0x0001) (Transient)
	unsigned char                                      bServerMoveIgnoreRootMotion : 1;                          // 0x0441(0x0001) (Transient)
	unsigned char                                      bWasJumping : 1;                                          // 0x0441(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, Transient, EditConst)
	unsigned char                                      UnknownData02[0x2];                                       // 0x0442(0x0002) MISSED OFFSET
	float                                              JumpKeyHoldTime;                                          // 0x0444(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	float                                              JumpForceTimeRemaining;                                   // 0x0448(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	float                                              ProxyJumpForceStartedTime;                                // 0x044C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	float                                              JumpMaxHoldTime;                                          // 0x0450(0x0004) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	int                                                JumpMaxCount;                                             // 0x0454(0x0004) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	int                                                JumpCurrentCount;                                         // 0x0458(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	int                                                JumpCurrentCountPreJump;                                  // 0x045C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0460(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnReachedJumpApex;                                        // 0x0468(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData04[0x10];                                      // 0x0478(0x0010) MISSED OFFSET
	struct FScriptMulticastDelegate                    MovementModeChangedDelegate;                              // 0x0488(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnCharacterMovementUpdated;                               // 0x0498(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FRootMotionSourceGroup                      SavedRootMotion;                                          // 0x04A8(0x0048) (Transient)
	struct FRootMotionMovementParams                   ClientRootMotionParams;                                   // 0x04F0(0x0070) (Transient)
	TArray<struct FSimulatedRootMotionReplicatedMove>  RootMotionRepMoves;                                       // 0x0560(0x0010) (ZeroConstructor, Transient)
	struct FRepRootMotionMontage                       RepRootMotion;                                            // 0x0570(0x00D8) (Net)
	unsigned char                                      UnknownData05[0x8];                                       // 0x0648(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.Character"));
		return ptr;
	}


	void UnCrouch(bool bClientSimulation);//Offset:Discovery.exe+0x56C59E0
	void StopJumping();//Offset:Discovery.exe+0x56C60E0
	void StopAnimMontage(class UAnimMontage* AnimMontage);//Offset:Discovery.exe+0x56C5E70
	void ServerMovePacked(const struct FCharacterServerMovePackedBits& PackedBits);//Offset:Discovery.exe+0x56C9190
	void ServerMoveOld(float OldTimeStamp, const struct FVector_NetQuantize10& OldAccel, unsigned char OldMoveFlags);//Offset:Discovery.exe+0x56C7540
	void ServerMoveNoBase(float Timestamp, const struct FVector_NetQuantize10& InAccel, const struct FVector_NetQuantize100& ClientLoc, unsigned char CompressedMoveFlags, unsigned char ClientRoll, uint32_t View, unsigned char ClientMovementMode);//Offset:Discovery.exe+0x56C88B0
	void ServerMoveDualNoBase(float TimeStamp0, const struct FVector_NetQuantize10& InAccel0, unsigned char PendingFlags, uint32_t View0, float Timestamp, const struct FVector_NetQuantize10& InAccel, const struct FVector_NetQuantize100& ClientLoc, unsigned char NewFlags, unsigned char ClientRoll, uint32_t View, unsigned char ClientMovementMode);//Offset:Discovery.exe+0x56C7D00
	void ServerMoveDualHybridRootMotion(float TimeStamp0, const struct FVector_NetQuantize10& InAccel0, unsigned char PendingFlags, uint32_t View0, float Timestamp, const struct FVector_NetQuantize10& InAccel, const struct FVector_NetQuantize100& ClientLoc, unsigned char NewFlags, unsigned char ClientRoll, uint32_t View, class UPrimitiveComponent* ClientMovementBase, const struct FName& ClientBaseBoneName, unsigned char ClientMovementMode);//Offset:Discovery.exe+0x56C76C0
	void ServerMoveDual(float TimeStamp0, const struct FVector_NetQuantize10& InAccel0, unsigned char PendingFlags, uint32_t View0, float Timestamp, const struct FVector_NetQuantize10& InAccel, const struct FVector_NetQuantize100& ClientLoc, unsigned char NewFlags, unsigned char ClientRoll, uint32_t View, class UPrimitiveComponent* ClientMovementBase, const struct FName& ClientBaseBoneName, unsigned char ClientMovementMode);//Offset:Discovery.exe+0x56C8270
	void ServerMove(float Timestamp, const struct FVector_NetQuantize10& InAccel, const struct FVector_NetQuantize100& ClientLoc, unsigned char CompressedMoveFlags, unsigned char ClientRoll, uint32_t View, class UPrimitiveComponent* ClientMovementBase, const struct FName& ClientBaseBoneName, unsigned char ClientMovementMode);//Offset:Discovery.exe+0x56C8C30
	void RootMotionDebugClientPrintOnScreen(const struct FString& InString);//Offset:Discovery.exe+0x56C58A0
	float PlayAnimMontage(class UAnimMontage* AnimMontage, float InPlayRate, const struct FName& StartSectionName);//Offset:Discovery.exe+0x56C5F10
	void OnWalkingOffLedge(const struct FVector& PreviousFloorImpactNormal, const struct FVector& PreviousFloorContactNormal, const struct FVector& PreviousLocation, float TimeDelta);//Offset:Discovery.exe+0x56C5B20
	void OnRep_RootMotion();//Offset:Discovery.exe+0x56C5880
	void OnRep_ReplicatedBasedMovement();//Offset:Discovery.exe+0x56C6270
	void OnRep_ReplayLastTransformUpdateTimeStamp();//Offset:Discovery.exe+0x56C6250
	void OnRep_IsCrouched();//Offset:Discovery.exe+0x56C6120
	void OnLaunched(const struct FVector& LaunchVelocity, bool bXYOverride, bool bZOverride);//Offset:Discovery.exe+0x327F8B0
	void OnLanded(const struct FHitResult& Hit);//Offset:Discovery.exe+0x327F8B0
	void OnJumped();//Offset:Discovery.exe+0x56C5CD0
	void LaunchCharacter(const struct FVector& LaunchVelocity, bool bXYOverride, bool bZOverride);//Offset:Discovery.exe+0x56C5CF0
	void K2_UpdateCustomMovement(float DeltaTime);//Offset:Discovery.exe+0x327F8B0
	void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);//Offset:Discovery.exe+0x327F8B0
	void K2_OnMovementModeChanged(TEnumAsByte<EMovementMode> PrevMovementMode, TEnumAsByte<EMovementMode> NewMovementMode, unsigned char PrevCustomMode, unsigned char NewCustomMode);//Offset:Discovery.exe+0x327F8B0
	void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);//Offset:Discovery.exe+0x327F8B0
	void Jump();//Offset:Discovery.exe+0x56C6100
	bool IsPlayingRootMotion();//Offset:Discovery.exe+0x56C5850
	bool IsPlayingNetworkedRootMotionMontage();//Offset:Discovery.exe+0x56C57F0
	bool IsJumpProvidingForce();//Offset:Discovery.exe+0x56C6050
	bool HasAnyRootMotion();//Offset:Discovery.exe+0x56C5820
	class UAnimMontage* GetCurrentMontage();//Offset:Discovery.exe+0x56C5E40
	struct FVector GetBaseTranslationOffset();//Offset:Discovery.exe+0x56C6200
	struct FRotator GetBaseRotationOffsetRotator();//Offset:Discovery.exe+0x56C6140
	float GetAnimRootMotionTranslationScale();//Offset:Discovery.exe+0x56C57C0
	void Crouch(bool bClientSimulation);//Offset:Discovery.exe+0x56C5A80
	void ClientVeryShortAdjustPosition(float Timestamp, const struct FVector& NewLoc, class UPrimitiveComponent* NewBase, const struct FName& NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, unsigned char ServerMovementMode);//Offset:Discovery.exe+0x56C6EB0
	void ClientMoveResponsePacked(const struct FCharacterMoveResponsePackedBits& PackedBits);//Offset:Discovery.exe+0x56C9090
	void ClientCheatWalk();//Offset:Discovery.exe+0x56C5990
	void ClientCheatGhost();//Offset:Discovery.exe+0x56C5950
	void ClientCheatFly();//Offset:Discovery.exe+0x56C5970
	void ClientAdjustRootMotionSourcePosition(float Timestamp, const struct FRootMotionSourceGroup& ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, const struct FVector& ServerLoc, const struct FVector_NetQuantizeNormal& ServerRotation, float ServerVelZ, class UPrimitiveComponent* ServerBase, const struct FName& ServerBoneName, bool bHasBase, bool bBaseRelativePosition, unsigned char ServerMovementMode);//Offset:Discovery.exe+0x56C63A0
	void ClientAdjustRootMotionPosition(float Timestamp, float ServerMontageTrackPosition, const struct FVector& ServerLoc, const struct FVector_NetQuantizeNormal& ServerRotation, float ServerVelZ, class UPrimitiveComponent* ServerBase, const struct FName& ServerBoneName, bool bHasBase, bool bBaseRelativePosition, unsigned char ServerMovementMode);//Offset:Discovery.exe+0x56C6AA0
	void ClientAdjustPosition(float Timestamp, const struct FVector& NewLoc, const struct FVector& NewVel, class UPrimitiveComponent* NewBase, const struct FName& NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, unsigned char ServerMovementMode);//Offset:Discovery.exe+0x56C7150
	void ClientAckGoodMove(float Timestamp);//Offset:Discovery.exe+0x56C74A0
	bool CanJumpInternal();//Offset:Discovery.exe+0x56C6080
	bool CanJump();//Offset:Discovery.exe+0x56C60B0
	bool CanCrouch();//Offset:Discovery.exe+0x56C59B0
	void CacheInitialMeshOffset(const struct FVector& MeshRelativeLocation, const struct FRotator& MeshRelativeRotation);//Offset:Discovery.exe+0x56C6290
};


// Class Engine.ActorComponent
// 0x0090 (0x00B8 - 0x0028)
class UActorComponent : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	struct FActorComponentTickFunction                 PrimaryComponentTick;                                     // 0x0030(0x0030) (Edit, DisableEditOnInstance)
	TArray<struct FName>                               ComponentTags;                                            // 0x0060(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<class UAssetUserData*>                      AssetUserData;                                            // 0x0070(0x0010) (Edit, ExportObject, ZeroConstructor)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0080(0x0004) MISSED OFFSET
	int                                                UCSSerializationIndex;                                    // 0x0084(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0088(0x0004) MISSED OFFSET
	unsigned char                                      UnknownData03 : 6;                                        // 0x008C(0x0001)
	unsigned char                                      bNetAddressable : 1;                                      // 0x008C(0x0001)
	unsigned char                                      bReplicates : 1;                                          // 0x008C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, Net, DisableEditOnInstance)
	unsigned char                                      bUseRepKeyForReplication : 1;                             // 0x008D(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	unsigned char                                      UnknownData04 : 7;                                        // 0x008D(0x0001)
	unsigned char                                      UnknownData05 : 4;                                        // 0x008E(0x0001)
	unsigned char                                      bAutoActivate : 1;                                        // 0x008E(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bIsActive : 1;                                            // 0x008E(0x0001) (Net, Transient)
	unsigned char                                      bEditableWhenInherited : 1;                               // 0x008E(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData06 : 1;                                        // 0x008E(0x0001)
	unsigned char                                      bCanEverAffectNavigation : 1;                             // 0x008F(0x0001) (Edit, Config)
	unsigned char                                      UnknownData07 : 1;                                        // 0x008F(0x0001)
	unsigned char                                      bIsEditorOnly : 1;                                        // 0x008F(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData08[0x1];                                       // 0x0090(0x0001) MISSED OFFSET
	enum class EComponentCreationMethod                CreationMethod;                                           // 0x0091(0x0001) (ZeroConstructor, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnComponentActivated;                                     // 0x0092(0x0010) (InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnComponentDeactivated;                                   // 0x0093(0x0010) (InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData09[0x4];                                       // 0x0094(0x0004) MISSED OFFSET
	TArray<struct FSimpleMemberReference>              UCSModifiedProperties;                                    // 0x0098(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData10[0x10];                                      // 0x00A8(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ActorComponent"));
		return ptr;
	}


	void ToggleActive();//Offset:Discovery.exe+0x11B97D0
	void SetUsesReplicationKeyForReplication(bool bNewUserRepKeyForReplication);//Offset:Discovery.exe+0x5673CC0
	void SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup);//Offset:Discovery.exe+0x56739C0
	void SetTickableWhenPaused(bool bTickableWhenPaused);//Offset:Discovery.exe+0x5673E20
	void SetReplicationKeyDirty();//Offset:Discovery.exe+0x5673D60
	void SetIsReplicated(bool ShouldReplicate);//Offset:Discovery.exe+0x5673D80
	void SetComponentTickIntervalAndCooldown(float TickInterval);//Offset:Discovery.exe+0x5673B20
	void SetComponentTickInterval(float TickInterval);//Offset:Discovery.exe+0x2F31CF0
	void SetComponentTickEnabled(bool bEnabled);//Offset:Discovery.exe+0x5673BF0
	void SetAutoActivate(bool bNewAutoActivate);//Offset:Discovery.exe+0x566D520
	void SetActive(bool bNewActive, bool bReset);//Offset:Discovery.exe+0x5673EF0
	void RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);//Offset:Discovery.exe+0x5673740
	void RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor);//Offset:Discovery.exe+0x56737E0
	void ReceiveTick(float DeltaSeconds);//Offset:Discovery.exe+0x327F8B0
	void ReceiveEndPlay(TEnumAsByte<EEndPlayReason> EndPlayReason);//Offset:Discovery.exe+0x327F8B0
	void ReceiveBeginPlay();//Offset:Discovery.exe+0x327F8B0
	void OnRep_IsActive();//Offset:Discovery.exe+0x191D9E0
	void K2_DestroyComponent(class UObject* Object);//Offset:Discovery.exe+0x5673A50
	bool IsComponentTickEnabled();//Offset:Discovery.exe+0x5673BC0
	bool IsBeingDestroyed();//Offset:Discovery.exe+0x56740A0
	bool IsActive();//Offset:Discovery.exe+0x5673EC0
	bool GetUsesReplicationKeyForReplication();//Offset:Discovery.exe+0x5673C90
	class AActor* GetOwner();//Offset:Discovery.exe+0x5674080
	float GetComponentTickInterval();//Offset:Discovery.exe+0x5673AF0
	void Deactivate();//Offset:Discovery.exe+0x1DB5730
	bool ComponentHasTag(const struct FName& Tag);//Offset:Discovery.exe+0x5673FE0
	void AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);//Offset:Discovery.exe+0x5673880
	void AddTickPrerequisiteActor(class AActor* PrerequisiteActor);//Offset:Discovery.exe+0x5673920
	void Activate(bool bReset);//Offset:Discovery.exe+0x4B7B580
};


// Class Engine.MovementComponent
// 0x0068 (0x0120 - 0x00B8)
class UMovementComponent : public UActorComponent
{
public:
	class USceneComponent*                             UpdatedComponent;                                         // 0x00B8(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData)
	class UPrimitiveComponent*                         UpdatedPrimitive;                                         // 0x00C0(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x00C8(0x0008) MISSED OFFSET
	struct FVector                                     Velocity;                                                 // 0x00D0(0x0018) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     PlaneConstraintNormal;                                    // 0x00E8(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector                                     PlaneConstraintOrigin;                                    // 0x0100(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUpdateOnlyIfRendered : 1;                                // 0x0118(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bAutoUpdateTickRegistration : 1;                          // 0x0118(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bTickBeforeOwner : 1;                                     // 0x0118(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bAutoRegisterUpdatedComponent : 1;                        // 0x0118(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bConstrainToPlane : 1;                                    // 0x0118(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bSnapToPlaneAtStart : 1;                                  // 0x0118(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bAutoRegisterPhysicsVolumeUpdates : 1;                    // 0x0118(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bComponentShouldUpdatePhysicsVolume : 1;                  // 0x0118(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData01[0x2];                                       // 0x0119(0x0002) MISSED OFFSET
	enum class EPlaneConstraintAxisSetting             PlaneConstraintAxisSetting;                               // 0x011B(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x011C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MovementComponent"));
		return ptr;
	}


	void StopMovementImmediately();//Offset:Discovery.exe+0x57FDE70
	void SnapUpdatedComponentToPlane();//Offset:Discovery.exe+0x57FD340
	void SetUpdatedComponent(class USceneComponent* NewUpdatedComponent);//Offset:Discovery.exe+0x57FDD00
	void SetPlaneConstraintOrigin(const struct FVector& PlaneOrigin);//Offset:Discovery.exe+0x57FD6C0
	void SetPlaneConstraintNormal(const struct FVector& PlaneNormal);//Offset:Discovery.exe+0x57FD880
	void SetPlaneConstraintFromVectors(const struct FVector& Forward, const struct FVector& Up);//Offset:Discovery.exe+0x57FD770
	void SetPlaneConstraintEnabled(bool bEnabled);//Offset:Discovery.exe+0x57FD620
	void SetPlaneConstraintAxisSetting(enum class EPlaneConstraintAxisSetting NewAxisSetting);//Offset:Discovery.exe+0x57FD960
	void PhysicsVolumeChanged(class APhysicsVolume* NewVolume);//Offset:Discovery.exe+0x57FDDA0
	bool K2_MoveUpdatedComponent(const struct FVector& Delta, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* OutHit);//Offset:Discovery.exe+0x57FDA00
	bool IsExceedingMaxSpeed(float MaxSpeed);//Offset:Discovery.exe+0x57FDE90
	struct FVector GetPlaneConstraintOrigin();//Offset:Discovery.exe+0x57FD5A0
	struct FVector GetPlaneConstraintNormal();//Offset:Discovery.exe+0x57FD5E0
	enum class EPlaneConstraintAxisSetting GetPlaneConstraintAxisSetting();//Offset:Discovery.exe+0x57FD930
	class APhysicsVolume* GetPhysicsVolume();//Offset:Discovery.exe+0x57FDE40
	float GetMaxSpeed();//Offset:Discovery.exe+0x57FDF30
	float GetGravityZ();//Offset:Discovery.exe+0x57FDF60
	struct FVector ConstrainNormalToPlane(const struct FVector& Normal);//Offset:Discovery.exe+0x57FD360
	struct FVector ConstrainLocationToPlane(const struct FVector& Location);//Offset:Discovery.exe+0x57FD420
	struct FVector ConstrainDirectionToPlane(const struct FVector& Direction);//Offset:Discovery.exe+0x57FD4E0
};


// Class Engine.NavMovementComponent
// 0x0040 (0x0160 - 0x0120)
class UNavMovementComponent : public UMovementComponent
{
public:
	struct FNavAgentProperties                         NavAgentProps;                                            // 0x0120(0x0030) (Edit, BlueprintVisible)
	float                                              FixedPathBrakingDistance;                                 // 0x0150(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUpdateNavAgentWithOwnersCollision : 1;                   // 0x0154(0x0001) (Edit)
	unsigned char                                      bUseAccelerationForPaths : 1;                             // 0x0154(0x0001) (Edit, Config, GlobalConfig)
	unsigned char                                      bUseFixedBrakingDistanceForPaths : 1;                     // 0x0154(0x0001) (Edit)
	struct FMovementProperties                         MovementState;                                            // 0x0155(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0156(0x0002) MISSED OFFSET
	class UObject*                                     PathFollowingComp;                                        // 0x0158(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.NavMovementComponent"));
		return ptr;
	}


	void StopMovementKeepPathing();//Offset:Discovery.exe+0x58017B0
	void StopActiveMovement();//Offset:Discovery.exe+0x5801820
	bool IsSwimming();//Offset:Discovery.exe+0x5801720
	bool IsMovingOnGround();//Offset:Discovery.exe+0x56CE9A0
	bool IsFlying();//Offset:Discovery.exe+0x58016F0
	bool IsFalling();//Offset:Discovery.exe+0x5801750
	bool IsCrouching();//Offset:Discovery.exe+0x5801780
};


// Class Engine.PawnMovementComponent
// 0x0008 (0x0168 - 0x0160)
class UPawnMovementComponent : public UNavMovementComponent
{
public:
	class APawn*                                       PawnOwner;                                                // 0x0160(0x0008) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.PawnMovementComponent"));
		return ptr;
	}


	bool IsMoveInputIgnored();//Offset:Discovery.exe+0x5817650
	struct FVector GetPendingInputVector();//Offset:Discovery.exe+0x5817740
	class APawn* GetPawnOwner();//Offset:Discovery.exe+0x5817620
	struct FVector GetLastInputVector();//Offset:Discovery.exe+0x58176E0
	struct FVector ConsumeInputVector();//Offset:Discovery.exe+0x5817680
	void AddInputVector(const struct FVector& WorldVector, bool bForce);//Offset:Discovery.exe+0x58177A0
};


// Class Engine.CharacterMovementComponent
// 0x0D98 (0x0F00 - 0x0168)
class UCharacterMovementComponent : public UPawnMovementComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0168(0x0010) MISSED OFFSET
	class ACharacter*                                  CharacterOwner;                                           // 0x0178(0x0008) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)
	float                                              GravityScale;                                             // 0x0180(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxStepHeight;                                            // 0x0184(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              JumpZVelocity;                                            // 0x0188(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              JumpOffJumpZFactor;                                       // 0x018C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1C];                                      // 0x0190(0x001C) MISSED OFFSET
	float                                              WalkableFloorAngle;                                       // 0x01AC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              WalkableFloorZ;                                           // 0x01B0(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	TEnumAsByte<EMovementMode>                         MovementMode;                                             // 0x01B4(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      CustomMovementMode;                                       // 0x01B5(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	enum class ENetworkSmoothingMode                   NetworkSmoothingMode;                                     // 0x01B6(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x1];                                       // 0x01B7(0x0001) MISSED OFFSET
	float                                              GroundFriction;                                           // 0x01B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3C];                                      // 0x01BC(0x003C) MISSED OFFSET
	float                                              MaxWalkSpeed;                                             // 0x01F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxWalkSpeedCrouched;                                     // 0x01FC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxSwimSpeed;                                             // 0x0200(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxFlySpeed;                                              // 0x0204(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxCustomMovementSpeed;                                   // 0x0208(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxAcceleration;                                          // 0x020C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinAnalogWalkSpeed;                                       // 0x0210(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BrakingFrictionFactor;                                    // 0x0214(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BrakingFriction;                                          // 0x0218(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BrakingSubStepTime;                                       // 0x021C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BrakingDecelerationWalking;                               // 0x0220(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BrakingDecelerationFalling;                               // 0x0224(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BrakingDecelerationSwimming;                              // 0x0228(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BrakingDecelerationFlying;                                // 0x022C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AirControl;                                               // 0x0230(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AirControlBoostMultiplier;                                // 0x0234(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AirControlBoostVelocityThreshold;                         // 0x0238(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FallingLateralFriction;                                   // 0x023C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CrouchedHalfHeight;                                       // 0x0240(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Buoyancy;                                                 // 0x0244(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PerchRadiusThreshold;                                     // 0x0248(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PerchAdditionalHeight;                                    // 0x024C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FRotator                                    RotationRate;                                             // 0x0250(0x0018) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUseSeparateBrakingFriction : 1;                          // 0x0268(0x0001) (Edit, BlueprintVisible, DisableEditOnInstance)
	unsigned char                                      bApplyGravityWhileJumping : 1;                            // 0x0268(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUseControllerDesiredRotation : 1;                        // 0x0268(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bOrientRotationToMovement : 1;                            // 0x0268(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bSweepWhileNavWalking : 1;                                // 0x0268(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData04 : 1;                                        // 0x0268(0x0001)
	unsigned char                                      bMovementInProgress : 1;                                  // 0x0268(0x0001)
	unsigned char                                      bEnableScopedMovementUpdates : 1;                         // 0x0268(0x0001) (Edit)
	unsigned char                                      bEnableServerDualMoveScopedMovementUpdates : 1;           // 0x0269(0x0001) (Edit)
	unsigned char                                      bForceMaxAccel : 1;                                       // 0x0269(0x0001)
	unsigned char                                      bRunPhysicsWithNoController : 1;                          // 0x0269(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bForceNextFloorCheck : 1;                                 // 0x0269(0x0001) (Edit, BlueprintVisible, DisableEditOnTemplate, EditConst)
	unsigned char                                      bShrinkProxyCapsule : 1;                                  // 0x0269(0x0001)
	unsigned char                                      bCanWalkOffLedges : 1;                                    // 0x0269(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bCanWalkOffLedgesWhenCrouching : 1;                       // 0x0269(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData05 : 1;                                        // 0x0269(0x0001)
	unsigned char                                      UnknownData06 : 1;                                        // 0x026A(0x0001)
	unsigned char                                      bNetworkSkipProxyPredictionOnNetUpdate : 1;               // 0x026A(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      bNetworkAlwaysReplicateTransformUpdateTimestamp : 1;      // 0x026A(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      bDeferUpdateMoveComponent : 1;                            // 0x026A(0x0001)
	unsigned char                                      bEnablePhysicsInteraction : 1;                            // 0x026A(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bTouchForceScaledToMass : 1;                              // 0x026A(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bPushForceScaledToMass : 1;                               // 0x026A(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bPushForceUsingZOffset : 1;                               // 0x026A(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bScalePushForceToVelocity : 1;                            // 0x026B(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData07[0x4];                                       // 0x026C(0x0004) MISSED OFFSET
	class USceneComponent*                             DeferredUpdatedMoveComponent;                             // 0x0270(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	float                                              MaxOutOfWaterStepHeight;                                  // 0x0278(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              OutofWaterZ;                                              // 0x027C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Mass;                                                     // 0x0280(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              StandingDownwardForceScale;                               // 0x0284(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              InitialPushForceFactor;                                   // 0x0288(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PushForceFactor;                                          // 0x028C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PushForcePointZOffsetFactor;                              // 0x0290(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TouchForceFactor;                                         // 0x0294(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinTouchForce;                                            // 0x0298(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxTouchForce;                                            // 0x029C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              RepulsionForce;                                           // 0x02A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData08[0x4];                                       // 0x02A4(0x0004) MISSED OFFSET
	struct FVector                                     Acceleration;                                             // 0x02A8(0x0018) (ZeroConstructor, IsPlainOldData)
	struct FQuat                                       LastUpdateRotation;                                       // 0x02C0(0x0020) (IsPlainOldData)
	struct FVector                                     LastUpdateLocation;                                       // 0x02E0(0x0018) (ZeroConstructor, IsPlainOldData)
	struct FVector                                     LastUpdateVelocity;                                       // 0x02F8(0x0018) (ZeroConstructor, IsPlainOldData)
	float                                              ServerLastTransformUpdateTimeStamp;                       // 0x0310(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              ServerLastClientGoodMoveAckTime;                          // 0x0314(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              ServerLastClientAdjustmentTime;                           // 0x0318(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData09[0x4];                                       // 0x031C(0x0004) MISSED OFFSET
	struct FVector                                     PendingImpulseToApply;                                    // 0x0320(0x0018) (ZeroConstructor, IsPlainOldData)
	struct FVector                                     PendingForceToApply;                                      // 0x0338(0x0018) (ZeroConstructor, IsPlainOldData)
	float                                              AnalogInputModifier;                                      // 0x0350(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData10[0xC];                                       // 0x0354(0x000C) MISSED OFFSET
	float                                              MaxSimulationTimeStep;                                    // 0x0360(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                MaxSimulationIterations;                                  // 0x0364(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                MaxJumpApexAttemptsPerSimulation;                         // 0x0368(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxDepenetrationWithGeometry;                             // 0x036C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxDepenetrationWithGeometryAsProxy;                      // 0x0370(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxDepenetrationWithPawn;                                 // 0x0374(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxDepenetrationWithPawnAsProxy;                          // 0x0378(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              NetworkSimulatedSmoothLocationTime;                       // 0x037C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NetworkSimulatedSmoothRotationTime;                       // 0x0380(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ListenServerNetworkSimulatedSmoothLocationTime;           // 0x0384(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ListenServerNetworkSimulatedSmoothRotationTime;           // 0x0388(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NetProxyShrinkRadius;                                     // 0x038C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NetProxyShrinkHalfHeight;                                 // 0x0390(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NetworkMaxSmoothUpdateDistance;                           // 0x0394(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NetworkNoSmoothUpdateDistance;                            // 0x0398(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NetworkMinTimeBetweenClientAckGoodMoves;                  // 0x039C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NetworkMinTimeBetweenClientAdjustments;                   // 0x03A0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NetworkMinTimeBetweenClientAdjustmentsLargeCorrection;    // 0x03A4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NetworkLargeClientCorrectionDistance;                     // 0x03A8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LedgeCheckThreshold;                                      // 0x03AC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              JumpOutOfWaterPitch;                                      // 0x03B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData11[0x4];                                       // 0x03B4(0x0004) MISSED OFFSET
	struct FFindFloorResult                            CurrentFloor;                                             // 0x03B8(0x00F8) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst)
	TEnumAsByte<EMovementMode>                         DefaultLandMovementMode;                                  // 0x04B0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EMovementMode>                         DefaultWaterMovementMode;                                 // 0x04B1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EMovementMode>                         GroundMovementMode;                                       // 0x04B2(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData12[0x9];                                       // 0x04B3(0x0009) MISSED OFFSET
	unsigned char                                      bMaintainHorizontalGroundVelocity : 1;                    // 0x04BC(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bImpartBaseVelocityX : 1;                                 // 0x04BC(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bImpartBaseVelocityY : 1;                                 // 0x04BC(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bImpartBaseVelocityZ : 1;                                 // 0x04BC(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bImpartBaseAngularVelocity : 1;                           // 0x04BC(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bJustTeleported : 1;                                      // 0x04BC(0x0001) (Edit, BlueprintVisible, DisableEditOnTemplate, Transient, EditConst)
	unsigned char                                      bNetworkUpdateReceived : 1;                               // 0x04BC(0x0001) (Transient)
	unsigned char                                      bNetworkMovementModeChanged : 1;                          // 0x04BC(0x0001) (Transient)
	unsigned char                                      bIgnoreClientMovementErrorChecksAndCorrection : 1;        // 0x04BD(0x0001) (Edit, BlueprintVisible, Transient)
	unsigned char                                      bServerAcceptClientAuthoritativePosition : 1;             // 0x04BD(0x0001) (Edit, BlueprintVisible, Transient)
	unsigned char                                      bNotifyApex : 1;                                          // 0x04BD(0x0001) (Edit, BlueprintVisible, EditConst)
	unsigned char                                      bCheatFlying : 1;                                         // 0x04BD(0x0001)
	unsigned char                                      bWantsToCrouch : 1;                                       // 0x04BD(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst)
	unsigned char                                      bCrouchMaintainsBaseLocation : 1;                         // 0x04BD(0x0001) (Edit, BlueprintVisible, DisableEditOnTemplate, EditConst)
	unsigned char                                      bIgnoreBaseRotation : 1;                                  // 0x04BD(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bFastAttachedMove : 1;                                    // 0x04BD(0x0001)
	unsigned char                                      bAlwaysCheckFloor : 1;                                    // 0x04BE(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUseFlatBaseForFloorChecks : 1;                           // 0x04BE(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bPerformingJumpOff : 1;                                   // 0x04BE(0x0001)
	unsigned char                                      bWantsToLeaveNavWalking : 1;                              // 0x04BE(0x0001)
	unsigned char                                      bUseRVOAvoidance : 1;                                     // 0x04BE(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bRequestedMoveUseAcceleration : 1;                        // 0x04BE(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData13 : 1;                                        // 0x04BE(0x0001)
	unsigned char                                      bWasSimulatingRootMotion : 1;                             // 0x04BE(0x0001) (Transient)
	unsigned char                                      bAllowPhysicsRotationDuringAnimRootMotion : 1;            // 0x04BF(0x0001) (Edit, BlueprintVisible)
	float                                              FormerBaseVelocityDecayHalfLife;                          // 0x04C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bHasRequestedVelocity : 1;                                // 0x04C4(0x0001) (Transient)
	unsigned char                                      bRequestedMoveWithMaxSpeed : 1;                           // 0x04C4(0x0001) (Transient)
	unsigned char                                      bWasAvoidanceUpdated : 1;                                 // 0x04C4(0x0001) (Transient)
	unsigned char                                      UnknownData14 : 2;                                        // 0x04C4(0x0001)
	unsigned char                                      bProjectNavMeshWalking : 1;                               // 0x04C4(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bProjectNavMeshOnBothWorldChannels : 1;                   // 0x04C4(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData15[0x1F];                                      // 0x04C5(0x001F) MISSED OFFSET
	float                                              AvoidanceConsiderationRadius;                             // 0x04E4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector                                     RequestedVelocity;                                        // 0x04E8(0x0018) (ZeroConstructor, Transient, IsPlainOldData)
	int                                                AvoidanceUID;                                             // 0x0500(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	struct FNavAvoidanceMask                           AvoidanceGroup;                                           // 0x0504(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FNavAvoidanceMask                           GroupsToAvoid;                                            // 0x0508(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FNavAvoidanceMask                           GroupsToIgnore;                                           // 0x050C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly)
	float                                              AvoidanceWeight;                                          // 0x0510(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData16[0x4];                                       // 0x0514(0x0004) MISSED OFFSET
	struct FVector                                     PendingLaunchVelocity;                                    // 0x0518(0x0018) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData17[0x138];                                     // 0x0530(0x0138) MISSED OFFSET
	float                                              NavMeshProjectionInterval;                                // 0x0668(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              NavMeshProjectionTimer;                                   // 0x066C(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              NavMeshProjectionInterpSpeed;                             // 0x0670(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              NavMeshProjectionHeightScaleUp;                           // 0x0674(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              NavMeshProjectionHeightScaleDown;                         // 0x0678(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              NavWalkingFloorDistTolerance;                             // 0x067C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData18[0x30];                                      // 0x0680(0x0030) MISSED OFFSET
	struct FCharacterMovementComponentPostPhysicsTickFunction PostPhysicsTickFunction;                                  // 0x06B0(0x0030)
	unsigned char                                      UnknownData19[0x18];                                      // 0x06E0(0x0018) MISSED OFFSET
	float                                              MinTimeBetweenTimeStampResets;                            // 0x06F8(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData20[0x564];                                     // 0x06FC(0x0564) MISSED OFFSET
	struct FRootMotionSourceGroup                      CurrentRootMotion;                                        // 0x0C60(0x0048) (Transient)
	struct FRootMotionSourceGroup                      ServerCorrectionRootMotion;                               // 0x0CA8(0x0048) (Transient)
	unsigned char                                      UnknownData21[0x160];                                     // 0x0CF0(0x0160) MISSED OFFSET
	struct FRootMotionMovementParams                   RootMotionParams;                                         // 0x0E50(0x0070) (Transient)
	struct FVector                                     AnimRootMotionVelocity;                                   // 0x0EC0(0x0018) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData22[0x28];                                      // 0x0ED8(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.CharacterMovementComponent"));
		return ptr;
	}


	void SetWalkableFloorZ(float InWalkableFloorZ);//Offset:Discovery.exe+0x56CDFC0
	void SetWalkableFloorAngle(float InWalkableFloorAngle);//Offset:Discovery.exe+0x56CE090
	void SetMovementMode(TEnumAsByte<EMovementMode> NewMovementMode, unsigned char NewCustomMode);//Offset:Discovery.exe+0x56CE9D0
	void SetGroupsToIgnoreMask(const struct FNavAvoidanceMask& GroupMask);//Offset:Discovery.exe+0x56CEB70
	void SetGroupsToIgnore(int GroupFlags);//Offset:Discovery.exe+0x56CEC20
	void SetGroupsToAvoidMask(const struct FNavAvoidanceMask& GroupMask);//Offset:Discovery.exe+0x56CECC0
	void SetGroupsToAvoid(int GroupFlags);//Offset:Discovery.exe+0x56CED70
	void SetCrouchedHalfHeight(float NewValue);//Offset:Discovery.exe+0x56CE520
	void SetAvoidanceGroupMask(const struct FNavAvoidanceMask& GroupMask);//Offset:Discovery.exe+0x56CEE10
	void SetAvoidanceGroup(int GroupFlags);//Offset:Discovery.exe+0x56CEEC0
	void SetAvoidanceEnabled(bool bEnable);//Offset:Discovery.exe+0x56CEAD0
	float K2_GetWalkableFloorZ();//Offset:Discovery.exe+0x56CE060
	float K2_GetWalkableFloorAngle();//Offset:Discovery.exe+0x56CE130
	void K2_FindFloor(const struct FVector& CapsuleLocation, struct FFindFloorResult* FloorResult);//Offset:Discovery.exe+0x56CDDC0
	void K2_ComputeFloorDist(const struct FVector& CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, struct FFindFloorResult* FloorResult);//Offset:Discovery.exe+0x56CDAB0
	bool IsWalking();//Offset:Discovery.exe+0x56CE9A0
	bool IsWalkable(const struct FHitResult& Hit);//Offset:Discovery.exe+0x56CE160
	float GetValidPerchRadius();//Offset:Discovery.exe+0x56CE2E0
	float GetPerchRadiusThreshold();//Offset:Discovery.exe+0x56CE310
	class UPrimitiveComponent* GetMovementBase();//Offset:Discovery.exe+0x56CE950
	float GetMinAnalogSpeed();//Offset:Discovery.exe+0x56CE6D0
	float GetMaxJumpHeightWithJumpTime();//Offset:Discovery.exe+0x56CE700
	float GetMaxJumpHeight();//Offset:Discovery.exe+0x56CE730
	float GetMaxBrakingDeceleration();//Offset:Discovery.exe+0x56CE670
	float GetMaxAcceleration();//Offset:Discovery.exe+0x56CE6A0
	struct FVector GetLastUpdateVelocity();//Offset:Discovery.exe+0x56CEF60
	struct FRotator GetLastUpdateRotation();//Offset:Discovery.exe+0x56CEFB0
	struct FVector GetLastUpdateLocation();//Offset:Discovery.exe+0x56CF030
	struct FVector GetImpartedMovementBaseVelocity();//Offset:Discovery.exe+0x56CE8F0
	struct FVector GetCurrentAcceleration();//Offset:Discovery.exe+0x56CE610
	float GetCrouchedHalfHeight();//Offset:Discovery.exe+0x56CE4F0
	class ACharacter* GetCharacterOwner();//Offset:Discovery.exe+0x56CEAB0
	float GetAnalogInputModifier();//Offset:Discovery.exe+0x56CE5E0
	void DisableMovement();//Offset:Discovery.exe+0x56CE980
	void ClearAccumulatedForces();//Offset:Discovery.exe+0x56CE5C0
	void CapsuleTouched(class UPrimitiveComponent* OverlappedComp, class AActor* Other, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);//Offset:Discovery.exe+0x56CD770
	void CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration);//Offset:Discovery.exe+0x56CE760
	void AddImpulse(const struct FVector& Impulse, bool bVelocityChange);//Offset:Discovery.exe+0x56CE3F0
	void AddForce(const struct FVector& Force);//Offset:Discovery.exe+0x56CE340
};


// Class Engine.BlueprintFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UBlueprintFunctionLibrary : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.BlueprintFunctionLibrary"));
		return ptr;
	}

};


// Class Engine.Controller
// 0x0098 (0x0360 - 0x02C8)
class AController : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x02C8(0x0008) MISSED OFFSET
	class APlayerState*                                PlayerState;                                              // 0x02D0(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x02D8(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnInstigatedAnyDamage;                                    // 0x02E0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPossessedPawnChanged;                                   // 0x02F0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FName                                       StateName;                                                // 0x0300(0x0008) (ZeroConstructor, IsPlainOldData)
	class APawn*                                       Pawn;                                                     // 0x0308(0x0008) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0310(0x0008) MISSED OFFSET
	class ACharacter*                                  Character;                                                // 0x0318(0x0008) (ZeroConstructor, IsPlainOldData)
	class USceneComponent*                             TransformComponent;                                       // 0x0320(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData03[0x18];                                      // 0x0328(0x0018) MISSED OFFSET
	struct FRotator                                    ControlRotation;                                          // 0x0340(0x0018) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bAttachToPawn : 1;                                        // 0x0358(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData04[0x7];                                       // 0x0359(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.Controller"));
		return ptr;
	}


	void UnPossess();//Offset:Discovery.exe+0x56DEF40
	void StopMovement();//Offset:Discovery.exe+0x56DEE30
	void SetInitialLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation);//Offset:Discovery.exe+0x56DF5B0
	void SetIgnoreMoveInput(bool bNewMoveInput);//Offset:Discovery.exe+0x56DED90
	void SetIgnoreLookInput(bool bNewLookInput);//Offset:Discovery.exe+0x56DECC0
	void SetControlRotation(const struct FRotator& NewRotation);//Offset:Discovery.exe+0x56DF6A0
	void ResetIgnoreMoveInput();//Offset:Discovery.exe+0x154EC60
	void ResetIgnoreLookInput();//Offset:Discovery.exe+0x56DECA0
	void ResetIgnoreInputFlags();//Offset:Discovery.exe+0x56DEC50
	void ReceiveUnPossess(class APawn* UnpossessedPawn);//Offset:Discovery.exe+0x327F8B0
	void ReceivePossess(class APawn* PossessedPawn);//Offset:Discovery.exe+0x327F8B0
	void ReceiveInstigatedAnyDamage(float Damage, class UDamageType* DamageType, class AActor* DamagedActor, class AActor* DamageCauser);//Offset:Discovery.exe+0x327F8B0
	void Possess(class APawn* InPawn);//Offset:Discovery.exe+0x56DEF60
	void OnRep_PlayerState();//Offset:Discovery.exe+0x56DF420
	void OnRep_Pawn();//Offset:Discovery.exe+0x56DF440
	bool LineOfSightTo(class AActor* Other, const struct FVector& ViewPoint, bool bAlternateChecks);//Offset:Discovery.exe+0x56DF460
	class APawn* K2_GetPawn();//Offset:Discovery.exe+0x19BFE60
	bool IsPlayerController();//Offset:Discovery.exe+0x56DF090
	bool IsMoveInputIgnored();//Offset:Discovery.exe+0x56DED60
	bool IsLookInputIgnored();//Offset:Discovery.exe+0x56DEC70
	bool IsLocalPlayerController();//Offset:Discovery.exe+0x56DF030
	bool IsLocalController();//Offset:Discovery.exe+0x56DF000
	class AActor* GetViewTarget();//Offset:Discovery.exe+0x56DF120
	void GetPlayerViewPoint(struct FVector* Location, struct FRotator* Rotation);//Offset:Discovery.exe+0x56DEE50
	struct FRotator GetDesiredRotation();//Offset:Discovery.exe+0x56DF0C0
	struct FRotator GetControlRotation();//Offset:Discovery.exe+0x56DF740
	void ClientSetRotation(const struct FRotator& NewRotation, bool bResetCamera);//Offset:Discovery.exe+0x56DF150
	void ClientSetLocation(const struct FVector& NewLocation, const struct FRotator& NewRotation);//Offset:Discovery.exe+0x56DF290
};


// Class Engine.PlayerController
// 0x04B8 (0x0818 - 0x0360)
class APlayerController : public AController
{
public:
	class UPlayer*                                     Player;                                                   // 0x0360(0x0008) (ZeroConstructor, IsPlainOldData)
	class APawn*                                       AcknowledgedPawn;                                         // 0x0368(0x0008) (ZeroConstructor, IsPlainOldData)
	class UInterpTrackInstDirector*                    ControllingDirTrackInst;                                  // 0x0370(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class AHUD*                                        MyHUD;                                                    // 0x0378(0x0008) (ZeroConstructor, IsPlainOldData)
	class APlayerCameraManager*                        PlayerCameraManager;                                      // 0x0380(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UClass*                                      PlayerCameraManagerClass;                                 // 0x0388(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bAutoManageActiveCameraTarget;                            // 0x0390(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0391(0x0007) MISSED OFFSET
	struct FRotator                                    TargetViewRotation;                                       // 0x0398(0x0018) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x18];                                      // 0x03B0(0x0018) MISSED OFFSET
	float                                              SmoothTargetViewRotationSpeed;                            // 0x03C8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x03CC(0x0004) MISSED OFFSET
	TArray<class AActor*>                              HiddenActors;                                             // 0x03D0(0x0010) (ZeroConstructor)
	TArray<TWeakObjectPtr<class UPrimitiveComponent>>  HiddenPrimitiveComponents;                                // 0x03E0(0x0010) (ExportObject, ZeroConstructor)
	unsigned char                                      UnknownData03[0x4];                                       // 0x03F0(0x0004) MISSED OFFSET
	float                                              LastSpectatorStateSynchTime;                              // 0x03F4(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FVector                                     LastSpectatorSyncLocation;                                // 0x03F8(0x0018) (ZeroConstructor, Transient, IsPlainOldData)
	struct FRotator                                    LastSpectatorSyncRotation;                                // 0x0410(0x0018) (ZeroConstructor, Transient, IsPlainOldData)
	int                                                ClientCap;                                                // 0x0428(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x042C(0x0004) MISSED OFFSET
	class UCheatManager*                               CheatManager;                                             // 0x0430(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	class UClass*                                      CheatClass;                                               // 0x0438(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UPlayerInput*                                PlayerInput;                                              // 0x0440(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TArray<struct FActiveForceFeedbackEffect>          ActiveForceFeedbackEffects;                               // 0x0448(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData05[0x80];                                      // 0x0458(0x0080) MISSED OFFSET
	unsigned char                                      UnknownData06 : 4;                                        // 0x04D8(0x0001)
	unsigned char                                      bPlayerIsWaiting : 1;                                     // 0x04D8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst)
	unsigned char                                      UnknownData07[0x3];                                       // 0x04D9(0x0003) MISSED OFFSET
	unsigned char                                      NetPlayerIndex;                                           // 0x04DC(0x0001) (ZeroConstructor, DuplicateTransient, IsPlainOldData)
	unsigned char                                      UnknownData08[0x5B];                                      // 0x04DD(0x005B) MISSED OFFSET
	class UNetConnection*                              PendingSwapConnection;                                    // 0x0538(0x0008) (ZeroConstructor, DuplicateTransient, IsPlainOldData)
	class UNetConnection*                              NetConnection;                                            // 0x0540(0x0008) (ZeroConstructor, DuplicateTransient, IsPlainOldData)
	unsigned char                                      UnknownData09[0x18];                                      // 0x0548(0x0018) MISSED OFFSET
	float                                              InputYawScale;                                            // 0x0560(0x0004) (ZeroConstructor, Config, Deprecated, IsPlainOldData)
	float                                              InputPitchScale;                                          // 0x0564(0x0004) (ZeroConstructor, Config, Deprecated, IsPlainOldData)
	float                                              InputRollScale;                                           // 0x0568(0x0004) (ZeroConstructor, Config, Deprecated, IsPlainOldData)
	unsigned char                                      bShowMouseCursor : 1;                                     // 0x056C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bEnableClickEvents : 1;                                   // 0x056C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bEnableTouchEvents : 1;                                   // 0x056C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bEnableMouseOverEvents : 1;                               // 0x056C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bEnableTouchOverEvents : 1;                               // 0x056C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bForceFeedbackEnabled : 1;                                // 0x056C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bEnableStreamingSource : 1;                               // 0x056C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bStreamingSourceShouldActivate : 1;                       // 0x056C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bStreamingSourceShouldBlockOnSlowStreaming : 1;           // 0x056D(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData10[0x2];                                       // 0x056E(0x0002) MISSED OFFSET
	float                                              ForceFeedbackScale;                                       // 0x0570(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData11[0x4];                                       // 0x0574(0x0004) MISSED OFFSET
	TArray<struct FKey>                                ClickEventKeys;                                           // 0x0578(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TEnumAsByte<EMouseCursor>                          DefaultMouseCursor;                                       // 0x0588(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EMouseCursor>                          CurrentMouseCursor;                                       // 0x0589(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ECollisionChannel>                     DefaultClickTraceChannel;                                 // 0x058A(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ECollisionChannel>                     CurrentClickTraceChannel;                                 // 0x058B(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              HitResultTraceDistance;                                   // 0x058C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	uint16_t                                           SeamlessTravelCount;                                      // 0x0590(0x0002) (ZeroConstructor, IsPlainOldData)
	uint16_t                                           LastCompletedSeamlessTravelCount;                         // 0x0592(0x0002) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData12[0x74];                                      // 0x0594(0x0074) MISSED OFFSET
	class UInputComponent*                             InactiveStateInputComponent;                              // 0x0608(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData13 : 2;                                        // 0x0610(0x0001)
	unsigned char                                      bShouldPerformFullTickWhenPaused : 1;                     // 0x0610(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData14[0x17];                                      // 0x0611(0x0017) MISSED OFFSET
	class UTouchInterface*                             CurrentTouchInterface;                                    // 0x0628(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData15[0x78];                                      // 0x0630(0x0078) MISSED OFFSET
	class ASpectatorPawn*                              SpectatorPawn;                                            // 0x06A8(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData16[0x4];                                       // 0x06B0(0x0004) MISSED OFFSET
	bool                                               bIsLocalPlayerController;                                 // 0x06B4(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData17[0x3];                                       // 0x06B5(0x0003) MISSED OFFSET
	struct FVector                                     SpawnLocation;                                            // 0x06B8(0x0018) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData18[0x148];                                     // 0x06D0(0x0148) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.PlayerController"));
		return ptr;
	}


	bool WasInputKeyJustReleased(const struct FKey& Key);//Offset:Discovery.exe+0x58278A0
	bool WasInputKeyJustPressed(const struct FKey& Key);//Offset:Discovery.exe+0x5827990
	void ToggleSpeaking(bool bInSpeaking);//Offset:Discovery.exe+0x582CCB0
	void TestServerLevelVisibilityChange(const struct FName& PackageName, const struct FName& Filename);//Offset:Discovery.exe+0x5829940
	void SwitchLevel(const struct FString& URL);//Offset:Discovery.exe+0x582E270
	bool StreamingSourceShouldBlockOnSlowStreaming();//Offset:Discovery.exe+0x582CE90
	bool StreamingSourceShouldActivate();//Offset:Discovery.exe+0x582CEC0
	void StopHapticEffect(enum class EControllerHand Hand);//Offset:Discovery.exe+0x5829730
	void StartFire(unsigned char FireModeNum);//Offset:Discovery.exe+0x582CDF0
	void SetVirtualJoystickVisibility(bool bVisible);//Offset:Discovery.exe+0x5826DC0
	void SetViewTargetWithBlend(class AActor* NewViewTarget, float BlendTime, TEnumAsByte<EViewTargetBlendFunction> BlendFunc, float BlendExp, bool bLockOutgoing);//Offset:Discovery.exe+0x5826B40
	void SetName(const struct FString& S);//Offset:Discovery.exe+0x582E320
	void SetMouseLocation(int X, int Y);//Offset:Discovery.exe+0x582CF20
	void SetMouseCursorWidget(TEnumAsByte<EMouseCursor> Cursor, class UUserWidget* CursorWidget);//Offset:Discovery.exe+0x582A580
	void SetHapticsByValue(float Frequency, float Amplitude, enum class EControllerHand Hand);//Offset:Discovery.exe+0x5829600
	void SetDisableHaptics(bool bNewDisabled);//Offset:Discovery.exe+0x5829560
	void SetDeprecatedInputYawScale(float NewValue);//Offset:Discovery.exe+0x582E9B0
	void SetDeprecatedInputRollScale(float NewValue);//Offset:Discovery.exe+0x582E870
	void SetDeprecatedInputPitchScale(float NewValue);//Offset:Discovery.exe+0x582E910
	void SetControllerLightColor(const struct FColor& Color);//Offset:Discovery.exe+0x58294D0
	void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);//Offset:Discovery.exe+0x5826690
	void SetAudioListenerOverride(class USceneComponent* AttachToComponent, const struct FVector& Location, const struct FRotator& Rotation);//Offset:Discovery.exe+0x58269E0
	void SetAudioListenerAttenuationOverride(class USceneComponent* AttachToComponent, const struct FVector& AttenuationLocationOVerride);//Offset:Discovery.exe+0x58268D0
	void ServerViewSelf(const struct FViewTargetTransitionParams& TransitionParams);//Offset:Discovery.exe+0x5827F30
	void ServerViewPrevPlayer();//Offset:Discovery.exe+0x5828010
	void ServerViewNextPlayer();//Offset:Discovery.exe+0x5828060
	void ServerVerifyViewTarget();//Offset:Discovery.exe+0x58280B0
	void ServerUpdateMultipleLevelsVisibility(TArray<struct FUpdateLevelVisibilityLevelInfo> LevelVisibilities);//Offset:Discovery.exe+0x5828100
	void ServerUpdateLevelVisibility(const struct FUpdateLevelVisibilityLevelInfo& LevelVisibility);//Offset:Discovery.exe+0x58281D0
	void ServerUpdateCamera(const struct FVector_NetQuantize& CamLoc, int CamPitchAndYaw);//Offset:Discovery.exe+0x5828290
	void ServerUnmutePlayer(const struct FUniqueNetIdRepl& PlayerId);//Offset:Discovery.exe+0x582C930
	void ServerUnblockPlayer(const struct FUniqueNetIdRepl& PlayerId);//Offset:Discovery.exe+0x582C370
	void ServerToggleAILogging();//Offset:Discovery.exe+0x5827D50
	void ServerShortTimeout();//Offset:Discovery.exe+0x58283D0
	void ServerSetSpectatorWaiting(bool bWaiting);//Offset:Discovery.exe+0x582EB80
	void ServerSetSpectatorLocation(const struct FVector& NewLoc, const struct FRotator& NewRot);//Offset:Discovery.exe+0x58284C0
	void ServerRestartPlayer();//Offset:Discovery.exe+0x5828650
	void ServerRecvClientInputFrame(int RecvClientInputFrame, TArray<unsigned char> Data);//Offset:Discovery.exe+0x5826480
	void ServerPause();//Offset:Discovery.exe+0x58286A0
	void ServerNotifyLoadedWorld(const struct FName& WorldPackageName);//Offset:Discovery.exe+0x58286F0
	void ServerMutePlayer(const struct FUniqueNetIdRepl& PlayerId);//Offset:Discovery.exe+0x582CAE0
	void ServerExecRPC(const struct FString& Msg);//Offset:Discovery.exe+0x582E610
	void ServerExec(const struct FString& Msg);//Offset:Discovery.exe+0x1B0D520
	void ServerCheckClientPossessionReliable();//Offset:Discovery.exe+0x5828420
	void ServerCheckClientPossession();//Offset:Discovery.exe+0x5828470
	void ServerChangeName(const struct FString& S);//Offset:Discovery.exe+0x58287B0
	void ServerCamera(const struct FName& NewMode);//Offset:Discovery.exe+0x5828880
	void ServerBlockPlayer(const struct FUniqueNetIdRepl& PlayerId);//Offset:Discovery.exe+0x582C520
	void ServerAcknowledgePossession(class APawn* P);//Offset:Discovery.exe+0x5828940
	void SendToConsole(const struct FString& Command);//Offset:Discovery.exe+0x582C0C0
	void RestartLevel();//Offset:Discovery.exe+0x582E790
	void ResetControllerLightColor();//Offset:Discovery.exe+0x58294B0
	bool ProjectWorldLocationToScreen(const struct FVector& WorldLocation, bool bPlayerViewportRelative, struct FVector2D* ScreenLocation);//Offset:Discovery.exe+0x582D000
	void PlayHapticEffect(class UHapticFeedbackEffect_Base* HapticEffect, enum class EControllerHand Hand, float Scale, bool bLoop);//Offset:Discovery.exe+0x58297C0
	void PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, TEnumAsByte<EDynamicForceFeedbackAction> Action, const struct FLatentActionInfo& LatentInfo);//Offset:Discovery.exe+0x5829A20
	void Pause();//Offset:Discovery.exe+0x582E3D0
	void OnServerStartedVisualLogger(bool bIsLogging);//Offset:Discovery.exe+0x58265F0
	void LocalTravel(const struct FString& URL);//Offset:Discovery.exe+0x582E6E0
	void K2_ClientPlayForceFeedback(class UForceFeedbackEffect* ForceFeedbackEffect, const struct FName& Tag, bool bLooping, bool bIgnoreTimeDilation, bool bPlayWhilePaused);//Offset:Discovery.exe+0x5829F60
	bool IsStreamingSourceEnabled();//Offset:Discovery.exe+0x582CEF0
	bool IsInputKeyDown(const struct FKey& Key);//Offset:Discovery.exe+0x5827A80
	void GetViewportSize(int* SizeX, int* SizeY);//Offset:Discovery.exe+0x582A690
	class ASpectatorPawn* GetSpectatorPawn();//Offset:Discovery.exe+0x58265D0
	bool GetMousePosition(float* LocationX, float* LocationY);//Offset:Discovery.exe+0x5827240
	struct FVector GetInputVectorKeyState(const struct FKey& Key);//Offset:Discovery.exe+0x58276B0
	void GetInputTouchState(TEnumAsByte<ETouchIndex> FingerIndex, float* LocationX, float* LocationY, bool* bIsCurrentlyPressed);//Offset:Discovery.exe+0x5827500
	void GetInputMouseDelta(float* DeltaX, float* DeltaY);//Offset:Discovery.exe+0x5827050
	void GetInputMotionState(struct FVector* Tilt, struct FVector* RotationRate, struct FVector* Gravity, struct FVector* Acceleration);//Offset:Discovery.exe+0x5827350
	float GetInputKeyTimeDown(const struct FKey& Key);//Offset:Discovery.exe+0x5827150
	void GetInputAnalogStickState(TEnumAsByte<EControllerAnalogStick> WhichStick, float* StickX, float* StickY);//Offset:Discovery.exe+0x5826F00
	float GetInputAnalogKeyState(const struct FKey& Key);//Offset:Discovery.exe+0x58277B0
	class AHUD* GetHUD();//Offset:Discovery.exe+0x582A660
	bool GetHitResultUnderFingerForObjects(TEnumAsByte<ETouchIndex> FingerIndex, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, struct FHitResult* HitResult);//Offset:Discovery.exe+0x582D3F0
	bool GetHitResultUnderFingerByChannel(TEnumAsByte<ETouchIndex> FingerIndex, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, struct FHitResult* HitResult);//Offset:Discovery.exe+0x582D6A0
	bool GetHitResultUnderFinger(TEnumAsByte<ETouchIndex> FingerIndex, TEnumAsByte<ECollisionChannel> TraceChannel, bool bTraceComplex, struct FHitResult* HitResult);//Offset:Discovery.exe+0x582D930
	bool GetHitResultUnderCursorForObjects(TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, struct FHitResult* HitResult);//Offset:Discovery.exe+0x582DBC0
	bool GetHitResultUnderCursorByChannel(TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, struct FHitResult* HitResult);//Offset:Discovery.exe+0x582DE10
	bool GetHitResultUnderCursor(TEnumAsByte<ECollisionChannel> TraceChannel, bool bTraceComplex, struct FHitResult* HitResult);//Offset:Discovery.exe+0x582E040
	struct FVector GetFocalLocation();//Offset:Discovery.exe+0x5826570
	float GetDeprecatedInputYawScale();//Offset:Discovery.exe+0x582EAB0
	float GetDeprecatedInputRollScale();//Offset:Discovery.exe+0x582EA50
	float GetDeprecatedInputPitchScale();//Offset:Discovery.exe+0x582EA80
	void FOV(float NewFOV);//Offset:Discovery.exe+0x582E7B0
	void EnableCheats();//Offset:Discovery.exe+0x582E850
	bool DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, struct FVector* WorldLocation, struct FVector* WorldDirection);//Offset:Discovery.exe+0x582D150
	bool DeprojectMousePositionToWorld(struct FVector* WorldLocation, struct FVector* WorldDirection);//Offset:Discovery.exe+0x582D2F0
	void ConsoleKey(const struct FKey& Key);//Offset:Discovery.exe+0x582C170
	void ClientWasKicked(const struct FText& KickReason);//Offset:Discovery.exe+0x5828CC0
	void ClientVoiceHandshakeComplete();//Offset:Discovery.exe+0x582CC90
	void ClientUpdateMultipleLevelsStreamingStatus(TArray<struct FUpdateLevelStreamingLevelStatus> LevelStatuses);//Offset:Discovery.exe+0x5828D90
	void ClientUpdateLevelStreamingStatus(const struct FName& PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, bool bNewShouldBlockOnUnload, int LODIndex, const struct FTransform& LevelTransform);//Offset:Discovery.exe+0x5828E40
	void ClientUnmutePlayers(TArray<struct FUniqueNetIdRepl> PlayerIds);//Offset:Discovery.exe+0x582C260
	void ClientUnmutePlayer(const struct FUniqueNetIdRepl& PlayerId);//Offset:Discovery.exe+0x582C6D0
	void ClientTravelInternal(const struct FString& URL, TEnumAsByte<ETravelType> TravelType, bool bSeamless, const struct FGuid& MapPackageGuid);//Offset:Discovery.exe+0x5829160
	void ClientTravel(const struct FString& URL, TEnumAsByte<ETravelType> TravelType, bool bSeamless, const struct FGuid& MapPackageGuid);//Offset:Discovery.exe+0x5829310
	void ClientTeamMessage(class APlayerState* SenderPlayerState, const struct FString& S, const struct FName& Type, float MsgLifeTime);//Offset:Discovery.exe+0x5827DA0
	void ClientStopForceFeedback(class UForceFeedbackEffect* ForceFeedbackEffect, const struct FName& Tag);//Offset:Discovery.exe+0x5829D70
	void ClientStopCameraShakesFromSource(class UCameraShakeSourceComponent* SourceComponent, bool bImmediately);//Offset:Discovery.exe+0x582A140
	void ClientStopCameraShake(class UClass* Shake, bool bImmediately);//Offset:Discovery.exe+0x582A230
	void ClientStopCameraAnim(class UCameraAnim* AnimToStop);//Offset:Discovery.exe+0x4B867A0
	void ClientStartOnlineSession();//Offset:Discovery.exe+0x5828CA0
	void ClientStartCameraShakeFromSource(class UClass* Shake, class UCameraShakeSourceComponent* SourceComponent);//Offset:Discovery.exe+0x582B440
	void ClientStartCameraShake(class UClass* Shake, float Scale, enum class ECameraShakePlaySpace PlaySpace, const struct FRotator& UserPlaySpaceRot);//Offset:Discovery.exe+0x582B520
	void ClientSpawnGenericCameraLensEffect(class UClass* LensEffectEmitterClass);//Offset:Discovery.exe+0x582A3E0
	void ClientSpawnCameraLensEffect(class UClass* LensEffectEmitterClass);//Offset:Discovery.exe+0x582A340
	void ClientSetViewTarget(class AActor* A, const struct FViewTargetTransitionParams& TransitionParams);//Offset:Discovery.exe+0x582A480
	void ClientSetSpectatorWaiting(bool bWaiting);//Offset:Discovery.exe+0x582EAE0
	void ClientSetHUD(class UClass* NewHUDClass);//Offset:Discovery.exe+0x582A790
	void ClientSetForceMipLevelsToBeResident(class UMaterialInterface* Material, float ForceDuration, int CinematicTextureGroups);//Offset:Discovery.exe+0x582A830
	void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD);//Offset:Discovery.exe+0x582A960
	void ClientSetCameraMode(const struct FName& NewCamMode);//Offset:Discovery.exe+0x582AB00
	void ClientSetCameraFade(bool bEnableFading, const struct FColor& FadeColor, const struct FVector2D& FadeAlpha, float FadeTime, bool bFadeAudio, bool bHoldWhenFinished);//Offset:Discovery.exe+0x582ABA0
	void ClientSetBlockOnAsyncLoading();//Offset:Discovery.exe+0x582ADD0
	void ClientReturnToMainMenuWithTextReason(const struct FText& ReturnReason);//Offset:Discovery.exe+0x582E490
	void ClientReturnToMainMenu(const struct FString& ReturnReason);//Offset:Discovery.exe+0x582E560
	void ClientRetryClientRestart(class APawn* NewPawn);//Offset:Discovery.exe+0x5828BE0
	void ClientRestart(class APawn* NewPawn);//Offset:Discovery.exe+0x582ADF0
	void ClientReset();//Offset:Discovery.exe+0x582AE90
	void ClientRepObjRef(class UObject* Object);//Offset:Discovery.exe+0x582E3F0
	void ClientRecvServerAckFrameDebug(unsigned char NumBuffered, float TargetNumBufferedCmds);//Offset:Discovery.exe+0x5826270
	void ClientRecvServerAckFrame(int LastProcessedInputFrame, int RecvServerFrameNumber, int8_t TimeDilation);//Offset:Discovery.exe+0x5826350
	void ClientReceiveLocalizedMessage(class UClass* Message, int SWITCH, class APlayerState* RelatedPlayerState_1, class APlayerState* RelatedPlayerState_2, class UObject* OptionalObject);//Offset:Discovery.exe+0x5828A00
	void ClientPrestreamTextures(class AActor* ForcedActor, float ForceDuration, bool bEnableStreaming, int CinematicTextureGroups);//Offset:Discovery.exe+0x582AEB0
	void ClientPrepareMapChange(const struct FName& LevelName, bool bFirst, bool bLast);//Offset:Discovery.exe+0x582B040
	void ClientPlaySoundAtLocation(class USoundBase* Sound, const struct FVector& Location, float VolumeMultiplier, float PitchMultiplier);//Offset:Discovery.exe+0x582B180
	void ClientPlaySound(class USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier);//Offset:Discovery.exe+0x582B310
	void ClientPlayForceFeedback_Internal(class UForceFeedbackEffect* ForceFeedbackEffect, const struct FForceFeedbackParameters& Params);//Offset:Discovery.exe+0x5829E60
	void ClientPlayCameraAnim(class UCameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, enum class ECameraShakePlaySpace Space, const struct FRotator& CustomPlaySpace);//Offset:Discovery.exe+0x582B6B0
	void ClientMutePlayer(const struct FUniqueNetIdRepl& PlayerId);//Offset:Discovery.exe+0x582C800
	void ClientMessage(const struct FString& S, const struct FName& Type, float MsgLifeTime);//Offset:Discovery.exe+0x582BA50
	void ClientIgnoreMoveInput(bool bIgnore);//Offset:Discovery.exe+0x582BB90
	void ClientIgnoreLookInput(bool bIgnore);//Offset:Discovery.exe+0x582BC30
	void ClientGotoState(const struct FName& NewState);//Offset:Discovery.exe+0x582BCD0
	void ClientGameEnded(class AActor* EndGameFocus, bool bIsWinner);//Offset:Discovery.exe+0x582BD70
	void ClientForceGarbageCollection();//Offset:Discovery.exe+0x582BE60
	void ClientFlushLevelStreaming();//Offset:Discovery.exe+0x582BE80
	void ClientEndOnlineSession();//Offset:Discovery.exe+0x5828C80
	void ClientEnableNetworkVoice(bool bEnable);//Offset:Discovery.exe+0x582CD50
	void ClientCommitMapChange();//Offset:Discovery.exe+0x582BEA0
	void ClientClearCameraLensEffects();//Offset:Discovery.exe+0x582A320
	void ClientCapBandwidth(int Cap);//Offset:Discovery.exe+0x582BEC0
	void ClientCancelPendingMapChange();//Offset:Discovery.exe+0x582BF60
	void ClientAddTextureStreamingLoc(const struct FVector& InLoc, float Duration, bool bOverrideLocation);//Offset:Discovery.exe+0x582BF80
	void ClearAudioListenerOverride();//Offset:Discovery.exe+0x58269C0
	void ClearAudioListenerAttenuationOverride();//Offset:Discovery.exe+0x58268B0
	bool CanRestartPlayer();//Offset:Discovery.exe+0x5826880
	void Camera(const struct FName& NewMode);//Offset:Discovery.exe+0x5826D20
	void AddYawInput(float Val);//Offset:Discovery.exe+0x5827C10
	void AddRollInput(float Val);//Offset:Discovery.exe+0x5827B70
	void AddPitchInput(float Val);//Offset:Discovery.exe+0x5827CB0
	void ActivateTouchInterface(class UTouchInterface* NewTouchInterface);//Offset:Discovery.exe+0x5826E60
};


// Class Engine.CheatManager
// 0x0060 (0x0088 - 0x0028)
class UCheatManager : public UObject
{
public:
	class ADebugCameraController*                      DebugCameraControllerRef;                                 // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData)
	class UClass*                                      DebugCameraControllerClass;                               // 0x0030(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x40];                                      // 0x0038(0x0040) MISSED OFFSET
	TArray<class UCheatManagerExtension*>              CheatManagerExtensions;                                   // 0x0078(0x0010) (ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.CheatManager"));
		return ptr;
	}


	void Walk();//Offset:Discovery.exe+0x1DC09C0
	void ViewSelf();//Offset:Discovery.exe+0x1B0B410
	void ViewPlayer(const struct FString& S);//Offset:Discovery.exe+0x56D2230
	void ViewClass(class UClass* DesiredClass);//Offset:Discovery.exe+0x56D20F0
	void ViewActor(const struct FName& ActorName);//Offset:Discovery.exe+0x56D2190
	void UpdateSafeArea();//Offset:Discovery.exe+0x56D1550
	void ToggleServerStatReplicatorUpdateStatNet();//Offset:Discovery.exe+0x56D1570
	void ToggleServerStatReplicatorClientOverwrite();//Offset:Discovery.exe+0x56D1590
	void ToggleDebugCamera();//Offset:Discovery.exe+0x1B054E0
	void ToggleAILogging();//Offset:Discovery.exe+0x1DBE330
	void TestCollisionDistance();//Offset:Discovery.exe+0x56D1CD0
	void Teleport();//Offset:Discovery.exe+0x11BA100
	void Summon(const struct FString& ClassName);//Offset:Discovery.exe+0x56D22E0
	void StreamLevelOut(const struct FName& PackageName);//Offset:Discovery.exe+0x56D1F10
	void StreamLevelIn(const struct FName& PackageName);//Offset:Discovery.exe+0x56D2050
	void SpawnServerStatReplicator();//Offset:Discovery.exe+0x56D15D0
	void Slomo(float NewTimeDilation);//Offset:Discovery.exe+0x242E280
	void SetWorldOrigin();//Offset:Discovery.exe+0x56D1700
	void SetMouseSensitivityToDefault();//Offset:Discovery.exe+0x56D16E0
	void ServerToggleAILogging();//Offset:Discovery.exe+0x56D1EC0
	void ReceiveInitCheatManager();//Offset:Discovery.exe+0x327F8B0
	void ReceiveEndPlay();//Offset:Discovery.exe+0x327F8B0
	void PlayersOnly();//Offset:Discovery.exe+0x1B00320
	void OnPlayerEndPlayed(class AActor* Player, TEnumAsByte<EEndPlayReason> EndPlayReason);//Offset:Discovery.exe+0x56D1470
	void OnlyLoadLevel(const struct FName& PackageName);//Offset:Discovery.exe+0x56D1FB0
	void LogLoc();//Offset:Discovery.exe+0x56D1720
	void InvertMouse();//Offset:Discovery.exe+0x15737A0
	void God();//Offset:Discovery.exe+0x155C0A0
	void Ghost();//Offset:Discovery.exe+0x11B68C0
	class APlayerController* GetPlayerController();//Offset:Discovery.exe+0x56D1420
	void FreezeFrame(float Delay);//Offset:Discovery.exe+0x56D2430
	void Fly();//Offset:Discovery.exe+0x11BDAF0
	void FlushLog();//Offset:Discovery.exe+0x56D1740
	void EnableDebugCamera();//Offset:Discovery.exe+0x15733E0
	void DumpVoiceMutingState();//Offset:Discovery.exe+0x56D1C50
	void DumpPartyState();//Offset:Discovery.exe+0x56D1C90
	void DumpOnlineSessionState();//Offset:Discovery.exe+0x56D1CB0
	void DumpChatState();//Offset:Discovery.exe+0x56D1C70
	void DisableDebugCamera();//Offset:Discovery.exe+0x56D1450
	void DestroyTarget();//Offset:Discovery.exe+0x1DC8E90
	void DestroyServerStatReplicator();//Offset:Discovery.exe+0x56D15B0
	void DestroyPawns(class UClass* aClass);//Offset:Discovery.exe+0x1DB8FB0
	void DestroyAllPawnsExceptTarget();//Offset:Discovery.exe+0x1B057D0
	void DestroyAll(class UClass* aClass);//Offset:Discovery.exe+0x2DCB5B0
	void DebugCapsuleSweepSize(float HalfHeight, float Radius);//Offset:Discovery.exe+0x56D1DD0
	void DebugCapsuleSweepPawn();//Offset:Discovery.exe+0x56D1CF0
	void DebugCapsuleSweepComplex(bool bTraceComplex);//Offset:Discovery.exe+0x5673BF0
	void DebugCapsuleSweepClear();//Offset:Discovery.exe+0x2021540
	void DebugCapsuleSweepChannel(TEnumAsByte<ECollisionChannel> Channel);//Offset:Discovery.exe+0x56D1D30
	void DebugCapsuleSweepCapture();//Offset:Discovery.exe+0x56D1D10
	void DebugCapsuleSweep();//Offset:Discovery.exe+0x1DBE380
	void DamageTarget(float DamageAmount);//Offset:Discovery.exe+0x56D2390
	void CheatScript(const struct FString& ScriptName);//Offset:Discovery.exe+0x56D15F0
	void ChangeSize(float F);//Offset:Discovery.exe+0x4D022C0
	void BugItStringCreator(const struct FVector& ViewLocation, const struct FRotator& ViewRotation, struct FString* GoString, struct FString* LocString);//Offset:Discovery.exe+0x56D1760
	void BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll);//Offset:Discovery.exe+0x56D1A20
	void BugIt(const struct FString& ScreenShotDescription);//Offset:Discovery.exe+0x56D1970
};


// Class Engine.Engine
// 0x0D80 (0x0DA8 - 0x0028)
class UEngine : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	class UFont*                                       TinyFont;                                                 // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftObjectPath                             TinyFontName;                                             // 0x0038(0x0018) (Edit, ZeroConstructor, Config, GlobalConfig)
	class UFont*                                       SmallFont;                                                // 0x0050(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftObjectPath                             SmallFontName;                                            // 0x0058(0x0018) (Edit, ZeroConstructor, Config, GlobalConfig)
	class UFont*                                       MediumFont;                                               // 0x0070(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftObjectPath                             MediumFontName;                                           // 0x0078(0x0018) (Edit, ZeroConstructor, Config, GlobalConfig)
	class UFont*                                       LargeFont;                                                // 0x0090(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftObjectPath                             LargeFontName;                                            // 0x0098(0x0018) (Edit, ZeroConstructor, Config, GlobalConfig)
	class UFont*                                       SubtitleFont;                                             // 0x00B0(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftObjectPath                             SubtitleFontName;                                         // 0x00B8(0x0018) (Edit, ZeroConstructor, Config, GlobalConfig)
	TArray<class UFont*>                               AdditionalFonts;                                          // 0x00D0(0x0010) (ZeroConstructor)
	TArray<struct FString>                             AdditionalFontNames;                                      // 0x00E0(0x0010) (Edit, ZeroConstructor, Config, GlobalConfig)
	class UClass*                                      ConsoleClass;                                             // 0x00F0(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftClassPath                              ConsoleClassName;                                         // 0x00F8(0x0018) (Edit, ZeroConstructor, Config, GlobalConfig, NoClear)
	class UClass*                                      GameViewportClientClass;                                  // 0x0110(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftClassPath                              GameViewportClientClassName;                              // 0x0118(0x0018) (Edit, ZeroConstructor, Config, GlobalConfig, NoClear)
	class UClass*                                      LocalPlayerClass;                                         // 0x0130(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftClassPath                              LocalPlayerClassName;                                     // 0x0138(0x0018) (Edit, ZeroConstructor, Config, GlobalConfig, NoClear)
	class UClass*                                      WorldSettingsClass;                                       // 0x0150(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftClassPath                              WorldSettingsClassName;                                   // 0x0158(0x0018) (Edit, ZeroConstructor, Config, GlobalConfig, NoClear)
	struct FSoftClassPath                              NavigationSystemClassName;                                // 0x0170(0x0018) (ZeroConstructor, Config, GlobalConfig, NoClear)
	class UClass*                                      NavigationSystemClass;                                    // 0x0188(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftClassPath                              NavigationSystemConfigClassName;                          // 0x0190(0x0018) (ZeroConstructor, Config, GlobalConfig, NoClear)
	class UClass*                                      NavigationSystemConfigClass;                              // 0x01A8(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftClassPath                              AvoidanceManagerClassName;                                // 0x01B0(0x0018) (ZeroConstructor, Config, GlobalConfig, NoClear)
	class UClass*                                      AvoidanceManagerClass;                                    // 0x01C8(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftClassPath                              AIControllerClassName;                                    // 0x01D0(0x0018) (ZeroConstructor, Config, GlobalConfig, NoClear)
	class UClass*                                      PhysicsCollisionHandlerClass;                             // 0x01E8(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftClassPath                              PhysicsCollisionHandlerClassName;                         // 0x01F0(0x0018) (Edit, ZeroConstructor, Config, GlobalConfig, NoClear)
	struct FSoftClassPath                              GameUserSettingsClassName;                                // 0x0208(0x0018) (Edit, ZeroConstructor, Config, GlobalConfig, NoClear)
	class UClass*                                      GameUserSettingsClass;                                    // 0x0220(0x0008) (ZeroConstructor, IsPlainOldData)
	class UGameUserSettings*                           GameUserSettings;                                         // 0x0228(0x0008) (ZeroConstructor, IsPlainOldData)
	class UClass*                                      LevelScriptActorClass;                                    // 0x0230(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftClassPath                              LevelScriptActorClassName;                                // 0x0238(0x0018) (Edit, ZeroConstructor, Config, GlobalConfig, NoClear)
	struct FSoftClassPath                              DefaultBlueprintBaseClassName;                            // 0x0250(0x0018) (Edit, ZeroConstructor, Config, GlobalConfig, NoClear)
	struct FSoftClassPath                              GameSingletonClassName;                                   // 0x0268(0x0018) (Edit, ZeroConstructor, Config, GlobalConfig, NoClear)
	class UObject*                                     GameSingleton;                                            // 0x0280(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftClassPath                              AssetManagerClassName;                                    // 0x0288(0x0018) (Edit, ZeroConstructor, Config, GlobalConfig, NoClear)
	class UAssetManager*                               AssetManager;                                             // 0x02A0(0x0008) (ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  DefaultTexture;                                           // 0x02A8(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftObjectPath                             DefaultTextureName;                                       // 0x02B0(0x0018) (ZeroConstructor, Config, GlobalConfig)
	class UTexture*                                    DefaultDiffuseTexture;                                    // 0x02C8(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftObjectPath                             DefaultDiffuseTextureName;                                // 0x02D0(0x0018) (ZeroConstructor, Config, GlobalConfig)
	class UTexture2D*                                  DefaultBSPVertexTexture;                                  // 0x02E8(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftObjectPath                             DefaultBSPVertexTextureName;                              // 0x02F0(0x0018) (ZeroConstructor, Config, GlobalConfig)
	class UTexture2D*                                  HighFrequencyNoiseTexture;                                // 0x0308(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftObjectPath                             HighFrequencyNoiseTextureName;                            // 0x0310(0x0018) (ZeroConstructor, Config, GlobalConfig)
	class UTexture2D*                                  DefaultBokehTexture;                                      // 0x0328(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftObjectPath                             DefaultBokehTextureName;                                  // 0x0330(0x0018) (ZeroConstructor, Config, GlobalConfig)
	class UTexture2D*                                  DefaultBloomKernelTexture;                                // 0x0348(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftObjectPath                             DefaultBloomKernelTextureName;                            // 0x0350(0x0018) (ZeroConstructor, Config, GlobalConfig)
	class UTexture2D*                                  DefaultFilmGrainTexture;                                  // 0x0368(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftObjectPath                             DefaultFilmGrainTextureName;                              // 0x0370(0x0018) (ZeroConstructor, Config, GlobalConfig)
	class UMaterial*                                   WireframeMaterial;                                        // 0x0388(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FString                                     WireframeMaterialName;                                    // 0x0390(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UMaterial*                                   DebugMeshMaterial;                                        // 0x03A0(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftObjectPath                             DebugMeshMaterialName;                                    // 0x03A8(0x0018) (ZeroConstructor, Config, GlobalConfig)
	class UMaterial*                                   EmissiveMeshMaterial;                                     // 0x03C0(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftObjectPath                             EmissiveMeshMaterialName;                                 // 0x03C8(0x0018) (ZeroConstructor, Config, GlobalConfig)
	class UMaterial*                                   LevelColorationLitMaterial;                               // 0x03E0(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FString                                     LevelColorationLitMaterialName;                           // 0x03E8(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UMaterial*                                   LevelColorationUnlitMaterial;                             // 0x03F8(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FString                                     LevelColorationUnlitMaterialName;                         // 0x0400(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UMaterial*                                   LightingTexelDensityMaterial;                             // 0x0410(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FString                                     LightingTexelDensityName;                                 // 0x0418(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UMaterial*                                   ShadedLevelColorationLitMaterial;                         // 0x0428(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FString                                     ShadedLevelColorationLitMaterialName;                     // 0x0430(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UMaterial*                                   ShadedLevelColorationUnlitMaterial;                       // 0x0440(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FString                                     ShadedLevelColorationUnlitMaterialName;                   // 0x0448(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UMaterial*                                   ShadedLevelCollisionUnlitMaterial;                        // 0x0458(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FString                                     ShadedLevelCollisionUnlitMaterialName;                    // 0x0460(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UMaterial*                                   RemoveSurfaceMaterial;                                    // 0x0470(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftObjectPath                             RemoveSurfaceMaterialName;                                // 0x0478(0x0018) (ZeroConstructor, Config, GlobalConfig)
	class UMaterial*                                   VertexColorMaterial;                                      // 0x0490(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FString                                     VertexColorMaterialName;                                  // 0x0498(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UMaterial*                                   VertexColorViewModeMaterial_ColorOnly;                    // 0x04A8(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FString                                     VertexColorViewModeMaterialName_ColorOnly;                // 0x04B0(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UMaterial*                                   VertexColorViewModeMaterial_AlphaAsColor;                 // 0x04C0(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FString                                     VertexColorViewModeMaterialName_AlphaAsColor;             // 0x04C8(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UMaterial*                                   VertexColorViewModeMaterial_RedOnly;                      // 0x04D8(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FString                                     VertexColorViewModeMaterialName_RedOnly;                  // 0x04E0(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UMaterial*                                   VertexColorViewModeMaterial_GreenOnly;                    // 0x04F0(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FString                                     VertexColorViewModeMaterialName_GreenOnly;                // 0x04F8(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UMaterial*                                   VertexColorViewModeMaterial_BlueOnly;                     // 0x0508(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FString                                     VertexColorViewModeMaterialName_BlueOnly;                 // 0x0510(0x0010) (ZeroConstructor, Config, GlobalConfig)
	struct FSoftObjectPath                             DebugEditorMaterialName;                                  // 0x0520(0x0018) (ZeroConstructor, Config, GlobalConfig)
	class UMaterial*                                   ConstraintLimitMaterial;                                  // 0x0538(0x0008) (ZeroConstructor, IsPlainOldData)
	class UMaterialInstanceDynamic*                    ConstraintLimitMaterialX;                                 // 0x0540(0x0008) (ZeroConstructor, IsPlainOldData)
	class UMaterialInstanceDynamic*                    ConstraintLimitMaterialXAxis;                             // 0x0548(0x0008) (ZeroConstructor, IsPlainOldData)
	class UMaterialInstanceDynamic*                    ConstraintLimitMaterialY;                                 // 0x0550(0x0008) (ZeroConstructor, IsPlainOldData)
	class UMaterialInstanceDynamic*                    ConstraintLimitMaterialYAxis;                             // 0x0558(0x0008) (ZeroConstructor, IsPlainOldData)
	class UMaterialInstanceDynamic*                    ConstraintLimitMaterialZ;                                 // 0x0560(0x0008) (ZeroConstructor, IsPlainOldData)
	class UMaterialInstanceDynamic*                    ConstraintLimitMaterialZAxis;                             // 0x0568(0x0008) (ZeroConstructor, IsPlainOldData)
	class UMaterialInstanceDynamic*                    ConstraintLimitMaterialPrismatic;                         // 0x0570(0x0008) (ZeroConstructor, IsPlainOldData)
	class UMaterial*                                   InvalidLightmapSettingsMaterial;                          // 0x0578(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftObjectPath                             InvalidLightmapSettingsMaterialName;                      // 0x0580(0x0018) (ZeroConstructor, Config, GlobalConfig)
	class UMaterial*                                   PreviewShadowsIndicatorMaterial;                          // 0x0598(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftObjectPath                             PreviewShadowsIndicatorMaterialName;                      // 0x05A0(0x0018) (Edit, ZeroConstructor, Config, GlobalConfig)
	class UMaterial*                                   ArrowMaterial;                                            // 0x05B8(0x0008) (ZeroConstructor, IsPlainOldData)
	class UMaterialInstanceDynamic*                    ArrowMaterialYellow;                                      // 0x05C0(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftObjectPath                             ArrowMaterialName;                                        // 0x05C8(0x0018) (ZeroConstructor, Config, GlobalConfig)
	struct FLinearColor                                LightingOnlyBrightness;                                   // 0x05E0(0x0010) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	TArray<struct FLinearColor>                        ShaderComplexityColors;                                   // 0x05F0(0x0010) (ZeroConstructor, Config, GlobalConfig)
	TArray<struct FLinearColor>                        QuadComplexityColors;                                     // 0x0600(0x0010) (ZeroConstructor, Config, GlobalConfig)
	TArray<struct FLinearColor>                        LightComplexityColors;                                    // 0x0610(0x0010) (ZeroConstructor, Config, GlobalConfig)
	TArray<struct FLinearColor>                        StationaryLightOverlapColors;                             // 0x0620(0x0010) (ZeroConstructor, Config, GlobalConfig)
	TArray<struct FLinearColor>                        LODColorationColors;                                      // 0x0630(0x0010) (ZeroConstructor, Config, GlobalConfig)
	TArray<struct FLinearColor>                        HLODColorationColors;                                     // 0x0640(0x0010) (ZeroConstructor, Config, GlobalConfig)
	TArray<struct FLinearColor>                        StreamingAccuracyColors;                                  // 0x0650(0x0010) (ZeroConstructor, Config, GlobalConfig)
	float                                              MaxPixelShaderAdditiveComplexityCount;                    // 0x0660(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              MaxES3PixelShaderAdditiveComplexityCount;                 // 0x0664(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              MinLightMapDensity;                                       // 0x0668(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              IdealLightMapDensity;                                     // 0x066C(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              MaxLightMapDensity;                                       // 0x0670(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	unsigned char                                      bRenderLightMapDensityGrayscale : 1;                      // 0x0674(0x0001) (Config, GlobalConfig)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0675(0x0003) MISSED OFFSET
	float                                              RenderLightMapDensityGrayscaleScale;                      // 0x0678(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              RenderLightMapDensityColorScale;                          // 0x067C(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	struct FLinearColor                                LightMapDensityVertexMappedColor;                         // 0x0680(0x0010) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	struct FLinearColor                                LightMapDensitySelectedColor;                             // 0x0690(0x0010) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	TArray<struct FStatColorMapping>                   StatColorMappings;                                        // 0x06A0(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UPhysicalMaterial*                           DefaultPhysMaterial;                                      // 0x06B0(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftObjectPath                             DefaultPhysMaterialName;                                  // 0x06B8(0x0018) (ZeroConstructor, Config, GlobalConfig)
	class UPhysicalMaterial*                           DefaultDestructiblePhysMaterial;                          // 0x06D0(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftObjectPath                             DefaultDestructiblePhysMaterialName;                      // 0x06D8(0x0018) (Edit, ZeroConstructor, Config, GlobalConfig)
	TArray<struct FGameNameRedirect>                   ActiveGameNameRedirects;                                  // 0x06F0(0x0010) (ZeroConstructor, Config)
	TArray<struct FClassRedirect>                      ActiveClassRedirects;                                     // 0x0700(0x0010) (ZeroConstructor, Config)
	TArray<struct FPluginRedirect>                     ActivePluginRedirects;                                    // 0x0710(0x0010) (ZeroConstructor, Config)
	TArray<struct FStructRedirect>                     ActiveStructRedirects;                                    // 0x0720(0x0010) (ZeroConstructor, Config)
	class UTexture2D*                                  PreIntegratedSkinBRDFTexture;                             // 0x0730(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftObjectPath                             PreIntegratedSkinBRDFTextureName;                         // 0x0738(0x0018) (ZeroConstructor, Config, GlobalConfig)
	class UTexture2D*                                  BlueNoiseTexture;                                         // 0x0750(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftObjectPath                             BlueNoiseTextureName;                                     // 0x0758(0x0018) (ZeroConstructor, Config, GlobalConfig)
	class UTexture2D*                                  MiniFontTexture;                                          // 0x0770(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftObjectPath                             MiniFontTextureName;                                      // 0x0778(0x0018) (ZeroConstructor, Config, GlobalConfig)
	class UTexture*                                    WeightMapPlaceholderTexture;                              // 0x0790(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftObjectPath                             WeightMapPlaceholderTextureName;                          // 0x0798(0x0018) (ZeroConstructor, Config, GlobalConfig)
	class UTexture2D*                                  LightMapDensityTexture;                                   // 0x07B0(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftObjectPath                             LightMapDensityTextureName;                               // 0x07B8(0x0018) (ZeroConstructor, Config, GlobalConfig)
	unsigned char                                      UnknownData02[0x8];                                       // 0x07D0(0x0008) MISSED OFFSET
	class UGameViewportClient*                         GameViewport;                                             // 0x07D8(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<struct FString>                             DeferredCommands;                                         // 0x07E0(0x0010) (ZeroConstructor)
	float                                              NearClipPlane;                                            // 0x07F0(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      bSubtitlesEnabled : 1;                                    // 0x07F4(0x0001) (Edit, Config)
	unsigned char                                      bSubtitlesForcedOff : 1;                                  // 0x07F4(0x0001) (Edit, Config)
	unsigned char                                      UnknownData03[0x3];                                       // 0x07F5(0x0003) MISSED OFFSET
	int                                                MaximumLoopIterationCount;                                // 0x07F8(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      bCanBlueprintsTickByDefault : 1;                          // 0x07FC(0x0001) (Edit, Config)
	unsigned char                                      bOptimizeAnimBlueprintMemberVariableAccess : 1;           // 0x07FC(0x0001) (Edit, Config)
	unsigned char                                      bAllowMultiThreadedAnimationUpdate : 1;                   // 0x07FC(0x0001) (Edit, Config)
	unsigned char                                      bEnableEditorPSysRealtimeLOD : 1;                         // 0x07FC(0x0001) (Config)
	unsigned char                                      UnknownData04 : 1;                                        // 0x07FC(0x0001)
	unsigned char                                      bSmoothFrameRate : 1;                                     // 0x07FC(0x0001) (Edit, Config)
	unsigned char                                      bUseFixedFrameRate : 1;                                   // 0x07FC(0x0001) (Edit, Config)
	unsigned char                                      UnknownData05[0x3];                                       // 0x07FD(0x0003) MISSED OFFSET
	float                                              FixedFrameRate;                                           // 0x0800(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	struct FFloatRange                                 SmoothedFrameRateRange;                                   // 0x0804(0x0010) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData06[0x4];                                       // 0x0814(0x0004) MISSED OFFSET
	class UEngineCustomTimeStep*                       CustomTimeStep;                                           // 0x0818(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData07[0x20];                                      // 0x0820(0x0020) MISSED OFFSET
	struct FSoftClassPath                              CustomTimeStepClassName;                                  // 0x0840(0x0018) (Edit, ZeroConstructor, Config)
	class UTimecodeProvider*                           TimecodeProvider;                                         // 0x0858(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData08[0x20];                                      // 0x0860(0x0020) MISSED OFFSET
	struct FSoftClassPath                              TimecodeProviderClassName;                                // 0x0880(0x0018) (Edit, ZeroConstructor, Config)
	bool                                               bGenerateDefaultTimecode;                                 // 0x0898(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData09[0x3];                                       // 0x0899(0x0003) MISSED OFFSET
	struct FFrameRate                                  GenerateDefaultTimecodeFrameRate;                         // 0x089C(0x0008) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              GenerateDefaultTimecodeFrameDelay;                        // 0x08A4(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      bCheckForMultiplePawnsSpawnedInAFrame : 1;                // 0x08A8(0x0001) (Config)
	unsigned char                                      UnknownData10[0x3];                                       // 0x08A9(0x0003) MISSED OFFSET
	int                                                NumPawnsAllowedToBeSpawnedInAFrame;                       // 0x08AC(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      bShouldGenerateLowQualityLightmaps : 1;                   // 0x08B0(0x0001) (Config, GlobalConfig, Deprecated)
	unsigned char                                      UnknownData11[0x3];                                       // 0x08B1(0x0003) MISSED OFFSET
	struct FColor                                      C_WorldBox;                                               // 0x08B4(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FColor                                      C_BrushWire;                                              // 0x08B8(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FColor                                      C_AddWire;                                                // 0x08BC(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FColor                                      C_SubtractWire;                                           // 0x08C0(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FColor                                      C_SemiSolidWire;                                          // 0x08C4(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FColor                                      C_NonSolidWire;                                           // 0x08C8(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FColor                                      C_WireBackground;                                         // 0x08CC(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FColor                                      C_ScaleBoxHi;                                             // 0x08D0(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FColor                                      C_VolumeCollision;                                        // 0x08D4(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FColor                                      C_BSPCollision;                                           // 0x08D8(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FColor                                      C_OrthoBackground;                                        // 0x08DC(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FColor                                      C_Volume;                                                 // 0x08E0(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FColor                                      C_BrushShape;                                             // 0x08E4(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              StreamingDistanceFactor;                                  // 0x08E8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData12[0x4];                                       // 0x08EC(0x0004) MISSED OFFSET
	struct FDirectoryPath                              GameScreenshotSaveDirectory;                              // 0x08F0(0x0010) (Edit, Config)
	bool                                               UseStaticMeshMinLODPerQualityLevels;                      // 0x0900(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	enum class ETransitionType                         TransitionType;                                           // 0x0901(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData13[0x6];                                       // 0x0902(0x0006) MISSED OFFSET
	struct FString                                     TransitionDescription;                                    // 0x0908(0x0010) (ZeroConstructor)
	struct FString                                     TransitionGameMode;                                       // 0x0918(0x0010) (ZeroConstructor)
	unsigned char                                      bAllowMatureLanguage : 1;                                 // 0x0928(0x0001) (Config)
	unsigned char                                      UnknownData14[0x3];                                       // 0x0929(0x0003) MISSED OFFSET
	float                                              CameraRotationThreshold;                                  // 0x092C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              CameraTranslationThreshold;                               // 0x0930(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              PrimitiveProbablyVisibleTime;                             // 0x0934(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              MaxOcclusionPixelsFraction;                               // 0x0938(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      bPauseOnLossOfFocus : 1;                                  // 0x093C(0x0001) (Config)
	unsigned char                                      UnknownData15[0x3];                                       // 0x093D(0x0003) MISSED OFFSET
	int                                                MaxParticleResize;                                        // 0x0940(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                MaxParticleResizeWarn;                                    // 0x0944(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	TArray<struct FDropNoteInfo>                       PendingDroppedNotes;                                      // 0x0948(0x0010) (ZeroConstructor, Transient)
	float                                              NetClientTicksPerSecond;                                  // 0x0958(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              DisplayGamma;                                             // 0x095C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              MinDesiredFrameRate;                                      // 0x0960(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	struct FLinearColor                                DefaultSelectedMaterialColor;                             // 0x0964(0x0010) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	struct FLinearColor                                SelectedMaterialColor;                                    // 0x0974(0x0010) (ZeroConstructor, Transient, IsPlainOldData)
	struct FLinearColor                                SelectionOutlineColor;                                    // 0x0984(0x0010) (ZeroConstructor, Transient, IsPlainOldData)
	struct FLinearColor                                SubduedSelectionOutlineColor;                             // 0x0994(0x0010) (ZeroConstructor, Transient, IsPlainOldData)
	struct FLinearColor                                SelectedMaterialColorOverride;                            // 0x09A4(0x0010) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bIsOverridingSelectedColor;                               // 0x09B4(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData16[0x3];                                       // 0x09B5(0x0003) MISSED OFFSET
	unsigned char                                      bEnableOnScreenDebugMessages : 1;                         // 0x09B8(0x0001) (Config, GlobalConfig)
	unsigned char                                      bEnableOnScreenDebugMessagesDisplay : 1;                  // 0x09B8(0x0001) (Transient)
	unsigned char                                      bSuppressMapWarnings : 1;                                 // 0x09B8(0x0001) (Config, GlobalConfig)
	unsigned char                                      bDisableAILogging : 1;                                    // 0x09B8(0x0001) (Config, GlobalConfig)
	unsigned char                                      UnknownData17[0x3];                                       // 0x09B9(0x0003) MISSED OFFSET
	uint32_t                                           bEnableVisualLogRecordingOnStart;                         // 0x09BC(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	int                                                ScreenSaverInhibitorSemaphore;                            // 0x09C0(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      bLockReadOnlyLevels : 1;                                  // 0x09C4(0x0001) (Transient)
	unsigned char                                      UnknownData18[0x3];                                       // 0x09C5(0x0003) MISSED OFFSET
	struct FString                                     ParticleEventManagerClassPath;                            // 0x09C8(0x0010) (ZeroConstructor, Config, GlobalConfig)
	float                                              SelectionHighlightIntensity;                              // 0x09D8(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              BSPSelectionHighlightIntensity;                           // 0x09DC(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              SelectionHighlightIntensityBillboards;                    // 0x09E0(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData19[0x294];                                     // 0x09E4(0x0294) MISSED OFFSET
	TArray<struct FNetDriverDefinition>                NetDriverDefinitions;                                     // 0x0C78(0x0010) (ZeroConstructor, Transient, Config)
	TArray<struct FString>                             ServerActors;                                             // 0x0C88(0x0010) (ZeroConstructor, Config)
	TArray<struct FString>                             RuntimeServerActors;                                      // 0x0C98(0x0010) (ZeroConstructor)
	float                                              NetErrorLogInterval;                                      // 0x0CA8(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	unsigned char                                      bStartedLoadMapMovie : 1;                                 // 0x0CAC(0x0001) (Transient)
	unsigned char                                      UnknownData20[0x1B];                                      // 0x0CAD(0x001B) MISSED OFFSET
	int                                                NextWorldContextHandle;                                   // 0x0CC8(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData21[0xDC];                                      // 0x0CCC(0x00DC) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.Engine"));
		return ptr;
	}

};


// Class Engine.ScriptViewportClient
// 0x0010 (0x0038 - 0x0028)
class UScriptViewportClient : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0028(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ScriptViewportClient"));
		return ptr;
	}

};


// Class Engine.GameViewportClient
// 0x03C8 (0x0400 - 0x0038)
class UGameViewportClient : public UScriptViewportClient
{
public:
	unsigned char                                      UnknownData00[0x68];                                      // 0x0038(0x0068) MISSED OFFSET
	class UConsole*                                    ViewportConsole;                                          // 0x00A0(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<struct FDebugDisplayProperty>               DebugProperties;                                          // 0x00A8(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData01[0x10];                                      // 0x00B8(0x0010) MISSED OFFSET
	int                                                MaxSplitscreenPlayers;                                    // 0x00C8(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData02[0xC];                                       // 0x00CC(0x000C) MISSED OFFSET
	class UWorld*                                      World;                                                    // 0x00D8(0x0008) (ZeroConstructor, IsPlainOldData)
	class UGameInstance*                               GameInstance;                                             // 0x00E0(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x318];                                     // 0x00E8(0x0318) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.GameViewportClient"));
		return ptr;
	}


	void SSSwapControllers();//Offset:Discovery.exe+0x191D9E0
	void ShowTitleSafeArea();//Offset:Discovery.exe+0x14618E0
	void SetConsoleTarget(int PlayerIndex);//Offset:Discovery.exe+0x571F2F0
};


// Class Engine.Subsystem
// 0x0008 (0x0030 - 0x0028)
class USubsystem : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.Subsystem"));
		return ptr;
	}

};


// Class Engine.WorldSubsystem
// 0x0000 (0x0030 - 0x0030)
class UWorldSubsystem : public USubsystem
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.WorldSubsystem"));
		return ptr;
	}

};


// Class Engine.Player
// 0x0020 (0x0048 - 0x0028)
class UPlayer : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	class APlayerController*                           PlayerController;                                         // 0x0030(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	int                                                CurrentNetSpeed;                                          // 0x0038(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                ConfiguredInternetSpeed;                                  // 0x003C(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	int                                                ConfiguredLanSpeed;                                       // 0x0040(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0044(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.Player"));
		return ptr;
	}

};


// Class Engine.LocalPlayer
// 0x0268 (0x02B0 - 0x0048)
class ULocalPlayer : public UPlayer
{
public:
	unsigned char                                      UnknownData00[0x30];                                      // 0x0048(0x0030) MISSED OFFSET
	class UGameViewportClient*                         ViewportClient;                                           // 0x0078(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x38];                                      // 0x0080(0x0038) MISSED OFFSET
	TEnumAsByte<EAspectRatioAxisConstraint>            AspectRatioAxisConstraint;                                // 0x00B8(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x00B9(0x0007) MISSED OFFSET
	class UClass*                                      PendingLevelPlayerControllerClass;                        // 0x00C0(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bSentSplitJoin : 1;                                       // 0x00C8(0x0001) (Edit, Transient, EditConst)
	unsigned char                                      UnknownData03[0x3];                                       // 0x00C9(0x0003) MISSED OFFSET
	float                                              ForegroundFov;                                            // 0x00CC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bForegroundStencilEnabled;                                // 0x00D0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bFixedCullFOV;                                            // 0x00D1(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x2];                                       // 0x00D2(0x0002) MISSED OFFSET
	float                                              FixedCullBaseFOV;                                         // 0x00D4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              FixedCullMaxFOV;                                          // 0x00D8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x14];                                      // 0x00DC(0x0014) MISSED OFFSET
	int                                                ControllerId;                                             // 0x00F0(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x1BC];                                     // 0x00F4(0x01BC) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.LocalPlayer"));
		return ptr;
	}

};


// Class Engine.Info
// 0x0000 (0x02C8 - 0x02C8)
class AInfo : public AActor
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.Info"));
		return ptr;
	}

};


// Class Engine.PlayerState
// 0x0118 (0x03E0 - 0x02C8)
class APlayerState : public AInfo
{
public:
	float                                              Score;                                                    // 0x02C8(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	int                                                PlayerId;                                                 // 0x02CC(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      CompressedPing;                                           // 0x02D0(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x02D1(0x0001) MISSED OFFSET
	unsigned char                                      bShouldUpdateReplicatedPing : 1;                          // 0x02D2(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      bIsSpectator : 1;                                         // 0x02D2(0x0001) (BlueprintVisible, BlueprintReadOnly, Net)
	unsigned char                                      bOnlySpectator : 1;                                       // 0x02D2(0x0001) (Net)
	unsigned char                                      bIsABot : 1;                                              // 0x02D2(0x0001) (BlueprintVisible, BlueprintReadOnly, Net)
	unsigned char                                      UnknownData01 : 1;                                        // 0x02D2(0x0001)
	unsigned char                                      bIsInactive : 1;                                          // 0x02D2(0x0001) (Net)
	unsigned char                                      bFromPreviousLevel : 1;                                   // 0x02D2(0x0001) (Net)
	unsigned char                                      UnknownData02[0x1];                                       // 0x02D3(0x0001) MISSED OFFSET
	int                                                StartTime;                                                // 0x02D4(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	class UClass*                                      EngineMessageClass;                                       // 0x02D8(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x8];                                       // 0x02E0(0x0008) MISSED OFFSET
	struct FString                                     SavedNetworkAddress;                                      // 0x02E8(0x0010) (ZeroConstructor)
	struct FUniqueNetIdRepl                            UniqueId;                                                 // 0x02F8(0x0030) (Net)
	unsigned char                                      UnknownData04[0x8];                                       // 0x0328(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnPawnSet;                                                // 0x0330(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class APawn*                                       PawnPrivate;                                              // 0x0340(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x78];                                      // 0x0348(0x0078) MISSED OFFSET
	struct FString                                     PlayerNamePrivate;                                        // 0x03C0(0x0010) (Net, ZeroConstructor)
	unsigned char                                      UnknownData06[0x10];                                      // 0x03D0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.PlayerState"));
		return ptr;
	}


	void ReceiveOverrideWith(class APlayerState* OldPlayerState);//Offset:Discovery.exe+0x327F8B0
	void ReceiveCopyProperties(class APlayerState* NewPlayerState);//Offset:Discovery.exe+0x327F8B0
	void OnRep_UniqueId();//Offset:Discovery.exe+0x157BE70
	void OnRep_Score();//Offset:Discovery.exe+0x19BFD70
	void OnRep_PlayerName();//Offset:Discovery.exe+0x1462470
	void OnRep_PlayerId();//Offset:Discovery.exe+0x14624B0
	void OnRep_bIsInactive();//Offset:Discovery.exe+0x1462490
	void OnPawnPrivateDestroyed(class AActor* InActor);//Offset:Discovery.exe+0x58385A0
	bool IsOnlyASpectator();//Offset:Discovery.exe+0x5838460
	struct FString GetPlayerName();//Offset:Discovery.exe+0x58384C0
	class APlayerController* GetPlayerController();//Offset:Discovery.exe+0x5838540
	float GetPingInMilliseconds();//Offset:Discovery.exe+0x5838490
	class APawn* GetPawn();//Offset:Discovery.exe+0x5838570
	struct FUniqueNetIdRepl BP_GetUniqueId();//Offset:Discovery.exe+0x5838310
};


// Class Engine.Commandlet
// 0x0058 (0x0080 - 0x0028)
class UCommandlet : public UObject
{
public:
	struct FString                                     HelpDescription;                                          // 0x0028(0x0010) (ZeroConstructor)
	struct FString                                     HelpUsage;                                                // 0x0038(0x0010) (ZeroConstructor)
	struct FString                                     HelpWebLink;                                              // 0x0048(0x0010) (ZeroConstructor)
	TArray<struct FString>                             HelpParamNames;                                           // 0x0058(0x0010) (ZeroConstructor)
	TArray<struct FString>                             HelpParamDescriptions;                                    // 0x0068(0x0010) (ZeroConstructor)
	unsigned char                                      IsServer : 1;                                             // 0x0078(0x0001)
	unsigned char                                      IsClient : 1;                                             // 0x0078(0x0001)
	unsigned char                                      IsEditor : 1;                                             // 0x0078(0x0001)
	unsigned char                                      LogToConsole : 1;                                         // 0x0078(0x0001)
	unsigned char                                      ShowErrorCount : 1;                                       // 0x0078(0x0001)
	unsigned char                                      ShowProgress : 1;                                         // 0x0078(0x0001)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0079(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.Commandlet"));
		return ptr;
	}

};


// Class Engine.NetDriver
// 0x0740 (0x0768 - 0x0028)
class UNetDriver : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	struct FString                                     NetConnectionClassName;                                   // 0x0030(0x0010) (ZeroConstructor, Config)
	struct FString                                     ReplicationDriverClassName;                               // 0x0040(0x0010) (ZeroConstructor, Config)
	int                                                MaxDownloadSize;                                          // 0x0050(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      bClampListenServerTickRate : 1;                           // 0x0054(0x0001) (Config)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0055(0x0003) MISSED OFFSET
	int                                                NetServerMaxTickRate;                                     // 0x0058(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                MaxNetTickRate;                                           // 0x005C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                MaxInternetClientRate;                                    // 0x0060(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                MaxClientRate;                                            // 0x0064(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              ServerTravelPause;                                        // 0x0068(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              SpawnPrioritySeconds;                                     // 0x006C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              RelevantTimeout;                                          // 0x0070(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              KeepAliveTime;                                            // 0x0074(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              InitialConnectTimeout;                                    // 0x0078(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              ConnectionTimeout;                                        // 0x007C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              TimeoutMultiplierForUnoptimizedBuilds;                    // 0x0080(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bNoTimeouts;                                              // 0x0084(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bNeverApplyNetworkEmulationSettings;                      // 0x0085(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x0086(0x0002) MISSED OFFSET
	class UNetConnection*                              ServerConnection;                                         // 0x0088(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<class UNetConnection*>                      ClientConnections;                                        // 0x0090(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData03[0x60];                                      // 0x00A0(0x0060) MISSED OFFSET
	int                                                RecentlyDisconnectedTrackingTime;                         // 0x0100(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData04[0x3C];                                      // 0x0104(0x003C) MISSED OFFSET
	class UWorld*                                      World;                                                    // 0x0140(0x0008) (ZeroConstructor, IsPlainOldData)
	class UPackage*                                    WorldPackage;                                             // 0x0148(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x20];                                      // 0x0150(0x0020) MISSED OFFSET
	class UClass*                                      NetConnectionClass;                                       // 0x0170(0x0008) (ZeroConstructor, IsPlainOldData)
	class UClass*                                      ReplicationDriverClass;                                   // 0x0178(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x10];                                      // 0x0180(0x0010) MISSED OFFSET
	struct FName                                       NetDriverName;                                            // 0x0190(0x0008) (ZeroConstructor, Config, IsPlainOldData)
	TArray<struct FChannelDefinition>                  ChannelDefinitions;                                       // 0x0198(0x0010) (ZeroConstructor, Config)
	TMap<struct FName, struct FChannelDefinition>      ChannelDefinitionMap;                                     // 0x01A8(0x0050)
	TArray<class UChannel*>                            ActorChannelPool;                                         // 0x01F8(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData07[0x4F0];                                     // 0x0208(0x04F0) MISSED OFFSET
	class UReplicationDriver*                          ReplicationDriver;                                        // 0x06F8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData08[0x68];                                      // 0x0700(0x0068) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.NetDriver"));
		return ptr;
	}

};


// Class Engine.DynamicSubsystem
// 0x0000 (0x0030 - 0x0030)
class UDynamicSubsystem : public USubsystem
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.DynamicSubsystem"));
		return ptr;
	}

};


// Class Engine.EngineSubsystem
// 0x0000 (0x0030 - 0x0030)
class UEngineSubsystem : public UDynamicSubsystem
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.EngineSubsystem"));
		return ptr;
	}

};


// Class Engine.GameInstance
// 0x0180 (0x01A8 - 0x0028)
class UGameInstance : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0028(0x0010) MISSED OFFSET
	TArray<class ULocalPlayer*>                        LocalPlayers;                                             // 0x0038(0x0010) (ZeroConstructor)
	class UOnlineSession*                              OnlineSession;                                            // 0x0048(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<class UObject*>                             ReferencedObjects;                                        // 0x0050(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData01[0x18];                                      // 0x0060(0x0018) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnPawnControllerChangedDelegates;                         // 0x0078(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData02[0x120];                                     // 0x0088(0x0120) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.GameInstance"));
		return ptr;
	}


	void ReceiveShutdown();//Offset:Discovery.exe+0x327F8B0
	void ReceiveInit();//Offset:Discovery.exe+0x327F8B0
	void HandleTravelError(TEnumAsByte<ETravelFailure> FailureType);//Offset:Discovery.exe+0x327F8B0
	void HandleNetworkError(TEnumAsByte<ENetworkFailure> FailureType, bool bIsServer);//Offset:Discovery.exe+0x327F8B0
	void DebugRemovePlayer(int ControllerId);//Offset:Discovery.exe+0x5700E50
	void DebugCreatePlayer(int ControllerId);//Offset:Discovery.exe+0x1EE8070
};


// Class Engine.GameInstanceSubsystem
// 0x0000 (0x0030 - 0x0030)
class UGameInstanceSubsystem : public USubsystem
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.GameInstanceSubsystem"));
		return ptr;
	}

};


// Class Engine.LocalPlayerSubsystem
// 0x0000 (0x0030 - 0x0030)
class ULocalPlayerSubsystem : public USubsystem
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.LocalPlayerSubsystem"));
		return ptr;
	}

};


// Class Engine.TickableWorldSubsystem
// 0x0010 (0x0040 - 0x0030)
class UTickableWorldSubsystem : public UWorldSubsystem
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0030(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.TickableWorldSubsystem"));
		return ptr;
	}

};


// Class Engine.BlueprintAsyncActionBase
// 0x0008 (0x0030 - 0x0028)
class UBlueprintAsyncActionBase : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.BlueprintAsyncActionBase"));
		return ptr;
	}


	void Activate();//Offset:Discovery.exe+0x191D9E0
};


// Class Engine.CancellableAsyncAction
// 0x0000 (0x0030 - 0x0030)
class UCancellableAsyncAction : public UBlueprintAsyncActionBase
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.CancellableAsyncAction"));
		return ptr;
	}


	bool IsActive();//Offset:Discovery.exe+0x1DC1420
	void Cancel();//Offset:Discovery.exe+0x11B97D0
};


// Class Engine.HUD
// 0x00F0 (0x03B8 - 0x02C8)
class AHUD : public AActor
{
public:
	class APlayerController*                           PlayerOwner;                                              // 0x02C8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bLostFocusPaused : 1;                                     // 0x02D0(0x0001) (BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bShowHUD : 1;                                             // 0x02D0(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bShowDebugInfo : 1;                                       // 0x02D0(0x0001) (BlueprintVisible)
	unsigned char                                      UnknownData00[0x3];                                       // 0x02D1(0x0003) MISSED OFFSET
	int                                                CurrentTargetIndex;                                       // 0x02D4(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      bShowHitBoxDebugInfo : 1;                                 // 0x02D8(0x0001) (BlueprintVisible)
	unsigned char                                      bShowOverlays : 1;                                        // 0x02D8(0x0001) (BlueprintVisible)
	unsigned char                                      bEnableDebugTextShadow : 1;                               // 0x02D8(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData01[0x7];                                       // 0x02D9(0x0007) MISSED OFFSET
	TArray<class AActor*>                              PostRenderedActors;                                       // 0x02E0(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData02[0x8];                                       // 0x02F0(0x0008) MISSED OFFSET
	TArray<struct FName>                               DebugDisplay;                                             // 0x02F8(0x0010) (ZeroConstructor, Config, GlobalConfig)
	TArray<struct FName>                               ToggledDebugCategories;                                   // 0x0308(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UCanvas*                                     Canvas;                                                   // 0x0318(0x0008) (ZeroConstructor, IsPlainOldData)
	class UCanvas*                                     DebugCanvas;                                              // 0x0320(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<struct FDebugTextInfo>                      DebugTextList;                                            // 0x0328(0x0010) (ZeroConstructor)
	class UClass*                                      ShowDebugTargetDesiredClass;                              // 0x0338(0x0008) (ZeroConstructor, IsPlainOldData)
	class AActor*                                      ShowDebugTargetActor;                                     // 0x0340(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x70];                                      // 0x0348(0x0070) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.HUD"));
		return ptr;
	}


	void ShowHUD();//Offset:Discovery.exe+0x19BFD70
	void ShowDebugToggleSubCategory(const struct FName& Category);//Offset:Discovery.exe+0x5723A60
	void ShowDebugForReticleTargetToggle(class UClass* DesiredClass);//Offset:Discovery.exe+0x57239C0
	void ShowDebug(const struct FName& DebugType);//Offset:Discovery.exe+0x5723B00
	void RemoveDebugText(class AActor* SrcActor, bool bLeaveDurationText);//Offset:Discovery.exe+0x57233D0
	void RemoveAllDebugStrings();//Offset:Discovery.exe+0x57234C0
	void ReceiveHitBoxRelease(const struct FName& BoxName);//Offset:Discovery.exe+0x327F8B0
	void ReceiveHitBoxEndCursorOver(const struct FName& BoxName);//Offset:Discovery.exe+0x327F8B0
	void ReceiveHitBoxClick(const struct FName& BoxName);//Offset:Discovery.exe+0x327F8B0
	void ReceiveHitBoxBeginCursorOver(const struct FName& BoxName);//Offset:Discovery.exe+0x327F8B0
	void ReceiveDrawHUD(int SizeX, int SizeY);//Offset:Discovery.exe+0x327F8B0
	struct FVector Project(const struct FVector& Location, bool bClampToZeroPlane);//Offset:Discovery.exe+0x5721650
	void PreviousDebugTarget();//Offset:Discovery.exe+0x5721020
	void NextDebugTarget();//Offset:Discovery.exe+0x200A820
	void GetTextSize(const struct FString& Text, class UFont* Font, float Scale, float* OutWidth, float* OutHeight);//Offset:Discovery.exe+0x57231C0
	class APlayerController* GetOwningPlayerController();//Offset:Discovery.exe+0x2D56CF0
	class APawn* GetOwningPawn();//Offset:Discovery.exe+0x5721040
	void GetActorsInSelectionRectangle(class UClass* ClassFilter, const struct FVector2D& FirstPoint, const struct FVector2D& SecondPoint, bool bIncludeNonCollidingComponents, bool bActorMustBeFullyEnclosed, TArray<class AActor*>* OutActors);//Offset:Discovery.exe+0x5721250
	void DrawTextureSimple(class UTexture* Texture, float ScreenX, float ScreenY, float Scale, bool bScalePosition);//Offset:Discovery.exe+0x5722330
	void DrawTexture(class UTexture* Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, const struct FLinearColor& TintColor, TEnumAsByte<EBlendMode> BlendMode, float Scale, bool bScalePosition, float Rotation, const struct FVector2D& RotPivot);//Offset:Discovery.exe+0x5722500
	void DrawText(const struct FString& Text, const struct FLinearColor& TextColor, float ScreenX, float ScreenY, class UFont* Font, float Scale, bool bScalePosition);//Offset:Discovery.exe+0x5722F20
	void DrawRect(const struct FLinearColor& RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH);//Offset:Discovery.exe+0x5722B10
	void DrawMaterialTriangle(class UMaterialInterface* Material, const struct FVector2D& V0_Pos, const struct FVector2D& V1_Pos, const struct FVector2D& V2_Pos, const struct FVector2D& V0_UV, const struct FVector2D& V1_UV, const struct FVector2D& V2_UV, const struct FLinearColor& V0_Color, const struct FLinearColor& V1_Color, const struct FLinearColor& V2_Color);//Offset:Discovery.exe+0x5721760
	void DrawMaterialSimple(class UMaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, bool bScalePosition);//Offset:Discovery.exe+0x5721B60
	void DrawMaterial(class UMaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale, bool bScalePosition, float Rotation, const struct FVector2D& RotPivot);//Offset:Discovery.exe+0x5721DE0
	void DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, const struct FLinearColor& LineColor, float LineThickness);//Offset:Discovery.exe+0x5722CF0
	void Deproject(float ScreenX, float ScreenY, struct FVector* WorldPosition, struct FVector* WorldDirection);//Offset:Discovery.exe+0x57214C0
	void AddHitBox(const struct FVector2D& Position, const struct FVector2D& Size, const struct FName& InName, bool bConsumesInput, int Priority);//Offset:Discovery.exe+0x5721070
	void AddDebugText(const struct FString& DebugText, class AActor* SrcActor, float Duration, const struct FVector& Offset, const struct FVector& DesiredOffset, const struct FColor& TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, class UFont* InFont, float FontScale, bool bDrawShadow);//Offset:Discovery.exe+0x57234E0
};


// Class Engine.DefaultPawn
// 0x0028 (0x0370 - 0x0348)
class ADefaultPawn : public APawn
{
public:
	float                                              BaseTurnRate;                                             // 0x0348(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              BaseLookUpRate;                                           // 0x034C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	class UPawnMovementComponent*                      MovementComponent;                                        // 0x0350(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class USphereComponent*                            CollisionComponent;                                       // 0x0358(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UStaticMeshComponent*                        MeshComponent;                                            // 0x0360(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      bAddDefaultMovementBindings : 1;                          // 0x0368(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0369(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.DefaultPawn"));
		return ptr;
	}


	void TurnAtRate(float Rate);//Offset:Discovery.exe+0x56EAF90
	void MoveUp_World(float Val);//Offset:Discovery.exe+0x56EB030
	void MoveRight(float Val);//Offset:Discovery.exe+0x56EB0D0
	void MoveForward(float Val);//Offset:Discovery.exe+0x56EB170
	void LookUpAtRate(float Rate);//Offset:Discovery.exe+0x56EAEF0
};


// Class Engine.AnimNotify
// 0x0010 (0x0038 - 0x0028)
class UAnimNotify : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0028(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.AnimNotify"));
		return ptr;
	}


	bool Received_Notify(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, const struct FAnimNotifyEventReference& EventReference);//Offset:Discovery.exe+0x327F8B0
	struct FString GetNotifyName();//Offset:Discovery.exe+0x1B15510
	float GetDefaultTriggerWeightThreshold();//Offset:Discovery.exe+0x568FCE0
};


// Class Engine.AnimNotifyState
// 0x0008 (0x0030 - 0x0028)
class UAnimNotifyState : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.AnimNotifyState"));
		return ptr;
	}


	bool Received_NotifyTick(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, float FrameDeltaTime, const struct FAnimNotifyEventReference& EventReference);//Offset:Discovery.exe+0x327F8B0
	bool Received_NotifyEnd(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, const struct FAnimNotifyEventReference& EventReference);//Offset:Discovery.exe+0x327F8B0
	bool Received_NotifyBegin(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, float TotalDuration, const struct FAnimNotifyEventReference& EventReference);//Offset:Discovery.exe+0x327F8B0
	struct FString GetNotifyName();//Offset:Discovery.exe+0x1B15510
	float GetDefaultTriggerWeightThreshold();//Offset:Discovery.exe+0x568FCE0
};


// Class Engine.BlueprintCore
// 0x0028 (0x0050 - 0x0028)
class UBlueprintCore : public UObject
{
public:
	class UClass*                                      SkeletonGeneratedClass;                                   // 0x0028(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UClass*                                      GeneratedClass;                                           // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData)
	bool                                               bLegacyNeedToPurgeSkelRefs;                               // 0x0038(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0039(0x0003) MISSED OFFSET
	struct FGuid                                       BlueprintGuid;                                            // 0x003C(0x0010) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x004C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.BlueprintCore"));
		return ptr;
	}

};


// Class Engine.Blueprint
// 0x0050 (0x00A0 - 0x0050)
class UBlueprint : public UBlueprintCore
{
public:
	class UClass*                                      ParentClass;                                              // 0x0050(0x0008) (ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EBlueprintType>                        BlueprintType;                                            // 0x0058(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bRecompileOnLoad : 1;                                     // 0x0059(0x0001) (Config)
	unsigned char                                      bHasBeenRegenerated : 1;                                  // 0x0059(0x0001) (Transient)
	unsigned char                                      bIsRegeneratingOnLoad : 1;                                // 0x0059(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x2];                                       // 0x005A(0x0002) MISSED OFFSET
	int                                                BlueprintSystemVersion;                                   // 0x005C(0x0004) (ZeroConstructor, IsPlainOldData)
	class USimpleConstructionScript*                   SimpleConstructionScript;                                 // 0x0060(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<class UActorComponent*>                     ComponentTemplates;                                       // 0x0068(0x0010) (ExportObject, ZeroConstructor)
	TArray<class UTimelineTemplate*>                   Timelines;                                                // 0x0078(0x0010) (ZeroConstructor)
	TArray<struct FBPComponentClassOverride>           ComponentClassOverrides;                                  // 0x0088(0x0010) (ZeroConstructor)
	class UInheritableComponentHandler*                InheritableComponentHandler;                              // 0x0098(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.Blueprint"));
		return ptr;
	}

};


// Class Engine.DataAsset
// 0x0008 (0x0030 - 0x0028)
class UDataAsset : public UObject
{
public:
	class UClass*                                      NativeClass;                                              // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.DataAsset"));
		return ptr;
	}

};


// Class Engine.SceneComponent
// 0x0218 (0x02D0 - 0x00B8)
class USceneComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x00B8(0x0008) MISSED OFFSET
	TWeakObjectPtr<class APhysicsVolume>               PhysicsVolume;                                            // 0x00C0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class USceneComponent*                             AttachParent;                                             // 0x00C8(0x0008) (ExportObject, Net, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FName                                       AttachSocketName;                                         // 0x00D0(0x0008) (ZeroConstructor, IsPlainOldData)
	uint16_t                                           AttachSocketIndex;                                        // 0x00D8(0x0002) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x6];                                       // 0x00DA(0x0006) MISSED OFFSET
	TArray<class USceneComponent*>                     AttachChildren;                                           // 0x00E0(0x0010) (ExportObject, Net, ZeroConstructor, Transient)
	TArray<class USceneComponent*>                     ClientAttachedChildren;                                   // 0x00F0(0x0010) (ExportObject, ZeroConstructor, Transient)
	unsigned char                                      UnknownData02[0x58];                                      // 0x0100(0x0058) MISSED OFFSET
	struct FVector                                     RelativeLocation;                                         // 0x0158(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	struct FRotator                                    RelativeRotation;                                         // 0x0170(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	struct FVector                                     RelativeScale3D;                                          // 0x0188(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	struct FVector                                     ComponentVelocity;                                        // 0x01A0(0x0018) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bComponentToWorldUpdated : 1;                             // 0x01B8(0x0001) (Transient)
	unsigned char                                      UnknownData03 : 1;                                        // 0x01B8(0x0001)
	unsigned char                                      bAbsoluteLocation : 1;                                    // 0x01B8(0x0001) (Edit, BlueprintVisible, Net)
	unsigned char                                      bAbsoluteRotation : 1;                                    // 0x01B8(0x0001) (Edit, BlueprintVisible, Net)
	unsigned char                                      bAbsoluteScale : 1;                                       // 0x01B8(0x0001) (Edit, BlueprintVisible, Net)
	unsigned char                                      bVisible : 1;                                             // 0x01B8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, Net)
	unsigned char                                      bShouldBeAttached : 1;                                    // 0x01B8(0x0001) (Net, Transient)
	unsigned char                                      bShouldSnapLocationWhenAttached : 1;                      // 0x01B8(0x0001) (Net, Transient)
	unsigned char                                      bShouldSnapRotationWhenAttached : 1;                      // 0x01B9(0x0001) (Net, Transient)
	unsigned char                                      bShouldSkipChildTransformUpdate : 1;                      // 0x01B9(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bShouldUpdatePhysicsVolume : 1;                           // 0x01B9(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bHiddenInGame : 1;                                        // 0x01B9(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bBoundsChangeTriggersStreamingDataRebuild : 1;            // 0x01B9(0x0001)
	unsigned char                                      bUseAttachParentBound : 1;                                // 0x01B9(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bComputeFastLocalBounds : 1;                              // 0x01B9(0x0001)
	unsigned char                                      bComputeBoundsOnceForGame : 1;                            // 0x01B9(0x0001)
	unsigned char                                      bComputedBoundsOnceForGame : 1;                           // 0x01BA(0x0001)
	TEnumAsByte<EComponentMobility>                    Mobility;                                                 // 0x01BB(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EDetailMode>                           DetailMode;                                               // 0x01BC(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FScriptMulticastDelegate                    PhysicsVolumeChangedDelegate;                             // 0x01BD(0x0010) (InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData04[0x112];                                     // 0x01BE(0x0112) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SceneComponent"));
		return ptr;
	}


	void ToggleVisibility(bool bPropagateToChildren);//Offset:Discovery.exe+0x5858F00
	void SetWorldScale3D(const struct FVector& NewScale);//Offset:Discovery.exe+0x585B030
	void SetVisibility(bool bNewVisibility, bool bPropagateToChildren);//Offset:Discovery.exe+0x5858FD0
	void SetShouldUpdatePhysicsVolume(bool bInShouldUpdatePhysicsVolume);//Offset:Discovery.exe+0x585CE00
	void SetShouldSkipChildTransformUpdate(bool bInShouldSkipChildTransformUpdate);//Offset:Discovery.exe+0x585CED0
	void SetRelativeScale3D(const struct FVector& NewScale3D);//Offset:Discovery.exe+0x585C370
	void SetMobility(TEnumAsByte<EComponentMobility> NewMobility);//Offset:Discovery.exe+0x58585D0
	void SetHiddenInGame(bool NewHidden, bool bPropagateToChildren);//Offset:Discovery.exe+0x5858E00
	void SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale);//Offset:Discovery.exe+0x5858980
	void ResetRelativeTransform();//Offset:Discovery.exe+0x585C410
	void OnRep_Visibility(bool OldValue);//Offset:Discovery.exe+0x585CD00
	void OnRep_Transform();//Offset:Discovery.exe+0x585CDE0
	void OnRep_AttachSocketIndex();//Offset:Discovery.exe+0x585CCE0
	void OnRep_AttachParent();//Offset:Discovery.exe+0x585CDC0
	void OnRep_AttachChildren();//Offset:Discovery.exe+0x585CDA0
	void K2_SetWorldTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);//Offset:Discovery.exe+0x585AD50
	void K2_SetWorldRotation(const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);//Offset:Discovery.exe+0x585B0D0
	void K2_SetWorldLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);//Offset:Discovery.exe+0x5858670
	void K2_SetWorldLocation(const struct FVector& NewLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);//Offset:Discovery.exe+0x585B370
	void K2_SetRelativeTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);//Offset:Discovery.exe+0x585C4C0
	void K2_SetRelativeRotation(const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);//Offset:Discovery.exe+0x585C7A0
	void K2_SetRelativeLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);//Offset:Discovery.exe+0x5858AC0
	void K2_SetRelativeLocation(const struct FVector& NewLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);//Offset:Discovery.exe+0x585CA40
	struct FTransform K2_GetComponentToWorld();//Offset:Discovery.exe+0x585A0A0
	struct FVector K2_GetComponentScale();//Offset:Discovery.exe+0x585A130
	struct FRotator K2_GetComponentRotation();//Offset:Discovery.exe+0x585A190
	struct FVector K2_GetComponentLocation();//Offset:Discovery.exe+0x585A1F0
	void K2_DetachFromComponent(enum class EDetachmentRule LocationRule, enum class EDetachmentRule RotationRule, enum class EDetachmentRule ScaleRule, bool bCallModify);//Offset:Discovery.exe+0x5859610
	bool K2_AttachToComponent(class USceneComponent* Parent, const struct FName& SocketName, enum class EAttachmentRule LocationRule, enum class EAttachmentRule RotationRule, enum class EAttachmentRule ScaleRule, bool bWeldSimulatedBodies);//Offset:Discovery.exe+0x5859880
	bool K2_AttachTo(class USceneComponent* InParent, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachType, bool bWeldSimulatedBodies);//Offset:Discovery.exe+0x5859AA0
	void K2_AddWorldTransformKeepScale(const struct FTransform& DeltaTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);//Offset:Discovery.exe+0x585A250
	void K2_AddWorldTransform(const struct FTransform& DeltaTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);//Offset:Discovery.exe+0x585A530
	void K2_AddWorldRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);//Offset:Discovery.exe+0x585A810
	void K2_AddWorldOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);//Offset:Discovery.exe+0x585AAB0
	void K2_AddRelativeRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);//Offset:Discovery.exe+0x585BE30
	void K2_AddRelativeLocation(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);//Offset:Discovery.exe+0x585C0D0
	void K2_AddLocalTransform(const struct FTransform& DeltaTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);//Offset:Discovery.exe+0x585B610
	void K2_AddLocalRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);//Offset:Discovery.exe+0x585B8F0
	void K2_AddLocalOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);//Offset:Discovery.exe+0x585BB90
	bool IsVisible();//Offset:Discovery.exe+0x58590D0
	bool IsSimulatingPhysics(const struct FName& BoneName);//Offset:Discovery.exe+0x5859F40
	bool IsAnySimulatingPhysics();//Offset:Discovery.exe+0x5859F10
	struct FVector GetUpVector();//Offset:Discovery.exe+0x585A040
	struct FTransform GetSocketTransform(const struct FName& InSocketName, TEnumAsByte<ERelativeTransformSpace> TransformSpace);//Offset:Discovery.exe+0x5859440
	struct FRotator GetSocketRotation(const struct FName& InSocketName);//Offset:Discovery.exe+0x58592C0
	struct FQuat GetSocketQuaternion(const struct FName& InSocketName);//Offset:Discovery.exe+0x5859200
	struct FVector GetSocketLocation(const struct FName& InSocketName);//Offset:Discovery.exe+0x5859380
	bool GetShouldUpdatePhysicsVolume();//Offset:Discovery.exe+0x585CEA0
	bool GetShouldSkipChildTransformUpdate();//Offset:Discovery.exe+0x585CF70
	struct FVector GetRightVector();//Offset:Discovery.exe+0x5859FE0
	struct FTransform GetRelativeTransform();//Offset:Discovery.exe+0x585C430
	class APhysicsVolume* GetPhysicsVolume();//Offset:Discovery.exe+0x5858DD0
	void GetParentComponents(TArray<class USceneComponent*>* Parents);//Offset:Discovery.exe+0x5859E10
	int GetNumChildrenComponents();//Offset:Discovery.exe+0x5859DE0
	struct FVector GetForwardVector();//Offset:Discovery.exe+0x5820420
	struct FVector GetComponentVelocity();//Offset:Discovery.exe+0x5859100
	void GetChildrenComponents(bool bIncludeAllDescendants, TArray<class USceneComponent*>* Children);//Offset:Discovery.exe+0x5859C30
	class USceneComponent* GetChildComponent(int ChildIndex);//Offset:Discovery.exe+0x5859D40
	struct FName GetAttachSocketName();//Offset:Discovery.exe+0x5859EC0
	class USceneComponent* GetAttachParent();//Offset:Discovery.exe+0x5859EF0
	TArray<struct FName> GetAllSocketNames();//Offset:Discovery.exe+0x5859590
	bool DoesSocketExist(const struct FName& InSocketName);//Offset:Discovery.exe+0x5859160
	void DetachFromParent(bool bMaintainWorldPosition, bool bCallModify);//Offset:Discovery.exe+0x5859790
};


// Class Engine.PrimitiveComponent
// 0x02C0 (0x0590 - 0x02D0)
class UPrimitiveComponent : public USceneComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x02D0(0x0010) MISSED OFFSET
	float                                              MinDrawDistance;                                          // 0x02E0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              LDMaxDrawDistance;                                        // 0x02E4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              CachedMaxDrawDistance;                                    // 0x02E8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              SizeCullScaleFactor;                                      // 0x02EC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ESceneDepthPriorityGroup>              DepthPriorityGroup;                                       // 0x02F0(0x0001) (ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ESceneDepthPriorityGroup>              ViewOwnerDepthPriorityGroup;                              // 0x02F1(0x0001) (ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EIndirectLightingCacheQuality>         IndirectLightingCacheQuality;                             // 0x02F2(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	enum class ELightmapType                           LightmapType;                                             // 0x02F3(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bIsValidTextureStreamingBuiltData : 1;                    // 0x02F4(0x0001)
	unsigned char                                      bNeverDistanceCull : 1;                                   // 0x02F4(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData01 : 5;                                        // 0x02F4(0x0001)
	unsigned char                                      bAlwaysCreatePhysicsState : 1;                            // 0x02F4(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bGenerateOverlapEvents : 1;                               // 0x02F5(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bDontUpdateOverlapsWhenMoving : 1;                        // 0x02F5(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x22];                                      // 0x02F6(0x0022) MISSED OFFSET
	unsigned char                                      bMultiBodyOverlap : 1;                                    // 0x0318(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bTraceComplexOnMove : 1;                                  // 0x0318(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bReturnMaterialOnMove : 1;                                // 0x0318(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUseViewOwnerDepthPriorityGroup : 1;                      // 0x0318(0x0001)
	unsigned char                                      bAllowCullDistanceVolume : 1;                             // 0x0318(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bHasMotionBlurVelocityMeshes : 1;                         // 0x0318(0x0001)
	unsigned char                                      bVisibleInReflectionCaptures : 1;                         // 0x0318(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bVisibleInRealTimeSkyCaptures : 1;                        // 0x0318(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bVisibleInRayTracing : 1;                                 // 0x0319(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bRenderInMainPass : 1;                                    // 0x0319(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bRenderInDepthPass : 1;                                   // 0x0319(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bReceivesDecals : 1;                                      // 0x0319(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bOwnerNoSee : 1;                                          // 0x0319(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bOnlyOwnerSee : 1;                                        // 0x0319(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bTreatAsBackgroundForOcclusion : 1;                       // 0x0319(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUseAsOccluder : 1;                                       // 0x0319(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUseForegroundStencil : 1;                                // 0x031A(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUseForegroundFov : 1;                                    // 0x031A(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bSelectable : 1;                                          // 0x031A(0x0001)
	unsigned char                                      bForceMipStreaming : 1;                                   // 0x031A(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bHasPerInstanceHitProxies : 1;                            // 0x031A(0x0001)
	unsigned char                                      CastShadow : 1;                                           // 0x031A(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bEmissiveLightSource : 1;                                 // 0x031A(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bAffectDynamicIndirectLighting : 1;                       // 0x031A(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bAffectDistanceFieldLighting : 1;                         // 0x031B(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bCastDynamicShadow : 1;                                   // 0x031B(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bCastStaticShadow : 1;                                    // 0x031B(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bCastVolumetricTranslucentShadow : 1;                     // 0x031B(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bCastContactShadow : 1;                                   // 0x031B(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bSelfShadowOnly : 1;                                      // 0x031B(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bCastFarShadow : 1;                                       // 0x031B(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bCastInsetShadow : 1;                                     // 0x031B(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bCastCinematicShadow : 1;                                 // 0x031C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bCastHiddenShadow : 1;                                    // 0x031C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bCastShadowAsTwoSided : 1;                                // 0x031C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bLightAsIfStatic : 1;                                     // 0x031C(0x0001) (Deprecated)
	unsigned char                                      bLightAttachmentsAsGroup : 1;                             // 0x031C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bExcludeFromLightAttachmentGroup : 1;                     // 0x031C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bReceiveMobileCSMShadows : 1;                             // 0x031C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bSingleSampleShadowFromStationaryLights : 1;              // 0x031C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bIgnoreRadialImpulse : 1;                                 // 0x031D(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bIgnoreRadialForce : 1;                                   // 0x031D(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bApplyImpulseOnDamage : 1;                                // 0x031D(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bReplicatePhysicsToAutonomousProxy : 1;                   // 0x031D(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bFillCollisionUnderneathForNavmesh : 1;                   // 0x031D(0x0001) (Edit)
	unsigned char                                      AlwaysLoadOnClient : 1;                                   // 0x031D(0x0001)
	unsigned char                                      AlwaysLoadOnServer : 1;                                   // 0x031D(0x0001)
	unsigned char                                      bUseEditorCompositing : 1;                                // 0x031D(0x0001)
	unsigned char                                      bIsBeingMovedByEditor : 1;                                // 0x031E(0x0001) (Transient, DuplicateTransient)
	unsigned char                                      bRenderCustomDepth : 1;                                   // 0x031E(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bVisibleInSceneCaptureOnly : 1;                           // 0x031E(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bHiddenInSceneCapture : 1;                                // 0x031E(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bRayTracingFarField : 1;                                  // 0x031E(0x0001)
	unsigned char                                      UnknownData03 : 1;                                        // 0x031E(0x0001)
	unsigned char                                      bHasNoStreamableTextures : 1;                             // 0x031E(0x0001)
	TEnumAsByte<EHasCustomNavigableGeometry>           bHasCustomNavigableGeometry;                              // 0x031F(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x1];                                       // 0x0320(0x0001) MISSED OFFSET
	TEnumAsByte<ECanBeCharacterBase>                   CanCharacterStepUpOn;                                     // 0x0321(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FLightingChannels                           LightingChannels;                                         // 0x0322(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData05[0x1];                                       // 0x0323(0x0001) MISSED OFFSET
	int                                                RayTracingGroupId;                                        // 0x0324(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                VisibilityId;                                             // 0x0328(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                CustomDepthStencilValue;                                  // 0x032C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FCustomPrimitiveData                        CustomPrimitiveData;                                      // 0x0330(0x0010) (Edit)
	struct FCustomPrimitiveData                        CustomPrimitiveDataInternal;                              // 0x0340(0x0010) (Transient)
	unsigned char                                      UnknownData06[0x8];                                       // 0x0350(0x0008) MISSED OFFSET
	int                                                TranslucencySortPriority;                                 // 0x0358(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              TranslucencySortDistanceOffset;                           // 0x035C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<class URuntimeVirtualTexture*>              RuntimeVirtualTextures;                                   // 0x0360(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	int8_t                                             VirtualTextureLodBias;                                    // 0x0370(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	int8_t                                             VirtualTextureCullMips;                                   // 0x0371(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	int8_t                                             VirtualTextureCullMipsMax;                                // 0x0372(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	int8_t                                             VirtualTextureMinCoverage;                                // 0x0373(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	enum class ERuntimeVirtualTextureMainPassType      VirtualTextureRenderPassType;                             // 0x0374(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x13];                                      // 0x0375(0x0013) MISSED OFFSET
	float                                              BoundsScale;                                              // 0x0388(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData08[0x14];                                      // 0x038C(0x0014) MISSED OFFSET
	TArray<class AActor*>                              MoveIgnoreActors;                                         // 0x03A0(0x0010) (ZeroConstructor, Transient, DuplicateTransient)
	TArray<class UPrimitiveComponent*>                 MoveIgnoreComponents;                                     // 0x03B0(0x0010) (ExportObject, ZeroConstructor, Transient, DuplicateTransient)
	unsigned char                                      UnknownData09[0x10];                                      // 0x03C0(0x0010) MISSED OFFSET
	struct FBodyInstance                               BodyInstance;                                             // 0x03D0(0x0190) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FScriptMulticastDelegate                    OnComponentHit;                                           // 0x0560(0x0010) (InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnComponentBeginOverlap;                                  // 0x0561(0x0010) (InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnComponentEndOverlap;                                    // 0x0562(0x0010) (InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnComponentWake;                                          // 0x0563(0x0010) (InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnComponentSleep;                                         // 0x0564(0x0010) (InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData10[0x1];                                       // 0x0565(0x0001) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnBeginCursorOver;                                        // 0x0566(0x0010) (InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnEndCursorOver;                                          // 0x0567(0x0010) (InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnClicked;                                                // 0x0568(0x0010) (InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnReleased;                                               // 0x0569(0x0010) (InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnInputTouchBegin;                                        // 0x056A(0x0010) (InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnInputTouchEnd;                                          // 0x056B(0x0010) (InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnInputTouchEnter;                                        // 0x056C(0x0010) (InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnInputTouchLeave;                                        // 0x056D(0x0010) (InstancedReference, BlueprintAssignable)
	enum class ERayTracingGroupCullingPriority         RayTracingGroupCullingPriority;                           // 0x056E(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	enum class ERendererStencilMask                    CustomDepthStencilWriteMask;                              // 0x056F(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData11[0x18];                                      // 0x0570(0x0018) MISSED OFFSET
	class UPrimitiveComponent*                         LODParentPrimitive;                                       // 0x0588(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.PrimitiveComponent"));
		return ptr;
	}


	bool WasRecentlyRendered(float Tolerance);//Offset:Discovery.exe+0x5845550
	void WakeRigidBody(const struct FName& BoneName);//Offset:Discovery.exe+0x5841990
	void WakeAllRigidBodies();//Offset:Discovery.exe+0x583EE40
	void SetWalkableSlopeOverride(const struct FWalkableSlopeOverride& NewOverride);//Offset:Discovery.exe+0x5843A60
	void SetVisibleInSceneCaptureOnly(bool bValue);//Offset:Discovery.exe+0x583F4E0
	void SetVisibleInRayTracing(bool bNewVisibleInRayTracing);//Offset:Discovery.exe+0x5841670
	void SetVectorParameterForDefaultCustomPrimitiveData(const struct FName& ParameterName, const struct FVector4& Value);//Offset:Discovery.exe+0x5844900
	void SetVectorParameterForCustomPrimitiveData(const struct FName& ParameterName, const struct FVector4& Value);//Offset:Discovery.exe+0x5844EB0
	void SetUseCCD(bool InUseCCD, const struct FName& BoneName);//Offset:Discovery.exe+0x583E600
	void SetTranslucentSortPriority(int NewTranslucentSortPriority);//Offset:Discovery.exe+0x58410D0
	void SetTranslucencySortDistanceOffset(float NewTranslucencySortDistanceOffset);//Offset:Discovery.exe+0x5841030
	void SetSingleSampleShadowFromStationaryLights(bool bNewSingleSampleShadowFromStationaryLights);//Offset:Discovery.exe+0x5841170
	void SetSimulatePhysics(bool bSimulate);//Offset:Discovery.exe+0x58439C0
	void SetScalarParameterForDefaultCustomPrimitiveData(const struct FName& ParameterName, float Value);//Offset:Discovery.exe+0x5844A10
	void SetScalarParameterForCustomPrimitiveData(const struct FName& ParameterName, float Value);//Offset:Discovery.exe+0x5844FC0
	void SetRenderInMainPass(bool bValue);//Offset:Discovery.exe+0x583F620
	void SetRenderInDepthPass(bool bValue);//Offset:Discovery.exe+0x583F580
	void SetRenderCustomDepth(bool bValue);//Offset:Discovery.exe+0x583F7F0
	void SetReceivesDecals(bool bNewReceivesDecals);//Offset:Discovery.exe+0x5840F90
	void SetPhysMaterialOverride(class UPhysicalMaterial* NewPhysMaterial);//Offset:Discovery.exe+0x583E310
	void SetPhysicsMaxAngularVelocityInRadians(float NewMaxAngVel, bool bAddToCurrent, const struct FName& BoneName);//Offset:Discovery.exe+0x5841DB0
	void SetPhysicsMaxAngularVelocityInDegrees(float NewMaxAngVel, bool bAddToCurrent, const struct FName& BoneName);//Offset:Discovery.exe+0x5841EF0
	void SetPhysicsLinearVelocity(const struct FVector& NewVel, bool bAddToCurrent, const struct FName& BoneName);//Offset:Discovery.exe+0x5842610
	void SetPhysicsAngularVelocityInRadians(const struct FVector& NewAngVel, bool bAddToCurrent, const struct FName& BoneName);//Offset:Discovery.exe+0x5842200
	void SetPhysicsAngularVelocityInDegrees(const struct FVector& NewAngVel, bool bAddToCurrent, const struct FName& BoneName);//Offset:Discovery.exe+0x5842040
	void SetOwnerNoSee(bool bNewOwnerNoSee);//Offset:Discovery.exe+0x58417B0
	void SetOnlyOwnerSee(bool bNewOnlyOwnerSee);//Offset:Discovery.exe+0x5841710
	void SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision);//Offset:Discovery.exe+0x5841850
	void SetMaterialByName(const struct FName& MaterialSlotName, class UMaterialInterface* Material);//Offset:Discovery.exe+0x5843F20
	void SetMaterial(int ElementIndex, class UMaterialInterface* Material);//Offset:Discovery.exe+0x5844010
	void SetMassScale(const struct FName& BoneName, float InMassScale);//Offset:Discovery.exe+0x583EB80
	void SetMassOverrideInKg(const struct FName& BoneName, float MassInKg, bool bOverrideMass);//Offset:Discovery.exe+0x583E8F0
	void SetLinearDamping(float InDamping);//Offset:Discovery.exe+0x56EAF90
	void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2);//Offset:Discovery.exe+0x58455F0
	void SetLightAttachmentsAsGroup(bool bInLightAttachmentsAsGroup);//Offset:Discovery.exe+0x58412B0
	void SetHiddenInSceneCapture(bool bValue);//Offset:Discovery.exe+0x583F440
	void SetGenerateOverlapEvents(bool bInGenerateOverlapEvents);//Offset:Discovery.exe+0x5845730
	void SetExcludeFromLightAttachmentGroup(bool bInExcludeFromLightAttachmentGroup);//Offset:Discovery.exe+0x5841210
	void SetEnableGravity(bool bGravityEnabled);//Offset:Discovery.exe+0x583EDA0
	void SetEmissiveLightSource(bool NewEmissiveLightSource);//Offset:Discovery.exe+0x5841530
	void SetDefaultCustomPrimitiveDataVector4(int DataIndex, const struct FVector4& Value);//Offset:Discovery.exe+0x5844540
	void SetDefaultCustomPrimitiveDataVector3(int DataIndex, const struct FVector& Value);//Offset:Discovery.exe+0x5844650
	void SetDefaultCustomPrimitiveDataVector2(int DataIndex, const struct FVector2D& Value);//Offset:Discovery.exe+0x5844740
	void SetDefaultCustomPrimitiveDataFloat(int DataIndex, float Value);//Offset:Discovery.exe+0x5844820
	void SetCustomPrimitiveDataVector4(int DataIndex, const struct FVector4& Value);//Offset:Discovery.exe+0x5844AF0
	void SetCustomPrimitiveDataVector3(int DataIndex, const struct FVector& Value);//Offset:Discovery.exe+0x5844C00
	void SetCustomPrimitiveDataVector2(int DataIndex, const struct FVector2D& Value);//Offset:Discovery.exe+0x5844CF0
	void SetCustomPrimitiveDataFloat(int DataIndex, float Value);//Offset:Discovery.exe+0x5844DD0
	void SetCustomDepthStencilWriteMask(enum class ERendererStencilMask WriteMaskBit);//Offset:Discovery.exe+0x583F6C0
	void SetCustomDepthStencilValue(int Value);//Offset:Discovery.exe+0x583F750
	void SetCullDistance(float NewCullDistance);//Offset:Discovery.exe+0x583E270
	void SetConstraintMode(TEnumAsByte<EDOFMode> ConstraintMode);//Offset:Discovery.exe+0x5843920
	void SetCollisionResponseToChannel(TEnumAsByte<ECollisionChannel> Channel, TEnumAsByte<ECollisionResponse> NewResponse);//Offset:Discovery.exe+0x583E450
	void SetCollisionResponseToAllChannels(TEnumAsByte<ECollisionResponse> NewResponse);//Offset:Discovery.exe+0x583E3B0
	void SetCollisionProfileName(const struct FName& InCollisionProfileName, bool bUpdateOverlaps);//Offset:Discovery.exe+0x5840D10
	void SetCollisionObjectType(TEnumAsByte<ECollisionChannel> Channel);//Offset:Discovery.exe+0x5840C20
	void SetCollisionEnabledEx(TEnumAsByte<ECollisionEnabled> NewType, bool bOnlySetCollisionIfDifferentFromOwner);//Offset:Discovery.exe+0x5840E00
	void SetCollisionEnabled(TEnumAsByte<ECollisionEnabled> NewType);//Offset:Discovery.exe+0x5840EF0
	void SetCenterOfMass(const struct FVector& CenterOfMassOffset, const struct FName& BoneName);//Offset:Discovery.exe+0x5841A30
	void SetCastShadow(bool NewCastShadow);//Offset:Discovery.exe+0x58415D0
	void SetCastInsetShadow(bool bInCastInsetShadow);//Offset:Discovery.exe+0x58413F0
	void SetCastHiddenShadow(bool NewCastHiddenShadow);//Offset:Discovery.exe+0x5841490
	void SetCastContactShadow(bool bInCastContactShadow);//Offset:Discovery.exe+0x5841350
	void SetBoundsScale(float NewBoundsScale);//Offset:Discovery.exe+0x58441A0
	void SetAngularDamping(float InDamping);//Offset:Discovery.exe+0x583ECA0
	void SetAllUseCCD(bool InUseCCD);//Offset:Discovery.exe+0x583E560
	void SetAllPhysicsLinearVelocity(const struct FVector& NewVel, bool bAddToCurrent);//Offset:Discovery.exe+0x5842350
	void SetAllPhysicsAngularVelocityInRadians(const struct FVector& NewAngVel, bool bAddToCurrent);//Offset:Discovery.exe+0x583EE60
	void SetAllPhysicsAngularVelocityInDegrees(const struct FVector& NewAngVel, bool bAddToCurrent);//Offset:Discovery.exe+0x583EF50
	void SetAllMassScale(float InMassScale);//Offset:Discovery.exe+0x583EA30
	struct FVector ScaleByMomentOfInertia(const struct FVector& InputVector, const struct FName& BoneName);//Offset:Discovery.exe+0x583E6F0
	void PutRigidBodyToSleep(const struct FName& BoneName);//Offset:Discovery.exe+0x58418F0
	bool K2_SphereTraceComponent(const struct FVector& TraceStart, const struct FVector& TraceEnd, float SphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, struct FVector* HitLocation, struct FVector* HitNormal, struct FName* BoneName, struct FHitResult* OutHit);//Offset:Discovery.exe+0x5840230
	bool K2_SphereOverlapComponent(const struct FVector& InSphereCentre, float InSphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, struct FVector* HitLocation, struct FVector* HitNormal, struct FName* BoneName, struct FHitResult* OutHit);//Offset:Discovery.exe+0x583F890
	bool K2_LineTraceComponent(const struct FVector& TraceStart, const struct FVector& TraceEnd, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, struct FVector* HitLocation, struct FVector* HitNormal, struct FName* BoneName, struct FHitResult* OutHit);//Offset:Discovery.exe+0x5840750
	bool K2_IsQueryCollisionEnabled();//Offset:Discovery.exe+0x583F1F0
	bool K2_IsPhysicsCollisionEnabled();//Offset:Discovery.exe+0x583F1A0
	bool K2_IsCollisionEnabled();//Offset:Discovery.exe+0x583F240
	bool K2_BoxOverlapComponent(const struct FVector& InBoxCentre, const struct FBox& InBox, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, struct FVector* HitLocation, struct FVector* HitNormal, struct FName* BoneName, struct FHitResult* OutHit);//Offset:Discovery.exe+0x583FD40
	bool IsOverlappingComponent(class UPrimitiveComponent* OtherComp);//Offset:Discovery.exe+0x58444A0
	bool IsOverlappingActor(class AActor* Other);//Offset:Discovery.exe+0x5844400
	bool IsGravityEnabled();//Offset:Discovery.exe+0x583ED70
	bool IsAnyRigidBodyAwake();//Offset:Discovery.exe+0x583E530
	void IgnoreComponentWhenMoving(class UPrimitiveComponent* Component, bool bShouldIgnore);//Offset:Discovery.exe+0x58452D0
	void IgnoreActorWhenMoving(class AActor* Actor, bool bShouldIgnore);//Offset:Discovery.exe+0x5845460
	struct FWalkableSlopeOverride GetWalkableSlopeOverride();//Offset:Discovery.exe+0x5843B20
	struct FVector GetPhysicsLinearVelocityAtPoint(const struct FVector& Point, const struct FName& BoneName);//Offset:Discovery.exe+0x5842450
	struct FVector GetPhysicsLinearVelocity(const struct FName& BoneName);//Offset:Discovery.exe+0x5842560
	struct FVector GetPhysicsAngularVelocityInRadians(const struct FName& BoneName);//Offset:Discovery.exe+0x5841BD0
	struct FVector GetPhysicsAngularVelocityInDegrees(const struct FName& BoneName);//Offset:Discovery.exe+0x5841C80
	void GetOverlappingComponents(TArray<class UPrimitiveComponent*>* OutOverlappingComponents);//Offset:Discovery.exe+0x5844240
	void GetOverlappingActors(class UClass* ClassFilter, TArray<class AActor*>* OverlappingActors);//Offset:Discovery.exe+0x58442F0
	int GetNumMaterials();//Offset:Discovery.exe+0x583F410
	class UMaterialInterface* GetMaterialFromCollisionFaceIndex(int FaceIndex, int* SectionIndex);//Offset:Discovery.exe+0x5843B50
	class UMaterialInterface* GetMaterial(int ElementIndex);//Offset:Discovery.exe+0x5844100
	float GetMassScale(const struct FName& BoneName);//Offset:Discovery.exe+0x583EAD0
	float GetMass();//Offset:Discovery.exe+0x583E8C0
	float GetLinearDamping();//Offset:Discovery.exe+0x583ED40
	struct FVector GetInertiaTensor(const struct FName& BoneName);//Offset:Discovery.exe+0x583E800
	bool GetGenerateOverlapEvents();//Offset:Discovery.exe+0x58457D0
	int GetCustomPrimitiveDataIndexForVectorParameter(const struct FName& ParameterName);//Offset:Discovery.exe+0x58450A0
	int GetCustomPrimitiveDataIndexForScalarParameter(const struct FName& ParameterName);//Offset:Discovery.exe+0x5845140
	TEnumAsByte<ECollisionResponse> GetCollisionResponseToChannel(TEnumAsByte<ECollisionChannel> Channel);//Offset:Discovery.exe+0x583F100
	struct FName GetCollisionProfileName();//Offset:Discovery.exe+0x5840CC0
	TEnumAsByte<ECollisionChannel> GetCollisionObjectType();//Offset:Discovery.exe+0x583F0D0
	TEnumAsByte<ECollisionEnabled> GetCollisionEnabled();//Offset:Discovery.exe+0x583F290
	float GetClosestPointOnCollision(const struct FVector& Point, const struct FName& BoneName, struct FVector* OutPointOnBody);//Offset:Discovery.exe+0x583F2C0
	struct FVector GetCenterOfMass(const struct FName& BoneName);//Offset:Discovery.exe+0x5841B20
	float GetAngularDamping();//Offset:Discovery.exe+0x583EC70
	class UMaterialInstanceDynamic* CreateDynamicMaterialInstance(int ElementIndex, class UMaterialInterface* SourceMaterial, const struct FName& OptionalName);//Offset:Discovery.exe+0x5843C50
	class UMaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicFromMaterial(int ElementIndex, class UMaterialInterface* Parent);//Offset:Discovery.exe+0x5843D90
	class UMaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamic(int ElementIndex);//Offset:Discovery.exe+0x5843E80
	TArray<class UPrimitiveComponent*> CopyArrayOfMoveIgnoreComponents();//Offset:Discovery.exe+0x5845250
	TArray<class AActor*> CopyArrayOfMoveIgnoreActors();//Offset:Discovery.exe+0x58453E0
	void ClearMoveIgnoreComponents();//Offset:Discovery.exe+0x58451E0
	void ClearMoveIgnoreActors();//Offset:Discovery.exe+0x58453C0
	bool CanCharacterStepUp(class APawn* Pawn);//Offset:Discovery.exe+0x583E1D0
	void AddVelocityChangeImpulseAtLocation(const struct FVector& Impulse, const struct FVector& Location, const struct FName& BoneName);//Offset:Discovery.exe+0x5843220
	void AddTorqueInRadians(const struct FVector& Torque, const struct FName& BoneName, bool bAccelChange);//Offset:Discovery.exe+0x5842920
	void AddTorqueInDegrees(const struct FVector& Torque, const struct FName& BoneName, bool bAccelChange);//Offset:Discovery.exe+0x5842760
	void AddRadialImpulse(const struct FVector& Origin, float Radius, float Strength, TEnumAsByte<ERadialImpulseFalloff> Falloff, bool bVelChange);//Offset:Discovery.exe+0x5843040
	void AddRadialForce(const struct FVector& Origin, float Radius, float Strength, TEnumAsByte<ERadialImpulseFalloff> Falloff, bool bAccelChange);//Offset:Discovery.exe+0x5842A60
	void AddImpulseAtLocation(const struct FVector& Impulse, const struct FVector& Location, const struct FName& BoneName);//Offset:Discovery.exe+0x5843380
	void AddImpulse(const struct FVector& Impulse, const struct FName& BoneName, bool bVelChange);//Offset:Discovery.exe+0x58437E0
	void AddForceAtLocationLocal(const struct FVector& Force, const struct FVector& Location, const struct FName& BoneName);//Offset:Discovery.exe+0x5842C40
	void AddForceAtLocation(const struct FVector& Force, const struct FVector& Location, const struct FName& BoneName);//Offset:Discovery.exe+0x5842DA0
	void AddForce(const struct FVector& Force, const struct FName& BoneName, bool bAccelChange);//Offset:Discovery.exe+0x5842F00
	void AddAngularImpulseInRadians(const struct FVector& Impulse, const struct FName& BoneName, bool bVelChange);//Offset:Discovery.exe+0x58436A0
	void AddAngularImpulseInDegrees(const struct FVector& Impulse, const struct FName& BoneName, bool bVelChange);//Offset:Discovery.exe+0x58434E0
};


// Class Engine.FXSystemComponent
// 0x0000 (0x0590 - 0x0590)
class UFXSystemComponent : public UPrimitiveComponent
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.FXSystemComponent"));
		return ptr;
	}


	void SetVectorParameter(const struct FName& ParameterName, const struct FVector& Param);//Offset:Discovery.exe+0x5811340
	void SetUseAutoManageAttachment(bool bAutoManage);//Offset:Discovery.exe+0x5810DD0
	void SetIntParameter(const struct FName& ParameterName, int Param);//Offset:Discovery.exe+0x5811520
	void SetFloatParameter(const struct FName& ParameterName, float Param);//Offset:Discovery.exe+0x5811430
	void SetEmitterEnable(const struct FName& EmitterName, bool bNewEnableState);//Offset:Discovery.exe+0x5811040
	void SetColorParameter(const struct FName& ParameterName, const struct FLinearColor& Param);//Offset:Discovery.exe+0x5811250
	void SetBoolParameter(const struct FName& ParameterName, bool Param);//Offset:Discovery.exe+0x5811610
	void SetAutoAttachmentParameters(class USceneComponent* Parent, const struct FName& SocketName, enum class EAttachmentRule LocationRule, enum class EAttachmentRule RotationRule, enum class EAttachmentRule ScaleRule);//Offset:Discovery.exe+0x5810E70
	void SetActorParameter(const struct FName& ParameterName, class AActor* Param);//Offset:Discovery.exe+0x5811160
	void ReleaseToPool();//Offset:Discovery.exe+0x5810DB0
	class UFXSystemAsset* GetFXSystemAsset();//Offset:Discovery.exe+0x5811130
};


// Class Engine.FXSystemAsset
// 0x0008 (0x0030 - 0x0028)
class UFXSystemAsset : public UObject
{
public:
	uint32_t                                           MaxPoolSize;                                              // 0x0028(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	uint32_t                                           PoolPrimeSize;                                            // 0x002C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.FXSystemAsset"));
		return ptr;
	}

};


// Class Engine.MeshComponent
// 0x0030 (0x05C0 - 0x0590)
class UMeshComponent : public UPrimitiveComponent
{
public:
	TArray<class UMaterialInterface*>                  OverrideMaterials;                                        // 0x0590(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData00[0x10];                                      // 0x05A0(0x0010) MISSED OFFSET
	unsigned char                                      bEnableMaterialParameterCaching : 1;                      // 0x05B0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData01[0xF];                                       // 0x05B1(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MeshComponent"));
		return ptr;
	}


	void SetVectorParameterValueOnMaterials(const struct FName& ParameterName, const struct FVector& ParameterValue);//Offset:Discovery.exe+0x57F8F80
	void SetScalarParameterValueOnMaterials(const struct FName& ParameterName, float ParameterValue);//Offset:Discovery.exe+0x57F9070
	void PrestreamTextures(float Seconds, bool bPrioritizeCharacterTextures, int CinematicTextureGroups);//Offset:Discovery.exe+0x57F9150
	bool IsMaterialSlotNameValid(const struct FName& MaterialSlotName);//Offset:Discovery.exe+0x57F9290
	TArray<struct FName> GetMaterialSlotNames();//Offset:Discovery.exe+0x57F9330
	TArray<class UMaterialInterface*> GetMaterials();//Offset:Discovery.exe+0x57F9450
	int GetMaterialIndex(const struct FName& MaterialSlotName);//Offset:Discovery.exe+0x57F93B0
};


// Class Engine.AvoidanceManager
// 0x00B8 (0x00E0 - 0x0028)
class UAvoidanceManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	float                                              DefaultTimeToLive;                                        // 0x0030(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              LockTimeAfterAvoid;                                       // 0x0034(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              LockTimeAfterClean;                                       // 0x0038(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              DeltaTimeToPredict;                                       // 0x003C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              ArtificialRadiusExpansion;                                // 0x0040(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              TestHeightDifference;                                     // 0x0044(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              HeightCheckMargin;                                        // 0x0048(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x94];                                      // 0x004C(0x0094) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.AvoidanceManager"));
		return ptr;
	}


	bool RegisterMovementComponent(class UMovementComponent* MovementComp, float AvoidanceWeight);//Offset:Discovery.exe+0x56A6A00
	int GetObjectCount();//Offset:Discovery.exe+0x56A6B20
	int GetNewAvoidanceUID();//Offset:Discovery.exe+0x56A6AF0
	struct FVector GetAvoidanceVelocityForComponent(class UMovementComponent* MovementComp);//Offset:Discovery.exe+0x56A6950
};


// Class Engine.SoundNode
// 0x0020 (0x0048 - 0x0028)
class USoundNode : public UObject
{
public:
	TArray<class USoundNode*>                          ChildNodes;                                               // 0x0028(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0038(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SoundNode"));
		return ptr;
	}

};


// Class Engine.SoundEffectPreset
// 0x0040 (0x0068 - 0x0028)
class USoundEffectPreset : public UObject
{
public:
	unsigned char                                      UnknownData00[0x40];                                      // 0x0028(0x0040) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SoundEffectPreset"));
		return ptr;
	}

};


// Class Engine.SoundEffectSourcePreset
// 0x0000 (0x0068 - 0x0068)
class USoundEffectSourcePreset : public USoundEffectPreset
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SoundEffectSourcePreset"));
		return ptr;
	}

};


// Class Engine.SoundEffectSubmixPreset
// 0x0000 (0x0068 - 0x0068)
class USoundEffectSubmixPreset : public USoundEffectPreset
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SoundEffectSubmixPreset"));
		return ptr;
	}

};


// Class Engine.DecalComponent
// 0x0050 (0x0320 - 0x02D0)
class UDecalComponent : public USceneComponent
{
public:
	class UMaterialInterface*                          DecalMaterial;                                            // 0x02D0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                SortOrder;                                                // 0x02D8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              FadeScreenSize;                                           // 0x02DC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              FadeStartDelay;                                           // 0x02E0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              FadeDuration;                                             // 0x02E4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              FadeInDuration;                                           // 0x02E8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              FadeInStartDelay;                                         // 0x02EC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bDestroyOwnerAfterFade : 1;                               // 0x02F0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x7];                                       // 0x02F1(0x0007) MISSED OFFSET
	struct FVector                                     DecalSize;                                                // 0x02F8(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0310(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.DecalComponent"));
		return ptr;
	}


	void SetSortOrder(int Value);//Offset:Discovery.exe+0x56EA3C0
	void SetFadeScreenSize(float NewFadeScreenSize);//Offset:Discovery.exe+0x56EA460
	void SetFadeOut(float StartDelay, float Duration, bool DestroyOwnerAfterFade);//Offset:Discovery.exe+0x56EA5E0
	void SetFadeIn(float StartDelay, float Duaration);//Offset:Discovery.exe+0x56EA500
	void SetDecalMaterial(class UMaterialInterface* NewDecalMaterial);//Offset:Discovery.exe+0x56EA320
	float GetFadeStartDelay();//Offset:Discovery.exe+0x56EA7A0
	float GetFadeInStartDelay();//Offset:Discovery.exe+0x56EA740
	float GetFadeInDuration();//Offset:Discovery.exe+0x56EA710
	float GetFadeDuration();//Offset:Discovery.exe+0x56EA770
	class UMaterialInterface* GetDecalMaterial();//Offset:Discovery.exe+0x56EA2F0
	class UMaterialInstanceDynamic* CreateDynamicMaterialInstance();//Offset:Discovery.exe+0x56EA2C0
};


// Class Engine.AssetManager
// 0x04C0 (0x04E8 - 0x0028)
class UAssetManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0x308];                                     // 0x0028(0x0308) MISSED OFFSET
	TArray<class UObject*>                             ObjectReferenceList;                                      // 0x0330(0x0010) (ZeroConstructor)
	bool                                               bIsGlobalAsyncScanEnvironment;                            // 0x0340(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bShouldGuessTypeAndName;                                  // 0x0341(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bShouldUseSynchronousLoad;                                // 0x0342(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bIsLoadingFromPakFiles;                                   // 0x0343(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bShouldAcquireMissingChunksOnLoad;                        // 0x0344(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bOnlyCookProductionAssets;                                // 0x0345(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x0346(0x0002) MISSED OFFSET
	int                                                NumBulkScanRequests;                                      // 0x0348(0x0004) (ZeroConstructor, IsPlainOldData)
	bool                                               bIsPrimaryAssetDirectoryCurrent;                          // 0x034C(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bIsManagementDatabaseCurrent;                             // 0x034D(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bUpdateManagementDatabaseAfterScan;                       // 0x034E(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bIncludeOnlyOnDiskAssets;                                 // 0x034F(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bHasCompletedInitialScan;                                 // 0x0350(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0351(0x0003) MISSED OFFSET
	int                                                NumberOfSpawnedNotifications;                             // 0x0354(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x190];                                     // 0x0358(0x0190) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.AssetManager"));
		return ptr;
	}

};


// Class Engine.GameModeBase
// 0x00A0 (0x0368 - 0x02C8)
class AGameModeBase : public AInfo
{
public:
	struct FString                                     OptionsString;                                            // 0x02C8(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	class UClass*                                      GameSessionClass;                                         // 0x02D8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UClass*                                      GameStateClass;                                           // 0x02E0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData)
	class UClass*                                      PlayerControllerClass;                                    // 0x02E8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData)
	class UClass*                                      PlayerStateClass;                                         // 0x02F0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData)
	class UClass*                                      HUDClass;                                                 // 0x02F8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UClass*                                      DefaultPawnClass;                                         // 0x0300(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UClass*                                      SpectatorClass;                                           // 0x0308(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData)
	class UClass*                                      ReplaySpectatorPlayerControllerClass;                     // 0x0310(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData)
	class UClass*                                      ServerStatReplicatorClass;                                // 0x0318(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData)
	class AGameSession*                                GameSession;                                              // 0x0320(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class AGameStateBase*                              GameState;                                                // 0x0328(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class AServerStatReplicator*                       ServerStatReplicator;                                     // 0x0330(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FText                                       DefaultPlayerName;                                        // 0x0338(0x0018) (Edit)
	unsigned char                                      bUseSeamlessTravel : 1;                                   // 0x0350(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bStartPlayersAsSpectators : 1;                            // 0x0350(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bPauseable : 1;                                           // 0x0350(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x17];                                      // 0x0351(0x0017) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.GameModeBase"));
		return ptr;
	}


	void StartPlay();//Offset:Discovery.exe+0x154F3A0
	class APawn* SpawnDefaultPawnFor(class AController* NewPlayer, class AActor* StartSpot);//Offset:Discovery.exe+0x5702070
	class APawn* SpawnDefaultPawnAtTransform(class AController* NewPlayer, const struct FTransform& SpawnTransform);//Offset:Discovery.exe+0x5701F20
	bool ShouldReset(class AActor* ActorToReset);//Offset:Discovery.exe+0x5702B10
	void ReturnToMainMenuHost();//Offset:Discovery.exe+0x200AC30
	void RestartPlayerAtTransform(class AController* NewPlayer, const struct FTransform& SpawnTransform);//Offset:Discovery.exe+0x5702160
	void RestartPlayerAtPlayerStart(class AController* NewPlayer, class AActor* StartSpot);//Offset:Discovery.exe+0x57022A0
	void RestartPlayer(class AController* NewPlayer);//Offset:Discovery.exe+0x5702390
	void ResetLevel();//Offset:Discovery.exe+0x5702AF0
	bool PlayerCanRestart(class APlayerController* Player);//Offset:Discovery.exe+0x5702430
	bool MustSpectate(class APlayerController* NewPlayerController);//Offset:Discovery.exe+0x57029B0
	void K2_PostLogin(class APlayerController* NewPlayer);//Offset:Discovery.exe+0x327F8B0
	void K2_OnSwapPlayerControllers(class APlayerController* OldPC, class APlayerController* NewPC);//Offset:Discovery.exe+0x327F8B0
	void K2_OnRestartPlayer(class AController* NewPlayer);//Offset:Discovery.exe+0x327F8B0
	void K2_OnLogout(class AController* ExitingController);//Offset:Discovery.exe+0x327F8B0
	void K2_OnChangeName(class AController* Other, const struct FString& NewName, bool bNameChange);//Offset:Discovery.exe+0x327F8B0
	class AActor* K2_FindPlayerStart(class AController* Player, const struct FString& IncomingName);//Offset:Discovery.exe+0x57024D0
	void InitStartSpot(class AActor* StartSpot, class AController* NewPlayer);//Offset:Discovery.exe+0x5701E30
	void InitializeHUDForPlayer(class APlayerController* NewPlayer);//Offset:Discovery.exe+0x56F3D00
	bool HasMatchStarted();//Offset:Discovery.exe+0x56DF000
	bool HasMatchEnded();//Offset:Discovery.exe+0x5702BB0
	void HandleStartingNewPlayer(class APlayerController* NewPlayer);//Offset:Discovery.exe+0x5702A50
	int GetNumSpectators();//Offset:Discovery.exe+0x5702BE0
	int GetNumPlayers();//Offset:Discovery.exe+0x5702C10
	class UClass* GetDefaultPawnClassForController(class AController* InController);//Offset:Discovery.exe+0x5702C40
	class AActor* FindPlayerStart(class AController* Player, const struct FString& IncomingName);//Offset:Discovery.exe+0x57025D0
	class AActor* ChoosePlayerStart(class AController* Player);//Offset:Discovery.exe+0x57026D0
	void ChangeName(class AController* Controller, const struct FString& NewName, bool bNameChange);//Offset:Discovery.exe+0x5702770
	bool CanSpectate(class APlayerController* Viewer, class APlayerState* ViewTarget);//Offset:Discovery.exe+0x57028C0
};


// Class Engine.GameMode
// 0x0048 (0x03B0 - 0x0368)
class AGameMode : public AGameModeBase
{
public:
	struct FName                                       MatchState;                                               // 0x0368(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      bDelayedStart : 1;                                        // 0x0370(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0371(0x0003) MISSED OFFSET
	int                                                NumSpectators;                                            // 0x0374(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                NumPlayers;                                               // 0x0378(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                NumBots;                                                  // 0x037C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MinRespawnDelay;                                          // 0x0380(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                NumTravellingPlayers;                                     // 0x0384(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UClass*                                      EngineMessageClass;                                       // 0x0388(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<class APlayerState*>                        InactivePlayerArray;                                      // 0x0390(0x0010) (ZeroConstructor)
	float                                              InactivePlayerStateLifeSpan;                              // 0x03A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                MaxInactivePlayers;                                       // 0x03A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bHandleDedicatedServerReplays;                            // 0x03A8(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x03A9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.GameMode"));
		return ptr;
	}


	void StartMatch();//Offset:Discovery.exe+0x5701530
	void Say(const struct FString& Msg);//Offset:Discovery.exe+0x57013F0
	void RestartGame();//Offset:Discovery.exe+0x57014F0
	bool ReadyToStartMatch();//Offset:Discovery.exe+0x57014A0
	bool ReadyToEndMatch();//Offset:Discovery.exe+0x56C59B0
	void K2_OnSetMatchState(const struct FName& NewState);//Offset:Discovery.exe+0x327F8B0
	bool IsMatchInProgress();//Offset:Discovery.exe+0x5701550
	struct FName GetMatchState();//Offset:Discovery.exe+0x5701580
	void EndMatch();//Offset:Discovery.exe+0x5701510
	void AbortMatch();//Offset:Discovery.exe+0x57014D0
};


// Class Engine.GameSession
// 0x0018 (0x02E0 - 0x02C8)
class AGameSession : public AInfo
{
public:
	int                                                MaxSpectators;                                            // 0x02C8(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	int                                                MaxPlayers;                                               // 0x02CC(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	int                                                MaxPartySize;                                             // 0x02D0(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      MaxSplitscreensPerConnection;                             // 0x02D4(0x0001) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	bool                                               bRequiresPushToTalk;                                      // 0x02D5(0x0001) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x02D6(0x0002) MISSED OFFSET
	struct FName                                       SessionName;                                              // 0x02D8(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.GameSession"));
		return ptr;
	}

};


// Class Engine.GameStateBase
// 0x0050 (0x0318 - 0x02C8)
class AGameStateBase : public AInfo
{
public:
	class UClass*                                      GameModeClass;                                            // 0x02C8(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData)
	class AGameModeBase*                               AuthorityGameMode;                                        // 0x02D0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	class UClass*                                      SpectatorClass;                                           // 0x02D8(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData)
	TArray<class APlayerState*>                        PlayerArray;                                              // 0x02E0(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient)
	bool                                               bReplicatedHasBegunPlay;                                  // 0x02F0(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x02F1(0x0003) MISSED OFFSET
	float                                              ReplicatedWorldTimeSeconds;                               // 0x02F4(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	float                                              ServerWorldTimeSecondsDelta;                              // 0x02F8(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              ServerWorldTimeSecondsUpdateFrequency;                    // 0x02FC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x18];                                      // 0x0300(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.GameStateBase"));
		return ptr;
	}


	void OnRep_SpectatorClass();//Offset:Discovery.exe+0x56DF420
	void OnRep_ReplicatedWorldTimeSeconds();//Offset:Discovery.exe+0x154F3A0
	void OnRep_ReplicatedHasBegunPlay();//Offset:Discovery.exe+0x200A820
	void OnRep_GameModeClass();//Offset:Discovery.exe+0x56DF440
	bool HasMatchStarted();//Offset:Discovery.exe+0x234F100
	bool HasMatchEnded();//Offset:Discovery.exe+0x5719F70
	bool HasBegunPlay();//Offset:Discovery.exe+0x5719FA0
	float GetServerWorldTimeSeconds();//Offset:Discovery.exe+0x5719FD0
	float GetPlayerStartTime(class AController* Controller);//Offset:Discovery.exe+0x5719EC0
	float GetPlayerRespawnDelay(class AController* Controller);//Offset:Discovery.exe+0x5719E10
};


// Class Engine.GameState
// 0x0020 (0x0338 - 0x0318)
class AGameState : public AGameStateBase
{
public:
	struct FName                                       MatchState;                                               // 0x0318(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	struct FName                                       PreviousMatchState;                                       // 0x0320(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	int                                                ElapsedTime;                                              // 0x0328(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                                       // 0x032C(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.GameState"));
		return ptr;
	}


	void OnRep_MatchState();//Offset:Discovery.exe+0x5719930
	void OnRep_ElapsedTime();//Offset:Discovery.exe+0x5702AF0
};


// Class Engine.SkinnedMeshComponent
// 0x02B0 (0x0870 - 0x05C0)
class USkinnedMeshComponent : public UMeshComponent
{
public:
	class USkeletalMesh*                               SkeletalMesh;                                             // 0x05C0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TWeakObjectPtr<class USkinnedMeshComponent>        MasterPoseComponent;                                      // 0x05C8(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	TArray<enum class ESkinCacheUsage>                 SkinCacheUsage;                                           // 0x05D0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	class UMeshDeformer*                               MeshDeformer;                                             // 0x05E0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UMeshDeformerInstance*                       MeshDeformerInstance;                                     // 0x05E8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x100];                                     // 0x05F0(0x0100) MISSED OFFSET
	class UPhysicsAsset*                               PhysicsAssetOverride;                                     // 0x06F0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                ForcedLodModel;                                           // 0x06F8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                MinLodModel;                                              // 0x06FC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0700(0x0008) MISSED OFFSET
	float                                              StreamingDistanceMultiplier;                              // 0x0708(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0xC];                                       // 0x070C(0x000C) MISSED OFFSET
	TArray<struct FSkelMeshComponentLODInfo>           LODInfo;                                                  // 0x0718(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData03[0x24];                                      // 0x0728(0x0024) MISSED OFFSET
	enum class EVisibilityBasedAnimTickOption          VisibilityBasedAnimTickOption;                            // 0x074C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData04[0x1];                                       // 0x074D(0x0001) MISSED OFFSET
	unsigned char                                      UnknownData05 : 3;                                        // 0x074E(0x0001)
	unsigned char                                      bOverrideMinLod : 1;                                      // 0x074E(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUseBoundsFromMasterPoseComponent : 1;                    // 0x074E(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bForceWireframe : 1;                                      // 0x074E(0x0001)
	unsigned char                                      bDisplayBones : 1;                                        // 0x074E(0x0001) (Deprecated)
	unsigned char                                      bDisableMorphTarget : 1;                                  // 0x074E(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bHideSkin : 1;                                            // 0x074F(0x0001)
	unsigned char                                      bPerBoneMotionBlur : 1;                                   // 0x074F(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bComponentUseFixedSkelBounds : 1;                         // 0x074F(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bConsiderAllBodiesForBounds : 1;                          // 0x074F(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bSyncAttachParentLOD : 1;                                 // 0x074F(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bCanHighlightSelectedSections : 1;                        // 0x074F(0x0001) (Transient)
	unsigned char                                      bRecentlyRendered : 1;                                    // 0x074F(0x0001) (Transient)
	unsigned char                                      bRecentlyRenderedOnScreen : 1;                            // 0x074F(0x0001) (Transient)
	unsigned char                                      bCastCapsuleDirectShadow : 1;                             // 0x0750(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bCastCapsuleIndirectShadow : 1;                           // 0x0750(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bCPUSkinning : 1;                                         // 0x0750(0x0001) (Transient)
	unsigned char                                      bEnableUpdateRateOptimizations : 1;                       // 0x0750(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bDisplayDebugUpdateRateOptimizations : 1;                 // 0x0750(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bRenderStatic : 1;                                        // 0x0750(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bIgnoreMasterPoseComponentLOD : 1;                        // 0x0750(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData06 : 1;                                        // 0x0750(0x0001)
	unsigned char                                      UnknownData07 : 1;                                        // 0x0751(0x0001)
	unsigned char                                      bCachedLocalBoundsUpToDate : 1;                           // 0x0751(0x0001) (Transient)
	unsigned char                                      bCachedWorldSpaceBoundsUpToDate : 1;                      // 0x0751(0x0001) (Transient)
	unsigned char                                      UnknownData08 : 2;                                        // 0x0751(0x0001)
	unsigned char                                      bForceMeshObjectUpdate : 1;                               // 0x0751(0x0001) (Transient)
	unsigned char                                      UnknownData09[0x2];                                       // 0x0752(0x0002) MISSED OFFSET
	float                                              CapsuleIndirectShadowMinVisibility;                       // 0x0754(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData10[0x38];                                      // 0x0758(0x0038) MISSED OFFSET
	struct FBoxSphereBounds                            CachedWorldOrLocalSpaceBounds;                            // 0x0790(0x0038) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData11[0x8];                                       // 0x07C8(0x0008) MISSED OFFSET
	struct FMatrix                                     CachedWorldToLocalTransform;                              // 0x07D0(0x0080) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData12[0x20];                                      // 0x0850(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SkinnedMeshComponent"));
		return ptr;
	}


	bool WasRecentlyRenderedOnScreen();//Offset:Discovery.exe+0x58736E0
	void UnloadSkinWeightProfile(const struct FName& InProfileName);//Offset:Discovery.exe+0x58726B0
	void UnHideBoneByName(const struct FName& BoneName);//Offset:Discovery.exe+0x5871890
	void TransformToBoneSpace(const struct FName& BoneName, const struct FVector& InPosition, const struct FRotator& InRotation, struct FVector* OutPosition, struct FRotator* OutRotation);//Offset:Discovery.exe+0x5871E00
	void TransformFromBoneSpace(const struct FName& BoneName, const struct FVector& InPosition, const struct FRotator& InRotation, struct FVector* OutPosition, struct FRotator* OutRotation);//Offset:Discovery.exe+0x5871BD0
	void ShowMaterialSection(int MaterialID, int SectionIndex, bool bShow, int LODIndex);//Offset:Discovery.exe+0x5871670
	void ShowAllMaterialSections(int LODIndex);//Offset:Discovery.exe+0x58715D0
	void SetVertexOffsetUsage(int LODIndex, int Usage);//Offset:Discovery.exe+0x58724F0
	void SetVertexColorOverride_LinearColor(int LODIndex, TArray<struct FLinearColor> VertexColors);//Offset:Discovery.exe+0x5872A50
	bool SetSkinWeightProfile(const struct FName& InProfileName);//Offset:Discovery.exe+0x5872770
	void SetSkinWeightOverride(int LODIndex, TArray<struct FSkelMeshSkinWeightInfo> SkinWeights);//Offset:Discovery.exe+0x58728B0
	void SetSkeletalMesh(class USkeletalMesh* NewMesh, bool bReinitPose);//Offset:Discovery.exe+0x5872F50
	void SetRenderStatic(bool bNewValue);//Offset:Discovery.exe+0x5871440
	void SetPreSkinningOffsets(int LODIndex, TArray<struct FVector> Offsets);//Offset:Discovery.exe+0x58723B0
	void SetPostSkinningOffsets(int LODIndex, TArray<struct FVector> Offsets);//Offset:Discovery.exe+0x58723B0
	void SetPhysicsAsset(class UPhysicsAsset* NewPhysicsAsset, bool bForceReInit);//Offset:Discovery.exe+0x58735F0
	void SetMinLOD(int InNewMinLOD);//Offset:Discovery.exe+0x5873520
	void SetMeshDeformer(class UMeshDeformer* InMeshDeformer);//Offset:Discovery.exe+0x5872EB0
	void SetMasterPoseComponent(class USkinnedMeshComponent* NewMasterBoneComponent, bool bForceUpdate);//Offset:Discovery.exe+0x58722C0
	void SetForcedLOD(int InNewForcedLOD);//Offset:Discovery.exe+0x5873480
	void SetCastCapsuleIndirectShadow(bool bNewValue);//Offset:Discovery.exe+0x5873310
	void SetCastCapsuleDirectShadow(bool bNewValue);//Offset:Discovery.exe+0x58733B0
	void SetCapsuleIndirectShadowMinVisibility(float NewValue);//Offset:Discovery.exe+0x5873270
	bool IsUsingSkinWeightProfile();//Offset:Discovery.exe+0x5872650
	bool IsMaterialSectionShown(int MaterialID, int LODIndex);//Offset:Discovery.exe+0x58714E0
	bool IsBoneHiddenByName(const struct FName& BoneName);//Offset:Discovery.exe+0x58717F0
	void HideBoneByName(const struct FName& BoneName, TEnumAsByte<EPhysBodyOp> PhysBodyOption);//Offset:Discovery.exe+0x5871930
	int GetVertexOffsetUsage(int LODIndex);//Offset:Discovery.exe+0x58725C0
	bool GetTwistAndSwingAngleOfDeltaRotationFromRefPose(const struct FName& BoneName, float* OutTwistAngle, float* OutSwingAngle);//Offset:Discovery.exe+0x5872B50
	struct FName GetSocketBoneName(const struct FName& InSocketName);//Offset:Discovery.exe+0x5873040
	struct FTransform GetRefPoseTransform(int BoneIndex);//Offset:Discovery.exe+0x5872030
	struct FVector GetRefPosePosition(int BoneIndex);//Offset:Discovery.exe+0x5872120
	struct FName GetParentBone(const struct FName& BoneName);//Offset:Discovery.exe+0x5872E00
	int GetNumLODs();//Offset:Discovery.exe+0x58735C0
	int GetNumBones();//Offset:Discovery.exe+0x5873240
	int GetForcedLOD();//Offset:Discovery.exe+0x5873450
	struct FTransform GetDeltaTransformFromRefPose(const struct FName& BoneName, const struct FName& BaseName);//Offset:Discovery.exe+0x5872CB0
	struct FName GetCurrentSkinWeightProfileName();//Offset:Discovery.exe+0x5872680
	struct FName GetBoneName(int BoneIndex);//Offset:Discovery.exe+0x58730F0
	int GetBoneIndex(const struct FName& BoneName);//Offset:Discovery.exe+0x58731A0
	struct FName FindClosestBone_K2(const struct FVector& TestLocation, float IgnoreScale, bool bRequirePhysicsAsset, struct FVector* BoneLocation);//Offset:Discovery.exe+0x5871A10
	void ClearVertexColorOverride(int LODIndex);//Offset:Discovery.exe+0x58729B0
	void ClearSkinWeightProfile();//Offset:Discovery.exe+0x5872750
	void ClearSkinWeightOverride(int LODIndex);//Offset:Discovery.exe+0x5872810
	bool BoneIsChildOf(const struct FName& BoneName, const struct FName& ParentBoneName);//Offset:Discovery.exe+0x58721D0
};


// Class Engine.SkeletalMeshComponent
// 0x06E0 (0x0F50 - 0x0870)
class USkeletalMeshComponent : public USkinnedMeshComponent
{
public:
	class UAnimBlueprintGeneratedClass*                AnimBlueprintGeneratedClass;                              // 0x0870(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UClass*                                      AnimClass;                                                // 0x0878(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimInstance*                               AnimScriptInstance;                                       // 0x0880(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UAnimInstance*                               PostProcessAnimInstance;                                  // 0x0888(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FSingleAnimationPlayData                    AnimationData;                                            // 0x0890(0x0018) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x10];                                      // 0x08A8(0x0010) MISSED OFFSET
	struct FVector                                     RootBoneTranslation;                                      // 0x08B8(0x0018) (ZeroConstructor, Transient, IsPlainOldData)
	struct FVector                                     LineCheckBoundsScale;                                     // 0x08D0(0x0018) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x30];                                      // 0x08E8(0x0030) MISSED OFFSET
	TArray<class UAnimInstance*>                       LinkedInstances;                                          // 0x0918(0x0010) (ZeroConstructor, Transient)
	TArray<struct FTransform>                          CachedBoneSpaceTransforms;                                // 0x0928(0x0010) (ZeroConstructor, Transient)
	TArray<struct FTransform>                          CachedComponentSpaceTransforms;                           // 0x0938(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData02[0xB0];                                      // 0x0948(0x00B0) MISSED OFFSET
	float                                              GlobalAnimRateScale;                                      // 0x09F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EKinematicBonesUpdateToPhysics>        KinematicBonesUpdateType;                                 // 0x09FC(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EPhysicsTransformUpdateMode>           PhysicsTransformUpdateMode;                               // 0x09FD(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x1];                                       // 0x09FE(0x0001) MISSED OFFSET
	TEnumAsByte<EAnimationMode>                        AnimationMode;                                            // 0x09FF(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x1];                                       // 0x0A00(0x0001) MISSED OFFSET
	unsigned char                                      bDisablePostProcessBlueprint : 1;                         // 0x0A01(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData05 : 2;                                        // 0x0A01(0x0001)
	unsigned char                                      bUpdateOverlapsOnAnimationFinalize : 1;                   // 0x0A01(0x0001) (Edit)
	unsigned char                                      UnknownData06 : 1;                                        // 0x0A01(0x0001)
	unsigned char                                      bHasValidBodies : 1;                                      // 0x0A01(0x0001) (Transient)
	unsigned char                                      bBlendPhysics : 1;                                        // 0x0A01(0x0001) (Transient)
	unsigned char                                      bEnablePhysicsOnDedicatedServer : 1;                      // 0x0A01(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUpdateJointsFromAnimation : 1;                           // 0x0A02(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bAllowClothActors : 1;                                    // 0x0A02(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bDisableClothSimulation : 1;                              // 0x0A02(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bDeferKinematicUpdateToAnimUpdate : 1;                    // 0x0A02(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData07[0x5];                                       // 0x0A03(0x0005) MISSED OFFSET
	unsigned char                                      UnknownData08 : 1;                                        // 0x0A08(0x0001)
	unsigned char                                      bDisableRigidBodyAnimNode : 1;                            // 0x0A08(0x0001) (Edit)
	unsigned char                                      bAllowAnimCurveEvaluation : 1;                            // 0x0A08(0x0001) (Edit)
	unsigned char                                      bDisableAnimCurves : 1;                                   // 0x0A08(0x0001) (Deprecated)
	unsigned char                                      UnknownData09 : 3;                                        // 0x0A08(0x0001)
	unsigned char                                      bCollideWithEnvironment : 1;                              // 0x0A08(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bCollideWithAttachedChildren : 1;                         // 0x0A09(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bForceCollisionUpdate : 1;                                // 0x0A09(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bLocalSpaceSimulation : 1;                                // 0x0A09(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bResetAfterTeleport : 1;                                  // 0x0A09(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData10 : 1;                                        // 0x0A09(0x0001)
	unsigned char                                      bDeferKinematicBoneUpdate : 1;                            // 0x0A09(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bNoSkeletonUpdate : 1;                                    // 0x0A09(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bPauseAnims : 1;                                          // 0x0A09(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUseRefPoseOnInitAnim : 1;                                // 0x0A0A(0x0001) (Edit)
	unsigned char                                      bEnablePerPolyCollision : 1;                              // 0x0A0A(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bForceRefpose : 1;                                        // 0x0A0A(0x0001)
	unsigned char                                      bOnlyAllowAutonomousTickPose : 1;                         // 0x0A0A(0x0001) (Transient)
	unsigned char                                      bIsAutonomousTickPose : 1;                                // 0x0A0A(0x0001) (Transient)
	unsigned char                                      bOldForceRefPose : 1;                                     // 0x0A0A(0x0001)
	unsigned char                                      bShowPrePhysBones : 1;                                    // 0x0A0A(0x0001)
	unsigned char                                      bRequiredBonesUpToDate : 1;                               // 0x0A0A(0x0001) (Transient)
	unsigned char                                      bAnimTreeInitialised : 1;                                 // 0x0A0B(0x0001) (Transient)
	unsigned char                                      bIncludeComponentLocationIntoBounds : 1;                  // 0x0A0B(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bEnableLineCheckWithBounds : 1;                           // 0x0A0B(0x0001)
	unsigned char                                      bPropagateCurvesToSlaves : 1;                             // 0x0A0B(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bSkipKinematicUpdateWhenInterpolating : 1;                // 0x0A0B(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bSkipBoundsUpdateWhenInterpolating : 1;                   // 0x0A0B(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData11 : 2;                                        // 0x0A0B(0x0001)
	unsigned char                                      bNeedsQueuedAnimEventsDispatched : 1;                     // 0x0A0C(0x0001) (Transient)
	unsigned char                                      UnknownData12[0x1];                                       // 0x0A0D(0x0001) MISSED OFFSET
	uint16_t                                           CachedAnimCurveUidVersion;                                // 0x0A0E(0x0002) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              ClothBlendWeight;                                         // 0x0A10(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bWaitForParallelClothTask;                                // 0x0A14(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData13[0x3];                                       // 0x0A15(0x0003) MISSED OFFSET
	TArray<struct FName>                               DisallowedAnimCurves;                                     // 0x0A18(0x0010) (ZeroConstructor, Transient)
	class UBodySetup*                                  BodySetup;                                                // 0x0A28(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData14[0x4];                                       // 0x0A30(0x0004) MISSED OFFSET
	float                                              ClothMaxDistanceScale;                                    // 0x0A34(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnConstraintBroken;                                       // 0x0A38(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPlasticDeformation;                                     // 0x0A48(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class UClass*                                      ClothingSimulationFactory;                                // 0x0A58(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData15[0xF8];                                      // 0x0A60(0x00F8) MISSED OFFSET
	float                                              TeleportDistanceThreshold;                                // 0x0B58(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TeleportRotationThreshold;                                // 0x0B5C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData16[0x8];                                       // 0x0B60(0x0008) MISSED OFFSET
	uint32_t                                           LastPoseTickFrame;                                        // 0x0B68(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData17[0x94];                                      // 0x0B6C(0x0094) MISSED OFFSET
	class UClothingSimulationInteractor*               ClothingInteractor;                                       // 0x0C00(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData18[0xC8];                                      // 0x0C08(0x00C8) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnAnimInitialized;                                        // 0x0CD0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData19[0x270];                                     // 0x0CE0(0x0270) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SkeletalMeshComponent"));
		return ptr;
	}


	void UnlinkAnimClassLayers(class UClass* InClass);//Offset:Discovery.exe+0x5869C90
	void UnbindClothFromMasterPoseComponent(bool bRestoreSimulationSpace);//Offset:Discovery.exe+0x5868D90
	void ToggleDisablePostProcessBlueprint();//Offset:Discovery.exe+0x586B390
	void TermBodiesBelow(const struct FName& ParentBoneName);//Offset:Discovery.exe+0x5867CE0
	void SuspendClothingSimulation();//Offset:Discovery.exe+0x5868EC0
	void Stop();//Offset:Discovery.exe+0x5869780
	void SnapshotPose(struct FPoseSnapshot* Snapshot);//Offset:Discovery.exe+0x58690C0
	void SetUpdateClothInEditor(bool NewUpdateState);//Offset:Discovery.exe+0x1A6CDB0
	void SetUpdateAnimationInEditor(bool NewUpdateState);//Offset:Discovery.exe+0x1A6CDB0
	void SetTeleportRotationThreshold(float Threshold);//Offset:Discovery.exe+0x5868810
	void SetTeleportDistanceThreshold(float Threshold);//Offset:Discovery.exe+0x5868740
	void SetPosition(float InPos, bool bFireNotifies);//Offset:Discovery.exe+0x5869660
	void SetPlayRate(float Rate);//Offset:Discovery.exe+0x5869590
	void SetPhysicsBlendWeight(float PhysicsBlendWeight);//Offset:Discovery.exe+0x5867BA0
	void SetNotifyRigidBodyCollisionBelow(bool bNewNotifyRigidBodyCollision, const struct FName& BoneName, bool bIncludeSelf);//Offset:Discovery.exe+0x58684E0
	void SetMorphTarget(const struct FName& MorphTargetName, float Value, bool bRemoveZeroWeight);//Offset:Discovery.exe+0x5869250
	void SetEnablePhysicsBlending(bool bNewBlendPhysics);//Offset:Discovery.exe+0x5867B00
	void SetEnableGravityOnAllBodiesBelow(bool bEnableGravity, const struct FName& BoneName, bool bIncludeSelf);//Offset:Discovery.exe+0x5868210
	void SetEnableBodyGravity(bool bEnableGravity, const struct FName& BoneName);//Offset:Discovery.exe+0x58683F0
	void SetDisablePostProcessBlueprint(bool bInDisablePostProcess);//Offset:Discovery.exe+0x586B2C0
	void SetDisableAnimCurves(bool bInDisableAnimCurves);//Offset:Discovery.exe+0x5868BD0
	void SetConstraintProfileForAll(const struct FName& ProfileName, bool bDefaultIfNotFound);//Offset:Discovery.exe+0x5866C40
	void SetConstraintProfile(const struct FName& JointName, const struct FName& ProfileName, bool bDefaultIfNotFound);//Offset:Discovery.exe+0x5866D30
	void SetClothMaxDistanceScale(float Scale);//Offset:Discovery.exe+0x5868F20
	void SetBodyNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision, const struct FName& BoneName);//Offset:Discovery.exe+0x5868620
	void SetAnimClass(class UClass* NewClass);//Offset:Discovery.exe+0x586A0E0
	void SetAnimationMode(TEnumAsByte<EAnimationMode> InAnimationMode);//Offset:Discovery.exe+0x5869A00
	void SetAnimation(class UAnimationAsset* NewAnimToPlay);//Offset:Discovery.exe+0x5869840
	void SetAngularLimits(const struct FName& InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle);//Offset:Discovery.exe+0x58664A0
	void SetAllowRigidBodyAnimNode(bool bInAllow, bool bReinitAnim);//Offset:Discovery.exe+0x5868CA0
	void SetAllowedAnimCurvesEvaluation(TArray<struct FName> List, bool bAllow);//Offset:Discovery.exe+0x58688B0
	void SetAllowClothActors(bool bInAllow);//Offset:Discovery.exe+0x5869020
	void SetAllowAnimCurveEvaluation(bool bInAllow);//Offset:Discovery.exe+0x5868B00
	void SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);//Offset:Discovery.exe+0x5866FE0
	void SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);//Offset:Discovery.exe+0x5867120
	void SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType);//Offset:Discovery.exe+0x5866E60
	void SetAllBodiesSimulatePhysics(bool bNewSimulate);//Offset:Discovery.exe+0x5867C40
	void SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType);//Offset:Discovery.exe+0x5867540
	void SetAllBodiesBelowSimulatePhysics(const struct FName& InBoneName, bool bNewSimulate, bool bIncludeSelf);//Offset:Discovery.exe+0x5867650
	void SetAllBodiesBelowPhysicsDisabled(const struct FName& InBoneName, bool bDisabled, bool bIncludeSelf);//Offset:Discovery.exe+0x58679B0
	void SetAllBodiesBelowPhysicsBlendWeight(const struct FName& InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType, bool bIncludeSelf);//Offset:Discovery.exe+0x58673A0
	void SetAllBodiesBelowLinearVelocity(const struct FName& InBoneName, const struct FVector& LinearVelocity, bool bIncludeSelf);//Offset:Discovery.exe+0x5867860
	void ResumeClothingSimulation();//Offset:Discovery.exe+0x5868EA0
	void ResetClothTeleportMode();//Offset:Discovery.exe+0x5868E50
	void ResetAnimInstanceDynamics(enum class ETeleportType InTeleportType);//Offset:Discovery.exe+0x5869A90
	void ResetAllowedAnimCurveEvaluation();//Offset:Discovery.exe+0x58689C0
	void ResetAllBodiesSimulatePhysics();//Offset:Discovery.exe+0x5867630
	void PlayAnimation(class UAnimationAsset* NewAnimToPlay, bool bLooping);//Offset:Discovery.exe+0x58698E0
	void Play(bool bLooping);//Offset:Discovery.exe+0x58697A0
	void OverrideAnimationData(class UAnimationAsset* InAnimToPlay, bool bIsLooping, bool bIsPlaying, float Position, float PlayRate);//Offset:Discovery.exe+0x5869380
	void LinkAnimGraphByTag(const struct FName& InTag, class UClass* InClass);//Offset:Discovery.exe+0x5869DD0
	void LinkAnimClassLayers(class UClass* InClass);//Offset:Discovery.exe+0x5869D30
	bool K2_GetClosestPointOnPhysicsAsset(const struct FVector& WorldPosition, struct FVector* ClosestWorldPosition, struct FVector* Normal, struct FName* BoneName, float* Distance);//Offset:Discovery.exe+0x1AB5CE0
	bool IsPlaying();//Offset:Discovery.exe+0x5869750
	bool IsClothingSimulationSuspended();//Offset:Discovery.exe+0x5868E70
	bool IsBodyGravityEnabled(const struct FName& BoneName);//Offset:Discovery.exe+0x5868350
	bool HasValidAnimationInstance();//Offset:Discovery.exe+0x5869B20
	bool GetTransformAttribute_Ref(const struct FName& BoneName, const struct FName& AttributeName, enum class ECustomBoneAttributeLookup LookupType, struct FTransform* OutValue);//Offset:Discovery.exe+0x586AEF0
	bool GetTransformAttribute(const struct FName& BoneName, const struct FName& AttributeName, const struct FTransform& DefaultValue, enum class ECustomBoneAttributeLookup LookupType, struct FTransform* OutValue);//Offset:Discovery.exe+0x586A620
	float GetTeleportRotationThreshold();//Offset:Discovery.exe+0x58687E0
	float GetTeleportDistanceThreshold();//Offset:Discovery.exe+0x58687E0
	bool GetStringAttribute_Ref(const struct FName& BoneName, const struct FName& AttributeName, enum class ECustomBoneAttributeLookup LookupType, struct FString* OutValue);//Offset:Discovery.exe+0x586AB60
	bool GetStringAttribute(const struct FName& BoneName, const struct FName& AttributeName, const struct FString& DefaultValue, enum class ECustomBoneAttributeLookup LookupType, struct FString* OutValue);//Offset:Discovery.exe+0x586A180
	struct FVector GetSkeletalCenterOfMass();//Offset:Discovery.exe+0x58680C0
	class UAnimInstance* GetPostProcessInstance();//Offset:Discovery.exe+0x586A050
	float GetPosition();//Offset:Discovery.exe+0x5869630
	float GetPlayRate();//Offset:Discovery.exe+0x5869560
	float GetMorphTarget(const struct FName& MorphTargetName);//Offset:Discovery.exe+0x5869190
	class UAnimInstance* GetLinkedAnimLayerInstanceByGroup(const struct FName& InGroup);//Offset:Discovery.exe+0x5869BF0
	class UAnimInstance* GetLinkedAnimLayerInstanceByClass(class UClass* InClass);//Offset:Discovery.exe+0x5869B50
	void GetLinkedAnimGraphInstancesByTag(const struct FName& InTag, TArray<class UAnimInstance*>* OutLinkedInstances);//Offset:Discovery.exe+0x5869EB0
	class UAnimInstance* GetLinkedAnimGraphInstanceByTag(const struct FName& InTag);//Offset:Discovery.exe+0x5869FB0
	bool GetIntegerAttribute_Ref(const struct FName& BoneName, const struct FName& AttributeName, enum class ECustomBoneAttributeLookup LookupType, int* OutValue);//Offset:Discovery.exe+0x586AD30
	bool GetIntegerAttribute(const struct FName& BoneName, const struct FName& AttributeName, int DefaultValue, enum class ECustomBoneAttributeLookup LookupType, int* OutValue);//Offset:Discovery.exe+0x586A410
	bool GetFloatAttribute_Ref(const struct FName& BoneName, const struct FName& AttributeName, enum class ECustomBoneAttributeLookup LookupType, float* OutValue);//Offset:Discovery.exe+0x586B100
	bool GetFloatAttribute(const struct FName& BoneName, const struct FName& AttributeName, float DefaultValue, enum class ECustomBoneAttributeLookup LookupType, float* OutValue);//Offset:Discovery.exe+0x586A950
	bool GetDisablePostProcessBlueprint();//Offset:Discovery.exe+0x586B360
	bool GetDisableAnimCurves();//Offset:Discovery.exe+0x5868BA0
	void GetCurrentJointAngles(const struct FName& InBoneName, float* Swing1Angle, float* TwistAngle, float* Swing2Angle);//Offset:Discovery.exe+0x58662F0
	void GetConstraintsFromBody(const struct FName& BodyName, bool bParentConstraints, bool bChildConstraints, bool bIncludesTerminated, TArray<struct FConstraintInstanceAccessor>* OutConstraints);//Offset:Discovery.exe+0x5866620
	void GetConstraints(bool bIncludesTerminated, TArray<struct FConstraintInstanceAccessor>* OutConstraints);//Offset:Discovery.exe+0x5866820
	struct FConstraintInstanceAccessor GetConstraintByName(const struct FName& ConstraintName, bool bIncludesTerminated);//Offset:Discovery.exe+0x5866930
	float GetClothMaxDistanceScale();//Offset:Discovery.exe+0x5868FC0
	class UClothingSimulationInteractor* GetClothingSimulationInteractor();//Offset:Discovery.exe+0x5868710
	float GetBoneMass(const struct FName& BoneName, bool bScaleMass);//Offset:Discovery.exe+0x5868120
	struct FVector GetBoneLinearVelocity(const struct FName& InBoneName);//Offset:Discovery.exe+0x58677A0
	class UAnimInstance* GetAnimInstance();//Offset:Discovery.exe+0x586A080
	class UClass* GetAnimClass();//Offset:Discovery.exe+0x586A0B0
	TEnumAsByte<EAnimationMode> GetAnimationMode();//Offset:Discovery.exe+0x58699D0
	bool GetAllowRigidBodyAnimNode();//Offset:Discovery.exe+0x5868C70
	bool GetAllowedAnimCurveEvaluate();//Offset:Discovery.exe+0x5868AD0
	bool GetAllowClothActors();//Offset:Discovery.exe+0x5868FF0
	void ForceClothNextUpdateTeleportAndReset();//Offset:Discovery.exe+0x5868EE0
	void ForceClothNextUpdateTeleport();//Offset:Discovery.exe+0x5868F00
	struct FName FindConstraintBoneName(int ConstraintIndex);//Offset:Discovery.exe+0x5866B90
	void ClearMorphTargets();//Offset:Discovery.exe+0x5869230
	void BreakConstraint(const struct FVector& Impulse, const struct FVector& HitLocation, const struct FName& InBoneName);//Offset:Discovery.exe+0x5866A30
	void BindClothToMasterPoseComponent();//Offset:Discovery.exe+0x5868E30
	void AllowAnimCurveEvaluation(const struct FName& NameOfCurve, bool bAllow);//Offset:Discovery.exe+0x58689E0
	void AddImpulseToAllBodiesBelow(const struct FVector& Impulse, const struct FName& BoneName, bool bVelChange, bool bIncludeSelf);//Offset:Discovery.exe+0x5867D80
	void AddForceToAllBodiesBelow(const struct FVector& Force, const struct FName& BoneName, bool bAccelChange, bool bIncludeSelf);//Offset:Discovery.exe+0x5867F20
	void AccumulateAllBodiesBelowPhysicsBlendWeight(const struct FName& InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType);//Offset:Discovery.exe+0x5867260
};


// Class Engine.SpringArmComponent
// 0x0100 (0x03D0 - 0x02D0)
class USpringArmComponent : public USceneComponent
{
public:
	float                                              TargetArmLength;                                          // 0x02D0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x02D4(0x0004) MISSED OFFSET
	struct FVector                                     SocketOffset;                                             // 0x02D8(0x0018) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     TargetOffset;                                             // 0x02F0(0x0018) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ProbeSize;                                                // 0x0308(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ECollisionChannel>                     ProbeChannel;                                             // 0x030C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x030D(0x0003) MISSED OFFSET
	unsigned char                                      bDoCollisionTest : 1;                                     // 0x0310(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUsePawnControlRotation : 1;                              // 0x0310(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bInheritPitch : 1;                                        // 0x0310(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bInheritYaw : 1;                                          // 0x0310(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bInheritRoll : 1;                                         // 0x0310(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bEnableCameraLag : 1;                                     // 0x0310(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bEnableCameraRotationLag : 1;                             // 0x0310(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUseCameraLagSubstepping : 1;                             // 0x0310(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bDrawDebugLagMarkers : 1;                                 // 0x0311(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData02[0x2];                                       // 0x0312(0x0002) MISSED OFFSET
	float                                              CameraLagSpeed;                                           // 0x0314(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CameraRotationLagSpeed;                                   // 0x0318(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CameraLagMaxTimeStep;                                     // 0x031C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CameraLagMaxDistance;                                     // 0x0320(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bClampToMaxPhysicsDeltaTime : 1;                          // 0x0324(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData03[0xAB];                                      // 0x0325(0x00AB) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SpringArmComponent"));
		return ptr;
	}


	bool IsCollisionFixApplied();//Offset:Discovery.exe+0x5893F30
	struct FVector GetUnfixedCameraPosition();//Offset:Discovery.exe+0x5815AB0
	struct FRotator GetTargetRotation();//Offset:Discovery.exe+0x5893F60
};


// Class Engine.StaticMeshComponent
// 0x0060 (0x0620 - 0x05C0)
class UStaticMeshComponent : public UMeshComponent
{
public:
	int                                                MinLOD;                                                   // 0x05C0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                SubDivisionStepSize;                                      // 0x05C4(0x0004) (ZeroConstructor, IsPlainOldData)
	class UStaticMesh*                                 StaticMesh;                                               // 0x05C8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	struct FColor                                      WireframeColorOverride;                                   // 0x05D0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bEvaluateWorldPositionOffset : 1;                         // 0x05D4(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bOverrideWireframeColor : 1;                              // 0x05D4(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bOverrideMinLod : 1;                                      // 0x05D4(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bOverrideNavigationExport : 1;                            // 0x05D4(0x0001) (Transient)
	unsigned char                                      bForceNavigationObstacle : 1;                             // 0x05D4(0x0001) (Transient)
	unsigned char                                      bDisallowMeshPaintPerInstance : 1;                        // 0x05D4(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bIgnoreInstanceForTextureStreaming : 1;                   // 0x05D4(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bOverrideLightMapRes : 1;                                 // 0x05D4(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bCastDistanceFieldIndirectShadow : 1;                     // 0x05D5(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bOverrideDistanceFieldSelfShadowBias : 1;                 // 0x05D5(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUseSubDivisions : 1;                                     // 0x05D5(0x0001)
	unsigned char                                      bUseDefaultCollision : 1;                                 // 0x05D5(0x0001) (Edit)
	unsigned char                                      bSortTriangles : 1;                                       // 0x05D5(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bReverseCulling : 1;                                      // 0x05D5(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x2];                                       // 0x05D6(0x0002) MISSED OFFSET
	int                                                OverriddenLightMapRes;                                    // 0x05D8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              DistanceFieldIndirectShadowMinVisibility;                 // 0x05DC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              DistanceFieldSelfShadowBias;                              // 0x05E0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              StreamingDistanceMultiplier;                              // 0x05E4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<struct FStaticMeshComponentLODInfo>         LODData;                                                  // 0x05E8(0x0010) (ZeroConstructor, Transient)
	TArray<struct FStreamingTextureBuildInfo>          StreamingTextureData;                                     // 0x05F8(0x0010) (ZeroConstructor)
	struct FLightmassPrimitiveSettings                 LightmassSettings;                                        // 0x0608(0x0018) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.StaticMeshComponent"));
		return ptr;
	}


	bool SetStaticMesh(class UStaticMesh* NewMesh);//Offset:Discovery.exe+0x5897950
	void SetReverseCulling(bool ReverseCulling);//Offset:Discovery.exe+0x58975E0
	void SetForcedLodModel(int NewForcedLodModel);//Offset:Discovery.exe+0x58978B0
	void SetEvaluateWorldPositionOffsetInRayTracing(bool NewValue);//Offset:Discovery.exe+0x5897770
	void SetDistanceFieldSelfShadowBias(float NewValue);//Offset:Discovery.exe+0x5897810
	void OnRep_StaticMesh(class UStaticMesh* OldStaticMesh);//Offset:Discovery.exe+0x58979F0
	void GetLocalBounds(struct FVector* Min, struct FVector* Max);//Offset:Discovery.exe+0x5897680
};


// Class Engine.ShapeComponent
// 0x0020 (0x05B0 - 0x0590)
class UShapeComponent : public UPrimitiveComponent
{
public:
	class UBodySetup*                                  ShapeBodySetup;                                           // 0x0590(0x0008) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)
	class UClass*                                      AreaClass;                                                // 0x0598(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FColor                                      ShapeColor;                                               // 0x05A0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bDrawOnlyIfSelected : 1;                                  // 0x05A4(0x0001)
	unsigned char                                      bShouldCollideWhenPlacing : 1;                            // 0x05A4(0x0001)
	unsigned char                                      bDynamicObstacle : 1;                                     // 0x05A4(0x0001) (Edit)
	unsigned char                                      UnknownData00[0xB];                                       // 0x05A5(0x000B) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ShapeComponent"));
		return ptr;
	}

};


// Class Engine.BoxComponent
// 0x0020 (0x05D0 - 0x05B0)
class UBoxComponent : public UShapeComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x05B0(0x0010) MISSED OFFSET
	float                                              LineThickness;                                            // 0x05C0(0x0004) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0xC];                                       // 0x05C4(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.BoxComponent"));
		return ptr;
	}


	void SetBoxExtent(const struct FVector& InBoxExtent, bool bUpdateOverlaps);//Offset:Discovery.exe+0x56B8BB0
	struct FVector GetUnscaledBoxExtent();//Offset:Discovery.exe+0x56B8AF0
	struct FVector GetScaledBoxExtent();//Offset:Discovery.exe+0x56B8B40
};


// Class Engine.InstancedStaticMeshComponent
// 0x0150 (0x0770 - 0x0620)
class UInstancedStaticMeshComponent : public UStaticMeshComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0620(0x0008) MISSED OFFSET
	TArray<struct FInstancedStaticMeshInstanceData>    PerInstanceSMData;                                        // 0x0628(0x0010) (Edit, ZeroConstructor)
	TArray<struct FMatrix>                             PerInstancePrevTransform;                                 // 0x0638(0x0010) (ZeroConstructor, Transient)
	int                                                NumCustomDataFloats;                                      // 0x0648(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x064C(0x0004) MISSED OFFSET
	TArray<float>                                      PerInstanceSMCustomData;                                  // 0x0650(0x0010) (Edit, EditFixedSize, ZeroConstructor)
	int                                                InstancingRandomSeed;                                     // 0x0660(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0664(0x0004) MISSED OFFSET
	TArray<struct FInstancedStaticMeshRandomSeed>      AdditionalRandomSeeds;                                    // 0x0668(0x0010) (ZeroConstructor)
	int                                                InstanceStartCullDistance;                                // 0x0678(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                InstanceEndCullDistance;                                  // 0x067C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<int>                                        InstanceReorderTable;                                     // 0x0680(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData03[0xC0];                                      // 0x0690(0x00C0) MISSED OFFSET
	int                                                NumPendingLightmaps;                                      // 0x0750(0x0004) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x0754(0x0004) MISSED OFFSET
	TArray<struct FInstancedStaticMeshMappingInfo>     CachedMappings;                                           // 0x0758(0x0010) (ZeroConstructor, Transient, DuplicateTransient)
	unsigned char                                      UnknownData05[0x8];                                       // 0x0768(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.InstancedStaticMeshComponent"));
		return ptr;
	}


	bool UpdateInstanceTransform(int InstanceIndex, const struct FTransform& NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);//Offset:Discovery.exe+0x5731440
	bool SetCustomDataValue(int InstanceIndex, int CustomDataIndex, float CustomDataValue, bool bMarkRenderStateDirty);//Offset:Discovery.exe+0x5731830
	void SetCullDistances(int StartCullDistance, int EndCullDistance);//Offset:Discovery.exe+0x5730C60
	bool RemoveInstances(TArray<int> InstancesToRemove);//Offset:Discovery.exe+0x5730E30
	bool RemoveInstance(int InstanceIndex);//Offset:Discovery.exe+0x5730EF0
	bool IsValidInstance(int InstanceIndex);//Offset:Discovery.exe+0x5730D40
	bool GetInstanceTransform(int InstanceIndex, bool bWorldSpace, struct FTransform* OutInstanceTransform);//Offset:Discovery.exe+0x5731690
	TArray<int> GetInstancesOverlappingSphere(const struct FVector& Center, float Radius, bool bSphereInWorldSpace);//Offset:Discovery.exe+0x5730AE0
	TArray<int> GetInstancesOverlappingBox(const struct FBox& Box, bool bBoxInWorldSpace);//Offset:Discovery.exe+0x57309A0
	int GetInstanceCount();//Offset:Discovery.exe+0x5730DE0
	void ClearInstances();//Offset:Discovery.exe+0x5730E10
	bool BatchUpdateInstancesTransforms(int StartInstanceIndex, TArray<struct FTransform> NewInstancesTransforms, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);//Offset:Discovery.exe+0x5731230
	bool BatchUpdateInstancesTransform(int StartInstanceIndex, int NumInstances, const struct FTransform& NewInstancesTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);//Offset:Discovery.exe+0x5730F90
	int AddInstanceWorldSpace(const struct FTransform& WorldTransform);//Offset:Discovery.exe+0x57319C0
	TArray<int> AddInstances(TArray<struct FTransform> InstanceTransforms, bool bShouldReturnIndices, bool bWorldSpace);//Offset:Discovery.exe+0x5731AC0
	int AddInstance(const struct FTransform& InstanceTransform, bool bWorldSpace);//Offset:Discovery.exe+0x5731C60
};


// Class Engine.HierarchicalInstancedStaticMeshComponent
// 0x0180 (0x08F0 - 0x0770)
class UHierarchicalInstancedStaticMeshComponent : public UInstancedStaticMeshComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0770(0x0008) MISSED OFFSET
	unsigned char                                      bUseTranslatedInstanceSpace : 1;                          // 0x0778(0x0001)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0779(0x0007) MISSED OFFSET
	struct FVector                                     TranslatedInstanceSpaceOrigin;                            // 0x0780(0x0018) (ZeroConstructor, IsPlainOldData)
	TArray<int>                                        SortedInstances;                                          // 0x0798(0x0010) (ZeroConstructor)
	int                                                NumBuiltInstances;                                        // 0x07A8(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x07AC(0x0004) MISSED OFFSET
	struct FBox                                        BuiltInstanceBounds;                                      // 0x07B0(0x0038) (ZeroConstructor, IsPlainOldData)
	struct FBox                                        UnbuiltInstanceBounds;                                    // 0x07E8(0x0038) (ZeroConstructor, IsPlainOldData)
	TArray<struct FBox>                                UnbuiltInstanceBoundsList;                                // 0x0820(0x0010) (ZeroConstructor)
	unsigned char                                      bEnableDensityScaling : 1;                                // 0x0830(0x0001)
	unsigned char                                      UnknownData03[0x7];                                       // 0x0831(0x0007) MISSED OFFSET
	int                                                OcclusionLayerNumNodes;                                   // 0x0838(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x083C(0x0004) MISSED OFFSET
	struct FBoxSphereBounds                            CacheMeshExtendedBounds;                                  // 0x0840(0x0038) (ZeroConstructor, IsPlainOldData)
	bool                                               bDisableCollision;                                        // 0x0878(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x3];                                       // 0x0879(0x0003) MISSED OFFSET
	int                                                InstanceCountToRender;                                    // 0x087C(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x70];                                      // 0x0880(0x0070) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.HierarchicalInstancedStaticMeshComponent"));
		return ptr;
	}

};


// Class Engine.PrimaryDataAsset
// 0x0000 (0x0030 - 0x0030)
class UPrimaryDataAsset : public UDataAsset
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.PrimaryDataAsset"));
		return ptr;
	}


	void ReceivePreSave();//Offset:Discovery.exe+0x327F8B0
};


// Class Engine.PlayerCameraManager
// 0x3058 (0x3320 - 0x02C8)
class APlayerCameraManager : public AActor
{
public:
	class APlayerController*                           PCOwner;                                                  // 0x02C8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class USceneComponent*                             TransformComponent;                                       // 0x02D0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x02D8(0x0008) MISSED OFFSET
	float                                              DefaultFOV;                                               // 0x02E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x02E4(0x0004) MISSED OFFSET
	float                                              DefaultOrthoWidth;                                        // 0x02E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x02EC(0x0004) MISSED OFFSET
	float                                              DefaultAspectRatio;                                       // 0x02F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x6C];                                      // 0x02F4(0x006C) MISSED OFFSET
	struct FCameraCacheEntry                           CameraCache;                                              // 0x0360(0x07B0) (Transient)
	struct FCameraCacheEntry                           LastFrameCameraCache;                                     // 0x0B10(0x07B0) (Transient)
	struct FTViewTarget                                ViewTarget;                                               // 0x12C0(0x07C0) (Transient)
	struct FTViewTarget                                PendingViewTarget;                                        // 0x1A80(0x07C0) (Transient)
	unsigned char                                      UnknownData04[0x30];                                      // 0x2240(0x0030) MISSED OFFSET
	struct FCameraCacheEntry                           CameraCachePrivate;                                       // 0x2270(0x07B0) (Transient)
	struct FCameraCacheEntry                           LastFrameCameraCachePrivate;                              // 0x2A20(0x07B0) (Transient)
	TArray<class UCameraModifier*>                     ModifierList;                                             // 0x31D0(0x0010) (ZeroConstructor, Transient)
	TArray<class UClass*>                              DefaultModifiers;                                         // 0x31E0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	float                                              FreeCamDistance;                                          // 0x31F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x31F4(0x0004) MISSED OFFSET
	struct FVector                                     FreeCamOffset;                                            // 0x31F8(0x0018) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     ViewTargetOffset;                                         // 0x3210(0x0018) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnAudioFadeChangeEvent;                                   // 0x3228(0x0010) (ZeroConstructor, Transient, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData06[0x18];                                      // 0x3238(0x0018) MISSED OFFSET
	TArray<TScriptInterface<class UCameraLensEffectInterface>> CameraLensEffects;                                        // 0x3250(0x0010) (ZeroConstructor, Transient)
	class UCameraModifier_CameraShake*                 CachedCameraShakeMod;                                     // 0x3260(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UCameraAnimInst*                             AnimInstPool[0x8];                                        // 0x3268(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TArray<struct FPostProcessSettings>                PostProcessBlendCache;                                    // 0x32A8(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData07[0x10];                                      // 0x32B8(0x0010) MISSED OFFSET
	TArray<class UCameraAnimInst*>                     ActiveAnims;                                              // 0x32C8(0x0010) (ZeroConstructor, Transient)
	TArray<class UCameraAnimInst*>                     FreeAnims;                                                // 0x32D8(0x0010) (ZeroConstructor, Transient)
	class ACameraActor*                                AnimCameraActor;                                          // 0x32E8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      bIsOrthographic : 1;                                      // 0x32F0(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bDefaultConstrainAspectRatio : 1;                         // 0x32F0(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData08 : 4;                                        // 0x32F0(0x0001)
	unsigned char                                      bClientSimulatingViewTarget : 1;                          // 0x32F0(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUseClientSideCameraUpdates : 1;                          // 0x32F0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData09 : 2;                                        // 0x32F1(0x0001)
	unsigned char                                      bGameCameraCutThisFrame : 1;                              // 0x32F1(0x0001) (BlueprintVisible, BlueprintReadOnly, Transient)
	unsigned char                                      UnknownData10[0x2];                                       // 0x32F2(0x0002) MISSED OFFSET
	float                                              ViewPitchMin;                                             // 0x32F4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ViewPitchMax;                                             // 0x32F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ViewYawMin;                                               // 0x32FC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ViewYawMax;                                               // 0x3300(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ViewRollMin;                                              // 0x3304(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ViewRollMax;                                              // 0x3308(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData11[0x4];                                       // 0x330C(0x0004) MISSED OFFSET
	float                                              ServerUpdateCameraTimeout;                                // 0x3310(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData12[0xC];                                       // 0x3314(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.PlayerCameraManager"));
		return ptr;
	}


	void SwapPendingViewTargetWhenUsingClientSideCameraUpdates();//Offset:Discovery.exe+0x58223A0
	void StopCameraShake(class UCameraShakeBase* ShakeInstance, bool bImmediately);//Offset:Discovery.exe+0x5823190
	void StopCameraFade();//Offset:Discovery.exe+0x154C630
	void StopCameraAnimInst(class UCameraAnimInst* AnimInst, bool bImmediate);//Offset:Discovery.exe+0x5822480
	void StopAllInstancesOfCameraShakeFromSource(class UClass* Shake, class UCameraShakeSourceComponent* SourceComponent, bool bImmediately);//Offset:Discovery.exe+0x5822EC0
	void StopAllInstancesOfCameraShake(class UClass* Shake, bool bImmediately);//Offset:Discovery.exe+0x58230A0
	void StopAllInstancesOfCameraAnim(class UCameraAnim* Anim, bool bImmediate);//Offset:Discovery.exe+0x5822570
	void StopAllCameraShakesFromSource(class UCameraShakeSourceComponent* SourceComponent, bool bImmediately);//Offset:Discovery.exe+0x5822DD0
	void StopAllCameraShakes(bool bImmediately);//Offset:Discovery.exe+0x5823000
	void StopAllCameraAnims(bool bImmediate);//Offset:Discovery.exe+0x58223E0
	class UCameraShakeBase* StartCameraShakeFromSource(class UClass* ShakeClass, class UCameraShakeSourceComponent* SourceComponent, float Scale, enum class ECameraShakePlaySpace PlaySpace, const struct FRotator& UserPlaySpaceRot);//Offset:Discovery.exe+0x5823280
	class UCameraShakeBase* StartCameraShake(class UClass* ShakeClass, float Scale, enum class ECameraShakePlaySpace PlaySpace, const struct FRotator& UserPlaySpaceRot);//Offset:Discovery.exe+0x5823470
	void StartCameraFade(float FromAlpha, float ToAlpha, float Duration, const struct FLinearColor& Color, bool bShouldFadeAudio, bool bHoldWhenFinished);//Offset:Discovery.exe+0x5822BA0
	void SetManualCameraFade(float InFadeAmount, const struct FLinearColor& Color, bool bInFadeAudio);//Offset:Discovery.exe+0x5822A60
	void SetGameCameraCutThisFrame();//Offset:Discovery.exe+0x58223C0
	void RemoveGenericCameraLensEffect(const TScriptInterface<class UCameraLensEffectInterface>& Emitter);//Offset:Discovery.exe+0x5823750
	bool RemoveCameraModifier(class UCameraModifier* ModifierToRemove);//Offset:Discovery.exe+0x58239A0
	void RemoveCameraLensEffect(class AEmitterCameraLensEffectBase* Emitter);//Offset:Discovery.exe+0x5823610
	class UCameraAnimInst* PlayCameraAnim(class UCameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, enum class ECameraShakePlaySpace PlaySpace, const struct FRotator& UserPlaySpaceRot);//Offset:Discovery.exe+0x5822660
	void PhotographyCameraModify(const struct FVector& NewCameraLocation, const struct FVector& PreviousCameraLocation, const struct FVector& OriginalCameraLocation, struct FVector* ResultCameraLocation);//Offset:Discovery.exe+0x5823BB0
	void OnPhotographySessionStart();//Offset:Discovery.exe+0x14624B0
	void OnPhotographySessionEnd();//Offset:Discovery.exe+0x1462490
	void OnPhotographyMultiPartCaptureStart();//Offset:Discovery.exe+0x1462470
	void OnPhotographyMultiPartCaptureEnd();//Offset:Discovery.exe+0x19BFD70
	class APlayerController* GetOwningPlayerController();//Offset:Discovery.exe+0x5823B80
	float GetFOVAngle();//Offset:Discovery.exe+0x5823970
	struct FRotator GetCameraRotation();//Offset:Discovery.exe+0x5823910
	struct FVector GetCameraLocation();//Offset:Discovery.exe+0x58238B0
	class UCameraModifier* FindCameraModifierByClass(class UClass* ModifierClass);//Offset:Discovery.exe+0x5823A40
	void ClearCameraLensEffects();//Offset:Discovery.exe+0x56C6270
	bool BlueprintUpdateCamera(class AActor* CameraTarget, struct FVector* NewCameraLocation, struct FRotator* NewCameraRotation, float* NewCameraFOV);//Offset:Discovery.exe+0x327F8B0
	class UCameraModifier* AddNewCameraModifier(class UClass* ModifierClass);//Offset:Discovery.exe+0x5823AE0
	TScriptInterface<class UCameraLensEffectInterface> AddGenericCameraLensEffect(class UClass* LensEffectEmitterClass);//Offset:Discovery.exe+0x5823800
	class AEmitterCameraLensEffectBase* AddCameraLensEffect(class UClass* LensEffectEmitterClass);//Offset:Discovery.exe+0x58236B0
};


// Class Engine.CurveBase
// 0x0008 (0x0030 - 0x0028)
class UCurveBase : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.CurveBase"));
		return ptr;
	}


	void GetValueRange(float* MinValue, float* MaxValue);//Offset:Discovery.exe+0x56E0E40
	void GetTimeRange(float* MinTime, float* MaxTime);//Offset:Discovery.exe+0x56E0F40
};


// Class Engine.GameEngine
// 0x0050 (0x0DF8 - 0x0DA8)
class UGameEngine : public UEngine
{
public:
	float                                              MaxDeltaTime;                                             // 0x0DA8(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              ServerFlushLogInterval;                                   // 0x0DAC(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	class UGameInstance*                               GameInstance;                                             // 0x0DB0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x40];                                      // 0x0DB8(0x0040) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.GameEngine"));
		return ptr;
	}

};


// Class Engine.StreamableRenderAsset
// 0x00A8 (0x00D0 - 0x0028)
class UStreamableRenderAsset : public UObject
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0028(0x0018) MISSED OFFSET
	double                                             ForceMipLevelsToBeResidentTimestamp;                      // 0x0040(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	int                                                NumCinematicMipLevels;                                    // 0x0048(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x004C(0x0004) MISSED OFFSET
	struct FPerQualityLevelInt                         NoRefStreamingLODBias;                                    // 0x0050(0x0068)
	int                                                StreamingIndex;                                           // 0x00B8(0x0004) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)
	int                                                CachedCombinedLODBias;                                    // 0x00BC(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      NeverStream : 1;                                          // 0x00C0(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bGlobalForceMipLevelsToBeResident : 1;                    // 0x00C0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bHasStreamingUpdatePending : 1;                           // 0x00C0(0x0001) (Transient)
	unsigned char                                      bForceMiplevelsToBeResident : 1;                          // 0x00C0(0x0001) (Transient)
	unsigned char                                      bIgnoreStreamingMipBias : 1;                              // 0x00C0(0x0001) (Transient)
	unsigned char                                      bUseCinematicMipLevels : 1;                               // 0x00C0(0x0001) (Transient)
	unsigned char                                      UnknownData02[0xF];                                       // 0x00C1(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.StreamableRenderAsset"));
		return ptr;
	}


	void SetForceMipLevelsToBeResident(float Seconds, int CinematicLODGroupMask);//Offset:Discovery.exe+0x589ABE0
};


// Class Engine.Texture
// 0x0120 (0x01F0 - 0x00D0)
class UTexture : public UStreamableRenderAsset
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x00D0(0x0010) MISSED OFFSET
	struct FGuid                                       LightingGuid;                                             // 0x00E0(0x0010) (ZeroConstructor, IsPlainOldData)
	int                                                LevelIndex;                                               // 0x00F0(0x0004) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)
	int                                                LODBias;                                                  // 0x00F4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ETextureCompressionSettings>           CompressionSettings;                                      // 0x00F8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ETextureFilter>                        Filter;                                                   // 0x00F9(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	enum class ETextureMipLoadOptions                  MipLoadOptions;                                           // 0x00FA(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ETextureGroup>                         LODGroup;                                                 // 0x00FB(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FPerPlatformFloat                           Downscale;                                                // 0x00FC(0x0004) (Edit)
	enum class ETextureDownscaleOptions                DownscaleOptions;                                         // 0x0100(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      SRGB : 1;                                                 // 0x0101(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bNoTiling : 1;                                            // 0x0101(0x0001)
	unsigned char                                      VirtualTextureStreaming : 1;                              // 0x0101(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      CompressionYCoCg : 1;                                     // 0x0101(0x0001)
	unsigned char                                      bNotOfflineProcessed : 1;                                 // 0x0101(0x0001) (Transient)
	unsigned char                                      bAsyncResourceReleaseHasBeenStarted : 1;                  // 0x0101(0x0001) (Transient)
	unsigned char                                      UnknownData01[0x6];                                       // 0x0102(0x0006) MISSED OFFSET
	TArray<class UAssetUserData*>                      AssetUserData;                                            // 0x0108(0x0010) (Edit, ExportObject, ZeroConstructor)
	unsigned char                                      UnknownData02[0xD8];                                      // 0x0118(0x00D8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.Texture"));
		return ptr;
	}

};


// Class Engine.WorldSettings
// 0x0210 (0x04D8 - 0x02C8)
class AWorldSettings : public AInfo
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x02C8(0x0008) MISSED OFFSET
	int                                                VisibilityCellSize;                                       // 0x02D0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EVisibilityAggressiveness>             VisibilityAggressiveness;                                 // 0x02D4(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bPrecomputeVisibility : 1;                                // 0x02D5(0x0001) (Edit)
	unsigned char                                      bPlaceCellsOnlyAlongCameraTracks : 1;                     // 0x02D5(0x0001) (Edit)
	unsigned char                                      bEnableLargeWorlds : 1;                                   // 0x02D5(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bEnableWorldBoundsChecks : 1;                             // 0x02D5(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bEnableNavigationSystem : 1;                              // 0x02D5(0x0001) (BlueprintVisible, BlueprintReadOnly, Config)
	unsigned char                                      bEnableAISystem : 1;                                      // 0x02D5(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, Config)
	unsigned char                                      bEnableWorldComposition : 1;                              // 0x02D5(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUseClientSideLevelStreamingVolumes : 1;                  // 0x02D5(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bEnableWorldOriginRebasing : 1;                           // 0x02D6(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bWorldGravitySet : 1;                                     // 0x02D6(0x0001) (Transient)
	unsigned char                                      bGlobalGravitySet : 1;                                    // 0x02D6(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bMinimizeBSPSections : 1;                                 // 0x02D6(0x0001) (Edit)
	unsigned char                                      bForceNoPrecomputedLighting : 1;                          // 0x02D6(0x0001) (Edit)
	unsigned char                                      bHighPriorityLoading : 1;                                 // 0x02D6(0x0001) (Net)
	unsigned char                                      bHighPriorityLoadingLocal : 1;                            // 0x02D6(0x0001)
	unsigned char                                      bOverrideDefaultBroadphaseSettings : 1;                   // 0x02D6(0x0001) (Edit, Config)
	unsigned char                                      bGenerateSingleClusterForLevel : 1;                       // 0x02D7(0x0001) (Edit, Config)
	unsigned char                                      UnknownData01[0x28];                                      // 0x02D8(0x0028) UNKNOWN PROPERTY: AISystemClass
	struct FVector                                     LevelInstancePivotOffset;                                 // 0x0300(0x0018) (ZeroConstructor, IsPlainOldData)
	class UNavigationSystemConfig*                     NavigationSystemConfig;                                   // 0x0318(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoClear, IsPlainOldData)
	class UNavigationSystemConfig*                     NavigationSystemConfigOverride;                           // 0x0320(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UWorldPartition*                             WorldPartition;                                           // 0x0328(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	float                                              WorldToMeters;                                            // 0x0330(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              KillZ;                                                    // 0x0334(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData)
	class UClass*                                      KillZDamageType;                                          // 0x0338(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              WorldGravityZ;                                            // 0x0340(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	float                                              GlobalGravityZ;                                           // 0x0344(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UClass*                                      DefaultPhysicsVolumeClass;                                // 0x0348(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData)
	class UClass*                                      PhysicsCollisionHandlerClass;                             // 0x0350(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UClass*                                      DefaultGameMode;                                          // 0x0358(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UClass*                                      GameNetworkManagerClass;                                  // 0x0360(0x0008) (ZeroConstructor, IsPlainOldData)
	int                                                PackedLightAndShadowMapTextureSize;                       // 0x0368(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x036C(0x0004) MISSED OFFSET
	struct FVector                                     DefaultColorScale;                                        // 0x0370(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              DefaultMaxDistanceFieldOcclusionDistance;                 // 0x0388(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              GlobalDistanceFieldViewDistance;                          // 0x038C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DynamicIndirectShadowsSelfShadowingIntensity;             // 0x0390(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0394(0x0004) MISSED OFFSET
	struct FReverbSettings                             DefaultReverbSettings;                                    // 0x0398(0x0020) (Edit, Config)
	struct FInteriorSettings                           DefaultAmbientZoneSettings;                               // 0x03B8(0x0024) (Edit, Config)
	unsigned char                                      UnknownData04[0x4];                                       // 0x03DC(0x0004) MISSED OFFSET
	class USoundMix*                                   DefaultBaseSoundMix;                                      // 0x03E0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TimeDilation;                                             // 0x03E8(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	float                                              MatineeTimeDilation;                                      // 0x03EC(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	float                                              DemoPlayTimeDilation;                                     // 0x03F0(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              MinGlobalTimeDilation;                                    // 0x03F4(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              MaxGlobalTimeDilation;                                    // 0x03F8(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              MinUndilatedFrameTime;                                    // 0x03FC(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              MaxUndilatedFrameTime;                                    // 0x0400(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x0404(0x0004) MISSED OFFSET
	struct FBroadphaseSettings                         BroadphaseSettings;                                       // 0x0408(0x0080) (Edit, Config)
	TArray<struct FNetViewer>                          ReplicationViewers;                                       // 0x0488(0x0010) (ZeroConstructor)
	TArray<class UAssetUserData*>                      AssetUserData;                                            // 0x0498(0x0010) (ExportObject, ZeroConstructor)
	class APlayerState*                                PauserPlayerState;                                        // 0x04A8(0x0008) (Net, ZeroConstructor, Transient, IsPlainOldData)
	int                                                MaxNumberOfBookmarks;                                     // 0x04B0(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData06[0x4];                                       // 0x04B4(0x0004) MISSED OFFSET
	class UClass*                                      DefaultBookmarkClass;                                     // 0x04B8(0x0008) (ZeroConstructor, Config, IsPlainOldData)
	TArray<class UBookmarkBase*>                       BookmarkArray;                                            // 0x04C0(0x0010) (ZeroConstructor)
	class UClass*                                      LastBookmarkClass;                                        // 0x04D0(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.WorldSettings"));
		return ptr;
	}


	void OnRep_WorldGravityZ();//Offset:Discovery.exe+0x19BFD70
};


// Class Engine.MaterialExpression
// 0x0018 (0x0040 - 0x0028)
class UMaterialExpression : public UObject
{
public:
	class UMaterial*                                   Material;                                                 // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData)
	class UMaterialFunction*                           Function;                                                 // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bIsParameterExpression : 1;                               // 0x0038(0x0001)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0039(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpression"));
		return ptr;
	}

};


// Class Engine.AnimNotify_PlaySound
// 0x0020 (0x0058 - 0x0038)
class UAnimNotify_PlaySound : public UAnimNotify
{
public:
	class USoundBase*                                  Sound;                                                    // 0x0038(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              VolumeMultiplier;                                         // 0x0040(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              PitchMultiplier;                                          // 0x0044(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bFollow : 1;                                              // 0x0048(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0049(0x0003) MISSED OFFSET
	struct FName                                       AttachName;                                               // 0x004C(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0054(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.AnimNotify_PlaySound"));
		return ptr;
	}

};


// Class Engine.AnimationAsset
// 0x0058 (0x0080 - 0x0028)
class UAnimationAsset : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0028(0x0010) MISSED OFFSET
	class USkeleton*                                   Skeleton;                                                 // 0x0038(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData01[0x20];                                      // 0x0040(0x0020) MISSED OFFSET
	TArray<class UAnimMetaData*>                       MetaData;                                                 // 0x0060(0x0010) (Edit, ExportObject, ZeroConstructor)
	TArray<class UAssetUserData*>                      AssetUserData;                                            // 0x0070(0x0010) (Edit, ExportObject, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.AnimationAsset"));
		return ptr;
	}


	float GetPlayLength();//Offset:Discovery.exe+0x242E490
};


// Class Engine.AnimSequenceBase
// 0x0028 (0x00A8 - 0x0080)
class UAnimSequenceBase : public UAnimationAsset
{
public:
	TArray<struct FAnimNotifyEvent>                    Notifies;                                                 // 0x0080(0x0010) (ZeroConstructor)
	float                                              SequenceLength;                                           // 0x0090(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              RateScale;                                                // 0x0094(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FRawCurveTracks                             RawCurveData;                                             // 0x0098(0x0010)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.AnimSequenceBase"));
		return ptr;
	}

};


// Class Engine.AnimSequence
// 0x0128 (0x01D0 - 0x00A8)
class UAnimSequence : public UAnimSequenceBase
{
public:
	class UAnimBoneCompressionSettings*                BoneCompressionSettings;                                  // 0x00A8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UAnimCurveCompressionSettings*               CurveCompressionSettings;                                 // 0x00B0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x70];                                      // 0x00B8(0x0070) MISSED OFFSET
	TEnumAsByte<EAdditiveAnimationType>                AdditiveAnimType;                                         // 0x0128(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EAdditiveBasePoseType>                 RefPoseType;                                              // 0x0129(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x012A(0x0002) MISSED OFFSET
	int                                                RefFrameIndex;                                            // 0x012C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	class UAnimSequence*                               RefPoseSeq;                                               // 0x0130(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FName                                       RetargetSource;                                           // 0x0138(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<struct FTransform>                          RetargetSourceAssetReferencePose;                         // 0x0140(0x0010) (ZeroConstructor)
	enum class EAnimInterpolationType                  Interpolation;                                            // 0x0150(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bEnableRootMotion;                                        // 0x0151(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ERootMotionRootLock>                   RootMotionRootLock;                                       // 0x0152(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bForceRootLock;                                           // 0x0153(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bUseNormalizedRootMotionScale;                            // 0x0154(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bRootMotionSettingsCopiedFromMontage;                     // 0x0155(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x0156(0x0002) MISSED OFFSET
	TArray<struct FAnimSyncMarker>                     AuthoredSyncMarkers;                                      // 0x0158(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData03[0x10];                                      // 0x0168(0x0010) MISSED OFFSET
	struct FFrameRate                                  TargetFrameRate;                                          // 0x0178(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	TMap<struct FAnimationAttributeIdentifier, struct FAttributeCurve> AttributeCurves;                                          // 0x0180(0x0050)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.AnimSequence"));
		return ptr;
	}

};


// Class Engine.AnimInstance
// 0x0328 (0x0350 - 0x0028)
class UAnimInstance : public UObject
{
public:
	class USkeleton*                                   CurrentSkeleton;                                          // 0x0028(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TEnumAsByte<ERootMotionMode>                       RootMotionMode;                                           // 0x0030(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      bUseMultiThreadedAnimationUpdate : 1;                     // 0x0031(0x0001)
	unsigned char                                      bUsingCopyPoseFromMesh : 1;                               // 0x0031(0x0001)
	unsigned char                                      UnknownData00 : 2;                                        // 0x0031(0x0001)
	unsigned char                                      bReceiveNotifiesFromLinkedInstances : 1;                  // 0x0031(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      bPropagateNotifiesToLinkedInstances : 1;                  // 0x0031(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      bUseMainInstanceMontageEvaluationData : 1;                // 0x0031(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      bEnableUpdateWhenLinked : 1;                              // 0x0031(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      bQueueMontageEvents : 1;                                  // 0x0032(0x0001) (Transient)
	unsigned char                                      UnknownData01[0x5];                                       // 0x0033(0x0005) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnMontageBlendingOut;                                     // 0x0038(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnMontageStarted;                                         // 0x0048(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnMontageEnded;                                           // 0x0058(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnAllMontageInstancesEnded;                               // 0x0068(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData02[0xD8];                                      // 0x0078(0x00D8) MISSED OFFSET
	struct FAnimNotifyQueue                            NotifyQueue;                                              // 0x0150(0x0070) (Transient)
	TArray<struct FAnimNotifyEvent>                    ActiveAnimNotifyState;                                    // 0x01C0(0x0010) (ZeroConstructor, Transient)
	TArray<struct FAnimNotifyEventReference>           ActiveAnimNotifyEventReference;                           // 0x01D0(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData03[0x170];                                     // 0x01E0(0x0170) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.AnimInstance"));
		return ptr;
	}


	bool WasAnimNotifyTriggeredInStateMachine(int MachineIndex, class UClass* AnimNotifyType);//Offset:Discovery.exe+0x567FE80
	bool WasAnimNotifyTriggeredInSourceState(int MachineIndex, int StateIndex, class UClass* AnimNotifyType);//Offset:Discovery.exe+0x56800A0
	bool WasAnimNotifyTriggeredInAnyState(class UClass* AnimNotifyType);//Offset:Discovery.exe+0x567FCF0
	bool WasAnimNotifyStateActiveInStateMachine(int MachineIndex, class UClass* AnimNotifyStateType);//Offset:Discovery.exe+0x5680300
	bool WasAnimNotifyStateActiveInSourceState(int MachineIndex, int StateIndex, class UClass* AnimNotifyStateType);//Offset:Discovery.exe+0x56801D0
	bool WasAnimNotifyStateActiveInAnyState(class UClass* AnimNotifyStateType);//Offset:Discovery.exe+0x56803F0
	bool WasAnimNotifyNameTriggeredInStateMachine(int MachineIndex, const struct FName& NotifyName);//Offset:Discovery.exe+0x567FD90
	bool WasAnimNotifyNameTriggeredInSourceState(int MachineIndex, int StateIndex, const struct FName& NotifyName);//Offset:Discovery.exe+0x567FF70
	bool WasAnimNotifyNameTriggeredInAnyState(const struct FName& NotifyName);//Offset:Discovery.exe+0x567FC50
	void UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic);//Offset:Discovery.exe+0x567F660
	void UnlinkAnimClassLayers(class UClass* InClass);//Offset:Discovery.exe+0x5681700
	class APawn* TryGetPawnOwner();//Offset:Discovery.exe+0x1B15590
	void StopSlotAnimation(float InBlendOutTime, const struct FName& SlotNodeName);//Offset:Discovery.exe+0x5683270
	void SnapshotPose(struct FPoseSnapshot* Snapshot);//Offset:Discovery.exe+0x5683F20
	void SetUseMainInstanceMontageEvaluationData(bool bSet);//Offset:Discovery.exe+0x5683C80
	void SetRootMotionMode(TEnumAsByte<ERootMotionMode> Value);//Offset:Discovery.exe+0x5667D70
	void SetReceiveNotifiesFromLinkedInstances(bool bSet);//Offset:Discovery.exe+0x5683E40
	void SetPropagateNotifiesToLinkedInstances(bool bSet);//Offset:Discovery.exe+0x5683D60
	void SetMorphTarget(const struct FName& MorphTargetName, float Value);//Offset:Discovery.exe+0x567F870
	void SavePoseSnapshot(const struct FName& SnapshotName);//Offset:Discovery.exe+0x56840A0
	void ResetDynamics(enum class ETeleportType InTeleportType);//Offset:Discovery.exe+0x567F160
	void RequestSlotGroupInertialization(const struct FName& InSlotGroupName, float Duration);//Offset:Discovery.exe+0x56812F0
	void RemovePoseSnapshot(const struct FName& SnapshotName);//Offset:Discovery.exe+0x5684000
	class UAnimMontage* PlaySlotAnimationAsDynamicMontage_WithBlendSettings(class UAnimSequenceBase* Asset, const struct FName& SlotNodeName, const struct FMontageBlendSettings& BlendInSettings, const struct FMontageBlendSettings& BlendOutSettings, float InPlayRate, int LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt);//Offset:Discovery.exe+0x5683350
	class UAnimMontage* PlaySlotAnimationAsDynamicMontage_WithBlendArgs(class UAnimSequenceBase* Asset, const struct FName& SlotNodeName, const struct FAlphaBlendArgs& BlendIn, const struct FAlphaBlendArgs& BlendOut, float InPlayRate, int LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt);//Offset:Discovery.exe+0x5683670
	class UAnimMontage* PlaySlotAnimationAsDynamicMontage(class UAnimSequenceBase* Asset, const struct FName& SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt);//Offset:Discovery.exe+0x5683980
	void MontageSync_StopFollowing(class UAnimMontage* MontageFollower);//Offset:Discovery.exe+0x5681B20
	void MontageSync_Follow(class UAnimMontage* MontageFollower, class UAnimInstance* OtherAnimInstance, class UAnimMontage* MontageLeader);//Offset:Discovery.exe+0x5681BC0
	void Montage_StopWithBlendSettings(const struct FMontageBlendSettings& BlendOutSettings, class UAnimMontage* Montage);//Offset:Discovery.exe+0x5682830
	void Montage_StopWithBlendOut(const struct FAlphaBlendArgs& BlendOut, class UAnimMontage* Montage);//Offset:Discovery.exe+0x5682930
	void Montage_StopGroupByName(float InBlendOutTime, const struct FName& GroupName);//Offset:Discovery.exe+0x5682750
	void Montage_Stop(float InBlendOutTime, class UAnimMontage* Montage);//Offset:Discovery.exe+0x5682A30
	void Montage_SetPosition(class UAnimMontage* Montage, float NewPosition);//Offset:Discovery.exe+0x5681ED0
	void Montage_SetPlayRate(class UAnimMontage* Montage, float NewPlayRate);//Offset:Discovery.exe+0x5682240
	void Montage_SetNextSection(const struct FName& SectionNameToChange, const struct FName& NextSection, class UAnimMontage* Montage);//Offset:Discovery.exe+0x5682320
	void Montage_Resume(class UAnimMontage* Montage);//Offset:Discovery.exe+0x5682610
	float Montage_PlayWithBlendSettings(class UAnimMontage* MontageToPlay, const struct FMontageBlendSettings& BlendInSettings, float InPlayRate, enum class EMontagePlayReturnType ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages);//Offset:Discovery.exe+0x5682B10
	float Montage_PlayWithBlendIn(class UAnimMontage* MontageToPlay, const struct FAlphaBlendArgs& BlendIn, float InPlayRate, enum class EMontagePlayReturnType ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages);//Offset:Discovery.exe+0x5682D60
	float Montage_Play(class UAnimMontage* MontageToPlay, float InPlayRate, enum class EMontagePlayReturnType ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages);//Offset:Discovery.exe+0x5682FA0
	void Montage_Pause(class UAnimMontage* Montage);//Offset:Discovery.exe+0x56826B0
	void Montage_JumpToSectionsEnd(const struct FName& SectionName, class UAnimMontage* Montage);//Offset:Discovery.exe+0x5682450
	void Montage_JumpToSection(const struct FName& SectionName, class UAnimMontage* Montage);//Offset:Discovery.exe+0x5682530
	bool Montage_IsPlaying(class UAnimMontage* Montage);//Offset:Discovery.exe+0x5682100
	bool Montage_IsActive(class UAnimMontage* Montage);//Offset:Discovery.exe+0x56821A0
	float Montage_GetPosition(class UAnimMontage* Montage);//Offset:Discovery.exe+0x5681FB0
	float Montage_GetPlayRate(class UAnimMontage* Montage);//Offset:Discovery.exe+0x5681CF0
	bool Montage_GetIsStopped(class UAnimMontage* Montage);//Offset:Discovery.exe+0x5681E30
	struct FName Montage_GetCurrentSection(class UAnimMontage* Montage);//Offset:Discovery.exe+0x5682050
	float Montage_GetBlendTime(class UAnimMontage* Montage);//Offset:Discovery.exe+0x5681D90
	void LockAIResources(bool bLockMovement, bool LockAILogic);//Offset:Discovery.exe+0x567F660
	void LinkAnimGraphByTag(const struct FName& InTag, class UClass* InClass);//Offset:Discovery.exe+0x5681840
	void LinkAnimClassLayers(class UClass* InClass);//Offset:Discovery.exe+0x56817A0
	bool IsUsingMainInstanceMontageEvaluationData();//Offset:Discovery.exe+0x5683D30
	bool IsSyncGroupBetweenMarkers(const struct FName& InSyncGroupName, const struct FName& PreviousMarker, const struct FName& NextMarker, bool bRespectMarkerOrder);//Offset:Discovery.exe+0x567F2A0
	bool IsPlayingSlotAnimation(class UAnimSequenceBase* Asset, const struct FName& SlotNodeName);//Offset:Discovery.exe+0x5683180
	bool IsAnyMontagePlaying();//Offset:Discovery.exe+0x5681AF0
	bool IsAnimNotifyStateActiveInStateMachine(int MachineIndex, class UClass* AnimNotifyStateType);//Offset:Discovery.exe+0x5680300
	bool IsAnimNotifyStateActiveInSourceState(int MachineIndex, int StateIndex, class UClass* AnimNotifyStateType);//Offset:Discovery.exe+0x56801D0
	bool IsAnimNotifyStateActiveInLinkedAnimInstanceState(const struct FName& LinkedAnimInstanceTag, const struct FName& StateMachineName, const struct FName& StateName, class UClass* AnimNotifyStateType);//Offset:Discovery.exe+0x5680490
	bool IsAnimNotifyStateActive(class UClass* AnimNotifyStateType);//Offset:Discovery.exe+0x56803F0
	bool HasMarkerBeenHitThisFrame(const struct FName& SyncGroup, const struct FName& MarkerName);//Offset:Discovery.exe+0x567F430
	bool GetTimeToClosestMarker(const struct FName& SyncGroup, const struct FName& MarkerName, float* OutMarkerTime);//Offset:Discovery.exe+0x567F520
	struct FMarkerSyncAnimPosition GetSyncGroupPosition(const struct FName& InSyncGroupName);//Offset:Discovery.exe+0x567F1F0
	float GetRelevantAnimTimeRemainingFraction(int MachineIndex, int StateIndex);//Offset:Discovery.exe+0x56808F0
	float GetRelevantAnimTimeRemaining(int MachineIndex, int StateIndex);//Offset:Discovery.exe+0x56809E0
	float GetRelevantAnimTimeFraction(int MachineIndex, int StateIndex);//Offset:Discovery.exe+0x5680620
	float GetRelevantAnimTime(int MachineIndex, int StateIndex);//Offset:Discovery.exe+0x5680710
	float GetRelevantAnimLength(int MachineIndex, int StateIndex);//Offset:Discovery.exe+0x5680800
	bool GetReceiveNotifiesFromLinkedInstances();//Offset:Discovery.exe+0x5683EF0
	bool GetPropagateNotifiesToLinkedInstances();//Offset:Discovery.exe+0x5683E10
	class USkeletalMeshComponent* GetOwningComponent();//Offset:Discovery.exe+0x1482550
	class AActor* GetOwningActor();//Offset:Discovery.exe+0x5683C50
	void GetLinkedAnimLayerInstancesByGroup(const struct FName& InGroup, TArray<class UAnimInstance*>* OutLinkedInstances);//Offset:Discovery.exe+0x5681560
	class UAnimInstance* GetLinkedAnimLayerInstanceByGroupAndClass(const struct FName& InGroup, class UClass* InClass);//Offset:Discovery.exe+0x5681470
	class UAnimInstance* GetLinkedAnimLayerInstanceByGroup(const struct FName& InGroup);//Offset:Discovery.exe+0x5681660
	class UAnimInstance* GetLinkedAnimLayerInstanceByClass(class UClass* InClass);//Offset:Discovery.exe+0x56813D0
	void GetLinkedAnimGraphInstancesByTag(const struct FName& InTag, TArray<class UAnimInstance*>* OutLinkedInstances);//Offset:Discovery.exe+0x5681920
	class UAnimInstance* GetLinkedAnimGraphInstanceByTag(const struct FName& InTag);//Offset:Discovery.exe+0x5681A20
	float GetInstanceTransitionTimeElapsedFraction(int MachineIndex, int TransitionIndex);//Offset:Discovery.exe+0x5680AD0
	float GetInstanceTransitionTimeElapsed(int MachineIndex, int TransitionIndex);//Offset:Discovery.exe+0x5680BC0
	float GetInstanceTransitionCrossfadeDuration(int MachineIndex, int TransitionIndex);//Offset:Discovery.exe+0x5680CB0
	float GetInstanceStateWeight(int MachineIndex, int StateIndex);//Offset:Discovery.exe+0x5680E40
	float GetInstanceMachineWeight(int MachineIndex);//Offset:Discovery.exe+0x5680F30
	float GetInstanceCurrentStateElapsedTime(int MachineIndex);//Offset:Discovery.exe+0x5680DA0
	float GetInstanceAssetPlayerTimeFromEndFraction(int AssetPlayerIndex);//Offset:Discovery.exe+0x5680FD0
	float GetInstanceAssetPlayerTimeFromEnd(int AssetPlayerIndex);//Offset:Discovery.exe+0x5681070
	float GetInstanceAssetPlayerTimeFraction(int AssetPlayerIndex);//Offset:Discovery.exe+0x5681110
	float GetInstanceAssetPlayerTime(int AssetPlayerIndex);//Offset:Discovery.exe+0x56811B0
	float GetInstanceAssetPlayerLength(int AssetPlayerIndex);//Offset:Discovery.exe+0x5681250
	float GetDeltaSeconds();//Offset:Discovery.exe+0x567F130
	float GetCurveValue(const struct FName& CurveName);//Offset:Discovery.exe+0x567FBB0
	struct FName GetCurrentStateName(int MachineIndex);//Offset:Discovery.exe+0x567F950
	class UAnimMontage* GetCurrentActiveMontage();//Offset:Discovery.exe+0x5681AC0
	void GetAllCurveNames(TArray<struct FName>* OutNames);//Offset:Discovery.exe+0x567FA00
	void GetActiveCurveNames(enum class EAnimCurveType CurveType, TArray<struct FName>* OutNames);//Offset:Discovery.exe+0x567FAB0
	void ClearMorphTargets();//Offset:Discovery.exe+0x567F850
	float CalculateDirection(const struct FVector& Velocity, const struct FRotator& BaseRotation);//Offset:Discovery.exe+0x567F750
	void BlueprintUpdateAnimation(float DeltaTimeX);//Offset:Discovery.exe+0x327F8B0
	void BlueprintThreadSafeUpdateAnimation(float DeltaTime);//Offset:Discovery.exe+0x327F8B0
	void BlueprintPostEvaluateAnimation();//Offset:Discovery.exe+0x327F8B0
	void BlueprintLinkedAnimationLayersInitialized();//Offset:Discovery.exe+0x327F8B0
	void BlueprintInitializeAnimation();//Offset:Discovery.exe+0x327F8B0
	void BlueprintBeginPlay();//Offset:Discovery.exe+0x327F8B0
};


// Class Engine.CameraModifier
// 0x0020 (0x0048 - 0x0028)
class UCameraModifier : public UObject
{
public:
	unsigned char                                      bDebug : 1;                                               // 0x0028(0x0001) (Edit)
	unsigned char                                      bExclusive : 1;                                           // 0x0028(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0029(0x0003) MISSED OFFSET
	unsigned char                                      Priority;                                                 // 0x002C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x002D(0x0003) MISSED OFFSET
	class APlayerCameraManager*                        CameraOwner;                                              // 0x0030(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              AlphaInTime;                                              // 0x0038(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AlphaOutTime;                                             // 0x003C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              Alpha;                                                    // 0x0040(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0044(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.CameraModifier"));
		return ptr;
	}


	void OnCameraOwnerDestroyed(class AActor* InOwner);//Offset:Discovery.exe+0x56BD9D0
	bool IsDisabled();//Offset:Discovery.exe+0x1DC1420
	class AActor* GetViewTarget();//Offset:Discovery.exe+0x1DB6580
	void EnableModifier();//Offset:Discovery.exe+0x155C0A0
	void DisableModifier(bool bImmediate);//Offset:Discovery.exe+0x56BD930
	void BlueprintModifyPostProcess(float DeltaTime, float* PostProcessBlendWeight, struct FPostProcessSettings* PostProcessSettings);//Offset:Discovery.exe+0x327F8B0
	void BlueprintModifyCamera(float DeltaTime, const struct FVector& ViewLocation, const struct FRotator& ViewRotation, float FOV, struct FVector* NewViewLocation, struct FRotator* NewViewRotation, float* NewFOV);//Offset:Discovery.exe+0x327F8B0
};


// Class Engine.PoseableMeshComponent
// 0x01A0 (0x0A10 - 0x0870)
class UPoseableMeshComponent : public USkinnedMeshComponent
{
public:
	unsigned char                                      UnknownData00[0x1A0];                                     // 0x0870(0x01A0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.PoseableMeshComponent"));
		return ptr;
	}


	void SetBoneTransformByName(const struct FName& BoneName, const struct FTransform& InTransform, TEnumAsByte<EBoneSpaces> BoneSpace);//Offset:Discovery.exe+0x583AB30
	void SetBoneScaleByName(const struct FName& BoneName, const struct FVector& InScale3D, TEnumAsByte<EBoneSpaces> BoneSpace);//Offset:Discovery.exe+0x583A770
	void SetBoneRotationByName(const struct FName& BoneName, const struct FRotator& InRotation, TEnumAsByte<EBoneSpaces> BoneSpace);//Offset:Discovery.exe+0x583A8B0
	void SetBoneLocationByName(const struct FName& BoneName, const struct FVector& InLocation, TEnumAsByte<EBoneSpaces> BoneSpace);//Offset:Discovery.exe+0x583A9F0
	void ResetBoneTransformByName(const struct FName& BoneName);//Offset:Discovery.exe+0x583A290
	struct FTransform GetBoneTransformByName(const struct FName& BoneName, TEnumAsByte<EBoneSpaces> BoneSpace);//Offset:Discovery.exe+0x583A630
	struct FVector GetBoneScaleByName(const struct FName& BoneName, TEnumAsByte<EBoneSpaces> BoneSpace);//Offset:Discovery.exe+0x583A330
	struct FRotator GetBoneRotationByName(const struct FName& BoneName, TEnumAsByte<EBoneSpaces> BoneSpace);//Offset:Discovery.exe+0x583A430
	struct FVector GetBoneLocationByName(const struct FName& BoneName, TEnumAsByte<EBoneSpaces> BoneSpace);//Offset:Discovery.exe+0x583A530
	void CopyPoseFromSkeletalComponent(class USkeletalMeshComponent* InComponentToCopy);//Offset:Discovery.exe+0x583A1F0
};


// Class Engine.ReplicationDriver
// 0x0000 (0x0028 - 0x0028)
class UReplicationDriver : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ReplicationDriver"));
		return ptr;
	}

};


// Class Engine.GameUserSettings
// 0x0100 (0x0128 - 0x0028)
class UGameUserSettings : public UObject
{
public:
	bool                                               bUseVSync;                                                // 0x0028(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bUseDynamicResolution;                                    // 0x0029(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData00[0x5E];                                      // 0x002A(0x005E) MISSED OFFSET
	uint32_t                                           ResolutionSizeX;                                          // 0x0088(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	uint32_t                                           ResolutionSizeY;                                          // 0x008C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	uint32_t                                           LastUserConfirmedResolutionSizeX;                         // 0x0090(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	uint32_t                                           LastUserConfirmedResolutionSizeY;                         // 0x0094(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                WindowPosX;                                               // 0x0098(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                WindowPosY;                                               // 0x009C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                FullscreenMode;                                           // 0x00A0(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                LastConfirmedFullscreenMode;                              // 0x00A4(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                PreferredFullscreenMode;                                  // 0x00A8(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	uint32_t                                           Version;                                                  // 0x00AC(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                AudioQualityLevel;                                        // 0x00B0(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                LastConfirmedAudioQualityLevel;                           // 0x00B4(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              FrameRateLimit;                                           // 0x00B8(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00BC(0x0004) MISSED OFFSET
	int                                                DesiredScreenWidth;                                       // 0x00C0(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bUseDesiredScreenHeight;                                  // 0x00C4(0x0001) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x00C5(0x0003) MISSED OFFSET
	int                                                DesiredScreenHeight;                                      // 0x00C8(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                LastUserConfirmedDesiredScreenWidth;                      // 0x00CC(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                LastUserConfirmedDesiredScreenHeight;                     // 0x00D0(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              LastRecommendedScreenWidth;                               // 0x00D4(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              LastRecommendedScreenHeight;                              // 0x00D8(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              LastCPUBenchmarkResult;                                   // 0x00DC(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              LastGPUBenchmarkResult;                                   // 0x00E0(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x00E4(0x0004) MISSED OFFSET
	TArray<float>                                      LastCPUBenchmarkSteps;                                    // 0x00E8(0x0010) (ZeroConstructor, Config)
	TArray<float>                                      LastGPUBenchmarkSteps;                                    // 0x00F8(0x0010) (ZeroConstructor, Config)
	float                                              LastGPUBenchmarkMultiplier;                               // 0x0108(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bUseHDRDisplayOutput;                                     // 0x010C(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x010D(0x0003) MISSED OFFSET
	int                                                HDRDisplayOutputNits;                                     // 0x0110(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x0114(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnGameUserSettingsUINeedsUpdate;                          // 0x0118(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.GameUserSettings"));
		return ptr;
	}


	void ValidateSettings();//Offset:Discovery.exe+0x1DC09C0
	bool SupportsHDRDisplayOutput();//Offset:Discovery.exe+0x571A9E0
	void SetVSyncEnabled(bool bEnable);//Offset:Discovery.exe+0x571BE20
	void SetVisualEffectQuality(int Value);//Offset:Discovery.exe+0x571AF10
	void SetViewDistanceQuality(int Value);//Offset:Discovery.exe+0x571B3C0
	void SetToDefaults();//Offset:Discovery.exe+0x4B5B1A0
	void SetTextureQuality(int Value);//Offset:Discovery.exe+0x571AFE0
	void SetShadowQuality(int Value);//Offset:Discovery.exe+0x571B2F0
	void SetShadingQuality(int Value);//Offset:Discovery.exe+0x571ACA0
	void SetScreenResolution(const struct FIntPoint& Resolution);//Offset:Discovery.exe+0x571BFE0
	void SetResolutionScaleValueEx(float NewScaleValue);//Offset:Discovery.exe+0x571B500
	void SetResolutionScaleValue(int NewScaleValue);//Offset:Discovery.exe+0x571B5A0
	void SetResolutionScaleNormalized(float NewScaleNormalized);//Offset:Discovery.exe+0x571B460
	void SetReflectionQuality(int Value);//Offset:Discovery.exe+0x571B150
	void SetPostProcessingQuality(int Value);//Offset:Discovery.exe+0x571AE40
	void SetOverallScalabilityLevel(int Value);//Offset:Discovery.exe+0x571B9F0
	void SetGlobalIlluminationQuality(int Value);//Offset:Discovery.exe+0x571B220
	void SetFullscreenMode(TEnumAsByte<EWindowMode> InFullscreenMode);//Offset:Discovery.exe+0x571BEF0
	void SetFrameRateLimit(float NewLimit);//Offset:Discovery.exe+0x571BAC0
	void SetFoliageQuality(int Value);//Offset:Discovery.exe+0x571AD70
	void SetDynamicResolutionEnabled(bool bEnable);//Offset:Discovery.exe+0x571BD50
	void SetBenchmarkFallbackValues();//Offset:Discovery.exe+0x571BC20
	void SetAudioQualityLevel(int QualityLevel);//Offset:Discovery.exe+0x571BB80
	void SetAntiAliasingQuality(int Value);//Offset:Discovery.exe+0x571B080
	void SaveSettings();//Offset:Discovery.exe+0x155C0A0
	void RunHardwareBenchmark(int WorkScale, float CPUMultiplier, float GPUMultiplier);//Offset:Discovery.exe+0x571AA10
	void RevertVideoMode();//Offset:Discovery.exe+0x571BC40
	void ResetToCurrentSettings();//Offset:Discovery.exe+0x155C080
	void LoadSettings(bool bForceReload);//Offset:Discovery.exe+0x56BD930
	bool IsVSyncEnabled();//Offset:Discovery.exe+0x571BDF0
	bool IsVSyncDirty();//Offset:Discovery.exe+0x571BC90
	bool IsScreenResolutionDirty();//Offset:Discovery.exe+0x571BCF0
	bool IsHDREnabled();//Offset:Discovery.exe+0x571A890
	bool IsFullscreenModeDirty();//Offset:Discovery.exe+0x571BCC0
	bool IsDynamicResolutionEnabled();//Offset:Discovery.exe+0x571BD20
	bool IsDynamicResolutionDirty();//Offset:Discovery.exe+0x571BC60
	bool IsDirty();//Offset:Discovery.exe+0x1DC1420
	int GetVisualEffectQuality();//Offset:Discovery.exe+0x571AEE0
	int GetViewDistanceQuality();//Offset:Discovery.exe+0x571B390
	int GetTextureQuality();//Offset:Discovery.exe+0x571AFB0
	int STATIC_GetSyncInterval();//Offset:Discovery.exe+0x571ABA0
	int GetShadowQuality();//Offset:Discovery.exe+0x571B2C0
	int GetShadingQuality();//Offset:Discovery.exe+0x44CE500
	struct FIntPoint GetScreenResolution();//Offset:Discovery.exe+0x571C110
	float GetResolutionScaleNormalized();//Offset:Discovery.exe+0x571B640
	void GetResolutionScaleInformationEx(float* CurrentScaleNormalized, float* CurrentScaleValue, float* MinScaleValue, float* MaxScaleValue);//Offset:Discovery.exe+0x571B670
	void GetResolutionScaleInformation(float* CurrentScaleNormalized, int* CurrentScaleValue, int* MinScaleValue, int* MaxScaleValue);//Offset:Discovery.exe+0x571B830
	int GetReflectionQuality();//Offset:Discovery.exe+0x571B120
	float GetRecommendedResolutionScale();//Offset:Discovery.exe+0x1EE74C0
	TEnumAsByte<EWindowMode> GetPreferredFullscreenMode();//Offset:Discovery.exe+0x571BEC0
	int GetPostProcessingQuality();//Offset:Discovery.exe+0x571AE10
	int GetOverallScalabilityLevel();//Offset:Discovery.exe+0x1EE8860
	struct FIntPoint GetLastConfirmedScreenResolution();//Offset:Discovery.exe+0x571C0C0
	TEnumAsByte<EWindowMode> GetLastConfirmedFullscreenMode();//Offset:Discovery.exe+0x571BF80
	int GetGlobalIlluminationQuality();//Offset:Discovery.exe+0x571B1F0
	class UGameUserSettings* STATIC_GetGameUserSettings();//Offset:Discovery.exe+0x571AB40
	TEnumAsByte<EWindowMode> GetFullscreenMode();//Offset:Discovery.exe+0x571BFB0
	float GetFrameRateLimit();//Offset:Discovery.exe+0x571BA90
	int STATIC_GetFramePace();//Offset:Discovery.exe+0x571AB70
	int GetFoliageQuality();//Offset:Discovery.exe+0x571AD40
	struct FIntPoint GetDesktopResolution();//Offset:Discovery.exe+0x571C070
	struct FIntPoint STATIC_GetDefaultWindowPosition();//Offset:Discovery.exe+0x571AC00
	TEnumAsByte<EWindowMode> STATIC_GetDefaultWindowMode();//Offset:Discovery.exe+0x571ABD0
	float GetDefaultResolutionScale();//Offset:Discovery.exe+0x1EE7490
	struct FIntPoint STATIC_GetDefaultResolution();//Offset:Discovery.exe+0x571AC50
	int GetCurrentHDRDisplayNits();//Offset:Discovery.exe+0x571A8C0
	int GetAudioQualityLevel();//Offset:Discovery.exe+0x571BB60
	int GetAntiAliasingQuality();//Offset:Discovery.exe+0x2CFD320
	void EnableHDRDisplayOutput(bool bEnable, int DisplayNits);//Offset:Discovery.exe+0x571A8F0
	void ConfirmVideoMode();//Offset:Discovery.exe+0x1DB5730
	void ApplySettings(bool bCheckForCommandLineOverrides);//Offset:Discovery.exe+0x571C200
	void ApplyResolutionSettings(bool bCheckForCommandLineOverrides);//Offset:Discovery.exe+0x571C160
	void ApplyNonResolutionSettings();//Offset:Discovery.exe+0x14618E0
	void ApplyHardwareBenchmarkResults();//Offset:Discovery.exe+0x1B00320
};


// Class Engine.AssetUserData
// 0x0000 (0x0028 - 0x0028)
class UAssetUserData : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.AssetUserData"));
		return ptr;
	}

};


// Class Engine.SaveGame
// 0x0000 (0x0028 - 0x0028)
class USaveGame : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SaveGame"));
		return ptr;
	}

};


// Class Engine.Channel
// 0x0040 (0x0068 - 0x0028)
class UChannel : public UObject
{
public:
	class UNetConnection*                              Connection;                                               // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x38];                                      // 0x0030(0x0038) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.Channel"));
		return ptr;
	}

};


// Class Engine.ControlChannel
// 0x0018 (0x0080 - 0x0068)
class UControlChannel : public UChannel
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0068(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ControlChannel"));
		return ptr;
	}

};


// Class Engine.OnlineBlueprintCallProxyBase
// 0x0000 (0x0030 - 0x0030)
class UOnlineBlueprintCallProxyBase : public UBlueprintAsyncActionBase
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.OnlineBlueprintCallProxyBase"));
		return ptr;
	}

};


// Class Engine.NetConnection
// 0x31F8 (0x3240 - 0x0048)
class UNetConnection : public UPlayer
{
public:
	TArray<class UChildConnection*>                    Children;                                                 // 0x0048(0x0010) (ZeroConstructor, Transient)
	class UNetDriver*                                  Driver;                                                   // 0x0058(0x0008) (ZeroConstructor, IsPlainOldData)
	class UClass*                                      PackageMapClass;                                          // 0x0060(0x0008) (ZeroConstructor, IsPlainOldData)
	class UPackageMap*                                 PackageMap;                                               // 0x0068(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<class UChannel*>                            OpenChannels;                                             // 0x0070(0x0010) (ZeroConstructor)
	TArray<class AActor*>                              SentTemporaries;                                          // 0x0080(0x0010) (ZeroConstructor)
	class AActor*                                      ViewTarget;                                               // 0x0090(0x0008) (ZeroConstructor, IsPlainOldData)
	class AActor*                                      OwningActor;                                              // 0x0098(0x0008) (ZeroConstructor, IsPlainOldData)
	int                                                MaxPacket;                                                // 0x00A0(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      InternalAck : 1;                                          // 0x00A4(0x0001)
	unsigned char                                      UnknownData00[0xBB];                                      // 0x00A5(0x00BB) MISSED OFFSET
	struct FUniqueNetIdRepl                            PlayerId;                                                 // 0x0160(0x0030)
	unsigned char                                      UnknownData01[0x48];                                      // 0x0190(0x0048) MISSED OFFSET
	double                                             LastReceiveTime;                                          // 0x01D8(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x1400];                                    // 0x01E0(0x1400) MISSED OFFSET
	TArray<class UChannel*>                            ChannelsToTick;                                           // 0x15E0(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData03[0x1C50];                                    // 0x15F0(0x1C50) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.NetConnection"));
		return ptr;
	}

};


// Class Engine.OnlineEngineInterface
// 0x0000 (0x0028 - 0x0028)
class UOnlineEngineInterface : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.OnlineEngineInterface"));
		return ptr;
	}

};


// Class Engine.OnlineSession
// 0x0000 (0x0028 - 0x0028)
class UOnlineSession : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.OnlineSession"));
		return ptr;
	}

};


// Class Engine.RuntimeOptionsBase
// 0x0010 (0x0038 - 0x0028)
class URuntimeOptionsBase : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0028(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.RuntimeOptionsBase"));
		return ptr;
	}

};


// Class Engine.ReplicationConnectionDriver
// 0x0000 (0x0028 - 0x0028)
class UReplicationConnectionDriver : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ReplicationConnectionDriver"));
		return ptr;
	}

};


// Class Engine.BlueprintGeneratedClass
// 0x00F8 (0x0388 - 0x0290)
class UBlueprintGeneratedClass : public UClass
{
public:
	int                                                NumReplicatedProperties;                                  // 0x0290(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bHasNativizedParent : 1;                                  // 0x0294(0x0001) (Deprecated)
	unsigned char                                      bHasCookedComponentInstancingData : 1;                    // 0x0294(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0295(0x0003) MISSED OFFSET
	TArray<class UDynamicBlueprintBinding*>            DynamicBindingObjects;                                    // 0x0298(0x0010) (ZeroConstructor)
	TArray<class UActorComponent*>                     ComponentTemplates;                                       // 0x02A8(0x0010) (ExportObject, ZeroConstructor)
	TArray<class UTimelineTemplate*>                   Timelines;                                                // 0x02B8(0x0010) (ZeroConstructor)
	TArray<struct FBPComponentClassOverride>           ComponentClassOverrides;                                  // 0x02C8(0x0010) (ZeroConstructor)
	class USimpleConstructionScript*                   SimpleConstructionScript;                                 // 0x02D8(0x0008) (ZeroConstructor, IsPlainOldData)
	class UInheritableComponentHandler*                InheritableComponentHandler;                              // 0x02E0(0x0008) (ZeroConstructor, IsPlainOldData)
	class UStructProperty*                             UberGraphFramePointerProperty;                            // 0x02E8(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x02F0(0x0008) MISSED OFFSET
	class UFunction*                                   UberGraphFunction;                                        // 0x02F8(0x0008) (ZeroConstructor, IsPlainOldData)
	TMap<struct FName, struct FBlueprintCookedComponentInstancingData> CookedComponentInstancingData;                            // 0x0300(0x0050)
	unsigned char                                      UnknownData02[0x38];                                      // 0x0350(0x0038) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.BlueprintGeneratedClass"));
		return ptr;
	}

};


// Class Engine.Brush
// 0x0038 (0x0300 - 0x02C8)
class ABrush : public AActor
{
public:
	TEnumAsByte<EBrushType>                            BrushType;                                                // 0x02C8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x02C9(0x0003) MISSED OFFSET
	struct FColor                                      BrushColor;                                               // 0x02CC(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                PolyFlags;                                                // 0x02D0(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bColored : 1;                                             // 0x02D4(0x0001)
	unsigned char                                      bSolidWhenSelected : 1;                                   // 0x02D4(0x0001)
	unsigned char                                      bPlaceableFromClassBrowser : 1;                           // 0x02D4(0x0001)
	unsigned char                                      bNotForClientOrServer : 1;                                // 0x02D4(0x0001)
	unsigned char                                      UnknownData01[0x3];                                       // 0x02D5(0x0003) MISSED OFFSET
	class UModel*                                      Brush;                                                    // 0x02D8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UBrushComponent*                             BrushComponent;                                           // 0x02E0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      bInManipulation : 1;                                      // 0x02E8(0x0001)
	unsigned char                                      UnknownData02[0x7];                                       // 0x02E9(0x0007) MISSED OFFSET
	TArray<struct FGeomSelection>                      SavedSelections;                                          // 0x02F0(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.Brush"));
		return ptr;
	}

};


// Class Engine.Volume
// 0x0000 (0x0300 - 0x0300)
class AVolume : public ABrush
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.Volume"));
		return ptr;
	}

};


// Class Engine.DataTable
// 0x0088 (0x00B0 - 0x0028)
class UDataTable : public UObject
{
public:
	class UScriptStruct*                               RowStruct;                                                // 0x0028(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x50];                                      // 0x0030(0x0050) MISSED OFFSET
	unsigned char                                      bStripFromClientBuilds : 1;                               // 0x0080(0x0001) (Edit)
	unsigned char                                      bIgnoreExtraFields : 1;                                   // 0x0080(0x0001) (Edit)
	unsigned char                                      bIgnoreMissingFields : 1;                                 // 0x0080(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0081(0x0007) MISSED OFFSET
	struct FString                                     ImportKeyField;                                           // 0x0088(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData02[0x18];                                      // 0x0098(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.DataTable"));
		return ptr;
	}

};


// Class Engine.EdGraph
// 0x0038 (0x0060 - 0x0028)
class UEdGraph : public UObject
{
public:
	class UClass*                                      Schema;                                                   // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<class UEdGraphNode*>                        Nodes;                                                    // 0x0030(0x0010) (ZeroConstructor)
	unsigned char                                      bEditable : 1;                                            // 0x0040(0x0001)
	unsigned char                                      bAllowDeletion : 1;                                       // 0x0040(0x0001)
	unsigned char                                      bAllowRenaming : 1;                                       // 0x0040(0x0001)
	unsigned char                                      UnknownData00[0x1F];                                      // 0x0041(0x001F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.EdGraph"));
		return ptr;
	}

};


// Class Engine.SoundBase
// 0x0148 (0x0170 - 0x0028)
class USoundBase : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	class USoundClass*                                 SoundClassObject;                                         // 0x0030(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bDebug : 1;                                               // 0x0038(0x0001) (Edit)
	unsigned char                                      bOverrideConcurrency : 1;                                 // 0x0038(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bEnableBusSends : 1;                                      // 0x0038(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bEnableBaseSubmix : 1;                                    // 0x0038(0x0001) (Edit)
	unsigned char                                      bEnableSubmixSends : 1;                                   // 0x0038(0x0001) (Edit)
	unsigned char                                      bHasDelayNode : 1;                                        // 0x0038(0x0001)
	unsigned char                                      bHasConcatenatorNode : 1;                                 // 0x0038(0x0001)
	unsigned char                                      bBypassVolumeScaleForPriority : 1;                        // 0x0038(0x0001) (Edit, BlueprintVisible)
	enum class EVirtualizationMode                     VirtualizationMode;                                       // 0x0039(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x56];                                      // 0x003A(0x0056) MISSED OFFSET
	unsigned char                                      UnknownData02[0x50];                                      // 0x003A(0x0050) UNKNOWN PROPERTY: ConcurrencySet
	struct FSoundConcurrencySettings                   ConcurrencyOverrides;                                     // 0x00E0(0x0028) (Edit, BlueprintVisible)
	float                                              Duration;                                                 // 0x0108(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              MaxDistance;                                              // 0x010C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              TotalSamples;                                             // 0x0110(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              Priority;                                                 // 0x0114(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class USoundAttenuation*                           AttenuationSettings;                                      // 0x0118(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class USoundSubmixBase*                            SoundSubmixObject;                                        // 0x0120(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<struct FSoundSubmixSendInfo>                SoundSubmixSends;                                         // 0x0128(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	class USoundEffectSourcePresetChain*               SourceEffectChain;                                        // 0x0138(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<struct FSoundSourceBusSendInfo>             BusSends;                                                 // 0x0140(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FSoundSourceBusSendInfo>             PreEffectBusSends;                                        // 0x0150(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<class UAssetUserData*>                      AssetUserData;                                            // 0x0160(0x0010) (Edit, ExportObject, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SoundBase"));
		return ptr;
	}

};


// Class Engine.SoundWave
// 0x01C8 (0x0338 - 0x0170)
class USoundWave : public USoundBase
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0170(0x0008) MISSED OFFSET
	int                                                CompressionQuality;                                       // 0x0178(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                StreamingPriority;                                        // 0x017C(0x0004) (ZeroConstructor, IsPlainOldData)
	enum class ESoundwaveSampleRateSettings            SampleRateQuality;                                        // 0x0180(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x0181(0x0001) MISSED OFFSET
	TEnumAsByte<ESoundGroup>                           SoundGroup;                                               // 0x0182(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bLooping : 1;                                             // 0x0183(0x0001) (Edit)
	unsigned char                                      bStreaming : 1;                                           // 0x0183(0x0001)
	enum class ESoundAssetCompressionType              SoundAssetCompressionType;                                // 0x0184(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bSeekableStreaming : 1;                                   // 0x0185(0x0001)
	unsigned char                                      bUseBinkAudio : 1;                                        // 0x0185(0x0001)
	unsigned char                                      UnknownData02[0x1A];                                      // 0x0186(0x001A) MISSED OFFSET
	struct FSoundModulationDefaultRoutingSettings      ModulationSettings;                                       // 0x01A0(0x0048) (Edit, BlueprintVisible)
	TArray<float>                                      FrequenciesToAnalyze;                                     // 0x01E8(0x0010) (Edit, ZeroConstructor)
	TArray<struct FSoundWaveSpectralTimeData>          CookedSpectralTimeData;                                   // 0x01F8(0x0010) (ZeroConstructor)
	TArray<struct FSoundWaveEnvelopeTimeData>          CookedEnvelopeTimeData;                                   // 0x0208(0x0010) (ZeroConstructor)
	int                                                InitialChunkSize;                                         // 0x0218(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x40];                                      // 0x021C(0x0040) MISSED OFFSET
	unsigned char                                      UnknownData04 : 5;                                        // 0x025C(0x0001)
	unsigned char                                      bMature : 1;                                              // 0x025C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bManualWordWrap : 1;                                      // 0x025C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bSingleLine : 1;                                          // 0x025C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bIsAmbisonics : 1;                                        // 0x025D(0x0001) (Edit)
	enum class ESoundWaveLoadingBehavior               LoadingBehavior;                                          // 0x025E(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x1];                                       // 0x025F(0x0001) MISSED OFFSET
	struct FString                                     SpokenText;                                               // 0x0260(0x0010) (ZeroConstructor, Deprecated)
	float                                              SubtitlePriority;                                         // 0x0270(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              Volume;                                                   // 0x0274(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Pitch;                                                    // 0x0278(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                NumChannels;                                              // 0x027C(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	TArray<struct FSoundWaveCuePoint>                  CuePoints;                                                // 0x0280(0x0010) (Edit, ZeroConstructor, EditConst)
	int                                                SampleRate;                                               // 0x0290(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData06[0xC];                                       // 0x0294(0x000C) MISSED OFFSET
	TArray<struct FSubtitleCue>                        Subtitles;                                                // 0x02A0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	class UCurveTable*                                 Curves;                                                   // 0x02B0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UCurveTable*                                 InternalCurves;                                           // 0x02B8(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x78];                                      // 0x02C0(0x0078) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SoundWave"));
		return ptr;
	}


	void SetSoundAssetCompressionType(enum class ESoundAssetCompressionType InSoundAssetCompressionType);//Offset:Discovery.exe+0x1BB9420
	enum class ESoundAssetCompressionType GetSoundAssetCompressionType();//Offset:Discovery.exe+0x5884890
};


// Class Engine.SoundWaveProcedural
// 0x0058 (0x0390 - 0x0338)
class USoundWaveProcedural : public USoundWave
{
public:
	unsigned char                                      UnknownData00[0x58];                                      // 0x0338(0x0058) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SoundWaveProcedural"));
		return ptr;
	}

};


// Class Engine.CameraShakeBase
// 0x00C8 (0x00F0 - 0x0028)
class UCameraShakeBase : public UObject
{
public:
	bool                                               bSingleInstance;                                          // 0x0028(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0029(0x0003) MISSED OFFSET
	float                                              ShakeScale;                                               // 0x002C(0x0004) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	class UCameraShakePattern*                         RootShakePattern;                                         // 0x0030(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class APlayerCameraManager*                        CameraManager;                                            // 0x0038(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0xB0];                                      // 0x0040(0x00B0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.CameraShakeBase"));
		return ptr;
	}


	void SetRootShakePattern(class UCameraShakePattern* InPattern);//Offset:Discovery.exe+0x56BEA80
	class UCameraShakePattern* GetRootShakePattern();//Offset:Discovery.exe+0x1A83670
};


// Class Engine.CameraShakePattern
// 0x0000 (0x0028 - 0x0028)
class UCameraShakePattern : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.CameraShakePattern"));
		return ptr;
	}

};


// Class Engine.AudioComponent
// 0x0870 (0x0B40 - 0x02D0)
class UAudioComponent : public USceneComponent
{
public:
	unsigned char                                      UnknownData00[0x188];                                     // 0x02D0(0x0188) MISSED OFFSET
	class USoundBase*                                  Sound;                                                    // 0x0458(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<struct FAudioParameter>                     DefaultParameters;                                        // 0x0460(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FAudioParameter>                     InstanceParameters;                                       // 0x0470(0x0010) (ZeroConstructor, Transient)
	class USoundClass*                                 SoundClassOverride;                                       // 0x0480(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bAutoDestroy : 1;                                         // 0x0488(0x0001)
	unsigned char                                      bStopWhenOwnerDestroyed : 1;                              // 0x0488(0x0001)
	unsigned char                                      bShouldRemainActiveIfDropped : 1;                         // 0x0488(0x0001)
	unsigned char                                      bAllowSpatialization : 1;                                 // 0x0488(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bOverrideAttenuation : 1;                                 // 0x0488(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bOverrideSubtitlePriority : 1;                            // 0x0488(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bIsUISound : 1;                                           // 0x0488(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bEnableLowPassFilter : 1;                                 // 0x0488(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bOverridePriority : 1;                                    // 0x0489(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bSuppressSubtitles : 1;                                   // 0x0489(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bCanPlayMultipleInstances : 1;                            // 0x0489(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bDisableParameterUpdatesWhilePlaying : 1;                 // 0x0489(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData01 : 4;                                        // 0x0489(0x0001)
	unsigned char                                      UnknownData02 : 6;                                        // 0x048A(0x0001)
	unsigned char                                      bAutoManageAttachment : 1;                                // 0x048A(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData03[0x5];                                       // 0x048B(0x0005) MISSED OFFSET
	struct FName                                       AudioComponentUserID;                                     // 0x0490(0x0008) (ZeroConstructor, IsPlainOldData)
	float                                              PitchModulationMin;                                       // 0x0498(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PitchModulationMax;                                       // 0x049C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              VolumeModulationMin;                                      // 0x04A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              VolumeModulationMax;                                      // 0x04A4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              VolumeMultiplier;                                         // 0x04A8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                EnvelopeFollowerAttackTime;                               // 0x04AC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                EnvelopeFollowerReleaseTime;                              // 0x04B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Priority;                                                 // 0x04B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SubtitlePriority;                                         // 0x04B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x04BC(0x0004) MISSED OFFSET
	class USoundEffectSourcePresetChain*               SourceEffectChain;                                        // 0x04C0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PitchMultiplier;                                          // 0x04C8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              LowPassFilterFrequency;                                   // 0x04CC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x8];                                       // 0x04D0(0x0008) MISSED OFFSET
	class USoundAttenuation*                           AttenuationSettings;                                      // 0x04D8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FSoundAttenuationSettings                   AttenuationOverrides;                                     // 0x04E0(0x03C8) (Edit, BlueprintVisible)
	class USoundConcurrency*                           ConcurrencySettings;                                      // 0x08A8(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData)
	unsigned char                                      UnknownData06[0x50];                                      // 0x08B0(0x0050) UNKNOWN PROPERTY: ConcurrencySet
	unsigned char                                      UnknownData07[0xC];                                       // 0x0900(0x000C) MISSED OFFSET
	enum class EAttachmentRule                         AutoAttachLocationRule;                                   // 0x090C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	enum class EAttachmentRule                         AutoAttachRotationRule;                                   // 0x090D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	enum class EAttachmentRule                         AutoAttachScaleRule;                                      // 0x090E(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData08[0x1];                                       // 0x090F(0x0001) MISSED OFFSET
	struct FSoundModulationDefaultRoutingSettings      ModulationRouting;                                        // 0x0910(0x0048) (Edit, BlueprintVisible)
	struct FScriptMulticastDelegate                    OnAudioPlayStateChanged;                                  // 0x0958(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData09[0x18];                                      // 0x0968(0x0018) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnAudioVirtualizationChanged;                             // 0x0980(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData10[0x18];                                      // 0x0990(0x0018) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnAudioFinished;                                          // 0x09A8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData11[0x18];                                      // 0x09B8(0x0018) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnAudioPlaybackPercent;                                   // 0x09D0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData12[0x18];                                      // 0x09E0(0x0018) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnAudioSingleEnvelopeValue;                               // 0x09F8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData13[0x18];                                      // 0x0A08(0x0018) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnAudioMultiEnvelopeValue;                                // 0x0A20(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData14[0x18];                                      // 0x0A30(0x0018) MISSED OFFSET
	struct FScriptDelegate                             OnQueueSubtitles;                                         // 0x0A48(0x0010) (ZeroConstructor, InstancedReference)
	unsigned char                                      UnknownData15[0x10];                                      // 0x0A58(0x0010) MISSED OFFSET
	TWeakObjectPtr<class USceneComponent>              AutoAttachParent;                                         // 0x0A68(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, IsPlainOldData)
	struct FName                                       AutoAttachSocketName;                                     // 0x0A70(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData16[0xC8];                                      // 0x0A78(0x00C8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.AudioComponent"));
		return ptr;
	}


	void StopDelayed(float DelayTime);//Offset:Discovery.exe+0x56A1970
	void Stop();//Offset:Discovery.exe+0x56A1A10
	void SetWaveParameter(const struct FName& InName, class USoundWave* InWave);//Offset:Discovery.exe+0x56A1620
	void SetVolumeMultiplier(float NewVolumeMultiplier);//Offset:Discovery.exe+0x56A1580
	void SetUISound(bool bInUISound);//Offset:Discovery.exe+0x56A1440
	void SetSubmixSend(class USoundSubmixBase* Submix, float SendLevel);//Offset:Discovery.exe+0x56A12A0
	void SetSourceBusSendPreEffect(class USoundSourceBus* SoundSourceBus, float SourceBusSendLevel);//Offset:Discovery.exe+0x56A11C0
	void SetSourceBusSendPostEffect(class USoundSourceBus* SoundSourceBus, float SourceBusSendLevel);//Offset:Discovery.exe+0x56A10E0
	void SetSound(class USoundBase* NewSound);//Offset:Discovery.exe+0x56A2560
	void SetPitchMultiplier(float NewPitchMultiplier);//Offset:Discovery.exe+0x56A14E0
	void SetPaused(bool bPause);//Offset:Discovery.exe+0x56A18D0
	void SetOutputToBusOnly(bool bInOutputToBusOnly);//Offset:Discovery.exe+0x56A0D40
	void SetLowPassFilterFrequency(float InLowPassFilterFrequency);//Offset:Discovery.exe+0x56A0DE0
	void SetLowPassFilterEnabled(bool InLowPassFilterEnabled);//Offset:Discovery.exe+0x56A0E80
	void SetIntParameter(const struct FName& InName, int inInt);//Offset:Discovery.exe+0x56A1B20
	void SetFloatParameter(const struct FName& InName, float InFloat);//Offset:Discovery.exe+0x56A1A30
	void SetBoolParameter(const struct FName& InName, bool InBool);//Offset:Discovery.exe+0x56A1C10
	void SetAudioBusSendPreEffect(class UAudioBus* AudioBus, float AudioBusSendLevel);//Offset:Discovery.exe+0x56A1000
	void SetAudioBusSendPostEffect(class UAudioBus* AudioBus, float AudioBusSendLevel);//Offset:Discovery.exe+0x56A0F20
	void PlayQuantized(class UObject* WorldContextObject, const struct FScriptDelegate& InDelegate, float InStartTime, float InFadeInDuration, float InFadeVolumeLevel, enum class EAudioFaderCurve InFadeCurve, class UQuartzClockHandle** InClockHandle, struct FQuartzQuantizationBoundary* InQuantizationBoundary);//Offset:Discovery.exe+0x56A1D00
	void PlayEx(float StartTime, float FadeInDuration, class AActor* OwnerOverride);//Offset:Discovery.exe+0x56A20E0
	void Play(float StartTime);//Offset:Discovery.exe+0x56A2210
	bool IsVirtualized();//Offset:Discovery.exe+0x56A1860
	bool IsPlaying();//Offset:Discovery.exe+0x56A1890
	bool HasCookedFFTData();//Offset:Discovery.exe+0x56A0D10
	bool HasCookedAmplitudeEnvelopeData();//Offset:Discovery.exe+0x56A0CE0
	enum class EAudioComponentPlayState GetPlayState();//Offset:Discovery.exe+0x56A1830
	bool GetCookedFFTDataForAllPlayingSounds(TArray<struct FSoundWaveSpectralDataPerSound>* OutSoundWaveSpectralData);//Offset:Discovery.exe+0x56A0AB0
	bool GetCookedFFTData(TArray<float> FrequenciesToGet, TArray<struct FSoundWaveSpectralData>* OutSoundWaveSpectralData);//Offset:Discovery.exe+0x56A0BB0
	bool GetCookedEnvelopeDataForAllPlayingSounds(TArray<struct FSoundWaveEnvelopeDataPerSound>* OutEnvelopeData);//Offset:Discovery.exe+0x56A0940
	bool GetCookedEnvelopeData(float* OutEnvelopeData);//Offset:Discovery.exe+0x56A0A00
	void FadeOut(float FadeOutDuration, float FadeVolumeLevel, enum class EAudioFaderCurve FadeCurve);//Offset:Discovery.exe+0x56A22B0
	void FadeIn(float FadeInDuration, float FadeVolumeLevel, float StartTime, enum class EAudioFaderCurve FadeCurve);//Offset:Discovery.exe+0x56A23E0
	bool BP_GetAttenuationSettingsToApply(struct FSoundAttenuationSettings* OutAttenuationSettings);//Offset:Discovery.exe+0x56A0880
	void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel, enum class EAudioFaderCurve FadeCurve);//Offset:Discovery.exe+0x56A1700
	void AdjustAttenuation(const struct FSoundAttenuationSettings& InAttenuationSettings);//Offset:Discovery.exe+0x56A1380
};


// Class Engine.AssetImportData
// 0x0000 (0x0028 - 0x0028)
class UAssetImportData : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.AssetImportData"));
		return ptr;
	}

};


// Class Engine.EngineCustomTimeStep
// 0x0000 (0x0028 - 0x0028)
class UEngineCustomTimeStep : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.EngineCustomTimeStep"));
		return ptr;
	}

};


// Class Engine.SkyLight
// 0x0010 (0x02D8 - 0x02C8)
class ASkyLight : public AInfo
{
public:
	class USkyLightComponent*                          LightComponent;                                           // 0x02C8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      bEnabled : 1;                                             // 0x02D0(0x0001) (Net)
	unsigned char                                      UnknownData00[0x7];                                       // 0x02D1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SkyLight"));
		return ptr;
	}


	void OnRep_bEnabled();//Offset:Discovery.exe+0x19BFD70
};


// Class Engine.TextureCube
// 0x00A0 (0x0290 - 0x01F0)
class UTextureCube : public UTexture
{
public:
	unsigned char                                      UnknownData00[0xA0];                                      // 0x01F0(0x00A0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.TextureCube"));
		return ptr;
	}

};


// Class Engine.PartitionActor
// 0x0000 (0x02C8 - 0x02C8)
class APartitionActor : public AActor
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.PartitionActor"));
		return ptr;
	}

};


// Class Engine.ISMPartitionActor
// 0x0010 (0x02D8 - 0x02C8)
class AISMPartitionActor : public APartitionActor
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x02C8(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ISMPartitionActor"));
		return ptr;
	}

};


// Class Engine.StaticMeshActor
// 0x0010 (0x02D8 - 0x02C8)
class AStaticMeshActor : public AActor
{
public:
	class UStaticMeshComponent*                        StaticMeshComponent;                                      // 0x02C8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	bool                                               bStaticMeshReplicateMovement;                             // 0x02D0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	enum class ENavDataGatheringMode                   NavigationGeometryGatheringMode;                          // 0x02D1(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x02D2(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.StaticMeshActor"));
		return ptr;
	}


	void SetMobility(TEnumAsByte<EComponentMobility> InMobility);//Offset:Discovery.exe+0x58970D0
};


// Class Engine.HLODBuilder
// 0x0000 (0x0028 - 0x0028)
class UHLODBuilder : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.HLODBuilder"));
		return ptr;
	}

};


// Class Engine.MaterialInterface
// 0x0070 (0x0098 - 0x0028)
class UMaterialInterface : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0028(0x0010) MISSED OFFSET
	class USubsurfaceProfile*                          SubsurfaceProfile;                                        // 0x0038(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0040(0x0010) MISSED OFFSET
	struct FLightmassMaterialInterfaceSettings         LightmassSettings;                                        // 0x0050(0x0010) (Edit)
	TArray<struct FMaterialTextureInfo>                TextureStreamingData;                                     // 0x0060(0x0010) (ZeroConstructor)
	TArray<class UAssetUserData*>                      AssetUserData;                                            // 0x0070(0x0010) (Edit, ExportObject, ZeroConstructor)
	unsigned char                                      UnknownData02[0x18];                                      // 0x0080(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialInterface"));
		return ptr;
	}


	void SetForceMipLevelsToBeResident(bool OverrideForceMiplevelsToBeResident, bool bForceMiplevelsToBeResidentValue, float ForceDuration, int CinematicTextureGroups, bool bFastResponse);//Offset:Discovery.exe+0x57F59E0
	class UPhysicalMaterialMask* GetPhysicalMaterialMask();//Offset:Discovery.exe+0x1DB6640
	class UPhysicalMaterial* GetPhysicalMaterialFromMap(int Index);//Offset:Discovery.exe+0x57F5D00
	class UPhysicalMaterial* GetPhysicalMaterial();//Offset:Discovery.exe+0x1DB6610
	struct FMaterialParameterInfo GetParameterInfo(TEnumAsByte<EMaterialParameterAssociation> Association, const struct FName& ParameterName, class UMaterialFunctionInterface* LayerFunction);//Offset:Discovery.exe+0x57F5BC0
	class UMaterial* GetBaseMaterial();//Offset:Discovery.exe+0x57F5DA0
};


// Class Engine.MaterialInstance
// 0x0160 (0x01F8 - 0x0098)
class UMaterialInstance : public UMaterialInterface
{
public:
	class UPhysicalMaterial*                           PhysMaterial;                                             // 0x0098(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UPhysicalMaterial*                           PhysicalMaterialMap[0x8];                                 // 0x00A0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UMaterialInterface*                          Parent;                                                   // 0x00E0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bHasStaticPermutationResource : 1;                        // 0x00E8(0x0001)
	unsigned char                                      bOverrideSubsurfaceProfile : 1;                           // 0x00E8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00E9(0x0007) MISSED OFFSET
	TArray<struct FScalarParameterValue>               ScalarParameterValues;                                    // 0x00F0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FVectorParameterValue>               VectorParameterValues;                                    // 0x0100(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FDoubleVectorParameterValue>         DoubleVectorParameterValues;                              // 0x0110(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FTextureParameterValue>              TextureParameterValues;                                   // 0x0120(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FRuntimeVirtualTextureParameterValue> RuntimeVirtualTextureParameterValues;                     // 0x0130(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FFontParameterValue>                 FontParameterValues;                                      // 0x0140(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	struct FMaterialInstanceBasePropertyOverrides      BasePropertyOverrides;                                    // 0x0150(0x0008) (Edit)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0158(0x0010) MISSED OFFSET
	struct FStaticParameterSet                         StaticParameters;                                         // 0x0168(0x0058)
	unsigned char                                      UnknownData02[0x38];                                      // 0x01C0(0x0038) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialInstance"));
		return ptr;
	}

};


// Class Engine.MaterialInstanceConstant
// 0x0008 (0x0200 - 0x01F8)
class UMaterialInstanceConstant : public UMaterialInstance
{
public:
	class UPhysicalMaterialMask*                       PhysMaterialMask;                                         // 0x01F8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialInstanceConstant"));
		return ptr;
	}


	struct FLinearColor K2_GetVectorParameterValue(const struct FName& ParameterName);//Offset:Discovery.exe+0x57F37A0
	class UTexture* K2_GetTextureParameterValue(const struct FName& ParameterName);//Offset:Discovery.exe+0x57F3850
	float K2_GetScalarParameterValue(const struct FName& ParameterName);//Offset:Discovery.exe+0x57F38F0
};


// Class Engine.MaterialExpressionCustomOutput
// 0x0000 (0x0040 - 0x0040)
class UMaterialExpressionCustomOutput : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionCustomOutput"));
		return ptr;
	}

};


// Class Engine.TimecodeProvider
// 0x0008 (0x0030 - 0x0028)
class UTimecodeProvider : public UObject
{
public:
	float                                              FrameDelay;                                               // 0x0028(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x002C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.TimecodeProvider"));
		return ptr;
	}


	struct FTimecode GetTimecode();//Offset:Discovery.exe+0x58A1250
	enum class ETimecodeProviderSynchronizationState GetSynchronizationState();//Offset:Discovery.exe+0x1EE8830
	struct FQualifiedFrameTime GetQualifiedFrameTime();//Offset:Discovery.exe+0x58A1300
	struct FFrameRate GetFrameRate();//Offset:Discovery.exe+0x58A1140
	struct FTimecode GetDelayedTimecode();//Offset:Discovery.exe+0x58A11F0
	struct FQualifiedFrameTime GetDelayedQualifiedFrameTime();//Offset:Discovery.exe+0x58A12B0
	bool FetchTimecode(struct FQualifiedFrameTime* OutFrameTime);//Offset:Discovery.exe+0x58A1360
	void FetchAndUpdate();//Offset:Discovery.exe+0x14618E0
};


// Class Engine.DynamicBlueprintBinding
// 0x0000 (0x0028 - 0x0028)
class UDynamicBlueprintBinding : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.DynamicBlueprintBinding"));
		return ptr;
	}

};


// Class Engine.CameraActor
// 0x06F8 (0x09C0 - 0x02C8)
class ACameraActor : public AActor
{
public:
	TEnumAsByte<EAutoReceiveInput>                     AutoActivateForPlayer;                                    // 0x02C8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x02C9(0x0007) MISSED OFFSET
	class UCameraComponent*                            CameraComponent;                                          // 0x02D0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class USceneComponent*                             SceneComponent;                                           // 0x02D8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x02E0(0x0008) MISSED OFFSET
	unsigned char                                      bConstrainAspectRatio : 1;                                // 0x02E8(0x0001) (Deprecated)
	unsigned char                                      UnknownData02[0x3];                                       // 0x02E9(0x0003) MISSED OFFSET
	float                                              AspectRatio;                                              // 0x02EC(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              FOVAngle;                                                 // 0x02F0(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              PostProcessBlendWeight;                                   // 0x02F4(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	unsigned char                                      UnknownData03[0x8];                                       // 0x02F8(0x0008) MISSED OFFSET
	struct FPostProcessSettings                        PostProcessSettings;                                      // 0x0300(0x06C0) (Deprecated)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.CameraActor"));
		return ptr;
	}


	int GetAutoActivatePlayerIndex();//Offset:Discovery.exe+0x56BA700
};


// Class Engine.CameraComponent
// 0x0770 (0x0A40 - 0x02D0)
class UCameraComponent : public USceneComponent
{
public:
	float                                              FieldOfView;                                              // 0x02D0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              OrthoWidth;                                               // 0x02D4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              OrthoNearClipPlane;                                       // 0x02D8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              OrthoFarClipPlane;                                        // 0x02DC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AspectRatio;                                              // 0x02E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bConstrainAspectRatio : 1;                                // 0x02E4(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUseFieldOfViewForLOD : 1;                                // 0x02E4(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bLockToHmd : 1;                                           // 0x02E4(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUsePawnControlRotation : 1;                              // 0x02E4(0x0001) (Edit, BlueprintVisible)
	TEnumAsByte<ECameraProjectionMode>                 ProjectionMode;                                           // 0x02E5(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6A];                                      // 0x02E6(0x006A) MISSED OFFSET
	float                                              PostProcessBlendWeight;                                   // 0x0350(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2C];                                      // 0x0354(0x002C) MISSED OFFSET
	struct FPostProcessSettings                        PostProcessSettings;                                      // 0x0380(0x06C0) (Edit, BlueprintVisible)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.CameraComponent"));
		return ptr;
	}


	void SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD);//Offset:Discovery.exe+0x56BB730
	void SetProjectionMode(TEnumAsByte<ECameraProjectionMode> InProjectionMode);//Offset:Discovery.exe+0x56BB690
	void SetPostProcessBlendWeight(float InPostProcessBlendWeight);//Offset:Discovery.exe+0x56BB5E0
	void SetOrthoWidth(float InOrthoWidth);//Offset:Discovery.exe+0x56BBAC0
	void SetOrthoNearClipPlane(float InOrthoNearClipPlane);//Offset:Discovery.exe+0x56BBA10
	void SetOrthoFarClipPlane(float InOrthoFarClipPlane);//Offset:Discovery.exe+0x56BB970
	void SetFieldOfView(float InFieldOfView);//Offset:Discovery.exe+0x4BFBB90
	void SetConstraintAspectRatio(bool bInConstrainAspectRatio);//Offset:Discovery.exe+0x56BB800
	void SetAspectRatio(float InAspectRatio);//Offset:Discovery.exe+0x56BB8C0
	void RemoveBlendable(const TScriptInterface<class UBlendableInterface>& InBlendableObject);//Offset:Discovery.exe+0x56BB1D0
	void OnCameraMeshHiddenChanged();//Offset:Discovery.exe+0x155C060
	void GetCameraView(float DeltaTime, struct FMinimalViewInfo* DesiredView);//Offset:Discovery.exe+0x56BB450
	void AddOrUpdateBlendable(const TScriptInterface<class UBlendableInterface>& InBlendableObject, float InWeight);//Offset:Discovery.exe+0x56BB2F0
};


// Class Engine.Model
// 0x0248 (0x0270 - 0x0028)
class UModel : public UObject
{
public:
	unsigned char                                      UnknownData00[0x248];                                     // 0x0028(0x0248) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.Model"));
		return ptr;
	}

};


// Class Engine.ActiveSoundUpdateInterface
// 0x0000 (0x0028 - 0x0028)
class UActiveSoundUpdateInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ActiveSoundUpdateInterface"));
		return ptr;
	}

};


// Class Engine.ActorChannel
// 0x0228 (0x0290 - 0x0068)
class UActorChannel : public UChannel
{
public:
	class AActor*                                      Actor;                                                    // 0x0068(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xE8];                                      // 0x0070(0x00E8) MISSED OFFSET
	TArray<class UObject*>                             CreateSubObjects;                                         // 0x0158(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData01[0x128];                                     // 0x0168(0x0128) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ActorChannel"));
		return ptr;
	}

};


// Class Engine.ActorDescContainer
// 0x0008 (0x0030 - 0x0028)
class UActorDescContainer : public UObject
{
public:
	class UWorld*                                      World;                                                    // 0x0028(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ActorDescContainer"));
		return ptr;
	}

};


// Class Engine.ActorElementAssetDataInterface
// 0x0008 (0x0030 - 0x0028)
class UActorElementAssetDataInterface : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ActorElementAssetDataInterface"));
		return ptr;
	}

};


// Class Engine.ActorElementCounterInterface
// 0x0008 (0x0030 - 0x0028)
class UActorElementCounterInterface : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ActorElementCounterInterface"));
		return ptr;
	}

};


// Class Engine.ActorElementHierarchyInterface
// 0x0008 (0x0030 - 0x0028)
class UActorElementHierarchyInterface : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ActorElementHierarchyInterface"));
		return ptr;
	}

};


// Class Engine.ActorElementObjectInterface
// 0x0008 (0x0030 - 0x0028)
class UActorElementObjectInterface : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ActorElementObjectInterface"));
		return ptr;
	}

};


// Class Engine.ActorElementSelectionInterface
// 0x0008 (0x0030 - 0x0028)
class UActorElementSelectionInterface : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ActorElementSelectionInterface"));
		return ptr;
	}

};


// Class Engine.ActorElementWorldInterface
// 0x0008 (0x0030 - 0x0028)
class UActorElementWorldInterface : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ActorElementWorldInterface"));
		return ptr;
	}

};


// Class Engine.Level
// 0x02C8 (0x02F0 - 0x0028)
class ULevel : public UObject
{
public:
	unsigned char                                      UnknownData00[0x90];                                      // 0x0028(0x0090) MISSED OFFSET
	class UWorld*                                      OwningWorld;                                              // 0x00B8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UModel*                                      Model;                                                    // 0x00C0(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<class UModelComponent*>                     ModelComponents;                                          // 0x00C8(0x0010) (ExportObject, ZeroConstructor)
	class ULevelActorContainer*                        ActorCluster;                                             // 0x00D8(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData)
	int                                                NumTextureStreamingUnbuiltComponents;                     // 0x00E0(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                NumTextureStreamingDirtyResources;                        // 0x00E4(0x0004) (ZeroConstructor, IsPlainOldData)
	class ALevelScriptActor*                           LevelScriptActor;                                         // 0x00E8(0x0008) (ZeroConstructor, IsPlainOldData)
	class ANavigationObjectBase*                       NavListStart;                                             // 0x00F0(0x0008) (ZeroConstructor, IsPlainOldData)
	class ANavigationObjectBase*                       NavListEnd;                                               // 0x00F8(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<class UNavigationDataChunk*>                NavDataChunks;                                            // 0x0100(0x0010) (ZeroConstructor)
	float                                              LightmapTotalSize;                                        // 0x0110(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              ShadowmapTotalSize;                                       // 0x0114(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	TArray<struct FVector>                             StaticNavigableGeometry;                                  // 0x0118(0x0010) (ZeroConstructor)
	TArray<struct FGuid>                               StreamingTextureGuids;                                    // 0x0128(0x0010) (ZeroConstructor)
	TArray<struct FName>                               StreamingTextures;                                        // 0x0138(0x0010) (ZeroConstructor)
	uint32_t                                           PackedTextureStreamingQualityLevelFeatureLevel;           // 0x0148(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0xC4];                                      // 0x014C(0x00C4) MISSED OFFSET
	struct FGuid                                       LevelBuildDataId;                                         // 0x0210(0x0010) (ZeroConstructor, IsPlainOldData)
	class UMapBuildDataRegistry*                       MapBuildData;                                             // 0x0220(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FIntVector                                  LightBuildLevelOffset;                                    // 0x0228(0x000C) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bIsLightingScenario : 1;                                  // 0x0234(0x0001)
	unsigned char                                      UnknownData02 : 2;                                        // 0x0234(0x0001)
	unsigned char                                      bTextureStreamingRotationChanged : 1;                     // 0x0234(0x0001)
	unsigned char                                      bStaticComponentsRegisteredInStreamingManager : 1;        // 0x0234(0x0001) (Transient, DuplicateTransient)
	unsigned char                                      bIsVisible : 1;                                           // 0x0234(0x0001) (Transient)
	unsigned char                                      UnknownData03[0x1];                                       // 0x0235(0x0001) MISSED OFFSET
	unsigned char                                      UnknownData04 : 7;                                        // 0x0236(0x0001)
	unsigned char                                      bIsPartitioned : 1;                                       // 0x0236(0x0001)
	unsigned char                                      bIsWorldPartitionRuntimeCell : 1;                         // 0x0237(0x0001)
	unsigned char                                      UnknownData05[0x68];                                      // 0x0238(0x0068) MISSED OFFSET
	class AWorldSettings*                              WorldSettings;                                            // 0x02A0(0x0008) (ZeroConstructor, IsPlainOldData)
	class AWorldDataLayers*                            WorldDataLayers;                                          // 0x02A8(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x8];                                       // 0x02B0(0x0008) MISSED OFFSET
	TArray<class UAssetUserData*>                      AssetUserData;                                            // 0x02B8(0x0010) (ExportObject, ZeroConstructor)
	unsigned char                                      UnknownData07[0x10];                                      // 0x02C8(0x0010) MISSED OFFSET
	TArray<struct FReplicatedStaticActorDestructionInfo> DestroyedReplicatedStaticActors;                          // 0x02D8(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData08[0x8];                                       // 0x02E8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.Level"));
		return ptr;
	}

};


// Class Engine.ActorFolder
// 0x0000 (0x0028 - 0x0028)
class UActorFolder : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ActorFolder"));
		return ptr;
	}

};


// Class Engine.ActorPartitionSubsystem
// 0x0000 (0x0030 - 0x0030)
class UActorPartitionSubsystem : public UWorldSubsystem
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ActorPartitionSubsystem"));
		return ptr;
	}

};


// Class Engine.ActorSoundParameterInterface
// 0x0000 (0x0028 - 0x0028)
class UActorSoundParameterInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ActorSoundParameterInterface"));
		return ptr;
	}


	void GetActorSoundParams(TArray<struct FAudioParameter>* Params);//Offset:Discovery.exe+0x327F8B0
};


// Class Engine.ActorTextureStreamingBuildDataComponent
// 0x0000 (0x00B8 - 0x00B8)
class UActorTextureStreamingBuildDataComponent : public UActorComponent
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ActorTextureStreamingBuildDataComponent"));
		return ptr;
	}

};


// Class Engine.BlendSpace
// 0x0138 (0x01B8 - 0x0080)
class UBlendSpace : public UAnimationAsset
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0080(0x0008) MISSED OFFSET
	bool                                               bRotationBlendInMeshSpace;                                // 0x0088(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0089(0x0003) MISSED OFFSET
	struct FInterpolationParameter                     InterpolationParam[0x3];                                  // 0x008C(0x0010) (Edit)
	float                                              TargetWeightInterpolationSpeedPerSec;                     // 0x00BC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bTargetWeightInterpolationEaseInOut;                      // 0x00C0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x00C1(0x0003) MISSED OFFSET
	float                                              AnimLength;                                               // 0x00C4(0x0004) (ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ENotifyTriggerMode>                    NotifyTriggerMode;                                        // 0x00C8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bInterpolateUsingGrid;                                    // 0x00C9(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	enum class EPreferredTriangulationDirection        PreferredTriangulationDirection;                          // 0x00CA(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x1D];                                      // 0x00CB(0x001D) MISSED OFFSET
	TArray<struct FPerBoneInterpolation>               PerBoneBlend;                                             // 0x00E8(0x0010) (Edit, ZeroConstructor)
	int                                                SampleIndexWithMarkers;                                   // 0x00F8(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x00FC(0x0004) MISSED OFFSET
	TArray<struct FBlendSample>                        SampleData;                                               // 0x0100(0x0010) (Edit, ZeroConstructor)
	TArray<struct FEditorElement>                      GridSamples;                                              // 0x0110(0x0010) (ZeroConstructor)
	struct FBlendSpaceData                             BlendSpaceData;                                           // 0x0120(0x0020)
	struct FBlendParameter                             BlendParameters[0x3];                                     // 0x0140(0x0020) (Edit)
	TEnumAsByte<EBlendSpaceAxis>                       AxisToScaleAnimation;                                     // 0x01A0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x7];                                       // 0x01A1(0x0007) MISSED OFFSET
	TArray<int>                                        DimensionIndices;                                         // 0x01A8(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.BlendSpace"));
		return ptr;
	}

};


// Class Engine.AimOffsetBlendSpace
// 0x0000 (0x01B8 - 0x01B8)
class UAimOffsetBlendSpace : public UBlendSpace
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.AimOffsetBlendSpace"));
		return ptr;
	}

};


// Class Engine.BlendSpace1D
// 0x0008 (0x01C0 - 0x01B8)
class UBlendSpace1D : public UBlendSpace
{
public:
	bool                                               bScaleAnimation;                                          // 0x01B8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x01B9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.BlendSpace1D"));
		return ptr;
	}

};


// Class Engine.AimOffsetBlendSpace1D
// 0x0000 (0x01C0 - 0x01C0)
class UAimOffsetBlendSpace1D : public UBlendSpace1D
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.AimOffsetBlendSpace1D"));
		return ptr;
	}

};


// Class Engine.AISystemBase
// 0x0030 (0x0058 - 0x0028)
class UAISystemBase : public UObject
{
public:
	struct FSoftClassPath                              AISystemClassName;                                        // 0x0028(0x0018) (Edit, ZeroConstructor, Config, GlobalConfig, NoClear)
	struct FName                                       AISystemModuleName;                                       // 0x0040(0x0008) (Edit, ZeroConstructor, Config, GlobalConfig, NoClear, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0048(0x0008) MISSED OFFSET
	bool                                               bInstantiateAISystemOnClient;                             // 0x0050(0x0001) (ZeroConstructor, Config, GlobalConfig, NoClear, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0051(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.AISystemBase"));
		return ptr;
	}

};


// Class Engine.AmbientSound
// 0x0008 (0x02D0 - 0x02C8)
class AAmbientSound : public AActor
{
public:
	class UAudioComponent*                             AudioComponent;                                           // 0x02C8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.AmbientSound"));
		return ptr;
	}


	void Stop();//Offset:Discovery.exe+0x5676590
	void Play(float StartTime);//Offset:Discovery.exe+0x56765B0
	void FadeOut(float FadeOutDuration, float FadeVolumeLevel);//Offset:Discovery.exe+0x5676730
	void FadeIn(float FadeInDuration, float FadeVolumeLevel);//Offset:Discovery.exe+0x5676810
	void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel);//Offset:Discovery.exe+0x5676650
};


// Class Engine.AnimationAssetExtensions
// 0x0000 (0x0028 - 0x0028)
class UAnimationAssetExtensions : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.AnimationAssetExtensions"));
		return ptr;
	}

};


// Class Engine.AnimationSettings
// 0x00F0 (0x0128 - 0x0038)
class UAnimationSettings : public UDeveloperSettings
{
public:
	int                                                CompressCommandletVersion;                                // 0x0038(0x0004) (Edit, ZeroConstructor, Config, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x003C(0x0004) MISSED OFFSET
	TArray<struct FString>                             KeyEndEffectorsMatchNameArray;                            // 0x0040(0x0010) (Edit, ZeroConstructor, Config)
	bool                                               ForceRecompression;                                       // 0x0050(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bForceBelowThreshold;                                     // 0x0051(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bFirstRecompressUsingCurrentOrDefault;                    // 0x0052(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bRaiseMaxErrorToExisting;                                 // 0x0053(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bEnablePerformanceLog;                                    // 0x0054(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bStripAnimationDataOnDedicatedServer;                     // 0x0055(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bTickAnimationOnSkeletalMeshInit;                         // 0x0056(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x0057(0x0001) MISSED OFFSET
	struct FTimecodeCustomAttributeNameSettings        BoneTimecodeCustomAttributeNameSettings;                  // 0x0058(0x0038) (Edit, Config)
	TArray<struct FCustomAttributeSetting>             BoneCustomAttributesNames;                                // 0x0090(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FString>                             BoneNamesWithCustomAttributes;                            // 0x00A0(0x0010) (Edit, ZeroConstructor, Config)
	TMap<struct FName, enum class ECustomAttributeBlendType> AttributeBlendModes;                                      // 0x00B0(0x0050) (Edit, Config)
	enum class ECustomAttributeBlendType               DefaultAttributeBlendMode;                                // 0x0100(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0101(0x0007) MISSED OFFSET
	TArray<struct FString>                             TransformAttributeNames;                                  // 0x0108(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FMirrorFindReplaceExpression>        MirrorFindReplaceExpressions;                             // 0x0118(0x0010) (Edit, ZeroConstructor, Config)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.AnimationSettings"));
		return ptr;
	}


	TArray<struct FString> GetBoneCustomAttributeNamesToImport();//Offset:Discovery.exe+0x5678720
};


// Class Engine.AnimBlueprint
// 0x0028 (0x00C8 - 0x00A0)
class UAnimBlueprint : public UBlueprint
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x00A0(0x0008) MISSED OFFSET
	class USkeleton*                                   TargetSkeleton;                                           // 0x00A8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<struct FAnimGroupInfo>                      Groups;                                                   // 0x00B0(0x0010) (ZeroConstructor)
	bool                                               bIsTemplate;                                              // 0x00C0(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bUseMultiThreadedAnimationUpdate;                         // 0x00C1(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bWarnAboutBlueprintUsage;                                 // 0x00C2(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x5];                                       // 0x00C3(0x0005) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.AnimBlueprint"));
		return ptr;
	}

};


// Class Engine.AnimBlueprintClassSubsystem_PropertyAccess
// 0x0000 (0x0028 - 0x0028)
class UAnimBlueprintClassSubsystem_PropertyAccess : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.AnimBlueprintClassSubsystem_PropertyAccess"));
		return ptr;
	}

};


// Class Engine.AnimBlueprintGeneratedStruct
// 0x0000 (0x00C0 - 0x00C0)
class UAnimBlueprintGeneratedStruct : public UScriptStruct
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.AnimBlueprintGeneratedStruct"));
		return ptr;
	}

};


// Class Engine.AnimBlueprintGeneratedClass
// 0x0268 (0x05F0 - 0x0388)
class UAnimBlueprintGeneratedClass : public UBlueprintGeneratedClass
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0388(0x0008) MISSED OFFSET
	TArray<struct FBakedAnimationStateMachine>         BakedStateMachines;                                       // 0x0390(0x0010) (ZeroConstructor)
	class USkeleton*                                   TargetSkeleton;                                           // 0x03A0(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<struct FAnimNotifyEvent>                    AnimNotifies;                                             // 0x03A8(0x0010) (ZeroConstructor)
	TMap<struct FName, struct FCachedPoseIndices>      OrderedSavedPoseIndicesMap;                               // 0x03B8(0x0050)
	unsigned char                                      UnknownData01[0x80];                                      // 0x0408(0x0080) MISSED OFFSET
	TArray<struct FName>                               SyncGroupNames;                                           // 0x0488(0x0010) (ZeroConstructor)
	TMap<struct FName, struct FGraphAssetPlayerInformation> GraphAssetPlayerInformation;                              // 0x0498(0x0050)
	TMap<struct FName, struct FAnimGraphBlendOptions>  GraphBlendOptions;                                        // 0x04E8(0x0050)
	TArray<struct FAnimNodeData>                       AnimNodeData;                                             // 0x0538(0x0010) (ZeroConstructor)
	TMap<class UScriptStruct*, struct FAnimNodeStructData> NodeTypeMap;                                              // 0x0548(0x0050)
	unsigned char                                      UnknownData02[0x58];                                      // 0x0598(0x0058) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.AnimBlueprintGeneratedClass"));
		return ptr;
	}

};


// Class Engine.AnimBoneCompressionCodec
// 0x0010 (0x0038 - 0x0028)
class UAnimBoneCompressionCodec : public UObject
{
public:
	struct FString                                     Description;                                              // 0x0028(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.AnimBoneCompressionCodec"));
		return ptr;
	}

};


// Class Engine.AnimBoneCompressionSettings
// 0x0010 (0x0038 - 0x0028)
class UAnimBoneCompressionSettings : public UObject
{
public:
	TArray<class UAnimBoneCompressionCodec*>           Codecs;                                                   // 0x0028(0x0010) (Edit, ExportObject, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.AnimBoneCompressionSettings"));
		return ptr;
	}

};


// Class Engine.AnimClassData
// 0x0230 (0x0258 - 0x0028)
class UAnimClassData : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	TArray<struct FBakedAnimationStateMachine>         BakedStateMachines;                                       // 0x0030(0x0010) (ZeroConstructor)
	class USkeleton*                                   TargetSkeleton;                                           // 0x0040(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<struct FAnimNotifyEvent>                    AnimNotifies;                                             // 0x0048(0x0010) (ZeroConstructor)
	TMap<struct FName, struct FCachedPoseIndices>      OrderedSavedPoseIndicesMap;                               // 0x0058(0x0050)
	TArray<struct FAnimBlueprintFunction>              AnimBlueprintFunctions;                                   // 0x00A8(0x0010) (ZeroConstructor)
	TArray<struct FAnimBlueprintFunctionData>          AnimBlueprintFunctionData;                                // 0x00B8(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData01[0x10];                                      // 0x00C8(0x0010) UNKNOWN PROPERTY: AnimNodeProperties
	unsigned char                                      UnknownData02[0x10];                                      // 0x00D8(0x0010) MISSED OFFSET
	unsigned char                                      UnknownData03[0x10];                                      // 0x00D8(0x0010) UNKNOWN PROPERTY: LinkedAnimGraphNodeProperties
	unsigned char                                      UnknownData04[0x10];                                      // 0x00F8(0x0010) MISSED OFFSET
	unsigned char                                      UnknownData05[0x10];                                      // 0x00F8(0x0010) UNKNOWN PROPERTY: LinkedAnimLayerNodeProperties
	unsigned char                                      UnknownData06[0x10];                                      // 0x0118(0x0010) MISSED OFFSET
	unsigned char                                      UnknownData07[0x10];                                      // 0x0118(0x0010) UNKNOWN PROPERTY: PreUpdateNodeProperties
	unsigned char                                      UnknownData08[0x10];                                      // 0x0138(0x0010) MISSED OFFSET
	unsigned char                                      UnknownData09[0x10];                                      // 0x0138(0x0010) UNKNOWN PROPERTY: DynamicResetNodeProperties
	unsigned char                                      UnknownData10[0x10];                                      // 0x0158(0x0010) MISSED OFFSET
	unsigned char                                      UnknownData11[0x10];                                      // 0x0158(0x0010) UNKNOWN PROPERTY: StateMachineNodeProperties
	unsigned char                                      UnknownData12[0x10];                                      // 0x0178(0x0010) MISSED OFFSET
	unsigned char                                      UnknownData13[0x10];                                      // 0x0178(0x0010) UNKNOWN PROPERTY: InitializationNodeProperties
	unsigned char                                      UnknownData14[0x10];                                      // 0x0198(0x0010) MISSED OFFSET
	TMap<struct FName, struct FGraphAssetPlayerInformation> GraphNameAssetPlayers;                                    // 0x01A8(0x0050)
	TArray<struct FName>                               SyncGroupNames;                                           // 0x01F8(0x0010) (ZeroConstructor)
	TMap<struct FName, struct FAnimGraphBlendOptions>  GraphBlendOptions;                                        // 0x0208(0x0050)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.AnimClassData"));
		return ptr;
	}

};


// Class Engine.AnimClassInterface
// 0x0000 (0x0028 - 0x0028)
class UAnimClassInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.AnimClassInterface"));
		return ptr;
	}

};


// Class Engine.AnimCompositeBase
// 0x0000 (0x00A8 - 0x00A8)
class UAnimCompositeBase : public UAnimSequenceBase
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.AnimCompositeBase"));
		return ptr;
	}

};


// Class Engine.AnimComposite
// 0x0010 (0x00B8 - 0x00A8)
class UAnimComposite : public UAnimCompositeBase
{
public:
	struct FAnimTrack                                  AnimationTrack;                                           // 0x00A8(0x0010)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.AnimComposite"));
		return ptr;
	}

};


// Class Engine.AnimCompress
// 0x0008 (0x0040 - 0x0038)
class UAnimCompress : public UAnimBoneCompressionCodec
{
public:
	unsigned char                                      bNeedsSkeleton : 1;                                       // 0x0038(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0039(0x0003) MISSED OFFSET
	TEnumAsByte<EAnimationCompressionFormat>           TranslationCompressionFormat;                             // 0x003C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EAnimationCompressionFormat>           RotationCompressionFormat;                                // 0x003D(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EAnimationCompressionFormat>           ScaleCompressionFormat;                                   // 0x003E(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x003F(0x0001) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.AnimCompress"));
		return ptr;
	}

};


// Class Engine.AnimCompress_BitwiseCompressOnly
// 0x0000 (0x0040 - 0x0040)
class UAnimCompress_BitwiseCompressOnly : public UAnimCompress
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.AnimCompress_BitwiseCompressOnly"));
		return ptr;
	}

};


// Class Engine.AnimCompress_LeastDestructive
// 0x0000 (0x0040 - 0x0040)
class UAnimCompress_LeastDestructive : public UAnimCompress_BitwiseCompressOnly
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.AnimCompress_LeastDestructive"));
		return ptr;
	}

};


// Class Engine.AnimCompress_RemoveLinearKeys
// 0x0020 (0x0060 - 0x0040)
class UAnimCompress_RemoveLinearKeys : public UAnimCompress
{
public:
	float                                              MaxPosDiff;                                               // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxAngleDiff;                                             // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxScaleDiff;                                             // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxEffectorDiff;                                          // 0x004C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MinEffectorDiff;                                          // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              EffectorDiffSocket;                                       // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ParentKeyScale;                                           // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bRetarget : 1;                                            // 0x005C(0x0001) (Edit)
	unsigned char                                      bActuallyFilterLinearKeys : 1;                            // 0x005C(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x005D(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.AnimCompress_RemoveLinearKeys"));
		return ptr;
	}

};


// Class Engine.AnimCompress_PerTrackCompression
// 0x0078 (0x00D8 - 0x0060)
class UAnimCompress_PerTrackCompression : public UAnimCompress_RemoveLinearKeys
{
public:
	float                                              MaxZeroingThreshold;                                      // 0x0060(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxPosDiffBitwise;                                        // 0x0064(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxAngleDiffBitwise;                                      // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxScaleDiffBitwise;                                      // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<TEnumAsByte<EAnimationCompressionFormat>>   AllowedRotationFormats;                                   // 0x0070(0x0010) (Edit, ZeroConstructor)
	TArray<TEnumAsByte<EAnimationCompressionFormat>>   AllowedTranslationFormats;                                // 0x0080(0x0010) (Edit, ZeroConstructor)
	TArray<TEnumAsByte<EAnimationCompressionFormat>>   AllowedScaleFormats;                                      // 0x0090(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      bResampleAnimation : 1;                                   // 0x00A0(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00A1(0x0003) MISSED OFFSET
	float                                              ResampledFramerate;                                       // 0x00A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                MinKeysForResampling;                                     // 0x00A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUseAdaptiveError : 1;                                    // 0x00AC(0x0001) (Edit)
	unsigned char                                      bUseOverrideForEndEffectors : 1;                          // 0x00AC(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x00AD(0x0003) MISSED OFFSET
	int                                                TrackHeightBias;                                          // 0x00B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ParentingDivisor;                                         // 0x00B4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ParentingDivisorExponent;                                 // 0x00B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUseAdaptiveError2 : 1;                                   // 0x00BC(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x3];                                       // 0x00BD(0x0003) MISSED OFFSET
	float                                              RotationErrorSourceRatio;                                 // 0x00C0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TranslationErrorSourceRatio;                              // 0x00C4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ScaleErrorSourceRatio;                                    // 0x00C8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxErrorPerTrackRatio;                                    // 0x00CC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PerturbationProbeSize;                                    // 0x00D0(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x00D4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.AnimCompress_PerTrackCompression"));
		return ptr;
	}

};


// Class Engine.AnimCompress_RemoveEverySecondKey
// 0x0008 (0x0048 - 0x0040)
class UAnimCompress_RemoveEverySecondKey : public UAnimCompress
{
public:
	int                                                MinKeys;                                                  // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bStartAtSecondKey : 1;                                    // 0x0044(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0045(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.AnimCompress_RemoveEverySecondKey"));
		return ptr;
	}

};


// Class Engine.AnimCompress_RemoveTrivialKeys
// 0x0010 (0x0050 - 0x0040)
class UAnimCompress_RemoveTrivialKeys : public UAnimCompress
{
public:
	float                                              MaxPosDiff;                                               // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxAngleDiff;                                             // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxScaleDiff;                                             // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x004C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.AnimCompress_RemoveTrivialKeys"));
		return ptr;
	}

};


// Class Engine.AnimCurveCompressionCodec
// 0x0000 (0x0028 - 0x0028)
class UAnimCurveCompressionCodec : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.AnimCurveCompressionCodec"));
		return ptr;
	}

};


// Class Engine.AnimCurveCompressionCodec_CompressedRichCurve
// 0x0000 (0x0028 - 0x0028)
class UAnimCurveCompressionCodec_CompressedRichCurve : public UAnimCurveCompressionCodec
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.AnimCurveCompressionCodec_CompressedRichCurve"));
		return ptr;
	}

};


// Class Engine.AnimCurveCompressionCodec_UniformIndexable
// 0x0000 (0x0028 - 0x0028)
class UAnimCurveCompressionCodec_UniformIndexable : public UAnimCurveCompressionCodec
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.AnimCurveCompressionCodec_UniformIndexable"));
		return ptr;
	}

};


// Class Engine.AnimCurveCompressionCodec_UniformlySampled
// 0x0000 (0x0028 - 0x0028)
class UAnimCurveCompressionCodec_UniformlySampled : public UAnimCurveCompressionCodec
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.AnimCurveCompressionCodec_UniformlySampled"));
		return ptr;
	}

};


// Class Engine.AnimCurveCompressionSettings
// 0x0008 (0x0030 - 0x0028)
class UAnimCurveCompressionSettings : public UObject
{
public:
	class UAnimCurveCompressionCodec*                  Codec;                                                    // 0x0028(0x0008) (Edit, ExportObject, ZeroConstructor, NoClear, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.AnimCurveCompressionSettings"));
		return ptr;
	}

};


// Class Engine.AnimDataModel
// 0x00D0 (0x00F8 - 0x0028)
class UAnimDataModel : public UObject
{
public:
	int                                                BracketCounter;                                           // 0x0028(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x002C(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    ModifiedEventDynamic;                                     // 0x0030(0x0010) (ZeroConstructor, Transient, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData01[0x18];                                      // 0x0040(0x0018) MISSED OFFSET
	TArray<struct FBoneAnimationTrack>                 BoneAnimationTracks;                                      // 0x0058(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst)
	float                                              PlayLength;                                               // 0x0068(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	struct FFrameRate                                  FrameRate;                                                // 0x006C(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	int                                                NumberOfFrames;                                           // 0x0074(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	int                                                NumberOfKeys;                                             // 0x0078(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x007C(0x0004) MISSED OFFSET
	struct FAnimationCurveData                         CurveData;                                                // 0x0080(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)
	TArray<struct FAnimatedBoneAttribute>              AnimatedBoneAttributes;                                   // 0x00A0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst)
	TArray<struct FRawAnimSequenceTrack>               RawAnimationTracks;                                       // 0x00B0(0x0010) (Edit, ZeroConstructor, Transient, EditConst)
	TArray<struct FName>                               RawAnimationTrackNames;                                   // 0x00C0(0x0010) (Edit, ZeroConstructor, Transient, EditConst)
	TArray<struct FTrackToSkeletonMap>                 RawAnimationTrackSkeletonMappings;                        // 0x00D0(0x0010) (Edit, ZeroConstructor, Transient, EditConst)
	unsigned char                                      UnknownData03[0x8];                                       // 0x00E0(0x0008) MISSED OFFSET
	struct FRawCurveTracks                             RawCurveTracks;                                           // 0x00E8(0x0010) (Edit, Transient, EditConst)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.AnimDataModel"));
		return ptr;
	}


	bool IsValidBoneTrackIndex(int TrackIndex);//Offset:Discovery.exe+0x567D070
	float GetPlayLength();//Offset:Discovery.exe+0x567D700
	int GetNumBoneTracks();//Offset:Discovery.exe+0x567D040
	int GetNumberOfTransformCurves();//Offset:Discovery.exe+0x567CF60
	int GetNumberOfKeys();//Offset:Discovery.exe+0x567D6A0
	int GetNumberOfFrames();//Offset:Discovery.exe+0x567D6D0
	int GetNumberOfFloatCurves();//Offset:Discovery.exe+0x567CF30
	struct FFrameRate GetFrameRate();//Offset:Discovery.exe+0x567D670
	void GetBoneTrackNames(TArray<struct FName>* OutNames);//Offset:Discovery.exe+0x567CF90
	int GetBoneTrackIndexByName(const struct FName& TrackName);//Offset:Discovery.exe+0x567D110
	int GetBoneTrackIndex(const struct FBoneAnimationTrack& Track);//Offset:Discovery.exe+0x567D1B0
	struct FBoneAnimationTrack GetBoneTrackByName(const struct FName& TrackName);//Offset:Discovery.exe+0x567D2B0
	struct FBoneAnimationTrack GetBoneTrackByIndex(int TrackIndex);//Offset:Discovery.exe+0x567D430
	TArray<struct FBoneAnimationTrack> GetBoneAnimationTracks();//Offset:Discovery.exe+0x567D5B0
	class UAnimSequence* GetAnimationSequence();//Offset:Discovery.exe+0x567CF00
};


// Class Engine.AnimationDataModelNotifiesExtensions
// 0x0000 (0x0028 - 0x0028)
class UAnimationDataModelNotifiesExtensions : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.AnimationDataModelNotifiesExtensions"));
		return ptr;
	}

};


// Class Engine.AnimLayerInterface
// 0x0000 (0x0028 - 0x0028)
class UAnimLayerInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.AnimLayerInterface"));
		return ptr;
	}

};


// Class Engine.AnimMetaData
// 0x0000 (0x0028 - 0x0028)
class UAnimMetaData : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.AnimMetaData"));
		return ptr;
	}

};


// Class Engine.AnimMontage
// 0x0148 (0x01F0 - 0x00A8)
class UAnimMontage : public UAnimCompositeBase
{
public:
	enum class EMontageBlendMode                       BlendModeIn;                                              // 0x00A8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	enum class EMontageBlendMode                       BlendModeOut;                                             // 0x00A9(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x00AA(0x0006) MISSED OFFSET
	struct FAlphaBlend                                 BlendIn;                                                  // 0x00B0(0x0030) (Edit)
	float                                              BlendInTime;                                              // 0x00E0(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00E4(0x0004) MISSED OFFSET
	struct FAlphaBlend                                 BlendOut;                                                 // 0x00E8(0x0030) (Edit)
	float                                              BlendOutTime;                                             // 0x0118(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              BlendOutTriggerTime;                                      // 0x011C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FName                                       SyncGroup;                                                // 0x0120(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                SyncSlotIndex;                                            // 0x0128(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x012C(0x0004) MISSED OFFSET
	struct FMarkerSyncData                             MarkerData;                                               // 0x0130(0x0020)
	TArray<struct FCompositeSection>                   CompositeSections;                                        // 0x0150(0x0010) (ZeroConstructor)
	TArray<struct FSlotAnimationTrack>                 SlotAnimTracks;                                           // 0x0160(0x0010) (ZeroConstructor)
	TArray<struct FBranchingPoint>                     BranchingPoints;                                          // 0x0170(0x0010) (ZeroConstructor, Deprecated)
	bool                                               bEnableRootMotionTranslation;                             // 0x0180(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bEnableRootMotionRotation;                                // 0x0181(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bEnableAutoBlendOut;                                      // 0x0182(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x5];                                       // 0x0183(0x0005) MISSED OFFSET
	class UBlendProfile*                               BlendProfileIn;                                           // 0x0188(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UBlendProfile*                               BlendProfileOut;                                          // 0x0190(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ERootMotionRootLock>                   RootMotionRootLock;                                       // 0x0198(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x7];                                       // 0x0199(0x0007) MISSED OFFSET
	TArray<struct FBranchingPointMarker>               BranchingPointMarkers;                                    // 0x01A0(0x0010) (ZeroConstructor)
	TArray<int>                                        BranchingPointStateNotifyIndices;                         // 0x01B0(0x0010) (ZeroConstructor)
	struct FTimeStretchCurve                           TimeStretchCurve;                                         // 0x01C0(0x0028) (Edit)
	struct FName                                       TimeStretchCurveName;                                     // 0x01E8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.AnimMontage"));
		return ptr;
	}


	bool IsValidSectionName(const struct FName& InSectionName);//Offset:Discovery.exe+0x568B8B0
	float GetDefaultBlendOutTime();//Offset:Discovery.exe+0x568B950
	float GetDefaultBlendInTime();//Offset:Discovery.exe+0x568B970
	struct FAlphaBlendArgs GetBlendOutArgs();//Offset:Discovery.exe+0x568B990
	struct FAlphaBlendArgs GetBlendInArgs();//Offset:Discovery.exe+0x568BA10
	class UAnimMontage* STATIC_CreateSlotAnimationAsDynamicMontage_WithBlendSettings(class UAnimSequenceBase* Asset, const struct FName& SlotNodeName, const struct FMontageBlendSettings& BlendInSettings, const struct FMontageBlendSettings& BlendOutSettings, float InPlayRate, int LoopCount, float InBlendOutTriggerTime);//Offset:Discovery.exe+0x568B5F0
};


// Class Engine.AnimNotifyMirrorInspectionLibrary
// 0x0000 (0x0028 - 0x0028)
class UAnimNotifyMirrorInspectionLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.AnimNotifyMirrorInspectionLibrary"));
		return ptr;
	}


	bool STATIC_IsTriggeredByMirroredAnimation(const struct FAnimNotifyEventReference& EventReference);//Offset:Discovery.exe+0x5690280
	class UMirrorDataTable* STATIC_GetMirrorDataTable(const struct FAnimNotifyEventReference& EventReference);//Offset:Discovery.exe+0x56901A0
};


// Class Engine.AnimNotifyStateMachineInspectionLibrary
// 0x0000 (0x0028 - 0x0028)
class UAnimNotifyStateMachineInspectionLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.AnimNotifyStateMachineInspectionLibrary"));
		return ptr;
	}


	bool STATIC_IsTriggeredByStateMachine(const struct FAnimNotifyEventReference& EventReference, class UAnimInstance* AnimInstance, const struct FName& StateMachineName);//Offset:Discovery.exe+0x56913E0
	bool STATIC_IsTriggeredByStateInStateMachine(const struct FAnimNotifyEventReference& EventReference, class UAnimInstance* AnimInstance, const struct FName& StateMachineName, const struct FName& StateName);//Offset:Discovery.exe+0x5691210
	bool STATIC_IsTriggeredByState(const struct FAnimNotifyEventReference& EventReference, class UAnimInstance* AnimInstance, const struct FName& StateName);//Offset:Discovery.exe+0x5691090
};


// Class Engine.AnimNotifyState_DisableRootMotion
// 0x0000 (0x0030 - 0x0030)
class UAnimNotifyState_DisableRootMotion : public UAnimNotifyState
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.AnimNotifyState_DisableRootMotion"));
		return ptr;
	}

};


// Class Engine.AnimNotifyState_TimedParticleEffect
// 0x0048 (0x0078 - 0x0030)
class UAnimNotifyState_TimedParticleEffect : public UAnimNotifyState
{
public:
	class UParticleSystem*                             PSTemplate;                                               // 0x0030(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       SocketName;                                               // 0x0038(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector                                     LocationOffset;                                           // 0x0040(0x0018) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FRotator                                    RotationOffset;                                           // 0x0058(0x0018) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bDestroyAtEnd;                                            // 0x0070(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0071(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.AnimNotifyState_TimedParticleEffect"));
		return ptr;
	}

};


// Class Engine.AnimNotifyState_Trail
// 0x0028 (0x0058 - 0x0030)
class UAnimNotifyState_Trail : public UAnimNotifyState
{
public:
	class UParticleSystem*                             PSTemplate;                                               // 0x0030(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       FirstSocketName;                                          // 0x0038(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       SecondSocketName;                                         // 0x0040(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ETrailWidthMode>                       WidthScaleMode;                                           // 0x0048(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0049(0x0003) MISSED OFFSET
	struct FName                                       WidthScaleCurve;                                          // 0x004C(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bRecycleSpawnedSystems : 1;                               // 0x0054(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0055(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.AnimNotifyState_Trail"));
		return ptr;
	}


	class UParticleSystem* OverridePSTemplate(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation);//Offset:Discovery.exe+0x327F8B0
};


// Class Engine.AnimNotify_PauseClothingSimulation
// 0x0000 (0x0038 - 0x0038)
class UAnimNotify_PauseClothingSimulation : public UAnimNotify
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.AnimNotify_PauseClothingSimulation"));
		return ptr;
	}

};


// Class Engine.AnimNotify_PlayParticleEffect
// 0x0088 (0x00C0 - 0x0038)
class UAnimNotify_PlayParticleEffect : public UAnimNotify
{
public:
	class UParticleSystem*                             PSTemplate;                                               // 0x0038(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector                                     LocationOffset;                                           // 0x0040(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FRotator                                    RotationOffset;                                           // 0x0058(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector                                     Scale;                                                    // 0x0070(0x0018) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x28];                                      // 0x0088(0x0028) MISSED OFFSET
	unsigned char                                      Attached : 1;                                             // 0x00B0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData01[0x3];                                       // 0x00B1(0x0003) MISSED OFFSET
	struct FName                                       SocketName;                                               // 0x00B4(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x00BC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.AnimNotify_PlayParticleEffect"));
		return ptr;
	}

};


// Class Engine.AnimNotify_ResetClothingSimulation
// 0x0000 (0x0038 - 0x0038)
class UAnimNotify_ResetClothingSimulation : public UAnimNotify
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.AnimNotify_ResetClothingSimulation"));
		return ptr;
	}

};


// Class Engine.AnimNotify_ResetDynamics
// 0x0000 (0x0038 - 0x0038)
class UAnimNotify_ResetDynamics : public UAnimNotify
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.AnimNotify_ResetDynamics"));
		return ptr;
	}

};


// Class Engine.AnimNotify_ResumeClothingSimulation
// 0x0000 (0x0038 - 0x0038)
class UAnimNotify_ResumeClothingSimulation : public UAnimNotify
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.AnimNotify_ResumeClothingSimulation"));
		return ptr;
	}

};


// Class Engine.AnimSet
// 0x00C8 (0x00F0 - 0x0028)
class UAnimSet : public UObject
{
public:
	unsigned char                                      bAnimRotationOnly : 1;                                    // 0x0028(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0029(0x0007) MISSED OFFSET
	TArray<struct FName>                               TrackBoneNames;                                           // 0x0030(0x0010) (ZeroConstructor)
	TArray<struct FAnimSetMeshLinkup>                  LinkupCache;                                              // 0x0040(0x0010) (ZeroConstructor, Transient)
	TArray<unsigned char>                              BoneUseAnimTranslation;                                   // 0x0050(0x0010) (ZeroConstructor, Transient)
	TArray<unsigned char>                              ForceUseMeshTranslation;                                  // 0x0060(0x0010) (ZeroConstructor, Transient)
	TArray<struct FName>                               UseTranslationBoneNames;                                  // 0x0070(0x0010) (Edit, ZeroConstructor)
	TArray<struct FName>                               ForceMeshTranslationBoneNames;                            // 0x0080(0x0010) (Edit, ZeroConstructor)
	struct FName                                       PreviewSkelMeshName;                                      // 0x0090(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FName                                       BestRatioSkelMeshName;                                    // 0x0098(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x50];                                      // 0x00A0(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.AnimSet"));
		return ptr;
	}

};


// Class Engine.AnimSingleNodeInstance
// 0x0020 (0x0370 - 0x0350)
class UAnimSingleNodeInstance : public UAnimInstance
{
public:
	class UAnimationAsset*                             CurrentAsset;                                             // 0x0350(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FScriptDelegate                             PostEvaluateAnimEvent;                                    // 0x0358(0x0010) (ZeroConstructor, Transient, InstancedReference)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0368(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.AnimSingleNodeInstance"));
		return ptr;
	}


	void StopAnim();//Offset:Discovery.exe+0x5695560
	void SetReverse(bool bInReverse);//Offset:Discovery.exe+0x5695A50
	void SetPreviewCurveOverride(const struct FName& PoseName, float Value, bool bRemoveIfZero);//Offset:Discovery.exe+0x56952B0
	void SetPositionWithPreviousTime(float InPosition, float InPreviousTime, bool bFireNotifies);//Offset:Discovery.exe+0x5695830
	void SetPosition(float InPosition, bool bFireNotifies);//Offset:Discovery.exe+0x5695960
	void SetPlayRate(float InPlayRate);//Offset:Discovery.exe+0x5695AF0
	void SetPlaying(bool bIsPlaying);//Offset:Discovery.exe+0x56956F0
	void SetMirrorDataTable(class UMirrorDataTable* MirrorDataTable);//Offset:Discovery.exe+0x5695C60
	void SetLooping(bool bIsLooping);//Offset:Discovery.exe+0x5695B90
	void SetBlendSpacePosition(const struct FVector& InPosition);//Offset:Discovery.exe+0x5695790
	void SetAnimationAsset(class UAnimationAsset* NewAsset, bool bIsLooping, float InPlayRate);//Offset:Discovery.exe+0x5695420
	void PlayAnim(bool bIsLooping, float InPlayRate, float InStartPosition);//Offset:Discovery.exe+0x5695580
	class UMirrorDataTable* GetMirrorDataTable();//Offset:Discovery.exe+0x5695C30
	float GetLength();//Offset:Discovery.exe+0x56956C0
	class UAnimationAsset* GetAnimationAsset();//Offset:Discovery.exe+0x56953F0
};


// Class Engine.AnimStateMachineTypes
// 0x0000 (0x0028 - 0x0028)
class UAnimStateMachineTypes : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.AnimStateMachineTypes"));
		return ptr;
	}

};


// Class Engine.AnimStreamable
// 0x0038 (0x00E0 - 0x00A8)
class UAnimStreamable : public UAnimSequenceBase
{
public:
	int                                                NumberOfKeys;                                             // 0x00A8(0x0004) (ZeroConstructor, IsPlainOldData)
	enum class EAnimInterpolationType                  Interpolation;                                            // 0x00AC(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00AD(0x0003) MISSED OFFSET
	struct FName                                       RetargetSource;                                           // 0x00B0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x10];                                      // 0x00B8(0x0010) MISSED OFFSET
	class UAnimBoneCompressionSettings*                BoneCompressionSettings;                                  // 0x00C8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UAnimCurveCompressionSettings*               CurveCompressionSettings;                                 // 0x00D0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bEnableRootMotion;                                        // 0x00D8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ERootMotionRootLock>                   RootMotionRootLock;                                       // 0x00D9(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bForceRootLock;                                           // 0x00DA(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bUseNormalizedRootMotionScale;                            // 0x00DB(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x00DC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.AnimStreamable"));
		return ptr;
	}

};


// Class Engine.RawAnimSequenceTrackExtensions
// 0x0000 (0x0028 - 0x0028)
class URawAnimSequenceTrackExtensions : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.RawAnimSequenceTrackExtensions"));
		return ptr;
	}


	TArray<struct FVector> STATIC_GetScaleKeys(const struct FRawAnimSequenceTrack& Track);//Offset:Discovery.exe+0x5697CC0
	TArray<struct FQuat> STATIC_GetRotationalKeys(const struct FRawAnimSequenceTrack& Track);//Offset:Discovery.exe+0x5697F10
	TArray<struct FVector> STATIC_GetPositionalKeys(const struct FRawAnimSequenceTrack& Track);//Offset:Discovery.exe+0x5698150
};


// Class Engine.ApplicationLifecycleComponent
// 0x0090 (0x0148 - 0x00B8)
class UApplicationLifecycleComponent : public UActorComponent
{
public:
	struct FScriptMulticastDelegate                    ApplicationWillDeactivateDelegate;                        // 0x00B8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ApplicationHasReactivatedDelegate;                        // 0x00C8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ApplicationWillEnterBackgroundDelegate;                   // 0x00D8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ApplicationHasEnteredForegroundDelegate;                  // 0x00E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ApplicationWillTerminateDelegate;                         // 0x00F8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ApplicationShouldUnloadResourcesDelegate;                 // 0x0108(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ApplicationReceivedStartupArgumentsDelegate;              // 0x0118(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnTemperatureChangeDelegate;                              // 0x0128(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnLowPowerModeDelegate;                                   // 0x0138(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ApplicationLifecycleComponent"));
		return ptr;
	}

};


// Class Engine.ArrowComponent
// 0x0020 (0x05B0 - 0x0590)
class UArrowComponent : public UPrimitiveComponent
{
public:
	struct FColor                                      ArrowColor;                                               // 0x0590(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ArrowSize;                                                // 0x0594(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ArrowLength;                                              // 0x0598(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ScreenSize;                                               // 0x059C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bIsScreenSizeScaled : 1;                                  // 0x05A0(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bTreatAsASprite : 1;                                      // 0x05A0(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0xF];                                       // 0x05A1(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ArrowComponent"));
		return ptr;
	}


	void SetArrowColor(const struct FLinearColor& NewColor);//Offset:Discovery.exe+0x569AEB0
};


// Class Engine.AssetExportTask
// 0x0050 (0x0078 - 0x0028)
class UAssetExportTask : public UObject
{
public:
	class UObject*                                     Object;                                                   // 0x0028(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UExporter*                                   Exporter;                                                 // 0x0030(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FString                                     Filename;                                                 // 0x0038(0x0010) (BlueprintVisible, ZeroConstructor)
	bool                                               bSelected;                                                // 0x0048(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bReplaceIdentical;                                        // 0x0049(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bPrompt;                                                  // 0x004A(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bAutomated;                                               // 0x004B(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bUseFileArchive;                                          // 0x004C(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bWriteEmptyFiles;                                         // 0x004D(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x004E(0x0002) MISSED OFFSET
	TArray<class UObject*>                             IgnoreObjectList;                                         // 0x0050(0x0010) (BlueprintVisible, ZeroConstructor)
	class UObject*                                     Options;                                                  // 0x0060(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<struct FString>                             Errors;                                                   // 0x0068(0x0010) (BlueprintVisible, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.AssetExportTask"));
		return ptr;
	}

};


// Class Engine.AssetManagerSettings
// 0x00C8 (0x0100 - 0x0038)
class UAssetManagerSettings : public UDeveloperSettings
{
public:
	TArray<struct FPrimaryAssetTypeInfo>               PrimaryAssetTypesToScan;                                  // 0x0038(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FDirectoryPath>                      DirectoriesToExclude;                                     // 0x0048(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FPrimaryAssetRulesOverride>          PrimaryAssetRules;                                        // 0x0058(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FPrimaryAssetRulesCustomOverride>    CustomPrimaryAssetRules;                                  // 0x0068(0x0010) (Edit, ZeroConstructor, Config)
	bool                                               bOnlyCookProductionAssets;                                // 0x0078(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bShouldManagerDetermineTypeAndName;                       // 0x0079(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bShouldGuessTypeAndNameInEditor;                          // 0x007A(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bShouldAcquireMissingChunksOnLoad;                        // 0x007B(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bShouldWarnAboutInvalidAssets;                            // 0x007C(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x007D(0x0003) MISSED OFFSET
	TArray<struct FAssetManagerRedirect>               PrimaryAssetIdRedirects;                                  // 0x0080(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FAssetManagerRedirect>               PrimaryAssetTypeRedirects;                                // 0x0090(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FAssetManagerRedirect>               AssetPathRedirects;                                       // 0x00A0(0x0010) (Edit, ZeroConstructor, Config)
	unsigned char                                      UnknownData01[0x50];                                      // 0x00B0(0x0050) UNKNOWN PROPERTY: MetaDataTagsForAssetRegistry

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.AssetManagerSettings"));
		return ptr;
	}

};


// Class Engine.AssetMappingTable
// 0x0010 (0x0038 - 0x0028)
class UAssetMappingTable : public UObject
{
public:
	TArray<struct FAssetMapping>                       MappedAssets;                                             // 0x0028(0x0010) (Edit, EditFixedSize, ZeroConstructor, EditConst)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.AssetMappingTable"));
		return ptr;
	}

};


// Class Engine.AsyncActionHandleSaveGame
// 0x0038 (0x0068 - 0x0030)
class UAsyncActionHandleSaveGame : public UBlueprintAsyncActionBase
{
public:
	struct FScriptMulticastDelegate                    Completed;                                                // 0x0030(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData00[0x20];                                      // 0x0040(0x0020) MISSED OFFSET
	class USaveGame*                                   SaveGameObject;                                           // 0x0060(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.AsyncActionHandleSaveGame"));
		return ptr;
	}


	class UAsyncActionHandleSaveGame* STATIC_AsyncSaveGameToSlot(class UObject* WorldContextObject, class USaveGame* SaveGameObject, const struct FString& SlotName, int UserIndex);//Offset:Discovery.exe+0x569BFB0
	class UAsyncActionHandleSaveGame* STATIC_AsyncLoadGameFromSlot(class UObject* WorldContextObject, const struct FString& SlotName, int UserIndex);//Offset:Discovery.exe+0x569BE70
};


// Class Engine.AsyncActionLoadPrimaryAssetBase
// 0x0048 (0x0078 - 0x0030)
class UAsyncActionLoadPrimaryAssetBase : public UBlueprintAsyncActionBase
{
public:
	unsigned char                                      UnknownData00[0x48];                                      // 0x0030(0x0048) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.AsyncActionLoadPrimaryAssetBase"));
		return ptr;
	}

};


// Class Engine.AsyncActionLoadPrimaryAsset
// 0x0010 (0x0088 - 0x0078)
class UAsyncActionLoadPrimaryAsset : public UAsyncActionLoadPrimaryAssetBase
{
public:
	struct FScriptMulticastDelegate                    Completed;                                                // 0x0078(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.AsyncActionLoadPrimaryAsset"));
		return ptr;
	}


	class UAsyncActionLoadPrimaryAsset* STATIC_AsyncLoadPrimaryAsset(class UObject* WorldContextObject, const struct FPrimaryAssetId& PrimaryAsset, TArray<struct FName> LoadBundles);//Offset:Discovery.exe+0x569C5C0
};


// Class Engine.AsyncActionLoadPrimaryAssetClass
// 0x0010 (0x0088 - 0x0078)
class UAsyncActionLoadPrimaryAssetClass : public UAsyncActionLoadPrimaryAssetBase
{
public:
	struct FScriptMulticastDelegate                    Completed;                                                // 0x0078(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.AsyncActionLoadPrimaryAssetClass"));
		return ptr;
	}


	class UAsyncActionLoadPrimaryAssetClass* STATIC_AsyncLoadPrimaryAssetClass(class UObject* WorldContextObject, const struct FPrimaryAssetId& PrimaryAsset, TArray<struct FName> LoadBundles);//Offset:Discovery.exe+0x569CA10
};


// Class Engine.AsyncActionLoadPrimaryAssetList
// 0x0010 (0x0088 - 0x0078)
class UAsyncActionLoadPrimaryAssetList : public UAsyncActionLoadPrimaryAssetBase
{
public:
	struct FScriptMulticastDelegate                    Completed;                                                // 0x0078(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.AsyncActionLoadPrimaryAssetList"));
		return ptr;
	}


	class UAsyncActionLoadPrimaryAssetList* STATIC_AsyncLoadPrimaryAssetList(class UObject* WorldContextObject, TArray<struct FPrimaryAssetId> PrimaryAssetList, TArray<struct FName> LoadBundles);//Offset:Discovery.exe+0x569CE60
};


// Class Engine.AsyncActionLoadPrimaryAssetClassList
// 0x0010 (0x0088 - 0x0078)
class UAsyncActionLoadPrimaryAssetClassList : public UAsyncActionLoadPrimaryAssetBase
{
public:
	struct FScriptMulticastDelegate                    Completed;                                                // 0x0078(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.AsyncActionLoadPrimaryAssetClassList"));
		return ptr;
	}


	class UAsyncActionLoadPrimaryAssetClassList* STATIC_AsyncLoadPrimaryAssetClassList(class UObject* WorldContextObject, TArray<struct FPrimaryAssetId> PrimaryAssetList, TArray<struct FName> LoadBundles);//Offset:Discovery.exe+0x569D2C0
};


// Class Engine.AsyncActionChangePrimaryAssetBundles
// 0x0010 (0x0088 - 0x0078)
class UAsyncActionChangePrimaryAssetBundles : public UAsyncActionLoadPrimaryAssetBase
{
public:
	struct FScriptMulticastDelegate                    Completed;                                                // 0x0078(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.AsyncActionChangePrimaryAssetBundles"));
		return ptr;
	}


	class UAsyncActionChangePrimaryAssetBundles* STATIC_AsyncChangeBundleStateForPrimaryAssetList(class UObject* WorldContextObject, TArray<struct FPrimaryAssetId> PrimaryAssetList, TArray<struct FName> AddBundles, TArray<struct FName> RemoveBundles);//Offset:Discovery.exe+0x569D720
	class UAsyncActionChangePrimaryAssetBundles* STATIC_AsyncChangeBundleStateForMatchingPrimaryAssets(class UObject* WorldContextObject, TArray<struct FName> NewBundles, TArray<struct FName> OldBundles);//Offset:Discovery.exe+0x569D900
};


// Class Engine.AtmosphericFog
// 0x0008 (0x02D0 - 0x02C8)
class AAtmosphericFog : public AInfo
{
public:
	class UAtmosphericFogComponent*                    AtmosphericFogComponent;                                  // 0x02C8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.AtmosphericFog"));
		return ptr;
	}

};


// Class Engine.SkyAtmosphereComponent
// 0x0100 (0x03D0 - 0x02D0)
class USkyAtmosphereComponent : public USceneComponent
{
public:
	enum class ESkyAtmosphereTransformMode             TransformMode;                                            // 0x02D0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x02D1(0x0003) MISSED OFFSET
	float                                              BottomRadius;                                             // 0x02D4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FColor                                      GroundAlbedo;                                             // 0x02D8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              AtmosphereHeight;                                         // 0x02DC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MultiScatteringFactor;                                    // 0x02E0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              TraceSampleCountScale;                                    // 0x02E4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              RayleighScatteringScale;                                  // 0x02E8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                RayleighScattering;                                       // 0x02EC(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              RayleighExponentialDistribution;                          // 0x02FC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MieScatteringScale;                                       // 0x0300(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                MieScattering;                                            // 0x0304(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MieAbsorptionScale;                                       // 0x0314(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                MieAbsorption;                                            // 0x0318(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MieAnisotropy;                                            // 0x0328(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MieExponentialDistribution;                               // 0x032C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              OtherAbsorptionScale;                                     // 0x0330(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                OtherAbsorption;                                          // 0x0334(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FTentDistribution                           OtherTentDistribution;                                    // 0x0344(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FLinearColor                                SkyLuminanceFactor;                                       // 0x0350(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              AerialPespectiveViewDistanceScale;                        // 0x0360(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              HeightFogContribution;                                    // 0x0364(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              TransmittanceMinLightElevationAngle;                      // 0x0368(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              AerialPerspectiveStartDepth;                              // 0x036C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x40];                                      // 0x0370(0x0040) MISSED OFFSET
	struct FGuid                                       bStaticLightingBuiltGUID;                                 // 0x03B0(0x0010) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x10];                                      // 0x03C0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SkyAtmosphereComponent"));
		return ptr;
	}


	void SetSkyLuminanceFactor(const struct FLinearColor& NewValue);//Offset:Discovery.exe+0x5877300
	void SetRayleighScatteringScale(float NewValue);//Offset:Discovery.exe+0x58778A0
	void SetRayleighScattering(const struct FLinearColor& NewValue);//Offset:Discovery.exe+0x5877800
	void SetRayleighExponentialDistribution(float NewValue);//Offset:Discovery.exe+0x5877760
	void SetOtherAbsorptionScale(float NewValue);//Offset:Discovery.exe+0x57D72C0
	void SetOtherAbsorption(const struct FLinearColor& NewValue);//Offset:Discovery.exe+0x58773A0
	void SetMultiScatteringFactor(float NewValue);//Offset:Discovery.exe+0x5877940
	void SetMieScatteringScale(float NewValue);//Offset:Discovery.exe+0x58776C0
	void SetMieScattering(const struct FLinearColor& NewValue);//Offset:Discovery.exe+0x5877620
	void SetMieExponentialDistribution(float NewValue);//Offset:Discovery.exe+0x57D7360
	void SetMieAnisotropy(float NewValue);//Offset:Discovery.exe+0x5877440
	void SetMieAbsorptionScale(float NewValue);//Offset:Discovery.exe+0x5877580
	void SetMieAbsorption(const struct FLinearColor& NewValue);//Offset:Discovery.exe+0x58774E0
	void SetHeightFogContribution(float NewValue);//Offset:Discovery.exe+0x58771C0
	void SetAtmosphereHeight(float NewValue);//Offset:Discovery.exe+0x58779E0
	void SetAerialPespectiveViewDistanceScale(float NewValue);//Offset:Discovery.exe+0x5877260
	void OverrideAtmosphereLightDirection(int AtmosphereLightIndex, const struct FVector& LightDirection);//Offset:Discovery.exe+0x5877A80
	struct FLinearColor GetAtmosphereTransmitanceOnGroundAtPlanetTop(class UDirectionalLightComponent* DirectionalLight);//Offset:Discovery.exe+0x5877110
};


// Class Engine.AtmosphericFogComponent
// 0x0000 (0x03D0 - 0x03D0)
class UAtmosphericFogComponent : public USkyAtmosphereComponent
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.AtmosphericFogComponent"));
		return ptr;
	}


	void SetSunMultiplier(float NewSunMultiplier);//Offset:Discovery.exe+0x569F280
	void SetStartDistance(float NewStartDistance);//Offset:Discovery.exe+0x569F280
	void SetPrecomputeParams(float DensityHeight, int MaxScatteringOrder, int InscatterAltitudeSampleNum);//Offset:Discovery.exe+0x569F170
	void SetFogMultiplier(float NewFogMultiplier);//Offset:Discovery.exe+0x569F280
	void SetDistanceScale(float NewDistanceScale);//Offset:Discovery.exe+0x569F280
	void SetDistanceOffset(float NewDistanceOffset);//Offset:Discovery.exe+0x569F280
	void SetDensityOffset(float NewDensityOffset);//Offset:Discovery.exe+0x569F280
	void SetDensityMultiplier(float NewDensityMultiplier);//Offset:Discovery.exe+0x569F280
	void SetDefaultLightColor(const struct FLinearColor& NewLightColor);//Offset:Discovery.exe+0x569F310
	void SetDefaultBrightness(float NewBrightness);//Offset:Discovery.exe+0x569F280
	void SetAltitudeScale(float NewAltitudeScale);//Offset:Discovery.exe+0x569F280
	void DisableSunDisk(bool NewSunDisk);//Offset:Discovery.exe+0x44EB560
	void DisableGroundScattering(bool NewGroundScattering);//Offset:Discovery.exe+0x44EB560
};


// Class Engine.AnimationAttributeIdentifierExtensions
// 0x0000 (0x0028 - 0x0028)
class UAnimationAttributeIdentifierExtensions : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.AnimationAttributeIdentifierExtensions"));
		return ptr;
	}


	bool STATIC_IsValid(struct FAnimationAttributeIdentifier* Identifier);//Offset:Discovery.exe+0x569FF70
};


// Class Engine.AudioBus
// 0x0008 (0x0030 - 0x0028)
class UAudioBus : public UObject
{
public:
	enum class EAudioBusChannels                       AudioBusChannels;                                         // 0x0028(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0029(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.AudioBus"));
		return ptr;
	}

};


// Class Engine.InitialActiveSoundParams
// 0x0010 (0x0038 - 0x0028)
class UInitialActiveSoundParams : public UObject
{
public:
	TArray<struct FAudioParameter>                     AudioParams;                                              // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.InitialActiveSoundParams"));
		return ptr;
	}

};


// Class Engine.AudioSubsystemCollectionRoot
// 0x0008 (0x0030 - 0x0028)
class UAudioSubsystemCollectionRoot : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.AudioSubsystemCollectionRoot"));
		return ptr;
	}

};


// Class Engine.AudioEngineSubsystem
// 0x0000 (0x0030 - 0x0030)
class UAudioEngineSubsystem : public UDynamicSubsystem
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.AudioEngineSubsystem"));
		return ptr;
	}

};


// Class Engine.AudioPanelWidgetInterface
// 0x0000 (0x0028 - 0x0028)
class UAudioPanelWidgetInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.AudioPanelWidgetInterface"));
		return ptr;
	}


	struct FName GetIconBrushName();//Offset:Discovery.exe+0x327F8B0
	struct FText GetEditorName();//Offset:Discovery.exe+0x327F8B0
};


// Class Engine.AudioSettings
// 0x0160 (0x0198 - 0x0038)
class UAudioSettings : public UDeveloperSettings
{
public:
	struct FSoftObjectPath                             DefaultSoundClassName;                                    // 0x0038(0x0018) (Edit, ZeroConstructor, Config)
	struct FSoftObjectPath                             DefaultMediaSoundClassName;                               // 0x0050(0x0018) (Edit, ZeroConstructor, Config)
	struct FSoftObjectPath                             DefaultSoundConcurrencyName;                              // 0x0068(0x0018) (Edit, ZeroConstructor, Config)
	struct FSoftObjectPath                             DefaultBaseSoundMix;                                      // 0x0080(0x0018) (Edit, ZeroConstructor, Config)
	struct FSoftObjectPath                             VoiPSoundClass;                                           // 0x0098(0x0018) (Edit, ZeroConstructor, Config)
	struct FSoftObjectPath                             MasterSubmix;                                             // 0x00B0(0x0018) (Edit, ZeroConstructor, Config)
	struct FSoftObjectPath                             BaseDefaultSubmix;                                        // 0x00C8(0x0018) (Edit, ZeroConstructor, Config)
	struct FSoftObjectPath                             ReverbSubmix;                                             // 0x00E0(0x0018) (Edit, ZeroConstructor, Config)
	struct FSoftObjectPath                             EQSubmix;                                                 // 0x00F8(0x0018) (Edit, ZeroConstructor, Config)
	enum class EVoiceSampleRate                        VoiPSampleRate;                                           // 0x0110(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0110(0x0003) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	float                                              DefaultReverbSendLevel;                                   // 0x0114(0x0004) (ZeroConstructor, Config, Deprecated, IsPlainOldData)
	int                                                MaximumConcurrentStreams;                                 // 0x0118(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              GlobalMinPitchScale;                                      // 0x011C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              GlobalMaxPitchScale;                                      // 0x0120(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0124(0x0004) MISSED OFFSET
	TArray<struct FAudioQualitySettings>               QualityLevels;                                            // 0x0128(0x0010) (Edit, ZeroConstructor, Config)
	unsigned char                                      bAllowPlayWhenSilent : 1;                                 // 0x0138(0x0001) (Edit, Config)
	unsigned char                                      bDisableMasterEQ : 1;                                     // 0x0138(0x0001) (Edit, Config)
	unsigned char                                      bAllowCenterChannel3DPanning : 1;                         // 0x0138(0x0001) (Edit, Config)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0139(0x0003) MISSED OFFSET
	uint32_t                                           NumStoppingSources;                                       // 0x013C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	enum class EPanningMethod                          PanningMethod;                                            // 0x0140(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	enum class EMonoChannelUpmixMethod                 MonoChannelUpmixMethod;                                   // 0x0141(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData03[0x6];                                       // 0x0142(0x0006) MISSED OFFSET
	struct FString                                     DialogueFilenameFormat;                                   // 0x0148(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FSoundDebugEntry>                    DebugSounds;                                              // 0x0158(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FDefaultAudioBusSettings>            DefaultAudioBuses;                                        // 0x0168(0x0010) (Edit, ZeroConstructor, Config)
	class USoundClass*                                 DefaultSoundClass;                                        // 0x0178(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class USoundClass*                                 DefaultMediaSoundClass;                                   // 0x0180(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class USoundConcurrency*                           DefaultSoundConcurrency;                                  // 0x0188(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData04[0x8];                                       // 0x0190(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.AudioSettings"));
		return ptr;
	}

};


// Class Engine.AudioVolume
// 0x0070 (0x0370 - 0x0300)
class AAudioVolume : public AVolume
{
public:
	float                                              Priority;                                                 // 0x0300(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bEnabled : 1;                                             // 0x0304(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, Net)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0305(0x0003) MISSED OFFSET
	struct FReverbSettings                             Settings;                                                 // 0x0308(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FInteriorSettings                           AmbientZoneSettings;                                      // 0x0328(0x0024) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData01[0x4];                                       // 0x034C(0x0004) MISSED OFFSET
	TArray<struct FAudioVolumeSubmixSendSettings>      SubmixSendSettings;                                       // 0x0350(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FAudioVolumeSubmixOverrideSettings>  SubmixOverrideSettings;                                   // 0x0360(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.AudioVolume"));
		return ptr;
	}


	void SetSubmixSendSettings(TArray<struct FAudioVolumeSubmixSendSettings> NewSubmixSendSettings);//Offset:Discovery.exe+0x56A5250
	void SetSubmixOverrideSettings(TArray<struct FAudioVolumeSubmixOverrideSettings> NewSubmixOverrideSettings);//Offset:Discovery.exe+0x56A5170
	void SetReverbSettings(const struct FReverbSettings& NewReverbSettings);//Offset:Discovery.exe+0x56A5440
	void SetPriority(float NewPriority);//Offset:Discovery.exe+0x56A55A0
	void SetInteriorSettings(const struct FInteriorSettings& NewInteriorSettings);//Offset:Discovery.exe+0x56A5390
	void SetEnabled(bool bNewEnabled);//Offset:Discovery.exe+0x56A5500
	void OnRep_bEnabled();//Offset:Discovery.exe+0x56A5150
};


// Class Engine.AudioWidgetSubsystem
// 0x0000 (0x0030 - 0x0030)
class UAudioWidgetSubsystem : public UEngineSubsystem
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.AudioWidgetSubsystem"));
		return ptr;
	}

};


// Class Engine.AutoDestroySubsystem
// 0x0010 (0x0050 - 0x0040)
class UAutoDestroySubsystem : public UTickableWorldSubsystem
{
public:
	TArray<class AActor*>                              ActorsToPoll;                                             // 0x0040(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.AutoDestroySubsystem"));
		return ptr;
	}


	void OnActorEndPlay(class AActor* Actor, TEnumAsByte<EEndPlayReason> EndPlayReason);//Offset:Discovery.exe+0x56A5D50
};


// Class Engine.AutomationTestSettings
// 0x0320 (0x0348 - 0x0028)
class UAutomationTestSettings : public UObject
{
public:
	TArray<struct FString>                             EngineTestModules;                                        // 0x0028(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FString>                             EditorTestModules;                                        // 0x0038(0x0010) (Edit, ZeroConstructor, Config)
	struct FSoftObjectPath                             AutomationTestmap;                                        // 0x0048(0x0018) (Edit, ZeroConstructor, Config)
	TArray<struct FEditorMapPerformanceTestDefinition> EditorPerformanceTestMaps;                                // 0x0060(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FString>                             AssetsToOpen;                                             // 0x0070(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FString>                             MapsToPIETest;                                            // 0x0080(0x0010) (Edit, ZeroConstructor, Config)
	bool                                               bUseAllProjectMapsToPlayInPIE;                            // 0x0090(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0091(0x0007) MISSED OFFSET
	struct FBuildPromotionTestSettings                 BuildPromotionTest;                                       // 0x0098(0x01F0) (Edit, Config)
	struct FMaterialEditorPromotionSettings            MaterialEditorPromotionTest;                              // 0x0288(0x0030) (Edit, Config)
	struct FParticleEditorPromotionSettings            ParticleEditorPromotionTest;                              // 0x02B8(0x0010) (Edit, Config)
	struct FBlueprintEditorPromotionSettings           BlueprintEditorPromotionTest;                             // 0x02C8(0x0030) (Edit, Config)
	TArray<struct FString>                             TestLevelFolders;                                         // 0x02F8(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FExternalToolDefinition>             ExternalTools;                                            // 0x0308(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FEditorImportExportTestDefinition>   ImportExportTestDefinitions;                              // 0x0318(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FLaunchOnTestSettings>               LaunchOnSettings;                                         // 0x0328(0x0010) (Edit, ZeroConstructor, Config)
	struct FIntPoint                                   DefaultScreenshotResolution;                              // 0x0338(0x0008) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              PIETestDuration;                                          // 0x0340(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0344(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.AutomationTestSettings"));
		return ptr;
	}

};


// Class Engine.BandwidthTestActor
// 0x0020 (0x02E8 - 0x02C8)
class ABandwidthTestActor : public AActor
{
public:
	struct FBandwidthTestGenerator                     BandwidthGenerator;                                       // 0x02C8(0x0020) (Net)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.BandwidthTestActor"));
		return ptr;
	}

};


// Class Engine.BillboardComponent
// 0x0030 (0x05C0 - 0x0590)
class UBillboardComponent : public UPrimitiveComponent
{
public:
	class UTexture2D*                                  Sprite;                                                   // 0x0590(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bIsScreenSizeScaled : 1;                                  // 0x0598(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0599(0x0003) MISSED OFFSET
	float                                              ScreenSize;                                               // 0x059C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              U;                                                        // 0x05A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              UL;                                                       // 0x05A4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              V;                                                        // 0x05A8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              VL;                                                       // 0x05AC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              OpacityMaskRefVal;                                        // 0x05B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0xC];                                       // 0x05B4(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.BillboardComponent"));
		return ptr;
	}


	void SetUV(int NewU, int NewUL, int NewV, int NewVL);//Offset:Discovery.exe+0x56A9150
	void SetSpriteAndUV(class UTexture2D* NewSprite, int NewU, int NewUL, int NewV, int NewVL);//Offset:Discovery.exe+0x56A8F80
	void SetSprite(class UTexture2D* NewSprite);//Offset:Discovery.exe+0x2348E60
	void SetOpacityMaskRefVal(float RefVal);//Offset:Discovery.exe+0x56A8EE0
};


// Class Engine.BlendableInterface
// 0x0000 (0x0028 - 0x0028)
class UBlendableInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.BlendableInterface"));
		return ptr;
	}

};


// Class Engine.Skeleton
// 0x0448 (0x0470 - 0x0028)
class USkeleton : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0028(0x0010) MISSED OFFSET
	TArray<struct FBoneNode>                           BoneTree;                                                 // 0x0038(0x0010) (Edit, ZeroConstructor, EditConst)
	TArray<struct FTransform>                          RefLocalPoses;                                            // 0x0048(0x0010) (ZeroConstructor, Deprecated)
	unsigned char                                      UnknownData01[0x118];                                     // 0x0058(0x0118) MISSED OFFSET
	struct FGuid                                       VirtualBoneGuid;                                          // 0x0170(0x0010) (ZeroConstructor, IsPlainOldData)
	TArray<struct FVirtualBone>                        VirtualBones;                                             // 0x0180(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData02[0x10];                                      // 0x0190(0x0010) UNKNOWN PROPERTY: CompatibleSkeletons
	TArray<class USkeletalMeshSocket*>                 Sockets;                                                  // 0x01A0(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData03[0x50];                                      // 0x01B0(0x0050) MISSED OFFSET
	struct FSmartNameContainer                         SmartNames;                                               // 0x0200(0x0050)
	unsigned char                                      UnknownData04[0x30];                                      // 0x0250(0x0030) MISSED OFFSET
	TArray<class UBlendProfile*>                       BlendProfiles;                                            // 0x0280(0x0010) (ExportObject, ZeroConstructor)
	TArray<struct FAnimSlotGroup>                      SlotGroups;                                               // 0x0290(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData05[0x1C0];                                     // 0x02A0(0x01C0) MISSED OFFSET
	TArray<class UAssetUserData*>                      AssetUserData;                                            // 0x0460(0x0010) (Edit, ExportObject, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.Skeleton"));
		return ptr;
	}


	class UBlendProfile* GetBlendProfile(const struct FName& InProfileName);//Offset:Discovery.exe+0x5870D00
	void AddCompatibleSkeleton(class USkeleton* SourceSkeleton);//Offset:Discovery.exe+0x5870C60
};


// Class Engine.BlendProfile
// 0x0028 (0x0050 - 0x0028)
class UBlendProfile : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	class USkeleton*                                   OwningSkeleton;                                           // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<struct FBlendProfileBoneEntry>              ProfileEntries;                                           // 0x0038(0x0010) (ZeroConstructor)
	enum class EBlendProfileMode                       Mode;                                                     // 0x0048(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0049(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.BlendProfile"));
		return ptr;
	}

};


// Class Engine.AnalysisProperties
// 0x0010 (0x0038 - 0x0028)
class UAnalysisProperties : public UObject
{
public:
	struct FString                                     Function;                                                 // 0x0028(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.AnalysisProperties"));
		return ptr;
	}

};


// Class Engine.BlockingVolume
// 0x0000 (0x0300 - 0x0300)
class ABlockingVolume : public AVolume
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.BlockingVolume"));
		return ptr;
	}

};


// Class Engine.Breakpoint
// 0x0000 (0x0028 - 0x0028)
class UBreakpoint : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.Breakpoint"));
		return ptr;
	}

};


// Class Engine.BlueprintExtension
// 0x0000 (0x0028 - 0x0028)
class UBlueprintExtension : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.BlueprintExtension"));
		return ptr;
	}

};


// Class Engine.BlueprintMapLibrary
// 0x0000 (0x0028 - 0x0028)
class UBlueprintMapLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.BlueprintMapLibrary"));
		return ptr;
	}


	void STATIC_SetMapPropertyByName(class UObject* Object, const struct FName& PropertyName, TMap<int, int> Value);//Offset:Discovery.exe+0x56AD970
	void STATIC_Map_Values(TMap<int, int> TargetMap, TArray<int>* Values);//Offset:Discovery.exe+0x56AD880
	bool STATIC_Map_Remove(TMap<int, int> TargetMap, int Key);//Offset:Discovery.exe+0x56AD6C0
	int STATIC_Map_Length(TMap<int, int> TargetMap);//Offset:Discovery.exe+0x56AD630
	void STATIC_Map_Keys(TMap<int, int> TargetMap, TArray<int>* Keys);//Offset:Discovery.exe+0x56AD540
	bool STATIC_Map_IsNotEmpty(TMap<int, int> TargetMap);//Offset:Discovery.exe+0x56AD4B0
	bool STATIC_Map_IsEmpty(TMap<int, int> TargetMap);//Offset:Discovery.exe+0x56AD420
	bool STATIC_Map_Find(TMap<int, int> TargetMap, int Key, int* Value);//Offset:Discovery.exe+0x56AD120
	bool STATIC_Map_Contains(TMap<int, int> TargetMap, int Key);//Offset:Discovery.exe+0x56ACF60
	void STATIC_Map_Clear(TMap<int, int> TargetMap);//Offset:Discovery.exe+0x56ACED0
	void STATIC_Map_Add(TMap<int, int> TargetMap, int Key, int Value);//Offset:Discovery.exe+0x56ACC10
};


// Class Engine.BlueprintPathsLibrary
// 0x0000 (0x0028 - 0x0028)
class UBlueprintPathsLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.BlueprintPathsLibrary"));
		return ptr;
	}


	struct FString STATIC_VideoCaptureDir();//Offset:Discovery.exe+0x56B0430
	void STATIC_ValidatePath(const struct FString& InPath, bool* bDidSucceed, struct FText* OutReason);//Offset:Discovery.exe+0x56AE050
	void STATIC_Split(const struct FString& InPath, struct FString* PathPart, struct FString* FilenamePart, struct FString* ExtensionPart);//Offset:Discovery.exe+0x56ADE70
	struct FString STATIC_SourceConfigDir();//Offset:Discovery.exe+0x56B0730
	bool STATIC_ShouldSaveToUserDir();//Offset:Discovery.exe+0x56B12E0
	struct FString STATIC_ShaderWorkingDir();//Offset:Discovery.exe+0x56B0960
	void STATIC_SetProjectFilePath(const struct FString& NewGameProjectFilePath);//Offset:Discovery.exe+0x56AFB10
	struct FString STATIC_SetExtension(const struct FString& InPath, const struct FString& InNewExtension);//Offset:Discovery.exe+0x56AF470
	struct FString STATIC_ScreenShotDir();//Offset:Discovery.exe+0x56B0530
	struct FString STATIC_SandboxesDir();//Offset:Discovery.exe+0x56B0630
	struct FString STATIC_RootDir();//Offset:Discovery.exe+0x56B0C60
	void STATIC_RemoveDuplicateSlashes(const struct FString& InPath, struct FString* OutPath);//Offset:Discovery.exe+0x56AEC70
	struct FString STATIC_ProjectUserDir();//Offset:Discovery.exe+0x56B0B60
	struct FString STATIC_ProjectSavedDir();//Offset:Discovery.exe+0x56B0A60
	struct FString STATIC_ProjectPluginsDir();//Offset:Discovery.exe+0x56B08E0
	struct FString STATIC_ProjectPersistentDownloadDir();//Offset:Discovery.exe+0x56B07B0
	struct FString STATIC_ProjectModsDir();//Offset:Discovery.exe+0x56B0860
	struct FString STATIC_ProjectLogDir();//Offset:Discovery.exe+0x56B03B0
	struct FString STATIC_ProjectIntermediateDir();//Offset:Discovery.exe+0x56B09E0
	struct FString STATIC_ProjectDir();//Offset:Discovery.exe+0x56B0BE0
	struct FString STATIC_ProjectContentDir();//Offset:Discovery.exe+0x56B0AE0
	struct FString STATIC_ProjectConfigDir();//Offset:Discovery.exe+0x56B0730
	struct FString STATIC_ProfilingDir();//Offset:Discovery.exe+0x56B05B0
	void STATIC_NormalizeFilename(const struct FString& InPath, struct FString* OutPath);//Offset:Discovery.exe+0x56AF0A0
	void STATIC_NormalizeDirectoryName(const struct FString& InPath, struct FString* OutPath);//Offset:Discovery.exe+0x56AEE90
	struct FString STATIC_MakeValidFileName(const struct FString& InString, const struct FString& InReplacementChar);//Offset:Discovery.exe+0x56AE1D0
	void STATIC_MakeStandardFilename(const struct FString& InPath, struct FString* OutPath);//Offset:Discovery.exe+0x56AEB60
	void STATIC_MakePlatformFilename(const struct FString& InPath, struct FString* OutPath);//Offset:Discovery.exe+0x56AEA50
	bool STATIC_MakePathRelativeTo(const struct FString& InPath, const struct FString& InRelativeTo, struct FString* OutPath);//Offset:Discovery.exe+0x56AE8E0
	struct FString STATIC_LaunchDir();//Offset:Discovery.exe+0x56B1260
	bool STATIC_IsSamePath(const struct FString& PathA, const struct FString& PathB);//Offset:Discovery.exe+0x56AEFA0
	bool STATIC_IsRestrictedPath(const struct FString& InPath);//Offset:Discovery.exe+0x56AFE60
	bool STATIC_IsRelative(const struct FString& InPath);//Offset:Discovery.exe+0x56AF1B0
	bool STATIC_IsProjectFilePathSet();//Offset:Discovery.exe+0x56AFC30
	bool STATIC_IsDrive(const struct FString& InPath);//Offset:Discovery.exe+0x56AF260
	bool STATIC_HasProjectPersistentDownloadDir();//Offset:Discovery.exe+0x56B0830
	TArray<struct FString> STATIC_GetToolTipLocalizationPaths();//Offset:Discovery.exe+0x56AFF70
	TArray<struct FString> STATIC_GetRestrictedFolderNames();//Offset:Discovery.exe+0x56AFF10
	struct FString STATIC_GetRelativePathToRoot();//Offset:Discovery.exe+0x56ADE00
	TArray<struct FString> STATIC_GetPropertyNameLocalizationPaths();//Offset:Discovery.exe+0x56AFFA0
	struct FString STATIC_GetProjectFilePath();//Offset:Discovery.exe+0x56AFBB0
	struct FString STATIC_GetPath(const struct FString& InPath);//Offset:Discovery.exe+0x56AF6F0
	struct FString STATIC_GetInvalidFileSystemChars();//Offset:Discovery.exe+0x56AE310
	TArray<struct FString> STATIC_GetGameLocalizationPaths();//Offset:Discovery.exe+0x56AFF40
	struct FString STATIC_GetExtension(const struct FString& InPath, bool bIncludeDot);//Offset:Discovery.exe+0x56AF9E0
	TArray<struct FString> STATIC_GetEngineLocalizationPaths();//Offset:Discovery.exe+0x56B0000
	TArray<struct FString> STATIC_GetEditorLocalizationPaths();//Offset:Discovery.exe+0x56AFFD0
	struct FString STATIC_GetCleanFilename(const struct FString& InPath);//Offset:Discovery.exe+0x56AF900
	struct FString STATIC_GetBaseFilename(const struct FString& InPath, bool bRemovePath);//Offset:Discovery.exe+0x56AF7D0
	struct FString STATIC_GeneratedConfigDir();//Offset:Discovery.exe+0x56B06B0
	struct FString STATIC_GameUserDeveloperDir();//Offset:Discovery.exe+0x56B00B0
	struct FString STATIC_GameSourceDir();//Offset:Discovery.exe+0x56AFCE0
	struct FString STATIC_GameDevelopersDir();//Offset:Discovery.exe+0x56B0130
	struct FString STATIC_GameAgnosticSavedDir();//Offset:Discovery.exe+0x56AFDE0
	bool STATIC_FileExists(const struct FString& InPath);//Offset:Discovery.exe+0x56AF3C0
	struct FString STATIC_FeaturePackDir();//Offset:Discovery.exe+0x56AFC60
	struct FString STATIC_EnterprisePluginsDir();//Offset:Discovery.exe+0x56B0D60
	struct FString STATIC_EnterpriseFeaturePackDir();//Offset:Discovery.exe+0x56B0CE0
	struct FString STATIC_EnterpriseDir();//Offset:Discovery.exe+0x56B0DE0
	struct FString STATIC_EngineVersionAgnosticUserDir();//Offset:Discovery.exe+0x56B10E0
	struct FString STATIC_EngineUserDir();//Offset:Discovery.exe+0x56B1160
	struct FString STATIC_EngineSourceDir();//Offset:Discovery.exe+0x56AFD60
	struct FString STATIC_EngineSavedDir();//Offset:Discovery.exe+0x56B0EE0
	struct FString STATIC_EnginePluginsDir();//Offset:Discovery.exe+0x56B0E60
	struct FString STATIC_EngineIntermediateDir();//Offset:Discovery.exe+0x56B0F60
	struct FString STATIC_EngineDir();//Offset:Discovery.exe+0x56B11E0
	struct FString STATIC_EngineContentDir();//Offset:Discovery.exe+0x56B1060
	struct FString STATIC_EngineConfigDir();//Offset:Discovery.exe+0x56B0FE0
	bool STATIC_DirectoryExists(const struct FString& InPath);//Offset:Discovery.exe+0x56AF310
	struct FString STATIC_DiffDir();//Offset:Discovery.exe+0x56B0030
	struct FString STATIC_CreateTempFilename(const struct FString& Path, const struct FString& Prefix, const struct FString& Extension);//Offset:Discovery.exe+0x56AE390
	struct FString STATIC_ConvertToSandboxPath(const struct FString& InPath, const struct FString& InSandboxName);//Offset:Discovery.exe+0x56AE660
	struct FString STATIC_ConvertRelativePathToFull(const struct FString& InPath, const struct FString& InBasePath);//Offset:Discovery.exe+0x56AE7A0
	struct FString STATIC_ConvertFromSandboxPath(const struct FString& InPath, const struct FString& InSandboxName);//Offset:Discovery.exe+0x56AE520
	struct FString STATIC_Combine(TArray<struct FString> InPaths);//Offset:Discovery.exe+0x56ADCD0
	bool STATIC_CollapseRelativeDirectories(const struct FString& InPath, struct FString* OutPath);//Offset:Discovery.exe+0x56AED80
	struct FString STATIC_CloudDir();//Offset:Discovery.exe+0x56B01B0
	struct FString STATIC_ChangeExtension(const struct FString& InPath, const struct FString& InNewExtension);//Offset:Discovery.exe+0x56AF5B0
	struct FString STATIC_BugItDir();//Offset:Discovery.exe+0x56B04B0
	struct FString STATIC_AutomationTransientDir();//Offset:Discovery.exe+0x56B02B0
	struct FString STATIC_AutomationLogDir();//Offset:Discovery.exe+0x56B0230
	struct FString STATIC_AutomationDir();//Offset:Discovery.exe+0x56B0330
};


// Class Engine.PlatformGameInstance
// 0x00D0 (0x0278 - 0x01A8)
class UPlatformGameInstance : public UGameInstance
{
public:
	struct FScriptMulticastDelegate                    ApplicationWillDeactivateDelegate;                        // 0x01A8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ApplicationHasReactivatedDelegate;                        // 0x01B8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ApplicationWillEnterBackgroundDelegate;                   // 0x01C8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ApplicationHasEnteredForegroundDelegate;                  // 0x01D8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ApplicationWillTerminateDelegate;                         // 0x01E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ApplicationShouldUnloadResourcesDelegate;                 // 0x01F8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ApplicationReceivedStartupArgumentsDelegate;              // 0x0208(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ApplicationRegisteredForRemoteNotificationsDelegate;      // 0x0218(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ApplicationRegisteredForUserNotificationsDelegate;        // 0x0228(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ApplicationFailedToRegisterForRemoteNotificationsDelegate;// 0x0238(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ApplicationReceivedRemoteNotificationDelegate;            // 0x0248(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ApplicationReceivedLocalNotificationDelegate;             // 0x0258(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ApplicationReceivedScreenOrientationChangedNotificationDelegate;// 0x0268(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.PlatformGameInstance"));
		return ptr;
	}

};


// Class Engine.BlueprintPlatformLibrary
// 0x0000 (0x0028 - 0x0028)
class UBlueprintPlatformLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.BlueprintPlatformLibrary"));
		return ptr;
	}


	int STATIC_ScheduleLocalNotificationFromNow(int inSecondsFromNow, const struct FText& Title, const struct FText& Body, const struct FText& Action, const struct FString& ActivationEvent);//Offset:Discovery.exe+0x56B5420
	void STATIC_ScheduleLocalNotificationBadgeFromNow(int inSecondsFromNow, const struct FString& ActivationEvent);//Offset:Discovery.exe+0x56B51D0
	int STATIC_ScheduleLocalNotificationBadgeAtTime(const struct FDateTime& FireDateTime, bool LocalTime, const struct FString& ActivationEvent);//Offset:Discovery.exe+0x56B52C0
	int STATIC_ScheduleLocalNotificationAtTime(const struct FDateTime& FireDateTime, bool LocalTime, const struct FText& Title, const struct FText& Body, const struct FText& Action, const struct FString& ActivationEvent);//Offset:Discovery.exe+0x56B56D0
	void STATIC_GetLaunchNotification(bool* NotificationLaunchedApp, struct FString* ActivationEvent, int* FireDate);//Offset:Discovery.exe+0x56B4F30
	TEnumAsByte<EScreenOrientation> STATIC_GetDeviceOrientation();//Offset:Discovery.exe+0x56B4F00
	void STATIC_ClearAllLocalNotifications();//Offset:Discovery.exe+0x56B59F0
	void STATIC_CancelLocalNotificationById(int NotificationId);//Offset:Discovery.exe+0x56B50A0
	void STATIC_CancelLocalNotification(const struct FString& ActivationEvent);//Offset:Discovery.exe+0x56B5130
};


// Class Engine.BlueprintSetLibrary
// 0x0000 (0x0028 - 0x0028)
class UBlueprintSetLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.BlueprintSetLibrary"));
		return ptr;
	}


	void STATIC_SetSetPropertyByName(class UObject* Object, const struct FName& PropertyName);//Offset:Discovery.exe+0x56B70D0
	void STATIC_Set_Union();//Offset:Discovery.exe+0x56B6F60
	void STATIC_Set_ToArray(TArray<int>* Result);//Offset:Discovery.exe+0x56B6E70
	void STATIC_Set_RemoveItems(TArray<int> Items);//Offset:Discovery.exe+0x56B6D80
	bool STATIC_Set_Remove(int Item);//Offset:Discovery.exe+0x56B6BC0
	int STATIC_Set_Length();//Offset:Discovery.exe+0x56B6B30
	bool STATIC_Set_IsNotEmpty();//Offset:Discovery.exe+0x56B6AA0
	bool STATIC_Set_IsEmpty();//Offset:Discovery.exe+0x56B6A10
	void STATIC_Set_Intersection();//Offset:Discovery.exe+0x56B68A0
	void STATIC_Set_Difference();//Offset:Discovery.exe+0x56B6730
	bool STATIC_Set_Contains(int ItemToFind);//Offset:Discovery.exe+0x56B6570
	void STATIC_Set_Clear();//Offset:Discovery.exe+0x56B64E0
	void STATIC_Set_AddItems(TArray<int> NewItems);//Offset:Discovery.exe+0x56B63F0
	void STATIC_Set_Add(int NewItem);//Offset:Discovery.exe+0x56B6240
};


// Class Engine.BodySetup
// 0x0298 (0x02E0 - 0x0048)
class UBodySetup : public UBodySetupCore
{
public:
	struct FKAggregateGeom                             AggGeom;                                                  // 0x0048(0x0058) (Edit)
	unsigned char                                      bAlwaysFullAnimWeight : 1;                                // 0x00A0(0x0001) (Deprecated)
	unsigned char                                      bConsiderForBounds : 1;                                   // 0x00A0(0x0001) (Edit)
	unsigned char                                      bMeshCollideAll : 1;                                      // 0x00A0(0x0001) (Transient)
	unsigned char                                      bDoubleSidedGeometry : 1;                                 // 0x00A0(0x0001) (Edit)
	unsigned char                                      bGenerateNonMirroredCollision : 1;                        // 0x00A0(0x0001)
	unsigned char                                      bSharedCookedData : 1;                                    // 0x00A0(0x0001)
	unsigned char                                      bGenerateMirroredCollision : 1;                           // 0x00A0(0x0001)
	unsigned char                                      bSupportUVsAndFaceRemap : 1;                              // 0x00A0(0x0001)
	unsigned char                                      UnknownData00 : 3;                                        // 0x00A1(0x0001)
	unsigned char                                      bNeverNeedsCookedCollisionData : 1;                       // 0x00A1(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x6];                                       // 0x00A2(0x0006) MISSED OFFSET
	class UPhysicalMaterial*                           PhysMaterial;                                             // 0x00A8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FWalkableSlopeOverride                      WalkableSlopeOverride;                                    // 0x00B0(0x0010) (Edit, IsPlainOldData)
	unsigned char                                      UnknownData02[0x68];                                      // 0x00C0(0x0068) MISSED OFFSET
	struct FBodyInstance                               DefaultInstance;                                          // 0x0128(0x0190) (Edit)
	unsigned char                                      UnknownData03[0x8];                                       // 0x02B8(0x0008) MISSED OFFSET
	struct FVector                                     BuildScale3D;                                             // 0x02C0(0x0018) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x8];                                       // 0x02D8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.BodySetup"));
		return ptr;
	}

};


// Class Engine.BoneMaskFilter
// 0x0010 (0x0038 - 0x0028)
class UBoneMaskFilter : public UObject
{
public:
	TArray<struct FInputBlendPose>                     BlendPoses;                                               // 0x0028(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.BoneMaskFilter"));
		return ptr;
	}

};


// Class Engine.BookmarkBase
// 0x0000 (0x0028 - 0x0028)
class UBookmarkBase : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.BookmarkBase"));
		return ptr;
	}

};


// Class Engine.BookMark
// 0x0040 (0x0068 - 0x0028)
class UBookMark : public UBookmarkBase
{
public:
	struct FVector                                     Location;                                                 // 0x0028(0x0018) (Edit, ZeroConstructor, IsPlainOldData)
	struct FRotator                                    Rotation;                                                 // 0x0040(0x0018) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<struct FString>                             HiddenLevels;                                             // 0x0058(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.BookMark"));
		return ptr;
	}

};


// Class Engine.BookMark2D
// 0x0010 (0x0038 - 0x0028)
class UBookMark2D : public UBookmarkBase
{
public:
	float                                              Zoom2D;                                                   // 0x0028(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FIntPoint                                   Location;                                                 // 0x002C(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0034(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.BookMark2D"));
		return ptr;
	}

};


// Class Engine.BoundsCopyComponent
// 0x00A8 (0x0160 - 0x00B8)
class UBoundsCopyComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x00B8(0x0028) UNKNOWN PROPERTY: BoundsSourceActor
	bool                                               bUseCollidingComponentsForSourceBounds;                   // 0x00E0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bKeepOwnBoundsScale;                                      // 0x00E1(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bUseCollidingComponentsForOwnBounds;                      // 0x00E2(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0xD];                                       // 0x00E3(0x000D) MISSED OFFSET
	struct FTransform                                  PostTransform;                                            // 0x00F0(0x0060) (IsPlainOldData)
	bool                                               bCopyXBounds;                                             // 0x0150(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bCopyYBounds;                                             // 0x0151(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bCopyZBounds;                                             // 0x0152(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0xD];                                       // 0x0153(0x000D) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.BoundsCopyComponent"));
		return ptr;
	}

};


// Class Engine.ReflectionCapture
// 0x0008 (0x02D0 - 0x02C8)
class AReflectionCapture : public AActor
{
public:
	class UReflectionCaptureComponent*                 CaptureComponent;                                         // 0x02C8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ReflectionCapture"));
		return ptr;
	}

};


// Class Engine.BoxReflectionCapture
// 0x0000 (0x02D0 - 0x02D0)
class ABoxReflectionCapture : public AReflectionCapture
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.BoxReflectionCapture"));
		return ptr;
	}

};


// Class Engine.ReflectionCaptureComponent
// 0x0080 (0x0350 - 0x02D0)
class UReflectionCaptureComponent : public USceneComponent
{
public:
	class UBillboardComponent*                         CaptureOffsetComponent;                                   // 0x02D0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	enum class EReflectionSourceType                   ReflectionSourceType;                                     // 0x02D8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	enum class EMobileReflectionCompression            MobileReflectionCompression;                              // 0x02D9(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x02DA(0x0006) MISSED OFFSET
	class UTextureCube*                                Cubemap;                                                  // 0x02E0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              SourceCubemapAngle;                                       // 0x02E8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              Brightness;                                               // 0x02EC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bModifyMaxValueRGBM;                                      // 0x02F0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x02F1(0x0003) MISSED OFFSET
	float                                              MaxValueRGBM;                                             // 0x02F4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector                                     CaptureOffset;                                            // 0x02F8(0x0018) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FGuid                                       MapBuildDataId;                                           // 0x0310(0x0010) (ZeroConstructor, IsPlainOldData)
	class UTextureCube*                                CachedEncodedHDRCubemap;                                  // 0x0320(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x28];                                      // 0x0328(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ReflectionCaptureComponent"));
		return ptr;
	}

};


// Class Engine.BoxReflectionCaptureComponent
// 0x0010 (0x0360 - 0x0350)
class UBoxReflectionCaptureComponent : public UReflectionCaptureComponent
{
public:
	class UBoxComponent*                               PreviewInfluenceBox;                                      // 0x0350(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UBoxComponent*                               PreviewCaptureBox;                                        // 0x0358(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.BoxReflectionCaptureComponent"));
		return ptr;
	}

};


// Class Engine.BrushBuilder
// 0x0058 (0x0080 - 0x0028)
class UBrushBuilder : public UObject
{
public:
	struct FString                                     BitmapFilename;                                           // 0x0028(0x0010) (ZeroConstructor)
	struct FString                                     ToolTip;                                                  // 0x0038(0x0010) (ZeroConstructor)
	unsigned char                                      NotifyBadParams : 1;                                      // 0x0048(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0049(0x0007) MISSED OFFSET
	TArray<struct FVector>                             Vertices;                                                 // 0x0050(0x0010) (ZeroConstructor)
	TArray<struct FBuilderPoly>                        Polys;                                                    // 0x0060(0x0010) (ZeroConstructor)
	struct FName                                       Layer;                                                    // 0x0070(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      MergeCoplanars : 1;                                       // 0x0078(0x0001)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0079(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.BrushBuilder"));
		return ptr;
	}

};


// Class Engine.BrushComponent
// 0x0010 (0x05A0 - 0x0590)
class UBrushComponent : public UPrimitiveComponent
{
public:
	class UModel*                                      Brush;                                                    // 0x0590(0x0008) (ZeroConstructor, IsPlainOldData)
	class UBodySetup*                                  BrushBodySetup;                                           // 0x0598(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.BrushComponent"));
		return ptr;
	}

};


// Class Engine.BrushShape
// 0x0000 (0x0300 - 0x0300)
class ABrushShape : public ABrush
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.BrushShape"));
		return ptr;
	}

};


// Class Engine.BuiltInAttributesExtensions
// 0x0000 (0x0028 - 0x0028)
class UBuiltInAttributesExtensions : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.BuiltInAttributesExtensions"));
		return ptr;
	}

};


// Class Engine.ButtonStyleAsset
// 0x03F8 (0x0420 - 0x0028)
class UButtonStyleAsset : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	struct FButtonStyle                                ButtonStyle;                                              // 0x0030(0x03F0) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ButtonStyleAsset"));
		return ptr;
	}

};


// Class Engine.CachedAnimDataLibrary
// 0x0000 (0x0028 - 0x0028)
class UCachedAnimDataLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.CachedAnimDataLibrary"));
		return ptr;
	}


	bool STATIC_StateMachine_IsStateRelevant(class UAnimInstance* InAnimInstance, const struct FCachedAnimStateData& CachedAnimStateData);//Offset:Discovery.exe+0x56BA280
	float STATIC_StateMachine_GetLocalWeight(class UAnimInstance* InAnimInstance, const struct FCachedAnimStateData& CachedAnimStateData);//Offset:Discovery.exe+0x56BA180
	float STATIC_StateMachine_GetGlobalWeight(class UAnimInstance* InAnimInstance, const struct FCachedAnimStateData& CachedAnimStateData);//Offset:Discovery.exe+0x56BA080
};


// Class Engine.CameraAnim
// 0x0728 (0x0750 - 0x0028)
class UCameraAnim : public UObject
{
public:
	class UInterpGroup*                                CameraInterpGroup;                                        // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData)
	float                                              AnimLength;                                               // 0x0030(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0034(0x0004) MISSED OFFSET
	struct FBox                                        BoundingBox;                                              // 0x0038(0x0038) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bRelativeToInitialTransform : 1;                          // 0x0070(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      bRelativeToInitialFOV : 1;                                // 0x0070(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0071(0x0003) MISSED OFFSET
	float                                              BaseFOV;                                                  // 0x0074(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0078(0x0008) MISSED OFFSET
	struct FPostProcessSettings                        BasePostProcessSettings;                                  // 0x0080(0x06C0)
	float                                              BasePostProcessBlendWeight;                               // 0x0740(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0xC];                                       // 0x0744(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.CameraAnim"));
		return ptr;
	}

};


// Class Engine.CameraAnimInst
// 0x0168 (0x0190 - 0x0028)
class UCameraAnimInst : public UObject
{
public:
	class UCameraAnim*                                 CamAnim;                                                  // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData)
	class UInterpGroupInst*                            InterpGroupInst;                                          // 0x0030(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x18];                                      // 0x0038(0x0018) MISSED OFFSET
	float                                              PlayRate;                                                 // 0x0050(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x14];                                      // 0x0054(0x0014) MISSED OFFSET
	class UInterpTrackMove*                            MoveTrack;                                                // 0x0068(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UInterpTrackInstMove*                        MoveInst;                                                 // 0x0070(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	enum class ECameraShakePlaySpace                   PlaySpace;                                                // 0x0078(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x117];                                     // 0x0079(0x0117) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.CameraAnimInst"));
		return ptr;
	}


	void Stop(bool bImmediate);//Offset:Discovery.exe+0x56BACB0
	void SetScale(float NewDuration);//Offset:Discovery.exe+0x56BAB70
	void SetDuration(float NewDuration);//Offset:Discovery.exe+0x56BAC10
};


// Class Engine.CameraBlockingVolume
// 0x0000 (0x0300 - 0x0300)
class ACameraBlockingVolume : public AVolume
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.CameraBlockingVolume"));
		return ptr;
	}

};


// Class Engine.CameraLensEffectInterface
// 0x0000 (0x0028 - 0x0028)
class UCameraLensEffectInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.CameraLensEffectInterface"));
		return ptr;
	}


	class UFXSystemComponent* GetPrimaryParticleComponent();//Offset:Discovery.exe+0x56BC380
	TArray<class UFXSystemComponent*> GetParticleComponents();//Offset:Discovery.exe+0x56BC3B0
};


// Class Engine.CameraLensEffectInterfaceClassSupportLibrary
// 0x0000 (0x0028 - 0x0028)
class UCameraLensEffectInterfaceClassSupportLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.CameraLensEffectInterfaceClassSupportLibrary"));
		return ptr;
	}


	void STATIC_SetInterfaceClass(class UClass* Class, struct FCameraLensInterfaceClassSupport* Var, enum class EInterfaceValidResult* Result);//Offset:Discovery.exe+0x56BC810
	void STATIC_IsInterfaceValid(const TScriptInterface<class UCameraLensEffectInterface>& CameraLens, enum class EInterfaceValidResult* Result);//Offset:Discovery.exe+0x56BC950
	void STATIC_IsInterfaceClassValid(const struct FCameraLensInterfaceClassSupport& CameraLens, enum class EInterfaceValidResult* Result);//Offset:Discovery.exe+0x56BCA50
	class UClass* STATIC_GetInterfaceClass(const struct FCameraLensInterfaceClassSupport& CameraLens);//Offset:Discovery.exe+0x56BCB50
};


// Class Engine.CameraModifier_CameraShake
// 0x0068 (0x00B0 - 0x0048)
class UCameraModifier_CameraShake : public UCameraModifier
{
public:
	TArray<struct FActiveCameraShakeInfo>              ActiveShakes;                                             // 0x0048(0x0010) (ZeroConstructor)
	TMap<class UClass*, struct FPooledCameraShakes>    ExpiredPooledShakesMap;                                   // 0x0058(0x0050)
	float                                              SplitScreenShakeScale;                                    // 0x00A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00AC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.CameraModifier_CameraShake"));
		return ptr;
	}

};


// Class Engine.CameraShakeSourceActor
// 0x0008 (0x02D0 - 0x02C8)
class ACameraShakeSourceActor : public AActor
{
public:
	class UCameraShakeSourceComponent*                 CameraShakeSourceComponent;                               // 0x02C8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.CameraShakeSourceActor"));
		return ptr;
	}

};


// Class Engine.CameraShakeSourceComponent
// 0x0020 (0x02F0 - 0x02D0)
class UCameraShakeSourceComponent : public USceneComponent
{
public:
	enum class ECameraShakeAttenuation                 Attenuation;                                              // 0x02D0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x02D1(0x0003) MISSED OFFSET
	float                                              InnerAttenuationRadius;                                   // 0x02D4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              OuterAttenuationRadius;                                   // 0x02D8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x02DC(0x0004) MISSED OFFSET
	class UClass*                                      CameraShake;                                              // 0x02E0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bAutoStart;                                               // 0x02E8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x02E9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.CameraShakeSourceComponent"));
		return ptr;
	}


	void StopAllCameraShakesOfType(class UClass* InCameraShake, bool bImmediately);//Offset:Discovery.exe+0x56BF120
	void StopAllCameraShakes(bool bImmediately);//Offset:Discovery.exe+0x56BF080
	void StartCameraShake(class UClass* InCameraShake, float Scale, enum class ECameraShakePlaySpace PlaySpace, const struct FRotator& UserPlaySpaceRot);//Offset:Discovery.exe+0x56BF210
	void Start();//Offset:Discovery.exe+0x56BF3A0
	float GetAttenuationFactor(const struct FVector& Location);//Offset:Discovery.exe+0x56BEFD0
};


// Class Engine.Canvas
// 0x0368 (0x0390 - 0x0028)
class UCanvas : public UObject
{
public:
	float                                              OrgX;                                                     // 0x0028(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              OrgY;                                                     // 0x002C(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              ClipX;                                                    // 0x0030(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              ClipY;                                                    // 0x0034(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FColor                                      DrawColor;                                                // 0x0038(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bCenterX : 1;                                             // 0x003C(0x0001)
	unsigned char                                      bCenterY : 1;                                             // 0x003C(0x0001)
	unsigned char                                      bNoSmooth : 1;                                            // 0x003C(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x003D(0x0003) MISSED OFFSET
	int                                                SizeX;                                                    // 0x0040(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                SizeY;                                                    // 0x0044(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0048(0x0008) MISSED OFFSET
	struct FPlane                                      ColorModulate;                                            // 0x0050(0x0020) (ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  DefaultTexture;                                           // 0x0070(0x0008) (ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  GradientTexture0;                                         // 0x0078(0x0008) (ZeroConstructor, IsPlainOldData)
	class UReporterGraph*                              ReporterGraph;                                            // 0x0080(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x308];                                     // 0x0088(0x0308) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.Canvas"));
		return ptr;
	}


	struct FVector2D K2_TextSize(class UFont* RenderFont, const struct FString& RenderText, const struct FVector2D& Scale);//Offset:Discovery.exe+0x56BFD90
	struct FVector2D K2_StrLen(class UFont* RenderFont, const struct FString& RenderText);//Offset:Discovery.exe+0x56BFEF0
	struct FVector K2_Project(const struct FVector& WorldLocation);//Offset:Discovery.exe+0x56C0130
	void K2_DrawTriangle(class UTexture* RenderTexture, TArray<struct FCanvasUVTri> Triangles);//Offset:Discovery.exe+0x56C0520
	void K2_DrawTexture(class UTexture* RenderTexture, const struct FVector2D& ScreenPosition, const struct FVector2D& ScreenSize, const struct FVector2D& CoordinatePosition, const struct FVector2D& CoordinateSize, const struct FLinearColor& RenderColor, TEnumAsByte<EBlendMode> BlendMode, float Rotation, const struct FVector2D& PivotPoint);//Offset:Discovery.exe+0x56C15E0
	void K2_DrawText(class UFont* RenderFont, const struct FString& RenderText, const struct FVector2D& ScreenPosition, const struct FVector2D& Scale, const struct FLinearColor& RenderColor, float Kerning, const struct FLinearColor& ShadowColor, const struct FVector2D& ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, const struct FLinearColor& OutlineColor);//Offset:Discovery.exe+0x56C0E40
	void K2_DrawPolygon(class UTexture* RenderTexture, const struct FVector2D& ScreenPosition, const struct FVector2D& Radius, int NumberOfSides, const struct FLinearColor& RenderColor);//Offset:Discovery.exe+0x56C01F0
	void K2_DrawMaterialTriangle(class UMaterialInterface* RenderMaterial, TArray<struct FCanvasUVTri> Triangles);//Offset:Discovery.exe+0x56C03E0
	void K2_DrawMaterial(class UMaterialInterface* RenderMaterial, const struct FVector2D& ScreenPosition, const struct FVector2D& ScreenSize, const struct FVector2D& CoordinatePosition, const struct FVector2D& CoordinateSize, float Rotation, const struct FVector2D& PivotPoint);//Offset:Discovery.exe+0x56C1310
	void K2_DrawLine(const struct FVector2D& ScreenPositionA, const struct FVector2D& ScreenPositionB, float Thickness, const struct FLinearColor& RenderColor);//Offset:Discovery.exe+0x56C1970
	void K2_DrawBox(const struct FVector2D& ScreenPosition, const struct FVector2D& ScreenSize, float Thickness, const struct FLinearColor& RenderColor);//Offset:Discovery.exe+0x56C0660
	void K2_DrawBorder(class UTexture* BorderTexture, class UTexture* BackgroundTexture, class UTexture* LeftBorderTexture, class UTexture* RightBorderTexture, class UTexture* TopBorderTexture, class UTexture* BottomBorderTexture, const struct FVector2D& ScreenPosition, const struct FVector2D& ScreenSize, const struct FVector2D& CoordinatePosition, const struct FVector2D& CoordinateSize, const struct FLinearColor& RenderColor, const struct FVector2D& BorderScale, const struct FVector2D& BackgroundScale, float Rotation, const struct FVector2D& PivotPoint, const struct FVector2D& CornerSize);//Offset:Discovery.exe+0x56C0800
	void K2_Deproject(const struct FVector2D& ScreenPosition, struct FVector* WorldOrigin, struct FVector* WorldDirection);//Offset:Discovery.exe+0x56BFFF0
};


// Class Engine.TextureRenderTarget
// 0x0010 (0x0200 - 0x01F0)
class UTextureRenderTarget : public UTexture
{
public:
	float                                              TargetGamma;                                              // 0x01F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                                       // 0x01F4(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.TextureRenderTarget"));
		return ptr;
	}

};


// Class Engine.TextureRenderTarget2D
// 0x0020 (0x0220 - 0x0200)
class UTextureRenderTarget2D : public UTextureRenderTarget
{
public:
	struct FLinearColor                                ClearColor;                                               // 0x0200(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ETextureAddress>                       AddressX;                                                 // 0x0210(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ETextureAddress>                       AddressY;                                                 // 0x0211(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bForceLinearGamma : 1;                                    // 0x0212(0x0001)
	unsigned char                                      bHDR : 1;                                                 // 0x0212(0x0001) (Deprecated)
	unsigned char                                      bGPUSharedFlag : 1;                                       // 0x0212(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	TEnumAsByte<ETextureRenderTargetFormat>            RenderTargetFormat;                                       // 0x0213(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bAutoGenerateMips : 1;                                    // 0x0214(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	TEnumAsByte<ETextureFilter>                        MipsSamplerFilter;                                        // 0x0215(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ETextureAddress>                       MipsAddressU;                                             // 0x0216(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ETextureAddress>                       MipsAddressV;                                             // 0x0217(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EPixelFormat>                          OverrideFormat;                                           // 0x0218(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0219(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.TextureRenderTarget2D"));
		return ptr;
	}

};


// Class Engine.CanvasRenderTarget2D
// 0x0020 (0x0240 - 0x0220)
class UCanvasRenderTarget2D : public UTextureRenderTarget2D
{
public:
	struct FScriptMulticastDelegate                    OnCanvasRenderTargetUpdate;                               // 0x0220(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	TWeakObjectPtr<class UWorld>                       World;                                                    // 0x0230(0x0008) (ZeroConstructor, IsPlainOldData)
	bool                                               bShouldClearRenderTargetOnReceiveUpdate;                  // 0x0238(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0239(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.CanvasRenderTarget2D"));
		return ptr;
	}


	void UpdateResource();//Offset:Discovery.exe+0x4B5B1A0
	void ReceiveUpdate(class UCanvas* Canvas, int Width, int Height);//Offset:Discovery.exe+0x327F8B0
	void GetSize(int* Width, int* Height);//Offset:Discovery.exe+0x56C2430
	class UCanvasRenderTarget2D* STATIC_CreateCanvasRenderTarget2D(class UObject* WorldContextObject, class UClass* CanvasRenderTarget2DClass, int Width, int Height);//Offset:Discovery.exe+0x56C2530
};


// Class Engine.CapsuleComponent
// 0x0000 (0x05B0 - 0x05B0)
class UCapsuleComponent : public UShapeComponent
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.CapsuleComponent"));
		return ptr;
	}


	void SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps);//Offset:Discovery.exe+0x56C4920
	void SetCapsuleRadius(float Radius, bool bUpdateOverlaps);//Offset:Discovery.exe+0x56C4820
	void SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps);//Offset:Discovery.exe+0x56C4710
	void GetUnscaledCapsuleSize_WithoutHemisphere(float* OutRadius, float* OutHalfHeightWithoutHemisphere);//Offset:Discovery.exe+0x56C3F80
	void GetUnscaledCapsuleSize(float* OutRadius, float* OutHalfHeight);//Offset:Discovery.exe+0x56C40D0
	float GetUnscaledCapsuleRadius();//Offset:Discovery.exe+0x56C4280
	float GetUnscaledCapsuleHalfHeight_WithoutHemisphere();//Offset:Discovery.exe+0x56C4200
	float GetUnscaledCapsuleHalfHeight();//Offset:Discovery.exe+0x56C4250
	float GetShapeScale();//Offset:Discovery.exe+0x56C3EF0
	void GetScaledCapsuleSize_WithoutHemisphere(float* OutRadius, float* OutHalfHeightWithoutHemisphere);//Offset:Discovery.exe+0x56C42B0
	void GetScaledCapsuleSize(float* OutRadius, float* OutHalfHeight);//Offset:Discovery.exe+0x56C4460
	float GetScaledCapsuleRadius();//Offset:Discovery.exe+0x56C46B0
	float GetScaledCapsuleHalfHeight_WithoutHemisphere();//Offset:Discovery.exe+0x56C45D0
	float GetScaledCapsuleHalfHeight();//Offset:Discovery.exe+0x56C4660
};


// Class Engine.CheatManagerExtension
// 0x0000 (0x0028 - 0x0028)
class UCheatManagerExtension : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.CheatManagerExtension"));
		return ptr;
	}


	class APlayerController* GetPlayerController();//Offset:Discovery.exe+0x56D1140
};


// Class Engine.CheckBoxStyleAsset
// 0x0AD8 (0x0B00 - 0x0028)
class UCheckBoxStyleAsset : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	struct FCheckBoxStyle                              CheckBoxStyle;                                            // 0x0030(0x0AD0) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.CheckBoxStyleAsset"));
		return ptr;
	}

};


// Class Engine.ChildActorComponent
// 0x0040 (0x0310 - 0x02D0)
class UChildActorComponent : public USceneComponent
{
public:
	class UClass*                                      ChildActorClass;                                          // 0x02D0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class AActor*                                      ChildActor;                                               // 0x02D8(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	class AActor*                                      ChildActorTemplate;                                       // 0x02E0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, EditConst, DuplicateTransient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x28];                                      // 0x02E8(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ChildActorComponent"));
		return ptr;
	}


	void SetChildActorClass(class UClass* InClass);//Offset:Discovery.exe+0x56D4600
};


// Class Engine.ChildConnection
// 0x0010 (0x3250 - 0x3240)
class UChildConnection : public UNetConnection
{
public:
	class UNetConnection*                              Parent;                                                   // 0x3240(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x3248(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ChildConnection"));
		return ptr;
	}

};


// Class Engine.PlatformInterfaceBase
// 0x0010 (0x0038 - 0x0028)
class UPlatformInterfaceBase : public UObject
{
public:
	TArray<struct FDelegateArray>                      AllDelegates;                                             // 0x0028(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.PlatformInterfaceBase"));
		return ptr;
	}

};


// Class Engine.CloudStorageBase
// 0x0018 (0x0050 - 0x0038)
class UCloudStorageBase : public UPlatformInterfaceBase
{
public:
	TArray<struct FString>                             LocalCloudFiles;                                          // 0x0038(0x0010) (ZeroConstructor)
	unsigned char                                      bSuppressDelegateCalls : 1;                               // 0x0048(0x0001)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0049(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.CloudStorageBase"));
		return ptr;
	}

};


// Class Engine.CollisionProfile
// 0x0138 (0x0170 - 0x0038)
class UCollisionProfile : public UDeveloperSettings
{
public:
	TArray<struct FCollisionResponseTemplate>          Profiles;                                                 // 0x0038(0x0010) (ZeroConstructor, Config, GlobalConfig)
	TArray<struct FCustomChannelSetup>                 DefaultChannelResponses;                                  // 0x0048(0x0010) (ZeroConstructor, Config, GlobalConfig)
	TArray<struct FCustomProfile>                      EditProfiles;                                             // 0x0058(0x0010) (ZeroConstructor, Config, GlobalConfig)
	TArray<struct FRedirector>                         ProfileRedirects;                                         // 0x0068(0x0010) (ZeroConstructor, Config, GlobalConfig)
	TArray<struct FRedirector>                         CollisionChannelRedirects;                                // 0x0078(0x0010) (ZeroConstructor, Config, GlobalConfig)
	unsigned char                                      UnknownData00[0xE8];                                      // 0x0088(0x00E8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.CollisionProfile"));
		return ptr;
	}

};


// Class Engine.ComponentDelegateBinding
// 0x0010 (0x0038 - 0x0028)
class UComponentDelegateBinding : public UDynamicBlueprintBinding
{
public:
	TArray<struct FBlueprintComponentDelegateBinding>  ComponentDelegateBindings;                                // 0x0028(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ComponentDelegateBinding"));
		return ptr;
	}

};


// Class Engine.ComponentElementCounterInterface
// 0x0008 (0x0030 - 0x0028)
class UComponentElementCounterInterface : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ComponentElementCounterInterface"));
		return ptr;
	}

};


// Class Engine.ComponentElementHierarchyInterface
// 0x0008 (0x0030 - 0x0028)
class UComponentElementHierarchyInterface : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ComponentElementHierarchyInterface"));
		return ptr;
	}

};


// Class Engine.ComponentElementObjectInterface
// 0x0008 (0x0030 - 0x0028)
class UComponentElementObjectInterface : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ComponentElementObjectInterface"));
		return ptr;
	}

};


// Class Engine.ComponentElementSelectionInterface
// 0x0008 (0x0030 - 0x0028)
class UComponentElementSelectionInterface : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ComponentElementSelectionInterface"));
		return ptr;
	}

};


// Class Engine.ComponentElementWorldInterface
// 0x0008 (0x0030 - 0x0028)
class UComponentElementWorldInterface : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ComponentElementWorldInterface"));
		return ptr;
	}

};


// Class Engine.ActorComponentInstanceDataTransientOuter
// 0x0000 (0x0028 - 0x0028)
class UActorComponentInstanceDataTransientOuter : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ActorComponentInstanceDataTransientOuter"));
		return ptr;
	}

};


// Class Engine.CurveTable
// 0x0078 (0x00A0 - 0x0028)
class UCurveTable : public UObject
{
public:
	unsigned char                                      UnknownData00[0x78];                                      // 0x0028(0x0078) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.CurveTable"));
		return ptr;
	}

};


// Class Engine.CompositeCurveTable
// 0x0028 (0x00C8 - 0x00A0)
class UCompositeCurveTable : public UCurveTable
{
public:
	TArray<class UCurveTable*>                         ParentTables;                                             // 0x00A0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<class UCurveTable*>                         OldParentTables;                                          // 0x00B0(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData00[0x8];                                       // 0x00C0(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.CompositeCurveTable"));
		return ptr;
	}

};


// Class Engine.CompositeDataTable
// 0x0028 (0x00D8 - 0x00B0)
class UCompositeDataTable : public UDataTable
{
public:
	TArray<class UDataTable*>                          ParentTables;                                             // 0x00B0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<class UDataTable*>                          OldParentTables;                                          // 0x00C0(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData00[0x8];                                       // 0x00D0(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.CompositeDataTable"));
		return ptr;
	}

};


// Class Engine.Console
// 0x0108 (0x0130 - 0x0028)
class UConsole : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0028(0x0010) MISSED OFFSET
	class ULocalPlayer*                                ConsoleTargetPlayer;                                      // 0x0038(0x0008) (ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  DefaultTexture_Black;                                     // 0x0040(0x0008) (ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  DefaultTexture_White;                                     // 0x0048(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x18];                                      // 0x0050(0x0018) MISSED OFFSET
	TArray<struct FString>                             HistoryBuffer;                                            // 0x0068(0x0010) (ZeroConstructor, Config)
	unsigned char                                      UnknownData02[0xB8];                                      // 0x0078(0x00B8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.Console"));
		return ptr;
	}

};


// Class Engine.ConstraintInstanceBlueprintLibrary
// 0x0000 (0x0028 - 0x0028)
class UConstraintInstanceBlueprintLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ConstraintInstanceBlueprintLibrary"));
		return ptr;
	}


	void STATIC_SetProjectionParams(bool bEnableProjection, float ProjectionLinearAlpha, float ProjectionAngularAlpha, struct FConstraintInstanceAccessor* Accessor);//Offset:Discovery.exe+0x56DBD00
	void STATIC_SetParentDominates(bool bParentDominates, struct FConstraintInstanceAccessor* Accessor);//Offset:Discovery.exe+0x56DBA40
	void STATIC_SetOrientationDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive, struct FConstraintInstanceAccessor* Accessor);//Offset:Discovery.exe+0x56D8520
	void STATIC_SetOrientationDriveSLERP(bool bEnableSLERP, struct FConstraintInstanceAccessor* Accessor);//Offset:Discovery.exe+0x56D82C0
	void STATIC_SetLinearVelocityTarget(const struct FVector& InVelTarget, struct FConstraintInstanceAccessor* Accessor);//Offset:Discovery.exe+0x56D8AC0
	void STATIC_SetLinearVelocityDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ, struct FConstraintInstanceAccessor* Accessor);//Offset:Discovery.exe+0x56D8F80
	void STATIC_SetLinearSoftLimitParams(bool bSoftLinearLimit, float LinearLimitStiffness, float LinearLimitDamping, float LinearLimitRestitution, float LinearLimitContactDistance, struct FConstraintInstanceAccessor* Accessor);//Offset:Discovery.exe+0x56DB350
	void STATIC_SetLinearPositionTarget(const struct FVector& InPosTarget, struct FConstraintInstanceAccessor* Accessor);//Offset:Discovery.exe+0x56D8CC0
	void STATIC_SetLinearPositionDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ, struct FConstraintInstanceAccessor* Accessor);//Offset:Discovery.exe+0x56D92E0
	void STATIC_SetLinearPlasticity(bool bLinearPlasticity, float LinearPlasticityThreshold, TEnumAsByte<EConstraintPlasticityType> PlasticityType, struct FConstraintInstanceAccessor* Accessor);//Offset:Discovery.exe+0x56DAC90
	void STATIC_SetLinearLimits(TEnumAsByte<ELinearConstraintMotion> XMotion, TEnumAsByte<ELinearConstraintMotion> YMotion, TEnumAsByte<ELinearConstraintMotion> ZMotion, float Limit, struct FConstraintInstanceAccessor* Accessor);//Offset:Discovery.exe+0x56DB7B0
	void STATIC_SetLinearDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit, struct FConstraintInstanceAccessor* Accessor);//Offset:Discovery.exe+0x56D8830
	void STATIC_SetLinearBreakable(bool bLinearBreakable, float LinearBreakThreshold, struct FConstraintInstanceAccessor* Accessor);//Offset:Discovery.exe+0x56DAF80
	void STATIC_SetDisableCollision(bool bDisableCollision, struct FConstraintInstanceAccessor* Accessor);//Offset:Discovery.exe+0x56DBF50
	void STATIC_SetContactTransferScale(float ContactTransferScale, struct FConstraintInstanceAccessor* Accessor);//Offset:Discovery.exe+0x56DA8C0
	void STATIC_SetAngularVelocityTarget(const struct FVector& InVelTarget, struct FConstraintInstanceAccessor* Accessor);//Offset:Discovery.exe+0x56D7810
	void STATIC_SetAngularVelocityDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive, struct FConstraintInstanceAccessor* Accessor);//Offset:Discovery.exe+0x56D8070
	void STATIC_SetAngularVelocityDriveSLERP(bool bEnableSLERP, struct FConstraintInstanceAccessor* Accessor);//Offset:Discovery.exe+0x56D7E10
	void STATIC_SetAngularSoftTwistLimitParams(bool bSoftTwistLimit, float TwistLimitStiffness, float TwistLimitDamping, float TwistLimitRestitution, float TwistLimitContactDistance, struct FConstraintInstanceAccessor* Accessor);//Offset:Discovery.exe+0x56D9C60
	void STATIC_SetAngularSoftSwingLimitParams(bool bSoftSwingLimit, float SwingLimitStiffness, float SwingLimitDamping, float SwingLimitRestitution, float SwingLimitContactDistance, struct FConstraintInstanceAccessor* Accessor);//Offset:Discovery.exe+0x56DA120
	void STATIC_SetAngularPlasticity(bool bAngularPlasticity, float AngularPlasticityThreshold, struct FConstraintInstanceAccessor* Accessor);//Offset:Discovery.exe+0x56D95E0
	void STATIC_SetAngularOrientationTarget(const struct FRotator& InPosTarget, struct FConstraintInstanceAccessor* Accessor);//Offset:Discovery.exe+0x56D7A10
	void STATIC_SetAngularLimits(TEnumAsByte<EAngularConstraintMotion> Swing1MotionType, float Swing1LimitAngle, TEnumAsByte<EAngularConstraintMotion> Swing2MotionType, float Swing2LimitAngle, TEnumAsByte<EAngularConstraintMotion> TwistMotionType, float TwistLimitAngle, struct FConstraintInstanceAccessor* Accessor);//Offset:Discovery.exe+0x56DA640
	void STATIC_SetAngularDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit, struct FConstraintInstanceAccessor* Accessor);//Offset:Discovery.exe+0x56D7580
	void STATIC_SetAngularDriveMode(TEnumAsByte<EAngularDriveMode> DriveMode, struct FConstraintInstanceAccessor* Accessor);//Offset:Discovery.exe+0x56D7C10
	void STATIC_SetAngularBreakable(bool bAngularBreakable, float AngularBreakThreshold, struct FConstraintInstanceAccessor* Accessor);//Offset:Discovery.exe+0x56D9890
	void STATIC_GetProjectionParams(struct FConstraintInstanceAccessor* Accessor, bool* bEnableProjection, float* ProjectionLinearAlpha, float* ProjectionAngularAlpha);//Offset:Discovery.exe+0x56DBB40
	bool STATIC_GetParentDominates(struct FConstraintInstanceAccessor* Accessor);//Offset:Discovery.exe+0x56DB990
	void STATIC_GetOrientationDriveTwistAndSwing(struct FConstraintInstanceAccessor* Accessor, bool* bOutEnableTwistDrive, bool* bOutEnableSwingDrive);//Offset:Discovery.exe+0x56D83C0
	void STATIC_GetOrientationDriveSLERP(struct FConstraintInstanceAccessor* Accessor, bool* bOutEnableSLERP);//Offset:Discovery.exe+0x56D81C0
	void STATIC_GetLinearVelocityTarget(struct FConstraintInstanceAccessor* Accessor, struct FVector* OutVelTarget);//Offset:Discovery.exe+0x56D89C0
	void STATIC_GetLinearVelocityDrive(struct FConstraintInstanceAccessor* Accessor, bool* bOutEnableDriveX, bool* bOutEnableDriveY, bool* bOutEnableDriveZ);//Offset:Discovery.exe+0x56D8DC0
	void STATIC_GetLinearSoftLimitParams(struct FConstraintInstanceAccessor* Accessor, bool* bSoftLinearLimit, float* LinearLimitStiffness, float* LinearLimitDamping, float* LinearLimitRestitution, float* LinearLimitContactDistance);//Offset:Discovery.exe+0x56DB0D0
	void STATIC_GetLinearPositionTarget(struct FConstraintInstanceAccessor* Accessor, struct FVector* OutPosTarget);//Offset:Discovery.exe+0x56D8BC0
	void STATIC_GetLinearPositionDrive(struct FConstraintInstanceAccessor* Accessor, bool* bOutEnableDriveX, bool* bOutEnableDriveY, bool* bOutEnableDriveZ);//Offset:Discovery.exe+0x56D9120
	void STATIC_GetLinearPlasticity(struct FConstraintInstanceAccessor* Accessor, bool* bLinearPlasticity, float* LinearPlasticityThreshold, TEnumAsByte<EConstraintPlasticityType>* PlasticityType);//Offset:Discovery.exe+0x56DAAD0
	void STATIC_GetLinearLimits(struct FConstraintInstanceAccessor* Accessor, TEnumAsByte<ELinearConstraintMotion>* XMotion, TEnumAsByte<ELinearConstraintMotion>* YMotion, TEnumAsByte<ELinearConstraintMotion>* ZMotion, float* Limit);//Offset:Discovery.exe+0x56DB590
	void STATIC_GetLinearDriveParams(struct FConstraintInstanceAccessor* Accessor, float* OutPositionStrength, float* OutVelocityStrength, float* OutForceLimit);//Offset:Discovery.exe+0x56D8670
	void STATIC_GetLinearBreakable(struct FConstraintInstanceAccessor* Accessor, bool* bLinearBreakable, float* LinearBreakThreshold);//Offset:Discovery.exe+0x56DAE20
	bool STATIC_GetDisableCollsion(struct FConstraintInstanceAccessor* Accessor);//Offset:Discovery.exe+0x56DBEA0
	void STATIC_GetContactTransferScale(struct FConstraintInstanceAccessor* Accessor, float* ContactTransferScale);//Offset:Discovery.exe+0x56DA9C0
	void STATIC_GetAttachedBodyNames(struct FConstraintInstanceAccessor* Accessor, struct FName* ParentBody, struct FName* ChildBody);//Offset:Discovery.exe+0x56DC050
	void STATIC_GetAngularVelocityTarget(struct FConstraintInstanceAccessor* Accessor, struct FVector* OutVelTarget);//Offset:Discovery.exe+0x56D7710
	void STATIC_GetAngularVelocityDriveTwistAndSwing(struct FConstraintInstanceAccessor* Accessor, bool* bOutEnableTwistDrive, bool* bOutEnableSwingDrive);//Offset:Discovery.exe+0x56D7F10
	void STATIC_GetAngularVelocityDriveSLERP(struct FConstraintInstanceAccessor* Accessor, bool* bOutEnableSLERP);//Offset:Discovery.exe+0x56D7D10
	void STATIC_GetAngularSoftTwistLimitParams(struct FConstraintInstanceAccessor* Accessor, bool* bSoftTwistLimit, float* TwistLimitStiffness, float* TwistLimitDamping, float* TwistLimitRestitution, float* TwistLimitContactDistance);//Offset:Discovery.exe+0x56D99E0
	void STATIC_GetAngularSoftSwingLimitParams(struct FConstraintInstanceAccessor* Accessor, bool* bSoftSwingLimit, float* SwingLimitStiffness, float* SwingLimitDamping, float* SwingLimitRestitution, float* SwingLimitContactDistance);//Offset:Discovery.exe+0x56D9EA0
	void STATIC_GetAngularPlasticity(struct FConstraintInstanceAccessor* Accessor, bool* bAngularPlasticity, float* AngularPlasticityThreshold);//Offset:Discovery.exe+0x56D9480
	void STATIC_GetAngularOrientationTarget(struct FConstraintInstanceAccessor* Accessor, struct FRotator* OutPosTarget);//Offset:Discovery.exe+0x56D7910
	void STATIC_GetAngularLimits(struct FConstraintInstanceAccessor* Accessor, TEnumAsByte<EAngularConstraintMotion>* Swing1MotionType, float* Swing1LimitAngle, TEnumAsByte<EAngularConstraintMotion>* Swing2MotionType, float* Swing2LimitAngle, TEnumAsByte<EAngularConstraintMotion>* TwistMotionType, float* TwistLimitAngle);//Offset:Discovery.exe+0x56DA360
	void STATIC_GetAngularDriveParams(struct FConstraintInstanceAccessor* Accessor, float* OutPositionStrength, float* OutVelocityStrength, float* OutForceLimit);//Offset:Discovery.exe+0x56D73C0
	void STATIC_GetAngularDriveMode(struct FConstraintInstanceAccessor* Accessor, TEnumAsByte<EAngularDriveMode>* OutDriveMode);//Offset:Discovery.exe+0x56D7B10
	void STATIC_GetAngularBreakable(struct FConstraintInstanceAccessor* Accessor, bool* bAngularBreakable, float* AngularBreakThreshold);//Offset:Discovery.exe+0x56D9730
	void STATIC_CopyParams(bool bKeepPosition, bool bKeepRotation, struct FConstraintInstanceAccessor* Accessor, struct FConstraintInstanceAccessor* SourceAccessor);//Offset:Discovery.exe+0x56D7200
};


// Class Engine.StreamingSettings
// 0x0038 (0x0070 - 0x0038)
class UStreamingSettings : public UDeveloperSettings
{
public:
	unsigned char                                      AsyncLoadingThreadEnabled : 1;                            // 0x0038(0x0001) (Edit, Config)
	unsigned char                                      WarnIfTimeLimitExceeded : 1;                              // 0x0038(0x0001) (Edit, Config)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0039(0x0003) MISSED OFFSET
	float                                              TimeLimitExceededMultiplier;                              // 0x003C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              TimeLimitExceededMinTime;                                 // 0x0040(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	int                                                MinBulkDataSizeForAsyncLoading;                           // 0x0044(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UseBackgroundLevelStreaming : 1;                          // 0x0048(0x0001) (Edit, Config)
	unsigned char                                      AsyncLoadingUseFullTimeLimit : 1;                         // 0x0048(0x0001) (Edit, Config)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0049(0x0003) MISSED OFFSET
	float                                              AsyncLoadingTimeLimit;                                    // 0x004C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              PriorityAsyncLoadingExtraTime;                            // 0x0050(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              LevelStreamingActorsUpdateTimeLimit;                      // 0x0054(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              PriorityLevelStreamingActorsUpdateExtraTime;              // 0x0058(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	int                                                LevelStreamingComponentsRegistrationGranularity;          // 0x005C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	int                                                LevelStreamingAddPrimitiveGranularity;                    // 0x0060(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              LevelStreamingUnregisterComponentsTimeLimit;              // 0x0064(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	int                                                LevelStreamingComponentsUnregistrationGranularity;        // 0x0068(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      FlushStreamingOnExit : 1;                                 // 0x006C(0x0001) (Edit, Config)
	unsigned char                                      EventDrivenLoaderEnabled : 1;                             // 0x006C(0x0001) (Edit, Config)
	unsigned char                                      UnknownData02[0x3];                                       // 0x006D(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.StreamingSettings"));
		return ptr;
	}

};


// Class Engine.GarbageCollectionSettings
// 0x0020 (0x0058 - 0x0038)
class UGarbageCollectionSettings : public UDeveloperSettings
{
public:
	float                                              TimeBetweenPurgingPendingKillObjects;                     // 0x0038(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      FlushStreamingOnGC : 1;                                   // 0x003C(0x0001) (Edit, Config)
	unsigned char                                      AllowParallelGC : 1;                                      // 0x003C(0x0001) (Edit, Config)
	unsigned char                                      AllowTickGCOnDedicatedServer : 1;                         // 0x003C(0x0001) (Edit, Config)
	unsigned char                                      IncrementalBeginDestroyEnabled : 1;                       // 0x003C(0x0001) (Edit, Config)
	unsigned char                                      MultithreadedDestructionEnabled : 1;                      // 0x003C(0x0001) (Edit, Config)
	unsigned char                                      CreateGCClusters : 1;                                     // 0x003C(0x0001) (Edit, Config)
	unsigned char                                      AssetClusteringEnabled : 1;                               // 0x003C(0x0001) (Edit, Config)
	unsigned char                                      ActorClusteringEnabled : 1;                               // 0x003C(0x0001) (Edit, Config)
	unsigned char                                      BlueprintClusteringEnabled : 1;                           // 0x003D(0x0001) (Edit, Config)
	unsigned char                                      UseDisregardForGCOnDedicatedServers : 1;                  // 0x003D(0x0001) (Edit, Config)
	unsigned char                                      VerifyGCObjectNames : 1;                                  // 0x003D(0x0001) (Edit, Config)
	unsigned char                                      VerifyUObjectsAreNotFGCObjects : 1;                       // 0x003D(0x0001) (Edit, Config)
	unsigned char                                      PendingKillEnabled : 1;                                   // 0x003D(0x0001) (Edit, Config)
	unsigned char                                      UnknownData00[0x2];                                       // 0x003E(0x0002) MISSED OFFSET
	int                                                MinGCClusterSize;                                         // 0x0040(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	int                                                NumRetriesBeforeForcingGC;                                // 0x0044(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	int                                                MaxObjectsNotConsideredByGC;                              // 0x0048(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	int                                                SizeOfPermanentObjectPool;                                // 0x004C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	int                                                MaxObjectsInGame;                                         // 0x0050(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	int                                                MaxObjectsInEditor;                                       // 0x0054(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.GarbageCollectionSettings"));
		return ptr;
	}

};


// Class Engine.CullDistanceVolume
// 0x0018 (0x0318 - 0x0300)
class ACullDistanceVolume : public AVolume
{
public:
	TArray<struct FCullDistanceSizePair>               CullDistances;                                            // 0x0300(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	unsigned char                                      bEnabled : 1;                                             // 0x0310(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0311(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.CullDistanceVolume"));
		return ptr;
	}

};


// Class Engine.CurveEdPresetCurve
// 0x0000 (0x0028 - 0x0028)
class UCurveEdPresetCurve : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.CurveEdPresetCurve"));
		return ptr;
	}

};


// Class Engine.CurveFloat
// 0x0088 (0x00B8 - 0x0030)
class UCurveFloat : public UCurveBase
{
public:
	struct FRichCurve                                  FloatCurve;                                               // 0x0030(0x0080)
	bool                                               bIsEventCurve;                                            // 0x00B0(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00B1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.CurveFloat"));
		return ptr;
	}


	float GetFloatValue(float InTime);//Offset:Discovery.exe+0x56E1570
};


// Class Engine.AnimationCurveIdentifierExtensions
// 0x0000 (0x0028 - 0x0028)
class UAnimationCurveIdentifierExtensions : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.AnimationCurveIdentifierExtensions"));
		return ptr;
	}


	bool STATIC_IsValid(struct FAnimationCurveIdentifier* Identifier);//Offset:Discovery.exe+0x56E1AF0
	enum class ERawCurveTrackTypes STATIC_GetType(struct FAnimationCurveIdentifier* Identifier);//Offset:Discovery.exe+0x56E1970
	struct FName STATIC_GetName(struct FAnimationCurveIdentifier* Identifier);//Offset:Discovery.exe+0x56E1A30
};


// Class Engine.CurveLinearColor
// 0x0220 (0x0250 - 0x0030)
class UCurveLinearColor : public UCurveBase
{
public:
	struct FRichCurve                                  FloatCurves[0x4];                                         // 0x0030(0x0080)
	float                                              AdjustHue;                                                // 0x0230(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AdjustSaturation;                                         // 0x0234(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AdjustBrightness;                                         // 0x0238(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AdjustBrightnessCurve;                                    // 0x023C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AdjustVibrance;                                           // 0x0240(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AdjustMinAlpha;                                           // 0x0244(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AdjustMaxAlpha;                                           // 0x0248(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x024C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.CurveLinearColor"));
		return ptr;
	}


	struct FLinearColor GetUnadjustedLinearColorValue(float InTime);//Offset:Discovery.exe+0x56E20A0
	struct FLinearColor GetLinearColorValue(float InTime);//Offset:Discovery.exe+0x56E2200
	struct FLinearColor GetClampedLinearColorValue(float InTime);//Offset:Discovery.exe+0x56E2150
};


// Class Engine.Texture2D
// 0x00C0 (0x02B0 - 0x01F0)
class UTexture2D : public UTexture
{
public:
	int                                                FirstResourceMemMip;                                      // 0x01F0(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bTemporarilyDisableStreaming : 1;                         // 0x01F4(0x0001) (Transient)
	TEnumAsByte<ETextureAddress>                       AddressX;                                                 // 0x01F5(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ETextureAddress>                       AddressY;                                                 // 0x01F6(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x01F7(0x0001) MISSED OFFSET
	struct FIntPoint                                   ImportedSize;                                             // 0x01F8(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0xB0];                                      // 0x0200(0x00B0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.Texture2D"));
		return ptr;
	}


	int Blueprint_GetSizeY();//Offset:Discovery.exe+0x589F300
	int Blueprint_GetSizeX();//Offset:Discovery.exe+0x589F330
};


// Class Engine.CurveLinearColorAtlas
// 0x0020 (0x02D0 - 0x02B0)
class UCurveLinearColorAtlas : public UTexture2D
{
public:
	uint32_t                                           TextureHeight;                                            // 0x02B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x02B4(0x0004) MISSED OFFSET
	TArray<class UCurveLinearColor*>                   GradientCurves;                                           // 0x02B8(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData01[0x8];                                       // 0x02C8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.CurveLinearColorAtlas"));
		return ptr;
	}


	bool GetCurvePosition(class UCurveLinearColor* InCurve, float* Position);//Offset:Discovery.exe+0x56E3480
};


// Class Engine.CurveSourceInterface
// 0x0000 (0x0028 - 0x0028)
class UCurveSourceInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.CurveSourceInterface"));
		return ptr;
	}


	float GetCurveValue(const struct FName& CurveName);//Offset:Discovery.exe+0x56E3940
	void GetCurves(TArray<struct FNamedCurveValue>* OutValues);//Offset:Discovery.exe+0x56E3890
	struct FName GetBindingName();//Offset:Discovery.exe+0x56E39E0
};


// Class Engine.CurveVector
// 0x0180 (0x01B0 - 0x0030)
class UCurveVector : public UCurveBase
{
public:
	struct FRichCurve                                  FloatCurves[0x3];                                         // 0x0030(0x0080)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.CurveVector"));
		return ptr;
	}


	struct FVector GetVectorValue(float InTime);//Offset:Discovery.exe+0x56E4440
};


// Class Engine.DamageType
// 0x0018 (0x0040 - 0x0028)
class UDamageType : public UObject
{
public:
	unsigned char                                      bCausedByWorld : 1;                                       // 0x0028(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bScaleMomentumByMass : 1;                                 // 0x0028(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bRadialDamageVelChange : 1;                               // 0x0028(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0029(0x0003) MISSED OFFSET
	float                                              DamageImpulse;                                            // 0x002C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              DestructibleImpulse;                                      // 0x0030(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              DestructibleDamageSpreadScale;                            // 0x0034(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              DamageFalloff;                                            // 0x0038(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x003C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.DamageType"));
		return ptr;
	}

};


// Class Engine.DataDrivenCVarEngineSubsystem
// 0x0010 (0x0040 - 0x0030)
class UDataDrivenCVarEngineSubsystem : public UEngineSubsystem
{
public:
	struct FScriptMulticastDelegate                    OnDataDrivenCVarDelegate;                                 // 0x0030(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.DataDrivenCVarEngineSubsystem"));
		return ptr;
	}

};


// Class Engine.DataDrivenConsoleVariableSettings
// 0x0038 (0x0070 - 0x0038)
class UDataDrivenConsoleVariableSettings : public UDeveloperSettings
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0038(0x0018) MISSED OFFSET
	TArray<struct FDataDrivenConsoleVariable>          CVarsArray;                                               // 0x0050(0x0010) (Edit, ZeroConstructor, Config)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0060(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.DataDrivenConsoleVariableSettings"));
		return ptr;
	}

};


// Class Engine.WorldDataLayers
// 0x0280 (0x0548 - 0x02C8)
class AWorldDataLayers : public AInfo
{
public:
	unsigned char                                      UnknownData00[0xA0];                                      // 0x02C8(0x00A0) MISSED OFFSET
	unsigned char                                      UnknownData01[0x50];                                      // 0x02C8(0x0050) UNKNOWN PROPERTY: WorldDataLayers
	TArray<struct FName>                               RepActiveDataLayerNames;                                  // 0x03B8(0x0010) (Net, ZeroConstructor, Transient)
	TArray<struct FName>                               RepLoadedDataLayerNames;                                  // 0x03C8(0x0010) (Net, ZeroConstructor, Transient)
	unsigned char                                      UnknownData02[0xA0];                                      // 0x03D8(0x00A0) MISSED OFFSET
	TArray<struct FName>                               RepEffectiveActiveDataLayerNames;                         // 0x0478(0x0010) (Net, ZeroConstructor, Transient)
	TArray<struct FName>                               RepEffectiveLoadedDataLayerNames;                         // 0x0488(0x0010) (Net, ZeroConstructor, Transient)
	unsigned char                                      UnknownData03[0xB0];                                      // 0x0498(0x00B0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.WorldDataLayers"));
		return ptr;
	}


	void OnRep_LoadedDataLayerNames();//Offset:Discovery.exe+0x58B1140
	void OnRep_EffectiveLoadedDataLayerNames();//Offset:Discovery.exe+0x58B1100
	void OnRep_EffectiveActiveDataLayerNames();//Offset:Discovery.exe+0x58B1120
	void OnRep_ActiveDataLayerNames();//Offset:Discovery.exe+0x58B1160
	void OnDataLayerRuntimeStateChanged(class UDataLayer* InDataLayer, enum class EDataLayerRuntimeState InState);//Offset:Discovery.exe+0x58B1180
};


// Class Engine.DataLayer
// 0x0030 (0x0058 - 0x0028)
class UDataLayer : public UObject
{
public:
	struct FName                                       DataLayerLabel;                                           // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bIsRuntime : 1;                                           // 0x0030(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0031(0x0003) MISSED OFFSET
	enum class EDataLayerRuntimeState                  InitialRuntimeState;                                      // 0x0034(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0035(0x0003) MISSED OFFSET
	struct FColor                                      DebugColor;                                               // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x003C(0x0004) MISSED OFFSET
	class UDataLayer*                                  Parent;                                                   // 0x0040(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<class UDataLayer*>                          Children;                                                 // 0x0048(0x0010) (ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.DataLayer"));
		return ptr;
	}


	bool IsVisible();//Offset:Discovery.exe+0x1DB6450
	bool IsRuntime();//Offset:Discovery.exe+0x56E5300
	bool IsInitiallyVisible();//Offset:Discovery.exe+0x1DB6450
	bool IsInitiallyActive();//Offset:Discovery.exe+0x56E52B0
	bool IsEffectiveVisible();//Offset:Discovery.exe+0x1DB6450
	bool IsDynamicallyLoaded();//Offset:Discovery.exe+0x56E5300
	enum class EDataLayerState GetInitialState();//Offset:Discovery.exe+0x56E5270
	enum class EDataLayerRuntimeState GetInitialRuntimeState();//Offset:Discovery.exe+0x56E5270
	struct FColor GetDebugColor();//Offset:Discovery.exe+0x56E5320
	struct FName GetDataLayerLabel();//Offset:Discovery.exe+0x56E5350
	bool Equals(const struct FActorDataLayer& ActorDataLayer);//Offset:Discovery.exe+0x56E5370
};


// Class Engine.DataLayerSubsystem
// 0x0060 (0x0090 - 0x0030)
class UDataLayerSubsystem : public UWorldSubsystem
{
public:
	struct FScriptMulticastDelegate                    OnDataLayerRuntimeStateChanged;                           // 0x0030(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData00[0x50];                                      // 0x0040(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.DataLayerSubsystem"));
		return ptr;
	}


	void SetDataLayerStateByLabel(const struct FName& InDataLayerLabel, enum class EDataLayerState InState);//Offset:Discovery.exe+0x56E5E20
	void SetDataLayerState(const struct FActorDataLayer& InDataLayer, enum class EDataLayerState InState);//Offset:Discovery.exe+0x56E5F20
	void SetDataLayerRuntimeStateByLabel(const struct FName& InDataLayerLabel, enum class EDataLayerRuntimeState InState, bool bInIsRecursive);//Offset:Discovery.exe+0x56E6180
	void SetDataLayerRuntimeState(const struct FActorDataLayer& InDataLayer, enum class EDataLayerRuntimeState InState, bool bInIsRecursive);//Offset:Discovery.exe+0x56E62C0
	void GetLoadedDataLayerNames();//Offset:Discovery.exe+0x56E5C20
	enum class EDataLayerState GetDataLayerStateByLabel(const struct FName& InDataLayerLabel);//Offset:Discovery.exe+0x56E5CA0
	enum class EDataLayerState GetDataLayerState(const struct FActorDataLayer& InDataLayer);//Offset:Discovery.exe+0x56E5D60
	enum class EDataLayerRuntimeState GetDataLayerRuntimeStateByLabel(const struct FName& InDataLayerLabel);//Offset:Discovery.exe+0x56E5CA0
	enum class EDataLayerRuntimeState GetDataLayerRuntimeState(const struct FActorDataLayer& InDataLayer);//Offset:Discovery.exe+0x56E5D60
	class UDataLayer* GetDataLayerFromName(const struct FName& InDataLayerName);//Offset:Discovery.exe+0x56E6400
	class UDataLayer* GetDataLayerFromLabel(const struct FName& InDataLayerLabel);//Offset:Discovery.exe+0x56E64A0
	enum class EDataLayerRuntimeState GetDataLayerEffectiveRuntimeStateByLabel(const struct FName& InDataLayerLabel);//Offset:Discovery.exe+0x56E6020
	enum class EDataLayerRuntimeState GetDataLayerEffectiveRuntimeState(const struct FActorDataLayer& InDataLayer);//Offset:Discovery.exe+0x56E60D0
	class UDataLayer* GetDataLayer(const struct FActorDataLayer& InDataLayer);//Offset:Discovery.exe+0x56E6540
	void GetActiveDataLayerNames();//Offset:Discovery.exe+0x56E5C60
};


// Class Engine.DataTableFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UDataTableFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.DataTableFunctionLibrary"));
		return ptr;
	}


	void STATIC_GetDataTableRowNames(class UDataTable* Table, TArray<struct FName>* OutRowNames);//Offset:Discovery.exe+0x56E8440
	bool STATIC_GetDataTableRowFromName(class UDataTable* Table, const struct FName& RowName, struct FTableRowBase* OutRow);//Offset:Discovery.exe+0x56E8BC0
	TArray<struct FString> STATIC_GetDataTableColumnAsString(class UDataTable* DataTable, const struct FName& PropertyName);//Offset:Discovery.exe+0x56E82B0
	void STATIC_EvaluateCurveTableRow(class UCurveTable* CurveTable, const struct FName& RowName, float InXY, const struct FString& ContextString, TEnumAsByte<EEvaluateCurveTableResult>* OutResult, float* OutXY);//Offset:Discovery.exe+0x56E8620
	bool STATIC_DoesDataTableRowExist(class UDataTable* Table, const struct FName& RowName);//Offset:Discovery.exe+0x56E8540
};


// Class Engine.DebugCameraController
// 0x0180 (0x0998 - 0x0818)
class ADebugCameraController : public APlayerController
{
public:
	unsigned char                                      bShowSelectedInfo : 1;                                    // 0x0818(0x0001) (Config, GlobalConfig)
	unsigned char                                      bIsFrozenRendering : 1;                                   // 0x0818(0x0001)
	unsigned char                                      bIsOrbitingSelectedActor : 1;                             // 0x0818(0x0001)
	unsigned char                                      bOrbitPivotUseCenter : 1;                                 // 0x0818(0x0001)
	unsigned char                                      bEnableBufferVisualization : 1;                           // 0x0818(0x0001)
	unsigned char                                      bEnableBufferVisualizationFullMode : 1;                   // 0x0818(0x0001)
	unsigned char                                      bIsBufferVisualizationInputSetup : 1;                     // 0x0818(0x0001)
	unsigned char                                      bLastDisplayEnabled : 1;                                  // 0x0818(0x0001)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0819(0x0007) MISSED OFFSET
	class UDrawFrustumComponent*                       DrawFrustum;                                              // 0x0820(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class AActor*                                      SelectedActor;                                            // 0x0828(0x0008) (ZeroConstructor, IsPlainOldData)
	class UPrimitiveComponent*                         SelectedComponent;                                        // 0x0830(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FHitResult                                  SelectedHitPoint;                                         // 0x0838(0x00E8) (IsPlainOldData)
	class APlayerController*                           OriginalControllerRef;                                    // 0x0920(0x0008) (ZeroConstructor, IsPlainOldData)
	class UPlayer*                                     OriginalPlayer;                                           // 0x0928(0x0008) (ZeroConstructor, IsPlainOldData)
	float                                              SpeedScale;                                               // 0x0930(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              InitialMaxSpeed;                                          // 0x0934(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              InitialAccel;                                             // 0x0938(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              InitialDecel;                                             // 0x093C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x58];                                      // 0x0940(0x0058) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.DebugCameraController"));
		return ptr;
	}


	void ToggleDisplay();//Offset:Discovery.exe+0x56E9040
	void ShowDebugSelectedInfo();//Offset:Discovery.exe+0x56E9060
	void SetPawnMovementSpeedScale(float NewSpeedScale);//Offset:Discovery.exe+0x56E8F70
	void ReceiveOnDeactivate(class APlayerController* RestoredPC);//Offset:Discovery.exe+0x327F8B0
	void ReceiveOnActorSelected(class AActor* NewSelectedActor, const struct FVector& SelectHitLocation, const struct FVector& SelectHitNormal, const struct FHitResult& Hit);//Offset:Discovery.exe+0x327F8B0
	void ReceiveOnActivate(class APlayerController* OriginalPC);//Offset:Discovery.exe+0x327F8B0
	class AActor* GetSelectedActor();//Offset:Discovery.exe+0x56E9010
};


// Class Engine.DebugCameraControllerSettings
// 0x0010 (0x0048 - 0x0038)
class UDebugCameraControllerSettings : public UDeveloperSettings
{
public:
	TArray<struct FDebugCameraControllerSettingsViewModeIndex> CycleViewModes;                                           // 0x0038(0x0010) (Edit, ZeroConstructor, Config)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.DebugCameraControllerSettings"));
		return ptr;
	}

};


// Class Engine.DebugCameraHUD
// 0x0000 (0x03B8 - 0x03B8)
class ADebugCameraHUD : public AHUD
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.DebugCameraHUD"));
		return ptr;
	}

};


// Class Engine.DebugDrawComponent
// 0x0000 (0x0590 - 0x0590)
class UDebugDrawComponent : public UPrimitiveComponent
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.DebugDrawComponent"));
		return ptr;
	}

};


// Class Engine.DebugDrawService
// 0x0000 (0x0028 - 0x0028)
class UDebugDrawService : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.DebugDrawService"));
		return ptr;
	}

};


// Class Engine.DecalActor
// 0x0008 (0x02D0 - 0x02C8)
class ADecalActor : public AActor
{
public:
	class UDecalComponent*                             Decal;                                                    // 0x02C8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.DecalActor"));
		return ptr;
	}


	void SetDecalMaterial(class UMaterialInterface* NewDecalMaterial);//Offset:Discovery.exe+0x56E9DD0
	class UMaterialInterface* GetDecalMaterial();//Offset:Discovery.exe+0x56E9DA0
	class UMaterialInstanceDynamic* CreateDynamicMaterialInstance();//Offset:Discovery.exe+0x56E9D70
};


// Class Engine.PhysicsVolume
// 0x0010 (0x0310 - 0x0300)
class APhysicsVolume : public AVolume
{
public:
	float                                              TerminalVelocity;                                         // 0x0300(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                Priority;                                                 // 0x0304(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FluidFriction;                                            // 0x0308(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bWaterVolume : 1;                                         // 0x030C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bPhysicsOnContact : 1;                                    // 0x030C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x3];                                       // 0x030D(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.PhysicsVolume"));
		return ptr;
	}

};


// Class Engine.DefaultPhysicsVolume
// 0x0000 (0x0310 - 0x0310)
class ADefaultPhysicsVolume : public APhysicsVolume
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.DefaultPhysicsVolume"));
		return ptr;
	}

};


// Class Engine.DemoNetConnection
// 0x0050 (0x3290 - 0x3240)
class UDemoNetConnection : public UNetConnection
{
public:
	unsigned char                                      UnknownData00[0x50];                                      // 0x3240(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.DemoNetConnection"));
		return ptr;
	}

};


// Class Engine.DemoNetDriver
// 0x0AF8 (0x1260 - 0x0768)
class UDemoNetDriver : public UNetDriver
{
public:
	unsigned char                                      UnknownData00[0x40];                                      // 0x0768(0x0040) MISSED OFFSET
	TMap<struct FString, struct FRollbackNetStartupActorInfo> RollbackNetStartupActors;                                 // 0x07A8(0x0050) (Transient)
	unsigned char                                      UnknownData01[0xA4];                                      // 0x07F8(0x00A4) MISSED OFFSET
	float                                              CheckpointSaveMaxMSPerFrame;                              // 0x089C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData02[0x20];                                      // 0x08A0(0x0020) MISSED OFFSET
	TArray<struct FMulticastRecordOptions>             MulticastRecordOptions;                                   // 0x08C0(0x0010) (ZeroConstructor, Config)
	TArray<class APlayerController*>                   SpectatorControllers;                                     // 0x08D0(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData03[0x980];                                     // 0x08E0(0x0980) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.DemoNetDriver"));
		return ptr;
	}

};


// Class Engine.PendingNetGame
// 0x0098 (0x00C0 - 0x0028)
class UPendingNetGame : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	class UNetDriver*                                  NetDriver;                                                // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData)
	class UDemoNetDriver*                              DemoNetDriver;                                            // 0x0038(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x80];                                      // 0x0040(0x0080) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.PendingNetGame"));
		return ptr;
	}

};


// Class Engine.DemoPendingNetGame
// 0x0000 (0x00C0 - 0x00C0)
class UDemoPendingNetGame : public UPendingNetGame
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.DemoPendingNetGame"));
		return ptr;
	}

};


// Class Engine.DestructibleInterface
// 0x0000 (0x0028 - 0x0028)
class UDestructibleInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.DestructibleInterface"));
		return ptr;
	}

};


// Class Engine.TextureLODSettings
// 0x0010 (0x0038 - 0x0028)
class UTextureLODSettings : public UObject
{
public:
	TArray<struct FTextureLODGroup>                    TextureLODGroups;                                         // 0x0028(0x0010) (Edit, ZeroConstructor, Config)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.TextureLODSettings"));
		return ptr;
	}

};


// Class Engine.DeviceProfile
// 0x0080 (0x00B8 - 0x0038)
class UDeviceProfile : public UTextureLODSettings
{
public:
	struct FString                                     DeviceType;                                               // 0x0038(0x0010) (Edit, ZeroConstructor, Config, EditConst)
	struct FString                                     BaseProfileName;                                          // 0x0048(0x0010) (Edit, ZeroConstructor, Config)
	class UDeviceProfile*                              Parent;                                                   // 0x0058(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x28];                                      // 0x0060(0x0028) MISSED OFFSET
	TArray<struct FString>                             CVars;                                                    // 0x0088(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FDPMatchingRulestruct>               MatchingRules;                                            // 0x0098(0x0010) (Edit, ZeroConstructor, Config)
	unsigned char                                      UnknownData01[0x10];                                      // 0x00A8(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.DeviceProfile"));
		return ptr;
	}

};


// Class Engine.DeviceProfileFragment
// 0x0010 (0x0038 - 0x0028)
class UDeviceProfileFragment : public UObject
{
public:
	TArray<struct FString>                             CVars;                                                    // 0x0028(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.DeviceProfileFragment"));
		return ptr;
	}

};


// Class Engine.DeviceProfileManager
// 0x0068 (0x0090 - 0x0028)
class UDeviceProfileManager : public UObject
{
public:
	TArray<class UDeviceProfile*>                      Profiles;                                                 // 0x0028(0x0010) (Edit, ZeroConstructor)
	TArray<class UDeviceProfile*>                      BackupProfiles;                                           // 0x0038(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData00[0x48];                                      // 0x0048(0x0048) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.DeviceProfileManager"));
		return ptr;
	}

};


// Class Engine.DialogueSoundWaveProxy
// 0x0018 (0x0188 - 0x0170)
class UDialogueSoundWaveProxy : public USoundBase
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0170(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.DialogueSoundWaveProxy"));
		return ptr;
	}

};


// Class Engine.DialogueVoice
// 0x0018 (0x0040 - 0x0028)
class UDialogueVoice : public UObject
{
public:
	TEnumAsByte<EGrammaticalGender>                    Gender;                                                   // 0x0028(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EGrammaticalNumber>                    Plurality;                                                // 0x0029(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x002A(0x0002) MISSED OFFSET
	struct FGuid                                       LocalizationGUID;                                         // 0x002C(0x0010) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x003C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.DialogueVoice"));
		return ptr;
	}

};


// Class Engine.DialogueWave
// 0x0048 (0x0070 - 0x0028)
class UDialogueWave : public UObject
{
public:
	unsigned char                                      bMature : 1;                                              // 0x0028(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bOverride_SubtitleOverride : 1;                           // 0x0028(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0029(0x0007) MISSED OFFSET
	struct FString                                     SpokenText;                                               // 0x0030(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	struct FString                                     SubtitleOverride;                                         // 0x0040(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FDialogueContextMapping>             ContextMappings;                                          // 0x0050(0x0010) (Edit, ZeroConstructor)
	struct FGuid                                       LocalizationGUID;                                         // 0x0060(0x0010) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.DialogueWave"));
		return ptr;
	}

};


// Class Engine.Light
// 0x0010 (0x02D8 - 0x02C8)
class ALight : public AActor
{
public:
	class ULightComponent*                             LightComponent;                                           // 0x02C8(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      bEnabled : 1;                                             // 0x02D0(0x0001) (Net)
	unsigned char                                      UnknownData00[0x7];                                       // 0x02D1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.Light"));
		return ptr;
	}


	void ToggleEnabled();//Offset:Discovery.exe+0x57D6570
	void SetLightFunctionScale(const struct FVector& NewLightFunctionScale);//Offset:Discovery.exe+0x57D6270
	void SetLightFunctionMaterial(class UMaterialInterface* NewLightFunctionMaterial);//Offset:Discovery.exe+0x57D6310
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);//Offset:Discovery.exe+0x57D61D0
	void SetLightColor(const struct FLinearColor& NewLightColor);//Offset:Discovery.exe+0x57D6400
	void SetEnabled(bool bSetEnabled);//Offset:Discovery.exe+0x57D65C0
	void SetCastShadows(bool bNewValue);//Offset:Discovery.exe+0x57D6130
	void SetBrightness(float NewBrightness);//Offset:Discovery.exe+0x57D64D0
	void SetAffectTranslucentLighting(bool bNewValue);//Offset:Discovery.exe+0x57D6090
	void OnRep_bEnabled();//Offset:Discovery.exe+0x19BFD70
	bool IsEnabled();//Offset:Discovery.exe+0x57D6590
	struct FLinearColor GetLightColor();//Offset:Discovery.exe+0x57D63B0
	float GetBrightness();//Offset:Discovery.exe+0x57D64A0
};


// Class Engine.DirectionalLight
// 0x0000 (0x02D8 - 0x02D8)
class ADirectionalLight : public ALight
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.DirectionalLight"));
		return ptr;
	}

};


// Class Engine.LightComponentBase
// 0x0040 (0x0310 - 0x02D0)
class ULightComponentBase : public USceneComponent
{
public:
	struct FGuid                                       LightGuid;                                                // 0x02D0(0x0010) (ZeroConstructor, IsPlainOldData)
	float                                              Brightness;                                               // 0x02E0(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              Intensity;                                                // 0x02E4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FColor                                      LightColor;                                               // 0x02E8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bAffectsWorld : 1;                                        // 0x02EC(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      CastShadows : 1;                                          // 0x02EC(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      CastStaticShadows : 1;                                    // 0x02EC(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      CastDynamicShadows : 1;                                   // 0x02EC(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bAffectTranslucentLighting : 1;                           // 0x02EC(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bTransmission : 1;                                        // 0x02EC(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bCastVolumetricShadow : 1;                                // 0x02EC(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bCastDeepShadow : 1;                                      // 0x02EC(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bCastRaytracedShadow : 1;                                 // 0x02ED(0x0001) (Deprecated)
	unsigned char                                      UnknownData00[0x2];                                       // 0x02EE(0x0002) MISSED OFFSET
	TEnumAsByte<ECastRayTracedShadow>                  CastRaytracedShadow;                                      // 0x02F0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x02F1(0x0003) MISSED OFFSET
	unsigned char                                      bAffectReflection : 1;                                    // 0x02F4(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bAffectGlobalIllumination : 1;                            // 0x02F4(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData02[0x3];                                       // 0x02F5(0x0003) MISSED OFFSET
	float                                              DeepShadowLayerDistribution;                              // 0x02F8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              IndirectLightingIntensity;                                // 0x02FC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              VolumetricScatteringIntensity;                            // 0x0300(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                SamplesPerPixel;                                          // 0x0304(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0308(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.LightComponentBase"));
		return ptr;
	}


	void SetSamplesPerPixel(int NewValue);//Offset:Discovery.exe+0x57D9E80
	void SetCastVolumetricShadow(bool bNewValue);//Offset:Discovery.exe+0x57DA230
	void SetCastShadows(bool bNewValue);//Offset:Discovery.exe+0x57DA320
	void SetCastRaytracedShadows(TEnumAsByte<ECastRayTracedShadow> bNewValue);//Offset:Discovery.exe+0x57D9F20
	void SetCastRaytracedShadow(bool bNewValue);//Offset:Discovery.exe+0x57D9FB0
	void SetCastDeepShadow(bool bNewValue);//Offset:Discovery.exe+0x57DA190
	void SetAffectReflection(bool bNewValue);//Offset:Discovery.exe+0x57DA0F0
	void SetAffectGlobalIllumination(bool bNewValue);//Offset:Discovery.exe+0x57DA050
	struct FLinearColor GetLightColor();//Offset:Discovery.exe+0x57DA2D0
};


// Class Engine.LightComponent
// 0x0100 (0x0410 - 0x0310)
class ULightComponent : public ULightComponentBase
{
public:
	float                                              MaxDistanceFadeRange;                                     // 0x0310(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUseTemperature : 1;                                      // 0x0314(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0315(0x0003) MISSED OFFSET
	int                                                ShadowMapChannel;                                         // 0x0318(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x031C(0x0004) MISSED OFFSET
	float                                              MinRoughness;                                             // 0x0320(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              SpecularScale;                                            // 0x0324(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ShadowResolutionScale;                                    // 0x0328(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ShadowBias;                                               // 0x032C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ShadowSlopeBias;                                          // 0x0330(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ShadowSharpen;                                            // 0x0334(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ContactShadowLength;                                      // 0x0338(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      ContactShadowLengthInWS : 1;                              // 0x033C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      InverseSquaredFalloff : 1;                                // 0x033C(0x0001) (Deprecated)
	unsigned char                                      CastTranslucentShadows : 1;                               // 0x033C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bCastShadowsFromCinematicObjectsOnly : 1;                 // 0x033C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bAffectDynamicIndirectLighting : 1;                       // 0x033C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bForceCachedShadowsForMovablePrimitives : 1;              // 0x033C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData02[0x3];                                       // 0x033D(0x0003) MISSED OFFSET
	struct FLightingChannels                           LightingChannels;                                         // 0x0340(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData03[0x7];                                       // 0x0341(0x0007) MISSED OFFSET
	class UMaterialInterface*                          LightFunctionMaterial;                                    // 0x0348(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector                                     LightFunctionScale;                                       // 0x0350(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UTextureLightProfile*                        IESTexture;                                               // 0x0368(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUseIESBrightness : 1;                                    // 0x0370(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData04[0x3];                                       // 0x0371(0x0003) MISSED OFFSET
	float                                              IESBrightnessScale;                                       // 0x0374(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              LightFunctionFadeDistance;                                // 0x0378(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              DisabledBrightness;                                       // 0x037C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bEnableLightShaftBloom : 1;                               // 0x0380(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData05[0x3];                                       // 0x0381(0x0003) MISSED OFFSET
	float                                              BloomScale;                                               // 0x0384(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              BloomThreshold;                                           // 0x0388(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              BloomMaxBrightness;                                       // 0x038C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FColor                                      BloomTint;                                                // 0x0390(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bUseRayTracedDistanceFieldShadows;                        // 0x0394(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x3];                                       // 0x0395(0x0003) MISSED OFFSET
	float                                              RayStartOffsetDepthScale;                                 // 0x0398(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x74];                                      // 0x039C(0x0074) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.LightComponent"));
		return ptr;
	}


	void SetVolumetricScatteringIntensity(float NewIntensity);//Offset:Discovery.exe+0x57D7F80
	void SetUseTemperature(bool bNewValue);//Offset:Discovery.exe+0x57D7D50
	void SetUseIESBrightness(bool bNewValue);//Offset:Discovery.exe+0x57D74A0
	void SetTransmission(bool bNewValue);//Offset:Discovery.exe+0x57D78F0
	void SetTemperature(float NewTemperature);//Offset:Discovery.exe+0x57D7DF0
	void SetSpecularScale(float NewValue);//Offset:Discovery.exe+0x57D7220
	void SetShadowSlopeBias(float NewValue);//Offset:Discovery.exe+0x57D72C0
	void SetShadowBias(float NewValue);//Offset:Discovery.exe+0x57D7360
	void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2);//Offset:Discovery.exe+0x57D7040
	void SetLightFunctionScale(const struct FVector& NewLightFunctionScale);//Offset:Discovery.exe+0x57D7C10
	void SetLightFunctionMaterial(class UMaterialInterface* NewLightFunctionMaterial);//Offset:Discovery.exe+0x57D7CB0
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);//Offset:Discovery.exe+0x57D7B70
	void SetLightFunctionDisabledBrightness(float NewValue);//Offset:Discovery.exe+0x57D7AD0
	void SetLightColor(const struct FLinearColor& NewLightColor, bool bSRGB);//Offset:Discovery.exe+0x57D7E90
	void SetIntensity(float NewIntensity);//Offset:Discovery.exe+0x57D80C0
	void SetIndirectLightingIntensity(float NewIntensity);//Offset:Discovery.exe+0x57D8020
	void SetIESTexture(class UTextureLightProfile* NewValue);//Offset:Discovery.exe+0x57D7540
	void SetIESBrightnessScale(float NewValue);//Offset:Discovery.exe+0x57D7400
	void SetForceCachedShadowsForMovablePrimitives(bool bNewValue);//Offset:Discovery.exe+0x57D7180
	void SetEnableLightShaftBloom(bool bNewValue);//Offset:Discovery.exe+0x57D7850
	void SetBloomTint(const struct FColor& NewValue);//Offset:Discovery.exe+0x57D75E0
	void SetBloomThreshold(float NewValue);//Offset:Discovery.exe+0x57D7710
	void SetBloomScale(float NewValue);//Offset:Discovery.exe+0x57D77B0
	void SetBloomMaxBrightness(float NewValue);//Offset:Discovery.exe+0x57D7670
	void SetAffectTranslucentLighting(bool bNewValue);//Offset:Discovery.exe+0x57D7990
	void SetAffectDynamicIndirectLighting(bool bNewValue);//Offset:Discovery.exe+0x57D7A30
};


// Class Engine.DirectionalLightComponent
// 0x00D0 (0x04E0 - 0x0410)
class UDirectionalLightComponent : public ULightComponent
{
public:
	float                                              ShadowCascadeBiasDistribution;                            // 0x0410(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bEnableLightShaftOcclusion : 1;                           // 0x0414(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0415(0x0003) MISSED OFFSET
	float                                              OcclusionMaskDarkness;                                    // 0x0418(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              OcclusionDepthRange;                                      // 0x041C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector                                     LightShaftOverrideDirection;                              // 0x0420(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              WholeSceneDynamicShadowRadius;                            // 0x0438(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              DynamicShadowDistanceMovableLight;                        // 0x043C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              DynamicShadowDistanceStationaryLight;                     // 0x0440(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                DynamicShadowCascades;                                    // 0x0444(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              CascadeDistributionExponent;                              // 0x0448(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              CascadeTransitionFraction;                                // 0x044C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ShadowDistanceFadeoutFraction;                            // 0x0450(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUseInsetShadowsForMovableObjects : 1;                    // 0x0454(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0455(0x0003) MISSED OFFSET
	int                                                FarShadowCascadeCount;                                    // 0x0458(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              FarShadowDistance;                                        // 0x045C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              DistanceFieldShadowDistance;                              // 0x0460(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              LightSourceAngle;                                         // 0x0464(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              LightSourceSoftAngle;                                     // 0x0468(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ShadowSourceAngleFactor;                                  // 0x046C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              TraceDistance;                                            // 0x0470(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUsedAsAtmosphereSunLight : 1;                            // 0x0474(0x0001) (Deprecated)
	unsigned char                                      bAtmosphereSunLight : 1;                                  // 0x0474(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0475(0x0003) MISSED OFFSET
	int                                                AtmosphereSunLightIndex;                                  // 0x0478(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                AtmosphereSunDiskColorScale;                              // 0x047C(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bPerPixelAtmosphereTransmittance : 1;                     // 0x048C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bCastShadowsOnClouds : 1;                                 // 0x048C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bCastShadowsOnAtmosphere : 1;                             // 0x048C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bCastCloudShadows : 1;                                    // 0x048C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData03[0x3];                                       // 0x048D(0x0003) MISSED OFFSET
	float                                              CloudShadowStrength;                                      // 0x0490(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              CloudShadowOnAtmosphereStrength;                          // 0x0494(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              CloudShadowOnSurfaceStrength;                             // 0x0498(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              CloudShadowDepthBias;                                     // 0x049C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              CloudShadowExtent;                                        // 0x04A0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              CloudShadowMapResolutionScale;                            // 0x04A4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              CloudShadowRaySampleCountScale;                           // 0x04A8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                CloudScatteredLuminanceScale;                             // 0x04AC(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FLightmassDirectionalLightSettings          LightmassSettings;                                        // 0x04BC(0x0010) (Edit)
	unsigned char                                      bCastModulatedShadows : 1;                                // 0x04CC(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData04[0x3];                                       // 0x04CD(0x0003) MISSED OFFSET
	struct FColor                                      ModulatedShadowColor;                                     // 0x04D0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ShadowAmount;                                             // 0x04D4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x8];                                       // 0x04D8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.DirectionalLightComponent"));
		return ptr;
	}


	void SetShadowSourceAngleFactor(float NewValue);//Offset:Discovery.exe+0x56EF310
	void SetShadowDistanceFadeoutFraction(float NewValue);//Offset:Discovery.exe+0x56EF810
	void SetShadowCascadeBiasDistribution(float NewValue);//Offset:Discovery.exe+0x56EF770
	void SetShadowAmount(float NewValue);//Offset:Discovery.exe+0x56EF270
	void SetOcclusionMaskDarkness(float NewValue);//Offset:Discovery.exe+0x56EF630
	void SetOcclusionDepthRange(float NewValue);//Offset:Discovery.exe+0x56EF590
	void SetLightSourceSoftAngle(float NewValue);//Offset:Discovery.exe+0x56EF3B0
	void SetLightSourceAngle(float NewValue);//Offset:Discovery.exe+0x56EF450
	void SetLightShaftOverrideDirection(const struct FVector& NewValue);//Offset:Discovery.exe+0x56EF4F0
	void SetEnableLightShaftOcclusion(bool bNewValue);//Offset:Discovery.exe+0x56EF6D0
	void SetDynamicShadowDistanceStationaryLight(float NewValue);//Offset:Discovery.exe+0x56EFA90
	void SetDynamicShadowDistanceMovableLight(float NewValue);//Offset:Discovery.exe+0x56EFB30
	void SetDynamicShadowCascades(int NewValue);//Offset:Discovery.exe+0x56EF9F0
	void SetCascadeTransitionFraction(float NewValue);//Offset:Discovery.exe+0x56EF8B0
	void SetCascadeDistributionExponent(float NewValue);//Offset:Discovery.exe+0x56EF950
	void SetAtmosphereSunLightIndex(int NewValue);//Offset:Discovery.exe+0x56EF130
	void SetAtmosphereSunLight(bool bNewValue);//Offset:Discovery.exe+0x56EF1D0
};


// Class Engine.Distribution
// 0x0008 (0x0030 - 0x0028)
class UDistribution : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.Distribution"));
		return ptr;
	}

};


// Class Engine.DistributionFloat
// 0x0008 (0x0038 - 0x0030)
class UDistributionFloat : public UDistribution
{
public:
	unsigned char                                      bCanBeBaked : 1;                                          // 0x0030(0x0001) (Edit)
	unsigned char                                      UnknownData00 : 1;                                        // 0x0030(0x0001)
	unsigned char                                      bBakedDataSuccesfully : 1;                                // 0x0030(0x0001)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0031(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.DistributionFloat"));
		return ptr;
	}

};


// Class Engine.DistributionFloatConstant
// 0x0008 (0x0040 - 0x0038)
class UDistributionFloatConstant : public UDistributionFloat
{
public:
	float                                              Constant;                                                 // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x003C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.DistributionFloatConstant"));
		return ptr;
	}

};


// Class Engine.DistributionFloatConstantCurve
// 0x0018 (0x0050 - 0x0038)
class UDistributionFloatConstantCurve : public UDistributionFloat
{
public:
	struct FInterpCurveFloat                           ConstantCurve;                                            // 0x0038(0x0018) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.DistributionFloatConstantCurve"));
		return ptr;
	}

};


// Class Engine.DistributionFloatParameterBase
// 0x0020 (0x0060 - 0x0040)
class UDistributionFloatParameterBase : public UDistributionFloatConstant
{
public:
	struct FName                                       ParameterName;                                            // 0x0040(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MinInput;                                                 // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxInput;                                                 // 0x004C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MinOutput;                                                // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxOutput;                                                // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EDistributionParamMode>                ParamMode;                                                // 0x0058(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0059(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.DistributionFloatParameterBase"));
		return ptr;
	}

};


// Class Engine.DistributionFloatParticleParameter
// 0x0000 (0x0060 - 0x0060)
class UDistributionFloatParticleParameter : public UDistributionFloatParameterBase
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.DistributionFloatParticleParameter"));
		return ptr;
	}

};


// Class Engine.DistributionFloatUniform
// 0x0008 (0x0040 - 0x0038)
class UDistributionFloatUniform : public UDistributionFloat
{
public:
	float                                              Min;                                                      // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Max;                                                      // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.DistributionFloatUniform"));
		return ptr;
	}

};


// Class Engine.DistributionFloatUniformCurve
// 0x0018 (0x0050 - 0x0038)
class UDistributionFloatUniformCurve : public UDistributionFloat
{
public:
	struct FInterpCurveVector2D                        ConstantCurve;                                            // 0x0038(0x0018) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.DistributionFloatUniformCurve"));
		return ptr;
	}

};


// Class Engine.DistributionVector
// 0x0008 (0x0038 - 0x0030)
class UDistributionVector : public UDistribution
{
public:
	unsigned char                                      bCanBeBaked : 1;                                          // 0x0030(0x0001) (Edit)
	unsigned char                                      bIsDirty : 1;                                             // 0x0030(0x0001)
	unsigned char                                      bBakedDataSuccesfully : 1;                                // 0x0030(0x0001)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0031(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.DistributionVector"));
		return ptr;
	}

};


// Class Engine.DistributionVectorConstant
// 0x0020 (0x0058 - 0x0038)
class UDistributionVectorConstant : public UDistributionVector
{
public:
	struct FVector                                     Constant;                                                 // 0x0038(0x0018) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bLockAxes : 1;                                            // 0x0050(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0051(0x0003) MISSED OFFSET
	TEnumAsByte<EDistributionVectorLockFlags>          LockedAxes;                                               // 0x0054(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0055(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.DistributionVectorConstant"));
		return ptr;
	}

};


// Class Engine.DistributionVectorConstantCurve
// 0x0020 (0x0058 - 0x0038)
class UDistributionVectorConstantCurve : public UDistributionVector
{
public:
	struct FInterpCurveVector                          ConstantCurve;                                            // 0x0038(0x0018) (Edit, ZeroConstructor)
	unsigned char                                      bLockAxes : 1;                                            // 0x0050(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0051(0x0003) MISSED OFFSET
	TEnumAsByte<EDistributionVectorLockFlags>          LockedAxes;                                               // 0x0054(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0055(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.DistributionVectorConstantCurve"));
		return ptr;
	}

};


// Class Engine.DistributionVectorParameterBase
// 0x0070 (0x00C8 - 0x0058)
class UDistributionVectorParameterBase : public UDistributionVectorConstant
{
public:
	struct FName                                       ParameterName;                                            // 0x0058(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector                                     MinInput;                                                 // 0x0060(0x0018) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector                                     MaxInput;                                                 // 0x0078(0x0018) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector                                     MinOutput;                                                // 0x0090(0x0018) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector                                     MaxOutput;                                                // 0x00A8(0x0018) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EDistributionParamMode>                ParamModes[0x3];                                          // 0x00C0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x5];                                       // 0x00C3(0x0005) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.DistributionVectorParameterBase"));
		return ptr;
	}

};


// Class Engine.DistributionVectorParticleParameter
// 0x0000 (0x00C8 - 0x00C8)
class UDistributionVectorParticleParameter : public UDistributionVectorParameterBase
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.DistributionVectorParticleParameter"));
		return ptr;
	}

};


// Class Engine.DistributionVectorUniform
// 0x0040 (0x0078 - 0x0038)
class UDistributionVectorUniform : public UDistributionVector
{
public:
	struct FVector                                     Max;                                                      // 0x0038(0x0018) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector                                     Min;                                                      // 0x0050(0x0018) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bLockAxes : 1;                                            // 0x0068(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0069(0x0003) MISSED OFFSET
	TEnumAsByte<EDistributionVectorLockFlags>          LockedAxes;                                               // 0x006C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EDistributionVectorMirrorFlags>        MirrorFlags[0x3];                                         // 0x006D(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUseExtremes : 1;                                         // 0x0070(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0071(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.DistributionVectorUniform"));
		return ptr;
	}

};


// Class Engine.DistributionVectorUniformCurve
// 0x0028 (0x0060 - 0x0038)
class UDistributionVectorUniformCurve : public UDistributionVector
{
public:
	struct FInterpCurveTwoVectors                      ConstantCurve;                                            // 0x0038(0x0018) (Edit, ZeroConstructor)
	unsigned char                                      bLockAxes1 : 1;                                           // 0x0050(0x0001)
	unsigned char                                      bLockAxes2 : 1;                                           // 0x0050(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0051(0x0003) MISSED OFFSET
	TEnumAsByte<EDistributionVectorLockFlags>          LockedAxes[0x2];                                          // 0x0054(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EDistributionVectorMirrorFlags>        MirrorFlags[0x3];                                         // 0x0056(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0059(0x0003) MISSED OFFSET
	unsigned char                                      bUseExtremes : 1;                                         // 0x005C(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x3];                                       // 0x005D(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.DistributionVectorUniformCurve"));
		return ptr;
	}

};


// Class Engine.DocumentationActor
// 0x0008 (0x02D0 - 0x02C8)
class ADocumentationActor : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x02C8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.DocumentationActor"));
		return ptr;
	}

};


// Class Engine.DPICustomScalingRule
// 0x0000 (0x0028 - 0x0028)
class UDPICustomScalingRule : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.DPICustomScalingRule"));
		return ptr;
	}

};


// Class Engine.DrawFrustumComponent
// 0x0020 (0x05B0 - 0x0590)
class UDrawFrustumComponent : public UPrimitiveComponent
{
public:
	bool                                               bFrustumEnabled;                                          // 0x0590(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0591(0x0003) MISSED OFFSET
	struct FColor                                      FrustumColor;                                             // 0x0594(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FrustumAngle;                                             // 0x0598(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FrustumAspectRatio;                                       // 0x059C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FrustumStartDist;                                         // 0x05A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FrustumEndDist;                                           // 0x05A4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UTexture*                                    Texture;                                                  // 0x05A8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.DrawFrustumComponent"));
		return ptr;
	}

};


// Class Engine.SphereComponent
// 0x0000 (0x05B0 - 0x05B0)
class USphereComponent : public UShapeComponent
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SphereComponent"));
		return ptr;
	}


	void SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps);//Offset:Discovery.exe+0x5884FA0
	float GetUnscaledSphereRadius();//Offset:Discovery.exe+0x56C4250
	float GetShapeScale();//Offset:Discovery.exe+0x56C3EF0
	float GetScaledSphereRadius();//Offset:Discovery.exe+0x5884F00
};


// Class Engine.DrawSphereComponent
// 0x0000 (0x05B0 - 0x05B0)
class UDrawSphereComponent : public USphereComponent
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.DrawSphereComponent"));
		return ptr;
	}

};


// Class Engine.GraphNodeContextMenuContext
// 0x0028 (0x0050 - 0x0028)
class UGraphNodeContextMenuContext : public UObject
{
public:
	class UBlueprint*                                  Blueprint;                                                // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData)
	class UEdGraph*                                    Graph;                                                    // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData)
	class UEdGraphNode*                                Node;                                                     // 0x0038(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0040(0x0008) MISSED OFFSET
	bool                                               bIsDebugging;                                             // 0x0048(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0049(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.GraphNodeContextMenuContext"));
		return ptr;
	}

};


// Class Engine.EdGraphNode
// 0x0070 (0x0098 - 0x0028)
class UEdGraphNode : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0028(0x0010) MISSED OFFSET
	TArray<class UEdGraphPin_Deprecated*>              DeprecatedPins;                                           // 0x0038(0x0010) (ZeroConstructor)
	int                                                NodePosX;                                                 // 0x0048(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                NodePosY;                                                 // 0x004C(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                NodeWidth;                                                // 0x0050(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                NodeHeight;                                               // 0x0054(0x0004) (ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ENodeAdvancedPins>                     AdvancedPinDisplay;                                       // 0x0058(0x0001) (ZeroConstructor, IsPlainOldData)
	enum class ENodeEnabledState                       EnabledState;                                             // 0x0059(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x005A(0x0001) MISSED OFFSET
	unsigned char                                      UnknownData02 : 1;                                        // 0x005B(0x0001)
	unsigned char                                      bDisplayAsDisabled : 1;                                   // 0x005B(0x0001)
	unsigned char                                      bUserSetEnabledState : 1;                                 // 0x005B(0x0001)
	unsigned char                                      UnknownData03 : 1;                                        // 0x005B(0x0001)
	unsigned char                                      bHasCompilerMessage : 1;                                  // 0x005B(0x0001)
	unsigned char                                      UnknownData04[0x4];                                       // 0x005C(0x0004) MISSED OFFSET
	struct FString                                     NodeComment;                                              // 0x0060(0x0010) (ZeroConstructor)
	int                                                ErrorType;                                                // 0x0070(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x0074(0x0004) MISSED OFFSET
	struct FString                                     ErrorMsg;                                                 // 0x0078(0x0010) (ZeroConstructor)
	struct FGuid                                       NodeGuid;                                                 // 0x0088(0x0010) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.EdGraphNode"));
		return ptr;
	}

};


// Class Engine.EdGraphNode_Documentation
// 0x0020 (0x00B8 - 0x0098)
class UEdGraphNode_Documentation : public UEdGraphNode
{
public:
	struct FString                                     Link;                                                     // 0x0098(0x0010) (ZeroConstructor)
	struct FString                                     Excerpt;                                                  // 0x00A8(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.EdGraphNode_Documentation"));
		return ptr;
	}

};


// Class Engine.EdGraphPin_Deprecated
// 0x00F0 (0x0118 - 0x0028)
class UEdGraphPin_Deprecated : public UObject
{
public:
	struct FString                                     PinName;                                                  // 0x0028(0x0010) (ZeroConstructor)
	struct FString                                     PinToolTip;                                               // 0x0038(0x0010) (ZeroConstructor)
	TEnumAsByte<EEdGraphPinDirection>                  Direction;                                                // 0x0048(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0049(0x0007) MISSED OFFSET
	struct FEdGraphPinType                             PinType;                                                  // 0x0050(0x0058)
	struct FString                                     DefaultValue;                                             // 0x00A8(0x0010) (ZeroConstructor)
	struct FString                                     AutogeneratedDefaultValue;                                // 0x00B8(0x0010) (ZeroConstructor)
	class UObject*                                     DefaultObject;                                            // 0x00C8(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FText                                       DefaultTextValue;                                         // 0x00D0(0x0018)
	TArray<class UEdGraphPin_Deprecated*>              LinkedTo;                                                 // 0x00E8(0x0010) (ZeroConstructor)
	TArray<class UEdGraphPin_Deprecated*>              SubPins;                                                  // 0x00F8(0x0010) (ZeroConstructor)
	class UEdGraphPin_Deprecated*                      ParentPin;                                                // 0x0108(0x0008) (ZeroConstructor, IsPlainOldData)
	class UEdGraphPin_Deprecated*                      ReferencePassThroughConnection;                           // 0x0110(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.EdGraphPin_Deprecated"));
		return ptr;
	}

};


// Class Engine.EdGraphSchema
// 0x0000 (0x0028 - 0x0028)
class UEdGraphSchema : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.EdGraphSchema"));
		return ptr;
	}

};


// Class Engine.Emitter
// 0x0050 (0x0318 - 0x02C8)
class AEmitter : public AActor
{
public:
	class UParticleSystemComponent*                    ParticleSystemComponent;                                  // 0x02C8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      bDestroyOnSystemFinish : 1;                               // 0x02D0(0x0001)
	unsigned char                                      bPostUpdateTickGroup : 1;                                 // 0x02D0(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bCurrentlyActive : 1;                                     // 0x02D0(0x0001) (Net)
	unsigned char                                      UnknownData00[0x7];                                       // 0x02D1(0x0007) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnParticleSpawn;                                          // 0x02D8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnParticleBurst;                                          // 0x02E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnParticleDeath;                                          // 0x02F8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnParticleCollide;                                        // 0x0308(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.Emitter"));
		return ptr;
	}


	void ToggleActive();//Offset:Discovery.exe+0x56F3CA0
	void SetVectorParameter(const struct FName& ParameterName, const struct FVector& Param);//Offset:Discovery.exe+0x56F3AA0
	void SetTemplate(class UParticleSystem* NewTemplate);//Offset:Discovery.exe+0x2116950
	void SetMaterialParameter(const struct FName& ParameterName, class UMaterialInterface* Param);//Offset:Discovery.exe+0x56F37F0
	void SetFloatParameter(const struct FName& ParameterName, float Param);//Offset:Discovery.exe+0x56F3B90
	void SetColorParameter(const struct FName& ParameterName, const struct FLinearColor& Param);//Offset:Discovery.exe+0x56F39B0
	void SetActorParameter(const struct FName& ParameterName, class AActor* Param);//Offset:Discovery.exe+0x56F38D0
	void OnRep_bCurrentlyActive();//Offset:Discovery.exe+0x1462470
	void OnParticleSystemFinished(class UParticleSystemComponent* FinishedComponent);//Offset:Discovery.exe+0x56F3D00
	bool IsActive();//Offset:Discovery.exe+0x56F3C70
	void Deactivate();//Offset:Discovery.exe+0x56F3CC0
	void Activate();//Offset:Discovery.exe+0x56F3CE0
};


// Class Engine.EmitterCameraLensEffectBase
// 0x0098 (0x03B0 - 0x0318)
class AEmitterCameraLensEffectBase : public AEmitter
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0318(0x0008) MISSED OFFSET
	class UParticleSystem*                             PS_CameraEffect;                                          // 0x0320(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class APlayerCameraManager*                        BaseCamera;                                               // 0x0328(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FTransform                                  RelativeTransform;                                        // 0x0330(0x0060) (Edit, DisableEditOnInstance, IsPlainOldData)
	float                                              BaseFOV;                                                  // 0x0390(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      bAllowMultipleInstances : 1;                              // 0x0394(0x0001) (Edit)
	unsigned char                                      bResetWhenRetriggered : 1;                                // 0x0394(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0395(0x0003) MISSED OFFSET
	TArray<class UClass*>                              EmittersToTreatAsSame;                                    // 0x0398(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              DistFromCamera;                                           // 0x03A8(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x03AC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.EmitterCameraLensEffectBase"));
		return ptr;
	}

};


// Class Engine.ViewModeUtils
// 0x0000 (0x0028 - 0x0028)
class UViewModeUtils : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ViewModeUtils"));
		return ptr;
	}

};


// Class Engine.EngineBaseTypes
// 0x0000 (0x0028 - 0x0028)
class UEngineBaseTypes : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.EngineBaseTypes"));
		return ptr;
	}

};


// Class Engine.EngineElementsLibrary
// 0x0000 (0x0028 - 0x0028)
class UEngineElementsLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.EngineElementsLibrary"));
		return ptr;
	}

};


// Class Engine.EngineHandlerComponentFactory
// 0x0000 (0x0028 - 0x0028)
class UEngineHandlerComponentFactory : public UHandlerComponentFactory
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.EngineHandlerComponentFactory"));
		return ptr;
	}

};


// Class Engine.LocalMessage
// 0x0000 (0x0028 - 0x0028)
class ULocalMessage : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.LocalMessage"));
		return ptr;
	}

};


// Class Engine.EngineMessage
// 0x0080 (0x00A8 - 0x0028)
class UEngineMessage : public ULocalMessage
{
public:
	struct FString                                     FailedPlaceMessage;                                       // 0x0028(0x0010) (ZeroConstructor)
	struct FString                                     MaxedOutMessage;                                          // 0x0038(0x0010) (ZeroConstructor)
	struct FString                                     EnteredMessage;                                           // 0x0048(0x0010) (ZeroConstructor)
	struct FString                                     LeftMessage;                                              // 0x0058(0x0010) (ZeroConstructor)
	struct FString                                     GlobalNameChange;                                         // 0x0068(0x0010) (ZeroConstructor)
	struct FString                                     SpecEnteredMessage;                                       // 0x0078(0x0010) (ZeroConstructor)
	struct FString                                     NewPlayerMessage;                                         // 0x0088(0x0010) (ZeroConstructor)
	struct FString                                     NewSpecMessage;                                           // 0x0098(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.EngineMessage"));
		return ptr;
	}

};


// Class Engine.EngineTypes
// 0x0000 (0x0028 - 0x0028)
class UEngineTypes : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.EngineTypes"));
		return ptr;
	}

};


// Class Engine.ExponentialHeightFog
// 0x0010 (0x02D8 - 0x02C8)
class AExponentialHeightFog : public AInfo
{
public:
	class UExponentialHeightFogComponent*              Component;                                                // 0x02C8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      bEnabled : 1;                                             // 0x02D0(0x0001) (Net)
	unsigned char                                      UnknownData00[0x7];                                       // 0x02D1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ExponentialHeightFog"));
		return ptr;
	}


	void OnRep_bEnabled();//Offset:Discovery.exe+0x19BFD70
};


// Class Engine.ExponentialHeightFogComponent
// 0x0120 (0x03F0 - 0x02D0)
class UExponentialHeightFogComponent : public USceneComponent
{
public:
	float                                              FogDensity;                                               // 0x02D0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              FogHeightFalloff;                                         // 0x02D4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FExponentialHeightFogData                   SecondFogData;                                            // 0x02D8(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FLinearColor                                FogInscatteringColor;                                     // 0x02E4(0x0010) (ZeroConstructor, Deprecated, IsPlainOldData)
	struct FLinearColor                                FogInscatteringLuminance;                                 // 0x02F4(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0304(0x0004) MISSED OFFSET
	class UTextureCube*                                InscatteringColorCubemap;                                 // 0x0308(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              InscatteringColorCubemapAngle;                            // 0x0310(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                InscatteringTextureTint;                                  // 0x0314(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              FullyDirectionalInscatteringColorDistance;                // 0x0324(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              NonDirectionalInscatteringColorDistance;                  // 0x0328(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bUseBoxProjectedCubemap;                                  // 0x032C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x032D(0x0003) MISSED OFFSET
	struct FVector                                     BoxProjectedCubemapOrigin;                                // 0x0330(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector                                     BoxProjectedCubemapExtents;                               // 0x0348(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              DirectionalInscatteringExponent;                          // 0x0360(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              DirectionalInscatteringStartDistance;                     // 0x0364(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                DirectionalInscatteringColor;                             // 0x0368(0x0010) (ZeroConstructor, Deprecated, IsPlainOldData)
	struct FLinearColor                                DirectionalInscatteringLuminance;                         // 0x0378(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              FogMaxOpacity;                                            // 0x0388(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              StartDistance;                                            // 0x038C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              FogCutoffDistance;                                        // 0x0390(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bEnableVolumetricFog;                                     // 0x0394(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0395(0x0003) MISSED OFFSET
	float                                              VolumetricFogScatteringDistribution;                      // 0x0398(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FColor                                      VolumetricFogAlbedo;                                      // 0x039C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                VolumetricFogEmissive;                                    // 0x03A0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              VolumetricFogExtinctionScale;                             // 0x03B0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              VolumetricFogDistance;                                    // 0x03B4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              VolumetricFogStaticLightingScatteringIntensity;           // 0x03B8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bOverrideLightColorsWithFogInscatteringColors;            // 0x03BC(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x03BD(0x0003) MISSED OFFSET
	struct FWorldHeightFogData                         WorldHeightFogData;                                       // 0x03C0(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData04[0x8];                                       // 0x03E8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ExponentialHeightFogComponent"));
		return ptr;
	}


	void SetVolumetricFogScatteringDistribution(float NewValue);//Offset:Discovery.exe+0x56FD070
	void SetVolumetricFogExtinctionScale(float NewValue);//Offset:Discovery.exe+0x56FCFD0
	void SetVolumetricFogEmissive(const struct FLinearColor& NewValue);//Offset:Discovery.exe+0x56FCEA0
	void SetVolumetricFogDistance(float NewValue);//Offset:Discovery.exe+0x56FCE00
	void SetVolumetricFogAlbedo(const struct FColor& NewValue);//Offset:Discovery.exe+0x56FCF40
	void SetVolumetricFog(bool bNewValue);//Offset:Discovery.exe+0x56FD110
	void SetStartDistance(float Value);//Offset:Discovery.exe+0x56FD250
	void SetNonDirectionalInscatteringColorDistance(float Value);//Offset:Discovery.exe+0x56FD6B0
	void SetInscatteringTextureTint(const struct FLinearColor& Value);//Offset:Discovery.exe+0x56FD610
	void SetInscatteringColorCubemapAngle(float Value);//Offset:Discovery.exe+0x56FD7F0
	void SetInscatteringColorCubemap(class UTextureCube* Value);//Offset:Discovery.exe+0x56FD890
	void SetFullyDirectionalInscatteringColorDistance(float Value);//Offset:Discovery.exe+0x56FD750
	void SetFogMaxOpacity(float Value);//Offset:Discovery.exe+0x56FD2F0
	void SetFogInscatteringColor(const struct FLinearColor& Value);//Offset:Discovery.exe+0x56FD930
	void SetFogHeightFalloff(float Value);//Offset:Discovery.exe+0x56FD390
	void SetFogDensity(float Value);//Offset:Discovery.exe+0x56FD9D0
	void SetFogCutoffDistance(float Value);//Offset:Discovery.exe+0x56FD1B0
	void SetDirectionalInscatteringStartDistance(float Value);//Offset:Discovery.exe+0x56FD4D0
	void SetDirectionalInscatteringExponent(float Value);//Offset:Discovery.exe+0x56FD570
	void SetDirectionalInscatteringColor(const struct FLinearColor& Value);//Offset:Discovery.exe+0x56FD430
};


// Class Engine.Exporter
// 0x0050 (0x0078 - 0x0028)
class UExporter : public UObject
{
public:
	class UClass*                                      SupportedClass;                                           // 0x0028(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UObject*                                     ExportRootScope;                                          // 0x0030(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TArray<struct FString>                             FormatExtension;                                          // 0x0038(0x0010) (BlueprintVisible, ZeroConstructor)
	TArray<struct FString>                             FormatDescription;                                        // 0x0048(0x0010) (BlueprintVisible, ZeroConstructor)
	int                                                PreferredFormatIndex;                                     // 0x0058(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                TextIndent;                                               // 0x005C(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bText : 1;                                                // 0x0060(0x0001) (BlueprintVisible)
	unsigned char                                      bSelectedOnly : 1;                                        // 0x0060(0x0001)
	unsigned char                                      bForceFileOperations : 1;                                 // 0x0060(0x0001)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0061(0x0007) MISSED OFFSET
	class UAssetExportTask*                            ExportTask;                                               // 0x0068(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0070(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.Exporter"));
		return ptr;
	}


	bool ScriptRunAssetExportTask(class UAssetExportTask* Task);//Offset:Discovery.exe+0x327F8B0
	bool STATIC_RunAssetExportTasks(TArray<class UAssetExportTask*> ExportTasks);//Offset:Discovery.exe+0x56FE620
	bool STATIC_RunAssetExportTask(class UAssetExportTask* Task);//Offset:Discovery.exe+0x243B240
};


// Class Engine.FloatingPawnMovement
// 0x0018 (0x0180 - 0x0168)
class UFloatingPawnMovement : public UPawnMovementComponent
{
public:
	float                                              MaxSpeed;                                                 // 0x0168(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Acceleration;                                             // 0x016C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Deceleration;                                             // 0x0170(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TurningBoost;                                             // 0x0174(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bPositionCorrected : 1;                                   // 0x0178(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0179(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.FloatingPawnMovement"));
		return ptr;
	}

};


// Class Engine.Font
// 0x01A8 (0x01D0 - 0x0028)
class UFont : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	enum class EFontCacheType                          FontCacheType;                                            // 0x0030(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0031(0x0007) MISSED OFFSET
	TArray<struct FFontCharacter>                      Characters;                                               // 0x0038(0x0010) (Edit, ZeroConstructor)
	TArray<class UTexture2D*>                          Textures;                                                 // 0x0048(0x0010) (ZeroConstructor)
	int                                                IsRemapped;                                               // 0x0058(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              EmScale;                                                  // 0x005C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Ascent;                                                   // 0x0060(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Descent;                                                  // 0x0064(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Leading;                                                  // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                Kerning;                                                  // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FFontImportOptionsData                      ImportOptions;                                            // 0x0070(0x00B0) (Edit)
	int                                                NumCharacters;                                            // 0x0120(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0124(0x0004) MISSED OFFSET
	TArray<int>                                        MaxCharHeight;                                            // 0x0128(0x0010) (ZeroConstructor, Transient)
	float                                              ScalingFactor;                                            // 0x0138(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                LegacyFontSize;                                           // 0x013C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FName                                       LegacyFontName;                                           // 0x0140(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FCompositeFont                              CompositeFont;                                            // 0x0148(0x0038)
	unsigned char                                      UnknownData03[0x50];                                      // 0x0180(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.Font"));
		return ptr;
	}

};


// Class Engine.FontFace
// 0x0030 (0x0058 - 0x0028)
class UFontFace : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	struct FString                                     SourceFilename;                                           // 0x0030(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	enum class EFontHinting                            Hinting;                                                  // 0x0040(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	enum class EFontLoadingPolicy                      LoadingPolicy;                                            // 0x0041(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	enum class EFontLayoutMethod                       LayoutMethod;                                             // 0x0042(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x15];                                      // 0x0043(0x0015) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.FontFace"));
		return ptr;
	}

};


// Class Engine.FontImportOptions
// 0x00B0 (0x00D8 - 0x0028)
class UFontImportOptions : public UObject
{
public:
	struct FFontImportOptionsData                      Data;                                                     // 0x0028(0x00B0) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.FontImportOptions"));
		return ptr;
	}

};


// Class Engine.ForceFeedbackAttenuation
// 0x00C8 (0x00F0 - 0x0028)
class UForceFeedbackAttenuation : public UObject
{
public:
	struct FForceFeedbackAttenuationSettings           Attenuation;                                              // 0x0028(0x00C8) (Edit, BlueprintVisible, BlueprintReadOnly)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ForceFeedbackAttenuation"));
		return ptr;
	}

};


// Class Engine.ForceFeedbackComponent
// 0x0100 (0x03D0 - 0x02D0)
class UForceFeedbackComponent : public USceneComponent
{
public:
	class UForceFeedbackEffect*                        ForceFeedbackEffect;                                      // 0x02D0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bAutoDestroy : 1;                                         // 0x02D8(0x0001)
	unsigned char                                      bStopWhenOwnerDestroyed : 1;                              // 0x02D8(0x0001)
	unsigned char                                      bLooping : 1;                                             // 0x02D8(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bIgnoreTimeDilation : 1;                                  // 0x02D8(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bOverrideAttenuation : 1;                                 // 0x02D8(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x3];                                       // 0x02D9(0x0003) MISSED OFFSET
	float                                              IntensityMultiplier;                                      // 0x02DC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UForceFeedbackAttenuation*                   AttenuationSettings;                                      // 0x02E0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FForceFeedbackAttenuationSettings           AttenuationOverrides;                                     // 0x02E8(0x00C8) (Edit, BlueprintVisible)
	struct FScriptMulticastDelegate                    OnForceFeedbackFinished;                                  // 0x03B0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData01[0x10];                                      // 0x03C0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ForceFeedbackComponent"));
		return ptr;
	}


	void Stop();//Offset:Discovery.exe+0x56FF780
	void SetIntensityMultiplier(float NewIntensityMultiplier);//Offset:Discovery.exe+0x56FF6E0
	void SetForceFeedbackEffect(class UForceFeedbackEffect* NewForceFeedbackEffect);//Offset:Discovery.exe+0x56FF7A0
	void Play(float StartTime);//Offset:Discovery.exe+0x4BFBB90
	bool BP_GetAttenuationSettingsToApply(struct FForceFeedbackAttenuationSettings* OutAttenuationSettings);//Offset:Discovery.exe+0x56FF4E0
	void AdjustAttenuation(const struct FForceFeedbackAttenuationSettings& InAttenuationSettings);//Offset:Discovery.exe+0x56FF5E0
};


// Class Engine.ForceFeedbackEffect
// 0x0018 (0x0040 - 0x0028)
class UForceFeedbackEffect : public UObject
{
public:
	TArray<struct FForceFeedbackChannelDetails>        ChannelDetails;                                           // 0x0028(0x0010) (Edit, ZeroConstructor)
	float                                              Duration;                                                 // 0x0038(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x003C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ForceFeedbackEffect"));
		return ptr;
	}

};


// Class Engine.GameNetworkManager
// 0x00B0 (0x0378 - 0x02C8)
class AGameNetworkManager : public AInfo
{
public:
	float                                              BadPacketLossThreshold;                                   // 0x02C8(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              SeverePacketLossThreshold;                                // 0x02CC(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	int                                                BadPingThreshold;                                         // 0x02D0(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	int                                                SeverePingThreshold;                                      // 0x02D4(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	int                                                AdjustedNetSpeed;                                         // 0x02D8(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              LastNetSpeedUpdateTime;                                   // 0x02DC(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                TotalNetBandwidth;                                        // 0x02E0(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	int                                                MinDynamicBandwidth;                                      // 0x02E4(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	int                                                MaxDynamicBandwidth;                                      // 0x02E8(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	unsigned char                                      bIsStandbyCheckingEnabled : 1;                            // 0x02EC(0x0001) (Config)
	unsigned char                                      bHasStandbyCheatTriggered : 1;                            // 0x02EC(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x02ED(0x0003) MISSED OFFSET
	float                                              StandbyRxCheatTime;                                       // 0x02F0(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              StandbyTxCheatTime;                                       // 0x02F4(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              PercentMissingForRxStandby;                               // 0x02F8(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              PercentMissingForTxStandby;                               // 0x02FC(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              PercentForBadPing;                                        // 0x0300(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              JoinInProgressStandbyWaitTime;                            // 0x0304(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              MoveRepSize;                                              // 0x0308(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              MAXPOSITIONERRORSQUARED;                                  // 0x030C(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              MAXNEARZEROVELOCITYSQUARED;                               // 0x0310(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              CLIENTADJUSTUPDATECOST;                                   // 0x0314(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              MAXCLIENTUPDATEINTERVAL;                                  // 0x0318(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              MaxClientForcedUpdateDuration;                            // 0x031C(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              ServerForcedUpdateHitchThreshold;                         // 0x0320(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              ServerForcedUpdateHitchCooldown;                          // 0x0324(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              MaxMoveDeltaTime;                                         // 0x0328(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              MaxClientSmoothingDeltaTime;                              // 0x032C(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              ClientNetSendMoveDeltaTime;                               // 0x0330(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              ClientNetSendMoveDeltaTimeThrottled;                      // 0x0334(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              ClientNetSendMoveDeltaTimeStationary;                     // 0x0338(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	int                                                ClientNetSendMoveThrottleAtNetSpeed;                      // 0x033C(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	int                                                ClientNetSendMoveThrottleOverPlayerCount;                 // 0x0340(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	bool                                               ClientAuthorativePosition;                                // 0x0344(0x0001) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0345(0x0003) MISSED OFFSET
	float                                              ClientErrorUpdateRateLimit;                               // 0x0348(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              ClientNetCamUpdateDeltaTime;                              // 0x034C(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              ClientNetCamUpdatePositionLimit;                          // 0x0350(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	bool                                               bMovementTimeDiscrepancyDetection;                        // 0x0354(0x0001) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	bool                                               bMovementTimeDiscrepancyResolution;                       // 0x0355(0x0001) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x0356(0x0002) MISSED OFFSET
	float                                              MovementTimeDiscrepancyMaxTimeMargin;                     // 0x0358(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              MovementTimeDiscrepancyMinTimeMargin;                     // 0x035C(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              MovementTimeDiscrepancyResolutionRate;                    // 0x0360(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              MovementTimeDiscrepancyDriftAllowance;                    // 0x0364(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	bool                                               bMovementTimeDiscrepancyForceCorrectionsDuringResolution; // 0x0368(0x0001) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	bool                                               bUseDistanceBasedRelevancy;                               // 0x0369(0x0001) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	unsigned char                                      UnknownData03[0xE];                                       // 0x036A(0x000E) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.GameNetworkManager"));
		return ptr;
	}

};


// Class Engine.GameplayStatics
// 0x0000 (0x0028 - 0x0028)
class UGameplayStatics : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.GameplayStatics"));
		return ptr;
	}


	void STATIC_UnRetainAllSoundsInSoundClass(class USoundClass* InSoundClass);//Offset:Discovery.exe+0x570A0C0
	void STATIC_UnloadStreamLevelBySoftObjectPtr(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, bool bShouldBlockOnUnload);//Offset:Discovery.exe+0x5710600
	void STATIC_UnloadStreamLevel(class UObject* WorldContextObject, const struct FName& LevelName, const struct FLatentActionInfo& LatentInfo, bool bShouldBlockOnUnload);//Offset:Discovery.exe+0x57108A0
	bool STATIC_SuggestProjectileVelocity_CustomArc(class UObject* WorldContextObject, const struct FVector& StartPos, const struct FVector& EndPos, float OverrideGravityZ, float ArcParam, struct FVector* OutLaunchVelocity);//Offset:Discovery.exe+0x5705810
	class UAudioComponent* STATIC_SpawnSoundAttached(class USoundBase* Sound, class USceneComponent* AttachToComponent, const struct FName& AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, TEnumAsByte<EAttachLocation> LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, class USoundConcurrency* ConcurrencySettings, bool bAutoDestroy);//Offset:Discovery.exe+0x570BE90
	class UAudioComponent* STATIC_SpawnSoundAtLocation(class UObject* WorldContextObject, class USoundBase* Sound, const struct FVector& Location, const struct FRotator& Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, class USoundConcurrency* ConcurrencySettings, bool bAutoDestroy);//Offset:Discovery.exe+0x570C3B0
	class UAudioComponent* STATIC_SpawnSound2D(class UObject* WorldContextObject, class USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundConcurrency* ConcurrencySettings, bool bPersistAcrossLevelTransition, bool bAutoDestroy);//Offset:Discovery.exe+0x570CEE0
	class UObject* STATIC_SpawnObject(class UClass* ObjectClass, class UObject* Outer);//Offset:Discovery.exe+0x5712B60
	class UForceFeedbackComponent* STATIC_SpawnForceFeedbackAttached(class UForceFeedbackEffect* ForceFeedbackEffect, class USceneComponent* AttachToComponent, const struct FName& AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, TEnumAsByte<EAttachLocation> LocationType, bool bStopWhenAttachedToDestroyed, bool bLooping, float IntensityMultiplier, float StartTime, class UForceFeedbackAttenuation* AttenuationSettings, bool bAutoDestroy);//Offset:Discovery.exe+0x570A410
	class UForceFeedbackComponent* STATIC_SpawnForceFeedbackAtLocation(class UObject* WorldContextObject, class UForceFeedbackEffect* ForceFeedbackEffect, const struct FVector& Location, const struct FRotator& Rotation, bool bLooping, float IntensityMultiplier, float StartTime, class UForceFeedbackAttenuation* AttenuationSettings, bool bAutoDestroy);//Offset:Discovery.exe+0x570A8D0
	class UParticleSystemComponent* STATIC_SpawnEmitterAttached(class UParticleSystem* EmitterTemplate, class USceneComponent* AttachToComponent, const struct FName& AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, const struct FVector& Scale, TEnumAsByte<EAttachLocation> LocationType, bool bAutoDestroy, enum class EPSCPoolMethod PoolingMethod, bool bAutoActivate);//Offset:Discovery.exe+0x570DD60
	class UParticleSystemComponent* STATIC_SpawnEmitterAtLocation(class UObject* WorldContextObject, class UParticleSystem* EmitterTemplate, const struct FVector& Location, const struct FRotator& Rotation, const struct FVector& Scale, bool bAutoDestroy, enum class EPSCPoolMethod PoolingMethod, bool bAutoActivateSystem);//Offset:Discovery.exe+0x570E170
	class UAudioComponent* STATIC_SpawnDialogueAttached(class UDialogueWave* Dialogue, const struct FDialogueContext& Context, class USceneComponent* AttachToComponent, const struct FName& AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, TEnumAsByte<EAttachLocation> LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, bool bAutoDestroy);//Offset:Discovery.exe+0x570AC80
	class UAudioComponent* STATIC_SpawnDialogueAtLocation(class UObject* WorldContextObject, class UDialogueWave* Dialogue, const struct FDialogueContext& Context, const struct FVector& Location, const struct FRotator& Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, bool bAutoDestroy);//Offset:Discovery.exe+0x570B1C0
	class UAudioComponent* STATIC_SpawnDialogue2D(class UObject* WorldContextObject, class UDialogueWave* Dialogue, const struct FDialogueContext& Context, float VolumeMultiplier, float PitchMultiplier, float StartTime, bool bAutoDestroy);//Offset:Discovery.exe+0x570B9B0
	class UDecalComponent* STATIC_SpawnDecalAttached(class UMaterialInterface* DecalMaterial, const struct FVector& DecalSize, class USceneComponent* AttachToComponent, const struct FName& AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, TEnumAsByte<EAttachLocation> LocationType, float LifeSpan);//Offset:Discovery.exe+0x5708F80
	class UDecalComponent* STATIC_SpawnDecalAtLocation(class UObject* WorldContextObject, class UMaterialInterface* DecalMaterial, const struct FVector& DecalSize, const struct FVector& Location, const struct FRotator& Rotation, float LifeSpan);//Offset:Discovery.exe+0x57092D0
	void STATIC_SetWorldOriginLocation(class UObject* WorldContextObject, const struct FIntVector& NewLocation);//Offset:Discovery.exe+0x5705670
	void STATIC_SetViewportMouseCaptureMode(class UObject* WorldContextObject, enum class EMouseCaptureMode MouseCaptureMode);//Offset:Discovery.exe+0x570F540
	void STATIC_SetSubtitlesEnabled(bool bEnabled);//Offset:Discovery.exe+0x570A380
	void STATIC_SetSoundMixClassOverride(class UObject* WorldContextObject, class USoundMix* InSoundMixModifier, class USoundClass* InSoundClass, float Volume, float Pitch, float FadeInTime, bool bApplyToChildren);//Offset:Discovery.exe+0x5709E50
	void STATIC_SetSoundClassDistanceScale(class UObject* WorldContextObject, class USoundClass* SoundClass, float DistanceAttenuationScale, float TimeSec);//Offset:Discovery.exe+0x570D7A0
	void STATIC_SetPlayerControllerID(class APlayerController* Player, int ControllerId);//Offset:Discovery.exe+0x5710F30
	void STATIC_SetMaxAudioChannelsScaled(class UObject* WorldContextObject, float MaxChannelCountScale);//Offset:Discovery.exe+0x5709610
	void STATIC_SetGlobalTimeDilation(class UObject* WorldContextObject, float TimeDilation);//Offset:Discovery.exe+0x570FB50
	void STATIC_SetGlobalPitchModulation(class UObject* WorldContextObject, float PitchModulation, float TimeSec);//Offset:Discovery.exe+0x570D910
	void STATIC_SetGlobalListenerFocusParameters(class UObject* WorldContextObject, float FocusAzimuthScale, float NonFocusAzimuthScale, float FocusDistanceScale, float NonFocusDistanceScale, float FocusVolumeScale, float NonFocusVolumeScale, float FocusPriorityScale, float NonFocusPriorityScale);//Offset:Discovery.exe+0x570D470
	bool STATIC_SetGamePaused(class UObject* WorldContextObject, bool bPaused);//Offset:Discovery.exe+0x570FA60
	void STATIC_SetForceDisableSplitscreen(class UObject* WorldContextObject, bool bDisable);//Offset:Discovery.exe+0x570F8E0
	void STATIC_SetEnableWorldRendering(class UObject* WorldContextObject, bool bEnable);//Offset:Discovery.exe+0x570F760
	void STATIC_SetBaseSoundMix(class UObject* WorldContextObject, class USoundMix* InSoundMix);//Offset:Discovery.exe+0x570A270
	bool STATIC_SaveGameToSlot(class USaveGame* SaveGameObject, const struct FString& SlotName, int UserIndex);//Offset:Discovery.exe+0x57078C0
	void STATIC_RemovePlayer(class APlayerController* Player, bool bDestroyPawn);//Offset:Discovery.exe+0x57110B0
	struct FVector STATIC_RebaseZeroOriginOntoLocal(class UObject* WorldContextObject, const struct FVector& WorldLocation);//Offset:Discovery.exe+0x5705470
	struct FVector STATIC_RebaseLocalOriginOntoZero(class UObject* WorldContextObject, const struct FVector& WorldLocation);//Offset:Discovery.exe+0x5705570
	void STATIC_PushSoundMixModifier(class UObject* WorldContextObject, class USoundMix* InSoundMixModifier);//Offset:Discovery.exe+0x5709C00
	bool STATIC_ProjectWorldToScreen(class APlayerController* Player, const struct FVector& WorldPosition, bool bPlayerViewportRelative, struct FVector2D* ScreenPosition);//Offset:Discovery.exe+0x5704FC0
	void STATIC_PrimeSound(class USoundBase* InSound);//Offset:Discovery.exe+0x570A1E0
	void STATIC_PrimeAllSoundsInSoundClass(class USoundClass* InSoundClass);//Offset:Discovery.exe+0x570A150
	void STATIC_PopSoundMixModifier(class UObject* WorldContextObject, class USoundMix* InSoundMixModifier);//Offset:Discovery.exe+0x5709B20
	void STATIC_PlayWorldCameraShake(class UObject* WorldContextObject, class UClass* Shake, const struct FVector& Epicenter, float InnerRadius, float OuterRadius, float Falloff, bool bOrientShakeTowardsEpicenter);//Offset:Discovery.exe+0x570E4D0
	void STATIC_PlaySoundAtLocation(class UObject* WorldContextObject, class USoundBase* Sound, const struct FVector& Location, const struct FRotator& Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, class USoundConcurrency* ConcurrencySettings, class AActor* OwningActor, class UInitialActiveSoundParams* InitialParams);//Offset:Discovery.exe+0x570C7B0
	void STATIC_PlaySound2D(class UObject* WorldContextObject, class USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundConcurrency* ConcurrencySettings, class AActor* OwningActor, bool bIsUISound);//Offset:Discovery.exe+0x570D1B0
	void STATIC_PlayDialogueAtLocation(class UObject* WorldContextObject, class UDialogueWave* Dialogue, const struct FDialogueContext& Context, const struct FVector& Location, const struct FRotator& Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings);//Offset:Discovery.exe+0x570B5F0
	void STATIC_PlayDialogue2D(class UObject* WorldContextObject, class UDialogueWave* Dialogue, const struct FDialogueContext& Context, float VolumeMultiplier, float PitchMultiplier, float StartTime);//Offset:Discovery.exe+0x570BC50
	struct FString STATIC_ParseOption(const struct FString& Options, const struct FString& Key);//Offset:Discovery.exe+0x5704970
	void STATIC_OpenLevelBySoftObjectPtr(class UObject* WorldContextObject, bool bAbsolute, const struct FString& Options);//Offset:Discovery.exe+0x570FFD0
	void STATIC_OpenLevel(class UObject* WorldContextObject, const struct FName& LevelName, bool bAbsolute, const struct FString& Options);//Offset:Discovery.exe+0x57102A0
	struct FHitResult STATIC_MakeHitResult(bool bBlockingHit, bool bInitialOverlap, float Time, float Distance, const struct FVector& Location, const struct FVector& ImpactPoint, const struct FVector& Normal, const struct FVector& ImpactNormal, class UPhysicalMaterial* PhysMat, class AActor* HitActor, class UPrimitiveComponent* HitComponent, const struct FName& HitBoneName, const struct FName& BoneName, int HitItem, int ElementIndex, int FaceIndex, const struct FVector& TraceStart, const struct FVector& TraceEnd);//Offset:Discovery.exe+0x5707E30
	void STATIC_LoadStreamLevelBySoftObjectPtr(class UObject* WorldContextObject, bool bMakeVisibleAfterLoad, bool bShouldBlockOnLoad, const struct FLatentActionInfo& LatentInfo);//Offset:Discovery.exe+0x5710A30
	void STATIC_LoadStreamLevel(class UObject* WorldContextObject, const struct FName& LevelName, bool bMakeVisibleAfterLoad, bool bShouldBlockOnLoad, const struct FLatentActionInfo& LatentInfo);//Offset:Discovery.exe+0x5710D40
	class USaveGame* STATIC_LoadGameFromSlot(const struct FString& SlotName, int UserIndex);//Offset:Discovery.exe+0x57076E0
	bool STATIC_IsSplitscreenForceDisabled(class UObject* WorldContextObject);//Offset:Discovery.exe+0x570F840
	bool STATIC_IsGamePaused(class UObject* WorldContextObject);//Offset:Discovery.exe+0x570F9C0
	bool STATIC_HasOption(const struct FString& Options, const struct FString& InKey);//Offset:Discovery.exe+0x5704820
	bool STATIC_HasLaunchOption(const struct FString& OptionToCheck);//Offset:Discovery.exe+0x5704620
	int STATIC_GrassOverlappingSphereCount(class UObject* WorldContextObject, class UStaticMesh* StaticMesh, const struct FVector& CenterPosition, float Radius);//Offset:Discovery.exe+0x57052E0
	struct FIntVector STATIC_GetWorldOriginLocation(class UObject* WorldContextObject);//Offset:Discovery.exe+0x5705760
	float STATIC_GetWorldDeltaSeconds(class UObject* WorldContextObject);//Offset:Discovery.exe+0x5707550
	void STATIC_GetViewProjectionMatrix(const struct FMinimalViewInfo& DesiredView, struct FMatrix* ViewMatrix, struct FMatrix* ProjectionMatrix, struct FMatrix* ViewProjectionMatrix);//Offset:Discovery.exe+0x5704C60
	enum class EMouseCaptureMode STATIC_GetViewportMouseCaptureMode(class UObject* WorldContextObject);//Offset:Discovery.exe+0x570F620
	float STATIC_GetUnpausedTimeSeconds(class UObject* WorldContextObject);//Offset:Discovery.exe+0x5707410
	float STATIC_GetTimeSeconds(class UObject* WorldContextObject);//Offset:Discovery.exe+0x57074B0
	TEnumAsByte<EPhysicalSurface> STATIC_GetSurfaceType(const struct FHitResult& Hit);//Offset:Discovery.exe+0x5707CC0
	class ULevelStreaming* STATIC_GetStreamingLevel(class UObject* WorldContextObject, const struct FName& PackageName);//Offset:Discovery.exe+0x5710520
	float STATIC_GetRealTimeSeconds(class UObject* WorldContextObject);//Offset:Discovery.exe+0x5707370
	class APlayerState* STATIC_GetPlayerStateFromUniqueNetId(class UObject* WorldContextObject, const struct FUniqueNetIdRepl& UniqueId);//Offset:Discovery.exe+0x5711860
	class APlayerState* STATIC_GetPlayerState(class UObject* WorldContextObject, int PlayerStateIndex);//Offset:Discovery.exe+0x57119B0
	class APawn* STATIC_GetPlayerPawn(class UObject* WorldContextObject, int PlayerIndex);//Offset:Discovery.exe+0x5711560
	int STATIC_GetPlayerControllerID(class APlayerController* Player);//Offset:Discovery.exe+0x5711010
	class APlayerController* STATIC_GetPlayerControllerFromID(class UObject* WorldContextObject, int ControllerId);//Offset:Discovery.exe+0x57112C0
	class APlayerController* STATIC_GetPlayerController(class UObject* WorldContextObject, int PlayerIndex);//Offset:Discovery.exe+0x5711640
	class ACharacter* STATIC_GetPlayerCharacter(class UObject* WorldContextObject, int PlayerIndex);//Offset:Discovery.exe+0x5711480
	class APlayerCameraManager* STATIC_GetPlayerCameraManager(class UObject* WorldContextObject, int PlayerIndex);//Offset:Discovery.exe+0x57113A0
	struct FString STATIC_GetPlatformName();//Offset:Discovery.exe+0x57070C0
	class UClass* STATIC_GetObjectClass(class UObject* Object);//Offset:Discovery.exe+0x570FCD0
	int STATIC_GetNumPlayerStates(class UObject* WorldContextObject);//Offset:Discovery.exe+0x5711A90
	int STATIC_GetNumPlayerControllers(class UObject* WorldContextObject);//Offset:Discovery.exe+0x57117C0
	int STATIC_GetNumLocalPlayerControllers(class UObject* WorldContextObject);//Offset:Discovery.exe+0x5711720
	int STATIC_GetMaxAudioChannelCount(class UObject* WorldContextObject);//Offset:Discovery.exe+0x5709570
	void STATIC_GetKeyValue(const struct FString& Pair, struct FString* Key, struct FString* Value);//Offset:Discovery.exe+0x5704AF0
	int STATIC_GetIntOption(const struct FString& Options, const struct FString& Key, int DefaultValue);//Offset:Discovery.exe+0x57046D0
	float STATIC_GetGlobalTimeDilation(class UObject* WorldContextObject);//Offset:Discovery.exe+0x570FC30
	class AGameStateBase* STATIC_GetGameState(class UObject* WorldContextObject);//Offset:Discovery.exe+0x570FD70
	class AGameModeBase* STATIC_GetGameMode(class UObject* WorldContextObject);//Offset:Discovery.exe+0x570FE10
	class UGameInstance* STATIC_GetGameInstance(class UObject* WorldContextObject);//Offset:Discovery.exe+0x5711B30
	bool STATIC_GetEnableWorldRendering(class UObject* WorldContextObject);//Offset:Discovery.exe+0x570F6C0
	class UReverbEffect* STATIC_GetCurrentReverbEffect(class UObject* WorldContextObject);//Offset:Discovery.exe+0x57096F0
	struct FString STATIC_GetCurrentLevelName(class UObject* WorldContextObject, bool bRemovePrefixString);//Offset:Discovery.exe+0x570FEB0
	bool STATIC_GetClosestListenerLocation(class UObject* WorldContextObject, const struct FVector& Location, float MaximumRange, bool bAllowAttenuationOverride, struct FVector* ListenerPosition);//Offset:Discovery.exe+0x570DA40
	float STATIC_GetAudioTimeSeconds(class UObject* WorldContextObject);//Offset:Discovery.exe+0x57072D0
	void STATIC_GetAllActorsWithTag(class UObject* WorldContextObject, const struct FName& Tag, TArray<class AActor*>* OutActors);//Offset:Discovery.exe+0x5711ED0
	void STATIC_GetAllActorsWithInterface(class UObject* WorldContextObject, class UClass* Interface, TArray<class AActor*>* OutActors);//Offset:Discovery.exe+0x5712010
	void STATIC_GetAllActorsOfClassWithTag(class UObject* WorldContextObject, class UClass* ActorClass, const struct FName& Tag, TArray<class AActor*>* OutActors);//Offset:Discovery.exe+0x5711D40
	void STATIC_GetAllActorsOfClass(class UObject* WorldContextObject, class UClass* ActorClass, TArray<class AActor*>* OutActors);//Offset:Discovery.exe+0x5712150
	class AActor* STATIC_GetActorOfClass(class UObject* WorldContextObject, class UClass* ActorClass);//Offset:Discovery.exe+0x5712290
	void STATIC_GetActorArrayBounds(TArray<class AActor*> Actors, bool bOnlyCollidingComponents, struct FVector* Center, struct FVector* BoxExtent);//Offset:Discovery.exe+0x5712370
	struct FVector STATIC_GetActorArrayAverageLocation(TArray<class AActor*> Actors);//Offset:Discovery.exe+0x5712520
	void STATIC_GetAccurateRealTime(int* Seconds, float* PartialSeconds);//Offset:Discovery.exe+0x57071D0
	void STATIC_FlushLevelStreaming(class UObject* WorldContextObject);//Offset:Discovery.exe+0x5710490
	class AActor* STATIC_FinishSpawningActor(class AActor* Actor, const struct FTransform& SpawnTransform);//Offset:Discovery.exe+0x57125F0
	class AActor* STATIC_FindNearestActor(const struct FVector& Origin, TArray<class AActor*> ActorsToCheck, float* Distance);//Offset:Discovery.exe+0x5711BD0
	bool STATIC_FindCollisionUV(const struct FHitResult& Hit, int UVChannel, struct FVector2D* UV);//Offset:Discovery.exe+0x5707AA0
	void STATIC_EnableLiveStreaming(bool Enable);//Offset:Discovery.exe+0x5707140
	bool STATIC_DoesSaveGameExist(const struct FString& SlotName, int UserIndex);//Offset:Discovery.exe+0x57077D0
	bool STATIC_DeprojectScreenToWorld(class APlayerController* Player, const struct FVector2D& ScreenPosition, struct FVector* WorldPosition, struct FVector* WorldDirection);//Offset:Discovery.exe+0x5705150
	bool STATIC_DeleteGameInSlot(const struct FString& SlotName, int UserIndex);//Offset:Discovery.exe+0x57075F0
	void STATIC_DeactivateReverbEffect(class UObject* WorldContextObject, const struct FName& TagName);//Offset:Discovery.exe+0x5709790
	class UAudioComponent* STATIC_CreateSound2D(class UObject* WorldContextObject, class USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundConcurrency* ConcurrencySettings, bool bPersistAcrossLevelTransition, bool bAutoDestroy);//Offset:Discovery.exe+0x570CC10
	class USaveGame* STATIC_CreateSaveGameObject(class UClass* SaveGameClass);//Offset:Discovery.exe+0x5707A00
	class APlayerController* STATIC_CreatePlayer(class UObject* WorldContextObject, int ControllerId, bool bSpawnPlayerController);//Offset:Discovery.exe+0x5711190
	void STATIC_ClearSoundMixModifiers(class UObject* WorldContextObject);//Offset:Discovery.exe+0x5709A90
	void STATIC_ClearSoundMixClassOverride(class UObject* WorldContextObject, class USoundMix* InSoundMixModifier, class USoundClass* InSoundClass, float FadeOutTime);//Offset:Discovery.exe+0x5709CE0
	void STATIC_CancelAsyncLoading();//Offset:Discovery.exe+0x5710470
	void STATIC_BreakHitResult(const struct FHitResult& Hit, bool* bBlockingHit, bool* bInitialOverlap, float* Time, float* Distance, struct FVector* Location, struct FVector* ImpactPoint, struct FVector* Normal, struct FVector* ImpactNormal, class UPhysicalMaterial** PhysMat, class AActor** HitActor, class UPrimitiveComponent** HitComponent, struct FName* HitBoneName, struct FName* BoneName, int* HitItem, int* ElementIndex, int* FaceIndex, struct FVector* TraceStart, struct FVector* TraceEnd);//Offset:Discovery.exe+0x57085B0
	bool STATIC_BlueprintSuggestProjectileVelocity(class UObject* WorldContextObject, const struct FVector& StartLocation, const struct FVector& EndLocation, float LaunchSpeed, float OverrideGravityZ, TEnumAsByte<ESuggestProjVelocityTraceOption> TraceOption, float CollisionRadius, bool bFavorHighArc, bool bDrawDebug, struct FVector* TossVelocity);//Offset:Discovery.exe+0x5706CC0
	bool STATIC_Blueprint_PredictProjectilePath_ByTraceChannel(class UObject* WorldContextObject, const struct FVector& StartPos, const struct FVector& LaunchVelocity, bool bTracePath, float ProjectileRadius, TEnumAsByte<ECollisionChannel> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, float DrawDebugTime, float SimFrequency, float MaxSimTime, float OverrideGravityZ, struct FHitResult* OutHit, TArray<struct FVector>* OutPathPositions, struct FVector* OutLastTraceDestination);//Offset:Discovery.exe+0x5705DB0
	bool STATIC_Blueprint_PredictProjectilePath_ByObjectType(class UObject* WorldContextObject, const struct FVector& StartPos, const struct FVector& LaunchVelocity, bool bTracePath, float ProjectileRadius, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, float DrawDebugTime, float SimFrequency, float MaxSimTime, float OverrideGravityZ, struct FHitResult* OutHit, TArray<struct FVector>* OutPathPositions, struct FVector* OutLastTraceDestination);//Offset:Discovery.exe+0x5706520
	bool STATIC_Blueprint_PredictProjectilePath_Advanced(class UObject* WorldContextObject, const struct FPredictProjectilePathParams& PredictParams, struct FPredictProjectilePathResult* PredictResult);//Offset:Discovery.exe+0x5705A80
	class AActor* STATIC_BeginSpawningActorFromBlueprint(class UObject* WorldContextObject, class UBlueprint* Blueprint, const struct FTransform& SpawnTransform, bool bNoCollisionFail);//Offset:Discovery.exe+0x5712970
	class AActor* STATIC_BeginDeferredActorSpawnFromClass(class UObject* WorldContextObject, class UClass* ActorClass, const struct FTransform& SpawnTransform, enum class ESpawnActorCollisionHandlingMethod CollisionHandlingOverride, class AActor* Owner);//Offset:Discovery.exe+0x5712730
	bool STATIC_AreSubtitlesEnabled();//Offset:Discovery.exe+0x570A350
	bool STATIC_AreAnyListenersWithinRange(class UObject* WorldContextObject, const struct FVector& Location, float MaximumRange);//Offset:Discovery.exe+0x570DC20
	bool STATIC_ApplyRadialDamageWithFalloff(class UObject* WorldContextObject, float BaseDamage, float MinimumDamage, const struct FVector& Origin, float DamageInnerRadius, float DamageOuterRadius, float DamageFalloff, class UClass* DamageTypeClass, TArray<class AActor*> IgnoreActors, class AActor* DamageCauser, class AController* InstigatedByController, TEnumAsByte<ECollisionChannel> DamagePreventionChannel);//Offset:Discovery.exe+0x570ECD0
	bool STATIC_ApplyRadialDamage(class UObject* WorldContextObject, float BaseDamage, const struct FVector& Origin, float DamageRadius, class UClass* DamageTypeClass, TArray<class AActor*> IgnoreActors, class AActor* DamageCauser, class AController* InstigatedByController, bool bDoFullDamage, TEnumAsByte<ECollisionChannel> DamagePreventionChannel);//Offset:Discovery.exe+0x570F170
	float STATIC_ApplyPointDamage(class AActor* DamagedActor, float BaseDamage, const struct FVector& HitFromDirection, const struct FHitResult& HitInfo, class AController* EventInstigator, class AActor* DamageCauser, class UClass* DamageTypeClass);//Offset:Discovery.exe+0x570E940
	float STATIC_ApplyDamage(class AActor* DamagedActor, float BaseDamage, class AController* EventInstigator, class AActor* DamageCauser, class UClass* DamageTypeClass);//Offset:Discovery.exe+0x570E770
	void STATIC_AnnounceAccessibleString(const struct FString& AnnouncementString);//Offset:Discovery.exe+0x5704580
	void STATIC_ActivateReverbEffect(class UObject* WorldContextObject, class UReverbEffect* ReverbEffect, const struct FName& TagName, float Priority, float Volume, float FadeTime);//Offset:Discovery.exe+0x5709870
};


// Class Engine.SpotLight
// 0x0008 (0x02E0 - 0x02D8)
class ASpotLight : public ALight
{
public:
	class USpotLightComponent*                         SpotLightComponent;                                       // 0x02D8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SpotLight"));
		return ptr;
	}


	void SetOuterConeAngle(float NewOuterConeAngle);//Offset:Discovery.exe+0x5893690
	void SetInnerConeAngle(float NewInnerConeAngle);//Offset:Discovery.exe+0x5893730
};


// Class Engine.GeneratedMeshAreaLight
// 0x0000 (0x02E0 - 0x02E0)
class AGeneratedMeshAreaLight : public ASpotLight
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.GeneratedMeshAreaLight"));
		return ptr;
	}

};


// Class Engine.HapticFeedbackEffect_Base
// 0x0000 (0x0028 - 0x0028)
class UHapticFeedbackEffect_Base : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.HapticFeedbackEffect_Base"));
		return ptr;
	}

};


// Class Engine.HapticFeedbackEffect_Buffer
// 0x0018 (0x0040 - 0x0028)
class UHapticFeedbackEffect_Buffer : public UHapticFeedbackEffect_Base
{
public:
	TArray<unsigned char>                              Amplitudes;                                               // 0x0028(0x0010) (Edit, ZeroConstructor)
	int                                                SampleRate;                                               // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x003C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.HapticFeedbackEffect_Buffer"));
		return ptr;
	}

};


// Class Engine.HapticFeedbackEffect_Curve
// 0x0110 (0x0138 - 0x0028)
class UHapticFeedbackEffect_Curve : public UHapticFeedbackEffect_Base
{
public:
	struct FHapticFeedbackDetails_Curve                HapticDetails;                                            // 0x0028(0x0110) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.HapticFeedbackEffect_Curve"));
		return ptr;
	}

};


// Class Engine.HapticFeedbackEffect_SoundWave
// 0x0020 (0x0048 - 0x0028)
class UHapticFeedbackEffect_SoundWave : public UHapticFeedbackEffect_Base
{
public:
	class USoundWave*                                  SoundWave;                                                // 0x0028(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x18];                                      // 0x0030(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.HapticFeedbackEffect_SoundWave"));
		return ptr;
	}

};


// Class Engine.HealthSnapshotBlueprintLibrary
// 0x0000 (0x0028 - 0x0028)
class UHealthSnapshotBlueprintLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.HealthSnapshotBlueprintLibrary"));
		return ptr;
	}


	void STATIC_StopPerformanceSnapshots();//Offset:Discovery.exe+0x571FE70
	void STATIC_StartPerformanceSnapshots();//Offset:Discovery.exe+0x571FE90
	void STATIC_LogPerformanceSnapshot(const struct FString& SnapshotTitle, bool bResetStats);//Offset:Discovery.exe+0x571FD30
};


// Class Engine.WorldPartitionHLOD
// 0x0038 (0x0300 - 0x02C8)
class AWorldPartitionHLOD : public AActor
{
public:
	uint32_t                                           LODLevel;                                                 // 0x02C8(0x0004) (ZeroConstructor, IsPlainOldData)
	bool                                               bRequireWarmup;                                           // 0x02CC(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x02CD(0x0003) MISSED OFFSET
	unsigned char                                      UnknownData01[0x28];                                      // 0x02CD(0x0028) UNKNOWN PROPERTY: SourceCell
	struct FName                                       SourceCellName;                                           // 0x02F8(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.WorldPartitionHLOD"));
		return ptr;
	}

};


// Class Engine.HLODBuilderSettings
// 0x0000 (0x0028 - 0x0028)
class UHLODBuilderSettings : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.HLODBuilderSettings"));
		return ptr;
	}

};


// Class Engine.HLODEngineSubsystem
// 0x0000 (0x0030 - 0x0030)
class UHLODEngineSubsystem : public UEngineSubsystem
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.HLODEngineSubsystem"));
		return ptr;
	}

};


// Class Engine.HLODLayer
// 0x0000 (0x0028 - 0x0028)
class UHLODLayer : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.HLODLayer"));
		return ptr;
	}

};


// Class Engine.HLODProxy
// 0x0060 (0x0088 - 0x0028)
class UHLODProxy : public UObject
{
public:
	TArray<struct FHLODProxyMesh>                      ProxyMeshes;                                              // 0x0028(0x0010) (Edit, ZeroConstructor, EditConst)
	TMap<class UHLODProxyDesc*, struct FHLODProxyMesh> HLODActors;                                               // 0x0038(0x0050) (Edit, EditConst)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.HLODProxy"));
		return ptr;
	}

};


// Class Engine.HLODProxyDesc
// 0x0000 (0x0028 - 0x0028)
class UHLODProxyDesc : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.HLODProxyDesc"));
		return ptr;
	}

};


// Class Engine.HLODSubsystem
// 0x0100 (0x0130 - 0x0030)
class UHLODSubsystem : public UWorldSubsystem
{
public:
	unsigned char                                      UnknownData00[0x100];                                     // 0x0030(0x0100) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.HLODSubsystem"));
		return ptr;
	}

};


// Class Engine.AnimationDataController
// 0x0000 (0x0028 - 0x0028)
class UAnimationDataController : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.AnimationDataController"));
		return ptr;
	}


	void UpdateCurveNamesFromSkeleton(class USkeleton* Skeleton, enum class ERawCurveTrackTypes SupportedCurveType, bool bShouldTransact);//Offset:Discovery.exe+0x5726C10
	bool SetTransformCurveKeys(const struct FAnimationCurveIdentifier& CurveId, TArray<struct FTransform> TransformValues, TArray<float> TimeKeys, bool bShouldTransact);//Offset:Discovery.exe+0x57279E0
	bool SetTransformCurveKey(const struct FAnimationCurveIdentifier& CurveId, float Time, const struct FTransform& Value, bool bShouldTransact);//Offset:Discovery.exe+0x57277C0
	void SetPlayLength(float Length, bool bShouldTransact);//Offset:Discovery.exe+0x5728DF0
	void SetModel(class UAnimDataModel* InModel);//Offset:Discovery.exe+0x4BA8C90
	void SetFrameRate(const struct FFrameRate& FrameRate, bool bShouldTransact);//Offset:Discovery.exe+0x5728A00
	bool SetCurveKeys(const struct FAnimationCurveIdentifier& CurveId, TArray<struct FRichCurveKey> CurveKeys, bool bShouldTransact);//Offset:Discovery.exe+0x5726D40
	bool SetCurveKey(const struct FAnimationCurveIdentifier& CurveId, const struct FRichCurveKey& Key, bool bShouldTransact);//Offset:Discovery.exe+0x5727030
	bool SetCurveFlags(const struct FAnimationCurveIdentifier& CurveId, int Flags, bool bShouldTransact);//Offset:Discovery.exe+0x5727BE0
	bool SetCurveFlag(const struct FAnimationCurveIdentifier& CurveId, TEnumAsByte<EAnimAssetCurveFlags> Flag, bool bState, bool bShouldTransact);//Offset:Discovery.exe+0x5727D40
	bool SetCurveColor(const struct FAnimationCurveIdentifier& CurveId, const struct FLinearColor& Color, bool bShouldTransact);//Offset:Discovery.exe+0x5727370
	bool SetBoneTrackKeys(const struct FName& BoneName, TArray<struct FVector> PositionalKeys, TArray<struct FQuat> RotationalKeys, TArray<struct FVector> ScalingKeys, bool bShouldTransact);//Offset:Discovery.exe+0x57283F0
	bool ScaleCurve(const struct FAnimationCurveIdentifier& CurveId, float Origin, float Factor, bool bShouldTransact);//Offset:Discovery.exe+0x57271C0
	void ResizePlayLength(float NewLength, float T0, float T1, bool bShouldTransact);//Offset:Discovery.exe+0x5728C70
	void Resize(float Length, float T0, float T1, bool bShouldTransact);//Offset:Discovery.exe+0x5728AF0
	bool RenameCurve(const struct FAnimationCurveIdentifier& CurveToRenameId, const struct FAnimationCurveIdentifier& NewCurveId, bool bShouldTransact);//Offset:Discovery.exe+0x57274D0
	bool RemoveTransformCurveKey(const struct FAnimationCurveIdentifier& CurveId, float Time, bool bShouldTransact);//Offset:Discovery.exe+0x5727660
	bool RemoveCurveKey(const struct FAnimationCurveIdentifier& CurveId, float Time, bool bShouldTransact);//Offset:Discovery.exe+0x5726ED0
	bool RemoveCurve(const struct FAnimationCurveIdentifier& CurveId, bool bShouldTransact);//Offset:Discovery.exe+0x5727FE0
	bool RemoveBoneTrack(const struct FName& BoneName, bool bShouldTransact);//Offset:Discovery.exe+0x57286E0
	bool RemoveAttributeKey(const struct FAnimationAttributeIdentifier& AttributeIdentifier, float Time, bool bShouldTransact);//Offset:Discovery.exe+0x5726560
	bool RemoveAttribute(const struct FAnimationAttributeIdentifier& AttributeIdentifier, bool bShouldTransact);//Offset:Discovery.exe+0x5726880
	void RemoveAllCurvesOfType(enum class ERawCurveTrackTypes SupportedCurveType, bool bShouldTransact);//Offset:Discovery.exe+0x5727EF0
	void RemoveAllBoneTracks(bool bShouldTransact);//Offset:Discovery.exe+0x5728640
	int RemoveAllAttributesForBone(const struct FName& BoneName, bool bShouldTransact);//Offset:Discovery.exe+0x5726780
	int RemoveAllAttributes(bool bShouldTransact);//Offset:Discovery.exe+0x57266D0
	void OpenBracket(const struct FText& InTitle, bool bShouldTransact);//Offset:Discovery.exe+0x5728F80
	int InsertBoneTrack(const struct FName& BoneName, int DesiredIndex, bool bShouldTransact);//Offset:Discovery.exe+0x57287D0
	class UAnimDataModel* GetModel();//Offset:Discovery.exe+0x57290B0
	void FindOrAddCurveNamesOnSkeleton(class USkeleton* Skeleton, enum class ERawCurveTrackTypes SupportedCurveType, bool bShouldTransact);//Offset:Discovery.exe+0x5726AE0
	bool DuplicateCurve(const struct FAnimationCurveIdentifier& CopyCurveId, const struct FAnimationCurveIdentifier& NewCurveId, bool bShouldTransact);//Offset:Discovery.exe+0x5728100
	bool DuplicateAttribute(const struct FAnimationAttributeIdentifier& AttributeIdentifier, const struct FAnimationAttributeIdentifier& NewAttributeIdentifier, bool bShouldTransact);//Offset:Discovery.exe+0x57263A0
	void CloseBracket(bool bShouldTransact);//Offset:Discovery.exe+0x5728EE0
	bool AddCurve(const struct FAnimationCurveIdentifier& CurveId, int CurveFlags, bool bShouldTransact);//Offset:Discovery.exe+0x5728290
	int AddBoneTrack(const struct FName& BoneName, bool bShouldTransact);//Offset:Discovery.exe+0x5728910
	bool AddAttribute(const struct FAnimationAttributeIdentifier& AttributeIdentifier, bool bShouldTransact);//Offset:Discovery.exe+0x57269B0
};


// Class Engine.ImportanceSamplingLibrary
// 0x0000 (0x0028 - 0x0028)
class UImportanceSamplingLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ImportanceSamplingLibrary"));
		return ptr;
	}


	float STATIC_RandomSobolFloat(int Index, int Dimension, float Seed);//Offset:Discovery.exe+0x572B5E0
	struct FVector STATIC_RandomSobolCell3D(int Index, int NumCells, const struct FVector& Cell, const struct FVector& Seed);//Offset:Discovery.exe+0x572AFD0
	struct FVector2D STATIC_RandomSobolCell2D(int Index, int NumCells, const struct FVector2D& Cell, const struct FVector2D& Seed);//Offset:Discovery.exe+0x572B300
	float STATIC_NextSobolFloat(int Index, int Dimension, float PreviousValue);//Offset:Discovery.exe+0x572B4B0
	struct FVector STATIC_NextSobolCell3D(int Index, int NumCells, const struct FVector& PreviousValue);//Offset:Discovery.exe+0x572AE80
	struct FVector2D STATIC_NextSobolCell2D(int Index, int NumCells, const struct FVector2D& PreviousValue);//Offset:Discovery.exe+0x572B1C0
	struct FImportanceTexture STATIC_MakeImportanceTexture(class UTexture2D* Texture, TEnumAsByte<EImportanceWeight> WeightingFunc);//Offset:Discovery.exe+0x572AC90
	void STATIC_ImportanceSample(const struct FImportanceTexture& Texture, const struct FVector2D& Rand, int Samples, float Intensity, struct FVector2D* SamplePosition, struct FLinearColor* SampleColor, float* SampleIntensity, float* SampleSize);//Offset:Discovery.exe+0x572A740
	void STATIC_BreakImportanceTexture(const struct FImportanceTexture& ImportanceTexture, class UTexture2D** Texture, TEnumAsByte<EImportanceWeight>* WeightingFunc);//Offset:Discovery.exe+0x572AAD0
};


// Class Engine.ImportantToggleSettingInterface
// 0x0000 (0x0028 - 0x0028)
class UImportantToggleSettingInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ImportantToggleSettingInterface"));
		return ptr;
	}

};


// Class Engine.InGameAdManager
// 0x0028 (0x0060 - 0x0038)
class UInGameAdManager : public UPlatformInterfaceBase
{
public:
	unsigned char                                      bShouldPauseWhileAdOpen : 1;                              // 0x0038(0x0001)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0039(0x0007) MISSED OFFSET
	TArray<struct FScriptDelegate>                     ClickedBannerDelegates;                                   // 0x0040(0x0010) (ZeroConstructor)
	TArray<struct FScriptDelegate>                     ClosedAdDelegates;                                        // 0x0050(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.InGameAdManager"));
		return ptr;
	}

};


// Class Engine.InheritableComponentHandler
// 0x0020 (0x0048 - 0x0028)
class UInheritableComponentHandler : public UObject
{
public:
	TArray<struct FComponentOverrideRecord>            Records;                                                  // 0x0028(0x0010) (ZeroConstructor)
	TArray<class UActorComponent*>                     UnnecessaryComponents;                                    // 0x0038(0x0010) (ExportObject, ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.InheritableComponentHandler"));
		return ptr;
	}

};


// Class Engine.InputDelegateBinding
// 0x0000 (0x0028 - 0x0028)
class UInputDelegateBinding : public UDynamicBlueprintBinding
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.InputDelegateBinding"));
		return ptr;
	}

};


// Class Engine.InputActionDelegateBinding
// 0x0010 (0x0038 - 0x0028)
class UInputActionDelegateBinding : public UInputDelegateBinding
{
public:
	TArray<struct FBlueprintInputActionDelegateBinding> InputActionDelegateBindings;                              // 0x0028(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.InputActionDelegateBinding"));
		return ptr;
	}

};


// Class Engine.InputAxisDelegateBinding
// 0x0010 (0x0038 - 0x0028)
class UInputAxisDelegateBinding : public UInputDelegateBinding
{
public:
	TArray<struct FBlueprintInputAxisDelegateBinding>  InputAxisDelegateBindings;                                // 0x0028(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.InputAxisDelegateBinding"));
		return ptr;
	}

};


// Class Engine.InputAxisKeyDelegateBinding
// 0x0010 (0x0038 - 0x0028)
class UInputAxisKeyDelegateBinding : public UInputDelegateBinding
{
public:
	TArray<struct FBlueprintInputAxisKeyDelegateBinding> InputAxisKeyDelegateBindings;                             // 0x0028(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.InputAxisKeyDelegateBinding"));
		return ptr;
	}

};


// Class Engine.InputComponent
// 0x0088 (0x0140 - 0x00B8)
class UInputComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x70];                                      // 0x00B8(0x0070) MISSED OFFSET
	TArray<struct FCachedKeyToActionInfo>              CachedKeyToActionInfo;                                    // 0x0128(0x0010) (ZeroConstructor, Transient, DuplicateTransient)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0138(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.InputComponent"));
		return ptr;
	}


	bool WasControllerKeyJustReleased(const struct FKey& Key);//Offset:Discovery.exe+0x572E0D0
	bool WasControllerKeyJustPressed(const struct FKey& Key);//Offset:Discovery.exe+0x572E0D0
	void OnInputOwnerEndPlayed(class AActor* InOwner, TEnumAsByte<EEndPlayReason> EndPlayReason);//Offset:Discovery.exe+0x572E1C0
	bool IsControllerKeyDown(const struct FKey& Key);//Offset:Discovery.exe+0x572E0D0
	void GetTouchState(int FingerIndex, float* LocationX, float* LocationY, bool* bIsCurrentlyPressed);//Offset:Discovery.exe+0x572DE20
	struct FVector GetControllerVectorKeyState(const struct FKey& Key);//Offset:Discovery.exe+0x572DFD0
	void GetControllerMouseDelta(float* DeltaX, float* DeltaY);//Offset:Discovery.exe+0x572DC30
	float GetControllerKeyTimeDown(const struct FKey& Key);//Offset:Discovery.exe+0x572DD30
	void GetControllerAnalogStickState(TEnumAsByte<EControllerAnalogStick> WhichStick, float* StickX, float* StickY);//Offset:Discovery.exe+0x572DAE0
	float GetControllerAnalogKeyState(const struct FKey& Key);//Offset:Discovery.exe+0x572DD30
};


// Class Engine.InputKeyDelegateBinding
// 0x0010 (0x0038 - 0x0028)
class UInputKeyDelegateBinding : public UInputDelegateBinding
{
public:
	TArray<struct FBlueprintInputKeyDelegateBinding>   InputKeyDelegateBindings;                                 // 0x0028(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.InputKeyDelegateBinding"));
		return ptr;
	}

};


// Class Engine.InputSettings
// 0x0118 (0x0140 - 0x0028)
class UInputSettings : public UObject
{
public:
	TArray<struct FInputAxisConfigEntry>               AxisConfig;                                               // 0x0028(0x0010) (Edit, EditFixedSize, ZeroConstructor, Config)
	unsigned char                                      bAltEnterTogglesFullscreen : 1;                           // 0x0038(0x0001) (Edit, Config)
	unsigned char                                      bF11TogglesFullscreen : 1;                                // 0x0038(0x0001) (Edit, Config)
	unsigned char                                      bUseMouseForTouch : 1;                                    // 0x0038(0x0001) (Edit, Config)
	unsigned char                                      bEnableMouseSmoothing : 1;                                // 0x0038(0x0001) (Edit, Config)
	unsigned char                                      bEnableFOVScaling : 1;                                    // 0x0038(0x0001) (Edit, Config)
	unsigned char                                      bCaptureMouseOnLaunch : 1;                                // 0x0038(0x0001) (Edit, Config)
	unsigned char                                      bDefaultViewportMouseLock : 1;                            // 0x0038(0x0001) (Config, Deprecated)
	unsigned char                                      bEnableLegacyInputScales : 1;                             // 0x0038(0x0001) (Edit, Config)
	unsigned char                                      bAlwaysShowTouchInterface : 1;                            // 0x0039(0x0001) (Edit, Config)
	unsigned char                                      bShowConsoleOnFourFingerTap : 1;                          // 0x0039(0x0001) (Edit, Config)
	unsigned char                                      bEnableGestureRecognizer : 1;                             // 0x0039(0x0001) (Edit, Config)
	unsigned char                                      bUseAutocorrect : 1;                                      // 0x0039(0x0001) (Edit, Config)
	unsigned char                                      UnknownData00[0x6];                                       // 0x003A(0x0006) MISSED OFFSET
	TArray<struct FString>                             ExcludedAutocorrectOS;                                    // 0x0040(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FString>                             ExcludedAutocorrectCultures;                              // 0x0050(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FString>                             ExcludedAutocorrectDeviceModels;                          // 0x0060(0x0010) (Edit, ZeroConstructor, Config)
	enum class EMouseCaptureMode                       DefaultViewportMouseCaptureMode;                          // 0x0070(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	enum class EMouseLockMode                          DefaultViewportMouseLockMode;                             // 0x0071(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x0072(0x0002) MISSED OFFSET
	float                                              FOVScale;                                                 // 0x0074(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              DoubleClickTime;                                          // 0x0078(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x007C(0x0004) MISSED OFFSET
	TArray<struct FInputActionKeyMapping>              ActionMappings;                                           // 0x0080(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FInputAxisKeyMapping>                AxisMappings;                                             // 0x0090(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FInputActionSpeechMapping>           SpeechMappings;                                           // 0x00A0(0x0010) (Edit, ZeroConstructor, Config)
	unsigned char                                      UnknownData03[0x28];                                      // 0x00B0(0x0028) UNKNOWN PROPERTY: DefaultPlayerInputClass
	unsigned char                                      UnknownData04[0x28];                                      // 0x00D8(0x0028) UNKNOWN PROPERTY: DefaultInputComponentClass
	struct FSoftObjectPath                             DefaultTouchInterface;                                    // 0x0100(0x0018) (Edit, ZeroConstructor, Config)
	struct FKey                                        ConsoleKey;                                               // 0x0118(0x0018) (Config, Deprecated)
	TArray<struct FKey>                                ConsoleKeys;                                              // 0x0130(0x0010) (Edit, ZeroConstructor, Config)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.InputSettings"));
		return ptr;
	}


	void SaveKeyMappings();//Offset:Discovery.exe+0x572F210
	void RemoveAxisMapping(const struct FInputAxisKeyMapping& KeyMapping, bool bForceRebuildKeymaps);//Offset:Discovery.exe+0x572F230
	void RemoveActionMapping(const struct FInputActionKeyMapping& KeyMapping, bool bForceRebuildKeymaps);//Offset:Discovery.exe+0x572F6E0
	class UInputSettings* STATIC_GetInputSettings();//Offset:Discovery.exe+0x572FB70
	void GetAxisNames(TArray<struct FName>* AxisNames);//Offset:Discovery.exe+0x572F0B0
	void GetAxisMappingByName(const struct FName& InAxisName, TArray<struct FInputAxisKeyMapping>* OutMappings);//Offset:Discovery.exe+0x572F3E0
	void GetActionNames(TArray<struct FName>* ActionNames);//Offset:Discovery.exe+0x572F160
	void GetActionMappingByName(const struct FName& InActionName, TArray<struct FInputActionKeyMapping>* OutMappings);//Offset:Discovery.exe+0x572F880
	void ForceRebuildKeymaps();//Offset:Discovery.exe+0x572F090
	void AddAxisMapping(const struct FInputAxisKeyMapping& KeyMapping, bool bForceRebuildKeymaps);//Offset:Discovery.exe+0x572F530
	void AddActionMapping(const struct FInputActionKeyMapping& KeyMapping, bool bForceRebuildKeymaps);//Offset:Discovery.exe+0x572F9D0
};


// Class Engine.InputTouchDelegateBinding
// 0x0010 (0x0038 - 0x0028)
class UInputTouchDelegateBinding : public UInputDelegateBinding
{
public:
	TArray<struct FBlueprintInputTouchDelegateBinding> InputTouchDelegateBindings;                               // 0x0028(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.InputTouchDelegateBinding"));
		return ptr;
	}

};


// Class Engine.InputVectorAxisDelegateBinding
// 0x0000 (0x0038 - 0x0038)
class UInputVectorAxisDelegateBinding : public UInputAxisKeyDelegateBinding
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.InputVectorAxisDelegateBinding"));
		return ptr;
	}

};


// Class Engine.InstancedPlacemenClientSettings
// 0x0000 (0x0028 - 0x0028)
class UInstancedPlacemenClientSettings : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.InstancedPlacemenClientSettings"));
		return ptr;
	}

};


// Class Engine.InstancedPlacementPartitionActor
// 0x0000 (0x02D8 - 0x02D8)
class AInstancedPlacementPartitionActor : public AISMPartitionActor
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.InstancedPlacementPartitionActor"));
		return ptr;
	}

};


// Class Engine.Interface_ActorSubobject
// 0x0000 (0x0028 - 0x0028)
class UInterface_ActorSubobject : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.Interface_ActorSubobject"));
		return ptr;
	}

};


// Class Engine.Interface_AssetUserData
// 0x0000 (0x0028 - 0x0028)
class UInterface_AssetUserData : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.Interface_AssetUserData"));
		return ptr;
	}

};


// Class Engine.Interface_AsyncCompilation
// 0x0000 (0x0028 - 0x0028)
class UInterface_AsyncCompilation : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.Interface_AsyncCompilation"));
		return ptr;
	}

};


// Class Engine.BoneReferenceSkeletonProvider
// 0x0000 (0x0028 - 0x0028)
class UBoneReferenceSkeletonProvider : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.BoneReferenceSkeletonProvider"));
		return ptr;
	}

};


// Class Engine.Interface_CollisionDataProvider
// 0x0000 (0x0028 - 0x0028)
class UInterface_CollisionDataProvider : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.Interface_CollisionDataProvider"));
		return ptr;
	}

};


// Class Engine.Interface_PostProcessVolume
// 0x0000 (0x0028 - 0x0028)
class UInterface_PostProcessVolume : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.Interface_PostProcessVolume"));
		return ptr;
	}

};


// Class Engine.Interface_PreviewMeshProvider
// 0x0000 (0x0028 - 0x0028)
class UInterface_PreviewMeshProvider : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.Interface_PreviewMeshProvider"));
		return ptr;
	}

};


// Class Engine.InterpCurveEdSetup
// 0x0018 (0x0040 - 0x0028)
class UInterpCurveEdSetup : public UObject
{
public:
	TArray<struct FCurveEdTab>                         Tabs;                                                     // 0x0028(0x0010) (ZeroConstructor)
	int                                                ActiveTab;                                                // 0x0038(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x003C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.InterpCurveEdSetup"));
		return ptr;
	}

};


// Class Engine.InterpData
// 0x0048 (0x0070 - 0x0028)
class UInterpData : public UObject
{
public:
	float                                              InterpLength;                                             // 0x0028(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              PathBuildTime;                                            // 0x002C(0x0004) (ZeroConstructor, IsPlainOldData)
	TArray<class UInterpGroup*>                        InterpGroups;                                             // 0x0030(0x0010) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor)
	class UInterpCurveEdSetup*                         CurveEdSetup;                                             // 0x0040(0x0008) (ExportObject, ZeroConstructor, IsPlainOldData)
	float                                              EdSectionStart;                                           // 0x0048(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              EdSectionEnd;                                             // 0x004C(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bShouldBakeAndPrune : 1;                                  // 0x0050(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0051(0x0007) MISSED OFFSET
	class UInterpGroupDirector*                        CachedDirectorGroup;                                      // 0x0058(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TArray<struct FName>                               AllEventNames;                                            // 0x0060(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.InterpData"));
		return ptr;
	}

};


// Class Engine.InterpFilter
// 0x0010 (0x0038 - 0x0028)
class UInterpFilter : public UObject
{
public:
	struct FString                                     Caption;                                                  // 0x0028(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.InterpFilter"));
		return ptr;
	}

};


// Class Engine.InterpFilter_Classes
// 0x0000 (0x0038 - 0x0038)
class UInterpFilter_Classes : public UInterpFilter
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.InterpFilter_Classes"));
		return ptr;
	}

};


// Class Engine.InterpFilter_Custom
// 0x0000 (0x0038 - 0x0038)
class UInterpFilter_Custom : public UInterpFilter
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.InterpFilter_Custom"));
		return ptr;
	}

};


// Class Engine.InterpGroup
// 0x0028 (0x0050 - 0x0028)
class UInterpGroup : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	TArray<class UInterpTrack*>                        InterpTracks;                                             // 0x0030(0x0010) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor)
	struct FName                                       GroupName;                                                // 0x0040(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FColor                                      GroupColor;                                               // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bCollapsed : 1;                                           // 0x004C(0x0001)
	unsigned char                                      bVisible : 1;                                             // 0x004C(0x0001) (Transient)
	unsigned char                                      bIsFolder : 1;                                            // 0x004C(0x0001)
	unsigned char                                      bIsParented : 1;                                          // 0x004C(0x0001)
	unsigned char                                      bIsSelected : 1;                                          // 0x004C(0x0001) (Transient)
	unsigned char                                      UnknownData01[0x3];                                       // 0x004D(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.InterpGroup"));
		return ptr;
	}

};


// Class Engine.InterpGroupCamera
// 0x0010 (0x0060 - 0x0050)
class UInterpGroupCamera : public UInterpGroup
{
public:
	class UCameraAnim*                                 CameraAnimInst;                                           // 0x0050(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              CompressTolerance;                                        // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x005C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.InterpGroupCamera"));
		return ptr;
	}

};


// Class Engine.InterpGroupDirector
// 0x0000 (0x0050 - 0x0050)
class UInterpGroupDirector : public UInterpGroup
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.InterpGroupDirector"));
		return ptr;
	}

};


// Class Engine.InterpGroupInst
// 0x0020 (0x0048 - 0x0028)
class UInterpGroupInst : public UObject
{
public:
	class UInterpGroup*                                Group;                                                    // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData)
	class AActor*                                      GroupActor;                                               // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<class UInterpTrackInst*>                    TrackInst;                                                // 0x0038(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.InterpGroupInst"));
		return ptr;
	}

};


// Class Engine.InterpGroupInstCamera
// 0x0000 (0x0048 - 0x0048)
class UInterpGroupInstCamera : public UInterpGroupInst
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.InterpGroupInstCamera"));
		return ptr;
	}

};


// Class Engine.InterpGroupInstDirector
// 0x0000 (0x0048 - 0x0048)
class UInterpGroupInstDirector : public UInterpGroupInst
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.InterpGroupInstDirector"));
		return ptr;
	}

};


// Class Engine.InterpToMovementComponent
// 0x00B0 (0x01D0 - 0x0120)
class UInterpToMovementComponent : public UMovementComponent
{
public:
	float                                              Duration;                                                 // 0x0120(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bPauseOnImpact : 1;                                       // 0x0124(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0125(0x0003) MISSED OFFSET
	bool                                               bSweep;                                                   // 0x0128(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	enum class ETeleportType                           TeleportType;                                             // 0x0129(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	enum class EInterpToBehaviourType                  BehaviourType;                                            // 0x012A(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bCheckIfStillInWorld;                                     // 0x012B(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bForceSubStepping : 1;                                    // 0x012C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData01[0x3];                                       // 0x012D(0x0003) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnInterpToReverse;                                        // 0x0130(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnInterpToStop;                                           // 0x0140(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnWaitBeginDelegate;                                      // 0x0150(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnWaitEndDelegate;                                        // 0x0160(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnResetDelegate;                                          // 0x0170(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	float                                              MaxSimulationTimeStep;                                    // 0x0180(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                MaxSimulationIterations;                                  // 0x0184(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<struct FInterpControlPoint>                 ControlPoints;                                            // 0x0188(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	unsigned char                                      UnknownData02[0x38];                                      // 0x0198(0x0038) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.InterpToMovementComponent"));
		return ptr;
	}


	void StopSimulating(const struct FHitResult& HitResult);//Offset:Discovery.exe+0x5735DF0
	void RestartMovement(float InitialDirection);//Offset:Discovery.exe+0x5735C50
	void ResetControlPoints();//Offset:Discovery.exe+0x5735C10
	void OnInterpToWaitEndDelegate__DelegateSignature(const struct FHitResult& ImpactResult, float Time);//Offset:Discovery.exe+0x327F8B0
	void OnInterpToWaitBeginDelegate__DelegateSignature(const struct FHitResult& ImpactResult, float Time);//Offset:Discovery.exe+0x327F8B0
	void OnInterpToStopDelegate__DelegateSignature(const struct FHitResult& ImpactResult, float Time);//Offset:Discovery.exe+0x327F8B0
	void OnInterpToReverseDelegate__DelegateSignature(const struct FHitResult& ImpactResult, float Time);//Offset:Discovery.exe+0x327F8B0
	void OnInterpToResetDelegate__DelegateSignature(const struct FHitResult& ImpactResult, float Time);//Offset:Discovery.exe+0x327F8B0
	void FinaliseControlPoints();//Offset:Discovery.exe+0x5735C30
	void AddControlPointPosition(const struct FVector& Pos, bool bPositionIsRelative);//Offset:Discovery.exe+0x5735CF0
};


// Class Engine.InterpTrack
// 0x0048 (0x0070 - 0x0028)
class UInterpTrack : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0028(0x0010) MISSED OFFSET
	TArray<class UInterpTrack*>                        SubTracks;                                                // 0x0038(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	class UClass*                                      TrackInstClass;                                           // 0x0048(0x0008) (ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ETrackActiveCondition>                 ActiveCondition;                                          // 0x0050(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0051(0x0007) MISSED OFFSET
	struct FString                                     TrackTitle;                                               // 0x0058(0x0010) (ZeroConstructor)
	unsigned char                                      bOnePerGroup : 1;                                         // 0x0068(0x0001)
	unsigned char                                      bDirGroupOnly : 1;                                        // 0x0068(0x0001)
	unsigned char                                      bDisableTrack : 1;                                        // 0x0068(0x0001)
	unsigned char                                      bIsSelected : 1;                                          // 0x0068(0x0001) (Transient)
	unsigned char                                      bIsAnimControlTrack : 1;                                  // 0x0068(0x0001)
	unsigned char                                      bSubTrackOnly : 1;                                        // 0x0068(0x0001)
	unsigned char                                      bVisible : 1;                                             // 0x0068(0x0001) (Transient)
	unsigned char                                      bIsRecording : 1;                                         // 0x0068(0x0001) (Transient)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0069(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.InterpTrack"));
		return ptr;
	}

};


// Class Engine.InterpTrackFloatBase
// 0x0020 (0x0090 - 0x0070)
class UInterpTrackFloatBase : public UInterpTrack
{
public:
	struct FInterpCurveFloat                           FloatTrack;                                               // 0x0070(0x0018) (ZeroConstructor)
	float                                              CurveTension;                                             // 0x0088(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x008C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.InterpTrackFloatBase"));
		return ptr;
	}

};


// Class Engine.InterpTrackAnimControl
// 0x0020 (0x00B0 - 0x0090)
class UInterpTrackAnimControl : public UInterpTrackFloatBase
{
public:
	struct FName                                       SlotName;                                                 // 0x0090(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<struct FAnimControlTrackKey>                AnimSeqs;                                                 // 0x0098(0x0010) (ZeroConstructor)
	unsigned char                                      bSkipAnimNotifiers : 1;                                   // 0x00A8(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00A9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.InterpTrackAnimControl"));
		return ptr;
	}

};


// Class Engine.InterpTrackVectorBase
// 0x0020 (0x0090 - 0x0070)
class UInterpTrackVectorBase : public UInterpTrack
{
public:
	struct FInterpCurveVector                          VectorTrack;                                              // 0x0070(0x0018) (ZeroConstructor)
	float                                              CurveTension;                                             // 0x0088(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x008C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.InterpTrackVectorBase"));
		return ptr;
	}

};


// Class Engine.InterpTrackAudioMaster
// 0x0000 (0x0090 - 0x0090)
class UInterpTrackAudioMaster : public UInterpTrackVectorBase
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.InterpTrackAudioMaster"));
		return ptr;
	}

};


// Class Engine.InterpTrackBoolProp
// 0x0018 (0x0088 - 0x0070)
class UInterpTrackBoolProp : public UInterpTrack
{
public:
	TArray<struct FBoolTrackKey>                       BoolTrack;                                                // 0x0070(0x0010) (ZeroConstructor)
	struct FName                                       PropertyName;                                             // 0x0080(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.InterpTrackBoolProp"));
		return ptr;
	}

};


// Class Engine.InterpTrackColorProp
// 0x0008 (0x0098 - 0x0090)
class UInterpTrackColorProp : public UInterpTrackVectorBase
{
public:
	struct FName                                       PropertyName;                                             // 0x0090(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.InterpTrackColorProp"));
		return ptr;
	}

};


// Class Engine.InterpTrackColorScale
// 0x0000 (0x0090 - 0x0090)
class UInterpTrackColorScale : public UInterpTrackVectorBase
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.InterpTrackColorScale"));
		return ptr;
	}

};


// Class Engine.InterpTrackDirector
// 0x0018 (0x0088 - 0x0070)
class UInterpTrackDirector : public UInterpTrack
{
public:
	TArray<struct FDirectorTrackCut>                   CutTrack;                                                 // 0x0070(0x0010) (ZeroConstructor)
	unsigned char                                      bSimulateCameraCutsOnClients : 1;                         // 0x0080(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0081(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.InterpTrackDirector"));
		return ptr;
	}

};


// Class Engine.InterpTrackEvent
// 0x0018 (0x0088 - 0x0070)
class UInterpTrackEvent : public UInterpTrack
{
public:
	TArray<struct FEventTrackKey>                      EventTrack;                                               // 0x0070(0x0010) (ZeroConstructor)
	unsigned char                                      bFireEventsWhenForwards : 1;                              // 0x0080(0x0001) (Edit)
	unsigned char                                      bFireEventsWhenBackwards : 1;                             // 0x0080(0x0001) (Edit)
	unsigned char                                      bFireEventsWhenJumpingForwards : 1;                       // 0x0080(0x0001) (Edit)
	unsigned char                                      bUseCustomEventName : 1;                                  // 0x0080(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0081(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.InterpTrackEvent"));
		return ptr;
	}

};


// Class Engine.InterpTrackFade
// 0x0018 (0x00A8 - 0x0090)
class UInterpTrackFade : public UInterpTrackFloatBase
{
public:
	unsigned char                                      bPersistFade : 1;                                         // 0x0090(0x0001) (Edit)
	unsigned char                                      bFadeAudio : 1;                                           // 0x0090(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0091(0x0003) MISSED OFFSET
	struct FLinearColor                                FadeColor;                                                // 0x0094(0x0010) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00A4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.InterpTrackFade"));
		return ptr;
	}

};


// Class Engine.InterpTrackFloatAnimBPParam
// 0x0020 (0x00B0 - 0x0090)
class UInterpTrackFloatAnimBPParam : public UInterpTrackFloatBase
{
public:
	class UAnimBlueprintGeneratedClass*                AnimBlueprintClass;                                       // 0x0090(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UClass*                                      AnimClass;                                                // 0x0098(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FName                                       ParamName;                                                // 0x00A0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x00A8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.InterpTrackFloatAnimBPParam"));
		return ptr;
	}

};


// Class Engine.InterpTrackFloatMaterialParam
// 0x0018 (0x00A8 - 0x0090)
class UInterpTrackFloatMaterialParam : public UInterpTrackFloatBase
{
public:
	TArray<class UMaterialInterface*>                  TargetMaterials;                                          // 0x0090(0x0010) (Edit, ZeroConstructor)
	struct FName                                       ParamName;                                                // 0x00A0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.InterpTrackFloatMaterialParam"));
		return ptr;
	}

};


// Class Engine.InterpTrackFloatParticleParam
// 0x0008 (0x0098 - 0x0090)
class UInterpTrackFloatParticleParam : public UInterpTrackFloatBase
{
public:
	struct FName                                       ParamName;                                                // 0x0090(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.InterpTrackFloatParticleParam"));
		return ptr;
	}

};


// Class Engine.InterpTrackFloatProp
// 0x0008 (0x0098 - 0x0090)
class UInterpTrackFloatProp : public UInterpTrackFloatBase
{
public:
	struct FName                                       PropertyName;                                             // 0x0090(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.InterpTrackFloatProp"));
		return ptr;
	}

};


// Class Engine.InterpTrackInst
// 0x0000 (0x0028 - 0x0028)
class UInterpTrackInst : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.InterpTrackInst"));
		return ptr;
	}

};


// Class Engine.InterpTrackInstAnimControl
// 0x0008 (0x0030 - 0x0028)
class UInterpTrackInstAnimControl : public UInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                                       // 0x0028(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x002C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.InterpTrackInstAnimControl"));
		return ptr;
	}

};


// Class Engine.InterpTrackInstAudioMaster
// 0x0000 (0x0028 - 0x0028)
class UInterpTrackInstAudioMaster : public UInterpTrackInst
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.InterpTrackInstAudioMaster"));
		return ptr;
	}

};


// Class Engine.InterpTrackInstProperty
// 0x0028 (0x0050 - 0x0028)
class UInterpTrackInstProperty : public UInterpTrackInst
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0028(0x0020) UNKNOWN PROPERTY: InterpProperty
	class UObject*                                     PropertyOuterObjectInst;                                  // 0x0048(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.InterpTrackInstProperty"));
		return ptr;
	}

};


// Class Engine.InterpTrackInstBoolProp
// 0x0018 (0x0068 - 0x0050)
class UInterpTrackInstBoolProp : public UInterpTrackInstProperty
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0050(0x0010) MISSED OFFSET
	bool                                               ResetBool;                                                // 0x0060(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0061(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.InterpTrackInstBoolProp"));
		return ptr;
	}

};


// Class Engine.InterpTrackInstColorProp
// 0x0010 (0x0060 - 0x0050)
class UInterpTrackInstColorProp : public UInterpTrackInstProperty
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0050(0x0008) MISSED OFFSET
	struct FColor                                      ResetColor;                                               // 0x0058(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x005C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.InterpTrackInstColorProp"));
		return ptr;
	}

};


// Class Engine.InterpTrackInstColorScale
// 0x0000 (0x0028 - 0x0028)
class UInterpTrackInstColorScale : public UInterpTrackInst
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.InterpTrackInstColorScale"));
		return ptr;
	}

};


// Class Engine.InterpTrackInstDirector
// 0x0008 (0x0030 - 0x0028)
class UInterpTrackInstDirector : public UInterpTrackInst
{
public:
	class AActor*                                      OldViewTarget;                                            // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.InterpTrackInstDirector"));
		return ptr;
	}

};


// Class Engine.InterpTrackInstEvent
// 0x0008 (0x0030 - 0x0028)
class UInterpTrackInstEvent : public UInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                                       // 0x0028(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x002C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.InterpTrackInstEvent"));
		return ptr;
	}

};


// Class Engine.InterpTrackInstFade
// 0x0000 (0x0028 - 0x0028)
class UInterpTrackInstFade : public UInterpTrackInst
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.InterpTrackInstFade"));
		return ptr;
	}

};


// Class Engine.InterpTrackInstFloatAnimBPParam
// 0x0018 (0x0040 - 0x0028)
class UInterpTrackInstFloatAnimBPParam : public UInterpTrackInst
{
public:
	class UAnimInstance*                               AnimScriptInstance;                                       // 0x0028(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              ResetFloat;                                               // 0x0030(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                                       // 0x0034(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.InterpTrackInstFloatAnimBPParam"));
		return ptr;
	}

};


// Class Engine.InterpTrackInstFloatMaterialParam
// 0x0038 (0x0060 - 0x0028)
class UInterpTrackInstFloatMaterialParam : public UInterpTrackInst
{
public:
	TArray<class UMaterialInstanceDynamic*>            MaterialInstances;                                        // 0x0028(0x0010) (ZeroConstructor)
	TArray<float>                                      ResetFloats;                                              // 0x0038(0x0010) (ZeroConstructor)
	TArray<struct FPrimitiveMaterialRef>               PrimitiveMaterialRefs;                                    // 0x0048(0x0010) (ZeroConstructor)
	class UInterpTrackFloatMaterialParam*              InstancedTrack;                                           // 0x0058(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.InterpTrackInstFloatMaterialParam"));
		return ptr;
	}

};


// Class Engine.InterpTrackInstFloatParticleParam
// 0x0008 (0x0030 - 0x0028)
class UInterpTrackInstFloatParticleParam : public UInterpTrackInst
{
public:
	float                                              ResetFloat;                                               // 0x0028(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x002C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.InterpTrackInstFloatParticleParam"));
		return ptr;
	}

};


// Class Engine.InterpTrackInstFloatProp
// 0x0010 (0x0060 - 0x0050)
class UInterpTrackInstFloatProp : public UInterpTrackInstProperty
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0050(0x0008) MISSED OFFSET
	float                                              ResetFloat;                                               // 0x0058(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x005C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.InterpTrackInstFloatProp"));
		return ptr;
	}

};


// Class Engine.InterpTrackInstLinearColorProp
// 0x0018 (0x0068 - 0x0050)
class UInterpTrackInstLinearColorProp : public UInterpTrackInstProperty
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0050(0x0008) MISSED OFFSET
	struct FLinearColor                                ResetColor;                                               // 0x0058(0x0010) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.InterpTrackInstLinearColorProp"));
		return ptr;
	}

};


// Class Engine.InterpTrackInstMove
// 0x0030 (0x0058 - 0x0028)
class UInterpTrackInstMove : public UInterpTrackInst
{
public:
	struct FVector                                     ResetLocation;                                            // 0x0028(0x0018) (ZeroConstructor, IsPlainOldData)
	struct FRotator                                    ResetRotation;                                            // 0x0040(0x0018) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.InterpTrackInstMove"));
		return ptr;
	}

};


// Class Engine.InterpTrackInstParticleReplay
// 0x0008 (0x0030 - 0x0028)
class UInterpTrackInstParticleReplay : public UInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                                       // 0x0028(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x002C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.InterpTrackInstParticleReplay"));
		return ptr;
	}

};


// Class Engine.InterpTrackInstSlomo
// 0x0008 (0x0030 - 0x0028)
class UInterpTrackInstSlomo : public UInterpTrackInst
{
public:
	float                                              OldTimeDilation;                                          // 0x0028(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x002C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.InterpTrackInstSlomo"));
		return ptr;
	}

};


// Class Engine.InterpTrackInstSound
// 0x0010 (0x0038 - 0x0028)
class UInterpTrackInstSound : public UInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                                       // 0x0028(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x002C(0x0004) MISSED OFFSET
	class UAudioComponent*                             PlayAudioComp;                                            // 0x0030(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.InterpTrackInstSound"));
		return ptr;
	}

};


// Class Engine.InterpTrackInstToggle
// 0x0010 (0x0038 - 0x0028)
class UInterpTrackInstToggle : public UInterpTrackInst
{
public:
	TEnumAsByte<ETrackToggleAction>                    Action;                                                   // 0x0028(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0029(0x0003) MISSED OFFSET
	float                                              LastUpdatePosition;                                       // 0x002C(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bSavedActiveState : 1;                                    // 0x0030(0x0001)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0031(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.InterpTrackInstToggle"));
		return ptr;
	}

};


// Class Engine.InterpTrackInstVectorMaterialParam
// 0x0038 (0x0060 - 0x0028)
class UInterpTrackInstVectorMaterialParam : public UInterpTrackInst
{
public:
	TArray<class UMaterialInstanceDynamic*>            MaterialInstances;                                        // 0x0028(0x0010) (ZeroConstructor)
	TArray<struct FVector>                             ResetVectors;                                             // 0x0038(0x0010) (ZeroConstructor)
	TArray<struct FPrimitiveMaterialRef>               PrimitiveMaterialRefs;                                    // 0x0048(0x0010) (ZeroConstructor)
	class UInterpTrackVectorMaterialParam*             InstancedTrack;                                           // 0x0058(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.InterpTrackInstVectorMaterialParam"));
		return ptr;
	}

};


// Class Engine.InterpTrackInstVectorProp
// 0x0020 (0x0070 - 0x0050)
class UInterpTrackInstVectorProp : public UInterpTrackInstProperty
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0050(0x0008) MISSED OFFSET
	struct FVector                                     ResetVector;                                              // 0x0058(0x0018) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.InterpTrackInstVectorProp"));
		return ptr;
	}

};


// Class Engine.InterpTrackInstVisibility
// 0x0008 (0x0030 - 0x0028)
class UInterpTrackInstVisibility : public UInterpTrackInst
{
public:
	TEnumAsByte<EVisibilityTrackAction>                Action;                                                   // 0x0028(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0029(0x0003) MISSED OFFSET
	float                                              LastUpdatePosition;                                       // 0x002C(0x0004) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.InterpTrackInstVisibility"));
		return ptr;
	}

};


// Class Engine.InterpTrackLinearColorBase
// 0x0020 (0x0090 - 0x0070)
class UInterpTrackLinearColorBase : public UInterpTrack
{
public:
	struct FInterpCurveLinearColor                     LinearColorTrack;                                         // 0x0070(0x0018) (ZeroConstructor)
	float                                              CurveTension;                                             // 0x0088(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x008C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.InterpTrackLinearColorBase"));
		return ptr;
	}

};


// Class Engine.InterpTrackLinearColorProp
// 0x0008 (0x0098 - 0x0090)
class UInterpTrackLinearColorProp : public UInterpTrackLinearColorBase
{
public:
	struct FName                                       PropertyName;                                             // 0x0090(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.InterpTrackLinearColorProp"));
		return ptr;
	}

};


// Class Engine.InterpTrackMove
// 0x0058 (0x00C8 - 0x0070)
class UInterpTrackMove : public UInterpTrack
{
public:
	struct FInterpCurveVector                          PosTrack;                                                 // 0x0070(0x0018) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	struct FInterpCurveVector                          EulerTrack;                                               // 0x0088(0x0018) (ZeroConstructor)
	struct FInterpLookupTrack                          LookupTrack;                                              // 0x00A0(0x0010)
	struct FName                                       LookAtGroupName;                                          // 0x00B0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              LinCurveTension;                                          // 0x00B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AngCurveTension;                                          // 0x00BC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUseQuatInterpolation : 1;                                // 0x00C0(0x0001) (Edit)
	unsigned char                                      bShowArrowAtKeys : 1;                                     // 0x00C0(0x0001) (Edit)
	unsigned char                                      bDisableMovement : 1;                                     // 0x00C0(0x0001) (Edit)
	unsigned char                                      bShowTranslationOnCurveEd : 1;                            // 0x00C0(0x0001) (Edit)
	unsigned char                                      bShowRotationOnCurveEd : 1;                               // 0x00C0(0x0001) (Edit)
	unsigned char                                      bHide3DTrack : 1;                                         // 0x00C0(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00C1(0x0003) MISSED OFFSET
	TEnumAsByte<EInterpTrackMoveRotMode>               RotMode;                                                  // 0x00C4(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x00C5(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.InterpTrackMove"));
		return ptr;
	}

};


// Class Engine.InterpTrackMoveAxis
// 0x0018 (0x00A8 - 0x0090)
class UInterpTrackMoveAxis : public UInterpTrackFloatBase
{
public:
	TEnumAsByte<EInterpMoveAxis>                       MoveAxis;                                                 // 0x0090(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0091(0x0007) MISSED OFFSET
	struct FInterpLookupTrack                          LookupTrack;                                              // 0x0098(0x0010)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.InterpTrackMoveAxis"));
		return ptr;
	}

};


// Class Engine.InterpTrackParticleReplay
// 0x0010 (0x0080 - 0x0070)
class UInterpTrackParticleReplay : public UInterpTrack
{
public:
	TArray<struct FParticleReplayTrackKey>             TrackKeys;                                                // 0x0070(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.InterpTrackParticleReplay"));
		return ptr;
	}

};


// Class Engine.InterpTrackSlomo
// 0x0000 (0x0090 - 0x0090)
class UInterpTrackSlomo : public UInterpTrackFloatBase
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.InterpTrackSlomo"));
		return ptr;
	}

};


// Class Engine.InterpTrackSound
// 0x0018 (0x00A8 - 0x0090)
class UInterpTrackSound : public UInterpTrackVectorBase
{
public:
	TArray<struct FSoundTrackKey>                      Sounds;                                                   // 0x0090(0x0010) (ZeroConstructor)
	unsigned char                                      bPlayOnReverse : 1;                                       // 0x00A0(0x0001) (Edit)
	unsigned char                                      bContinueSoundOnMatineeEnd : 1;                           // 0x00A0(0x0001) (Edit)
	unsigned char                                      bSuppressSubtitles : 1;                                   // 0x00A0(0x0001) (Edit)
	unsigned char                                      bTreatAsDialogue : 1;                                     // 0x00A0(0x0001) (Edit)
	unsigned char                                      bAttach : 1;                                              // 0x00A0(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00A1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.InterpTrackSound"));
		return ptr;
	}

};


// Class Engine.InterpTrackToggle
// 0x0018 (0x0088 - 0x0070)
class UInterpTrackToggle : public UInterpTrack
{
public:
	TArray<struct FToggleTrackKey>                     ToggleTrack;                                              // 0x0070(0x0010) (ZeroConstructor)
	unsigned char                                      bActivateSystemEachUpdate : 1;                            // 0x0080(0x0001) (Edit)
	unsigned char                                      bActivateWithJustAttachedFlag : 1;                        // 0x0080(0x0001) (Edit)
	unsigned char                                      bFireEventsWhenForwards : 1;                              // 0x0080(0x0001) (Edit)
	unsigned char                                      bFireEventsWhenBackwards : 1;                             // 0x0080(0x0001) (Edit)
	unsigned char                                      bFireEventsWhenJumpingForwards : 1;                       // 0x0080(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0081(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.InterpTrackToggle"));
		return ptr;
	}

};


// Class Engine.InterpTrackVectorMaterialParam
// 0x0018 (0x00A8 - 0x0090)
class UInterpTrackVectorMaterialParam : public UInterpTrackVectorBase
{
public:
	TArray<class UMaterialInterface*>                  TargetMaterials;                                          // 0x0090(0x0010) (Edit, ZeroConstructor)
	struct FName                                       ParamName;                                                // 0x00A0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.InterpTrackVectorMaterialParam"));
		return ptr;
	}

};


// Class Engine.InterpTrackVectorProp
// 0x0008 (0x0098 - 0x0090)
class UInterpTrackVectorProp : public UInterpTrackVectorBase
{
public:
	struct FName                                       PropertyName;                                             // 0x0090(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.InterpTrackVectorProp"));
		return ptr;
	}

};


// Class Engine.InterpTrackVisibility
// 0x0018 (0x0088 - 0x0070)
class UInterpTrackVisibility : public UInterpTrack
{
public:
	TArray<struct FVisibilityTrackKey>                 VisibilityTrack;                                          // 0x0070(0x0010) (ZeroConstructor)
	unsigned char                                      bFireEventsWhenForwards : 1;                              // 0x0080(0x0001) (Edit)
	unsigned char                                      bFireEventsWhenBackwards : 1;                             // 0x0080(0x0001) (Edit)
	unsigned char                                      bFireEventsWhenJumpingForwards : 1;                       // 0x0080(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0081(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.InterpTrackVisibility"));
		return ptr;
	}

};


// Class Engine.IntSerialization
// 0x0028 (0x0050 - 0x0028)
class UIntSerialization : public UObject
{
public:
	uint16_t                                           UnsignedInt16Variable;                                    // 0x0028(0x0002) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x002A(0x0002) MISSED OFFSET
	uint32_t                                           UnsignedInt32Variable;                                    // 0x002C(0x0004) (ZeroConstructor, IsPlainOldData)
	uint64_t                                           UnsignedInt64Variable;                                    // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData)
	int8_t                                             SignedInt8Variable;                                       // 0x0038(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x0039(0x0001) MISSED OFFSET
	int16_t                                            SignedInt16Variable;                                      // 0x003A(0x0002) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x003C(0x0004) MISSED OFFSET
	int64_t                                            SignedInt64Variable;                                      // 0x0040(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnsignedInt8Variable;                                     // 0x0048(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0049(0x0003) MISSED OFFSET
	int                                                SignedInt32Variable;                                      // 0x004C(0x0004) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.IntSerialization"));
		return ptr;
	}

};


// Class Engine.ISMPartitionInstanceManager
// 0x0000 (0x0028 - 0x0028)
class UISMPartitionInstanceManager : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ISMPartitionInstanceManager"));
		return ptr;
	}

};


// Class Engine.ISMPartitionInstanceManagerProvider
// 0x0000 (0x0028 - 0x0028)
class UISMPartitionInstanceManagerProvider : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ISMPartitionInstanceManagerProvider"));
		return ptr;
	}

};


// Class Engine.KillZVolume
// 0x0000 (0x0310 - 0x0310)
class AKillZVolume : public APhysicsVolume
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.KillZVolume"));
		return ptr;
	}

};


// Class Engine.KismetArrayLibrary
// 0x0000 (0x0028 - 0x0028)
class UKismetArrayLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.KismetArrayLibrary"));
		return ptr;
	}


	void STATIC_SetArrayPropertyByName(class UObject* Object, const struct FName& PropertyName, TArray<int> Value);//Offset:Discovery.exe+0x573E1D0
	void STATIC_FilterArray(TArray<class AActor*> TargetArray, class UClass* FilterClass, TArray<class AActor*>* FilteredArray);//Offset:Discovery.exe+0x573BBF0
	void STATIC_Array_Swap(TArray<int> TargetArray, int FirstIndex, int SecondIndex);//Offset:Discovery.exe+0x573E080
	void STATIC_Array_Shuffle(TArray<int> TargetArray);//Offset:Discovery.exe+0x573DFF0
	void STATIC_Array_Set(TArray<int> TargetArray, int Index, int Item, bool bSizeToFit);//Offset:Discovery.exe+0x573DD70
	void STATIC_Array_Reverse(TArray<int> TargetArray);//Offset:Discovery.exe+0x573DCE0
	void STATIC_Array_Resize(TArray<int> TargetArray, int Size);//Offset:Discovery.exe+0x573DBE0
	bool STATIC_Array_RemoveItem(TArray<int> TargetArray, int Item);//Offset:Discovery.exe+0x573DA10
	void STATIC_Array_Remove(TArray<int> TargetArray, int IndexToRemove);//Offset:Discovery.exe+0x573D910
	void STATIC_Array_RandomFromStream(TArray<int> TargetArray, struct FRandomStream* RandomStream, int* OutItem, int* OutIndex);//Offset:Discovery.exe+0x573D790
	void STATIC_Array_Random(TArray<int> TargetArray, int* OutItem, int* OutIndex);//Offset:Discovery.exe+0x573D660
	int STATIC_Array_Length(TArray<int> TargetArray);//Offset:Discovery.exe+0x573D5D0
	int STATIC_Array_LastIndex(TArray<int> TargetArray);//Offset:Discovery.exe+0x573D540
	bool STATIC_Array_IsValidIndex(TArray<int> TargetArray, int IndexToTest);//Offset:Discovery.exe+0x573D440
	bool STATIC_Array_IsNotEmpty(TArray<int> TargetArray);//Offset:Discovery.exe+0x573D3B0
	bool STATIC_Array_IsEmpty(TArray<int> TargetArray);//Offset:Discovery.exe+0x573D320
	void STATIC_Array_Insert(TArray<int> TargetArray, int NewItem, int Index);//Offset:Discovery.exe+0x573D110
	bool STATIC_Array_Identical(TArray<int> ArrayA, TArray<int> ArrayB);//Offset:Discovery.exe+0x573D020
	void STATIC_Array_Get(TArray<int> TargetArray, int Index, int* Item);//Offset:Discovery.exe+0x573CDC0
	int STATIC_Array_Find(TArray<int> TargetArray, int ItemToFind);//Offset:Discovery.exe+0x573CBF0
	bool STATIC_Array_Contains(TArray<int> TargetArray, int ItemToFind);//Offset:Discovery.exe+0x573CA20
	void STATIC_Array_Clear(TArray<int> TargetArray);//Offset:Discovery.exe+0x573C990
	void STATIC_Array_Append(TArray<int> TargetArray, TArray<int> SourceArray);//Offset:Discovery.exe+0x573C8A0
	int STATIC_Array_AddUnique(TArray<int> TargetArray, int NewItem);//Offset:Discovery.exe+0x573C6E0
	int STATIC_Array_Add(TArray<int> TargetArray, int NewItem);//Offset:Discovery.exe+0x573C520
};


// Class Engine.KismetGuidLibrary
// 0x0000 (0x0028 - 0x0028)
class UKismetGuidLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.KismetGuidLibrary"));
		return ptr;
	}


	void STATIC_Parse_StringToGuid(const struct FString& GuidString, struct FGuid* OutGuid, bool* Success);//Offset:Discovery.exe+0x573E7E0
	bool STATIC_NotEqual_GuidGuid(const struct FGuid& A, const struct FGuid& B);//Offset:Discovery.exe+0x573EBA0
	struct FGuid STATIC_NewGuid();//Offset:Discovery.exe+0x573EA10
	bool STATIC_IsValid_Guid(const struct FGuid& InGuid);//Offset:Discovery.exe+0x573EB00
	void STATIC_Invalidate_Guid(struct FGuid* InGuid);//Offset:Discovery.exe+0x573EA60
	bool STATIC_EqualEqual_GuidGuid(const struct FGuid& A, const struct FGuid& B);//Offset:Discovery.exe+0x573ECA0
	struct FString STATIC_Conv_GuidToString(const struct FGuid& InGuid);//Offset:Discovery.exe+0x573E930
};


// Class Engine.KismetInputLibrary
// 0x0000 (0x0028 - 0x0028)
class UKismetInputLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.KismetInputLibrary"));
		return ptr;
	}


	bool STATIC_PointerEvent_IsTouchEvent(const struct FPointerEvent& Input);//Offset:Discovery.exe+0x573F680
	bool STATIC_PointerEvent_IsMouseButtonDown(const struct FPointerEvent& Input, const struct FKey& MouseButton);//Offset:Discovery.exe+0x573FF60
	float STATIC_PointerEvent_GetWheelDelta(const struct FPointerEvent& Input);//Offset:Discovery.exe+0x573FC00
	int STATIC_PointerEvent_GetUserIndex(const struct FPointerEvent& Input);//Offset:Discovery.exe+0x573FAA0
	int STATIC_PointerEvent_GetTouchpadIndex(const struct FPointerEvent& Input);//Offset:Discovery.exe+0x573F7E0
	struct FVector2D STATIC_PointerEvent_GetScreenSpacePosition(const struct FPointerEvent& Input);//Offset:Discovery.exe+0x5740460
	int STATIC_PointerEvent_GetPointerIndex(const struct FPointerEvent& Input);//Offset:Discovery.exe+0x573F940
	struct FVector2D STATIC_PointerEvent_GetLastScreenSpacePosition(const struct FPointerEvent& Input);//Offset:Discovery.exe+0x57402F0
	enum class ESlateGesture STATIC_PointerEvent_GetGestureType(const struct FPointerEvent& Input);//Offset:Discovery.exe+0x573F520
	struct FVector2D STATIC_PointerEvent_GetGestureDelta(const struct FPointerEvent& Input);//Offset:Discovery.exe+0x573F3B0
	struct FKey STATIC_PointerEvent_GetEffectingButton(const struct FPointerEvent& Input);//Offset:Discovery.exe+0x573FD60
	struct FVector2D STATIC_PointerEvent_GetCursorDelta(const struct FPointerEvent& Input);//Offset:Discovery.exe+0x5740180
	bool STATIC_Key_IsVectorAxis(const struct FKey& Key);//Offset:Discovery.exe+0x57420B0
	bool STATIC_Key_IsValid(const struct FKey& Key);//Offset:Discovery.exe+0x5741A90
	bool STATIC_Key_IsMouseButton(const struct FKey& Key);//Offset:Discovery.exe+0x5742270
	bool STATIC_Key_IsModifierKey(const struct FKey& Key);//Offset:Discovery.exe+0x5742430
	bool STATIC_Key_IsKeyboardKey(const struct FKey& Key);//Offset:Discovery.exe+0x5742190
	bool STATIC_Key_IsGamepadKey(const struct FKey& Key);//Offset:Discovery.exe+0x5742350
	bool STATIC_Key_IsDigital(const struct FKey& Key);//Offset:Discovery.exe+0x5741B70
	bool STATIC_Key_IsButtonAxis(const struct FKey& Key);//Offset:Discovery.exe+0x5741D30
	bool STATIC_Key_IsAxis3D(const struct FKey& Key);//Offset:Discovery.exe+0x5741E10
	bool STATIC_Key_IsAxis2D(const struct FKey& Key);//Offset:Discovery.exe+0x5741EF0
	bool STATIC_Key_IsAxis1D(const struct FKey& Key);//Offset:Discovery.exe+0x5741FD0
	bool STATIC_Key_IsAnalog(const struct FKey& Key);//Offset:Discovery.exe+0x5741C50
	enum class EUINavigation STATIC_Key_GetNavigationDirectionFromKey(const struct FKeyEvent& InKeyEvent);//Offset:Discovery.exe+0x5741790
	enum class EUINavigation STATIC_Key_GetNavigationDirectionFromAnalog(const struct FAnalogInputEvent& InAnalogEvent);//Offset:Discovery.exe+0x5741680
	enum class EUINavigationAction STATIC_Key_GetNavigationActionFromKey(const struct FKeyEvent& InKeyEvent);//Offset:Discovery.exe+0x57418A0
	enum class EUINavigationAction STATIC_Key_GetNavigationAction(const struct FKey& InKey);//Offset:Discovery.exe+0x57419B0
	struct FText STATIC_Key_GetDisplayName(const struct FKey& Key);//Offset:Discovery.exe+0x5741560
	bool STATIC_InputEvent_IsShiftDown(const struct FInputEvent& Input);//Offset:Discovery.exe+0x57413C0
	bool STATIC_InputEvent_IsRightShiftDown(const struct FInputEvent& Input);//Offset:Discovery.exe+0x5741220
	bool STATIC_InputEvent_IsRightControlDown(const struct FInputEvent& Input);//Offset:Discovery.exe+0x5740FB0
	bool STATIC_InputEvent_IsRightCommandDown(const struct FInputEvent& Input);//Offset:Discovery.exe+0x5740AD0
	bool STATIC_InputEvent_IsRightAltDown(const struct FInputEvent& Input);//Offset:Discovery.exe+0x5740D40
	bool STATIC_InputEvent_IsRepeat(const struct FInputEvent& Input);//Offset:Discovery.exe+0x5741490
	bool STATIC_InputEvent_IsLeftShiftDown(const struct FInputEvent& Input);//Offset:Discovery.exe+0x57412F0
	bool STATIC_InputEvent_IsLeftControlDown(const struct FInputEvent& Input);//Offset:Discovery.exe+0x5741080
	bool STATIC_InputEvent_IsLeftCommandDown(const struct FInputEvent& Input);//Offset:Discovery.exe+0x5740BA0
	bool STATIC_InputEvent_IsLeftAltDown(const struct FInputEvent& Input);//Offset:Discovery.exe+0x5740E10
	bool STATIC_InputEvent_IsControlDown(const struct FInputEvent& Input);//Offset:Discovery.exe+0x5741150
	bool STATIC_InputEvent_IsCommandDown(const struct FInputEvent& Input);//Offset:Discovery.exe+0x5740C70
	bool STATIC_InputEvent_IsAltDown(const struct FInputEvent& Input);//Offset:Discovery.exe+0x5740EE0
	struct FText STATIC_InputChord_GetDisplayName(const struct FInputChord& Key);//Offset:Discovery.exe+0x5740990
	int STATIC_GetUserIndex(const struct FKeyEvent& Input);//Offset:Discovery.exe+0x57406E0
	struct FKey STATIC_GetKey(const struct FKeyEvent& Input);//Offset:Discovery.exe+0x57407F0
	float STATIC_GetAnalogValue(const struct FAnalogInputEvent& Input);//Offset:Discovery.exe+0x57405D0
	bool STATIC_EqualEqual_KeyKey(const struct FKey& A, const struct FKey& B);//Offset:Discovery.exe+0x5742720
	bool STATIC_EqualEqual_InputChordInputChord(const struct FInputChord& A, const struct FInputChord& B);//Offset:Discovery.exe+0x5742510
	void STATIC_CalibrateTilt();//Offset:Discovery.exe+0x57428C0
};


// Class Engine.KismetInternationalizationLibrary
// 0x0000 (0x0028 - 0x0028)
class UKismetInternationalizationLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.KismetInternationalizationLibrary"));
		return ptr;
	}


	bool STATIC_SetCurrentLocale(const struct FString& Culture, bool SaveToConfig);//Offset:Discovery.exe+0x5746340
	bool STATIC_SetCurrentLanguageAndLocale(const struct FString& Culture, bool SaveToConfig);//Offset:Discovery.exe+0x57461D0
	bool STATIC_SetCurrentLanguage(const struct FString& Culture, bool SaveToConfig);//Offset:Discovery.exe+0x57464B0
	bool STATIC_SetCurrentCulture(const struct FString& Culture, bool SaveToConfig);//Offset:Discovery.exe+0x57465A0
	bool STATIC_SetCurrentAssetGroupCulture(const struct FName& AssetGroup, const struct FString& Culture, bool SaveToConfig);//Offset:Discovery.exe+0x5746090
	struct FString STATIC_GetSuitableCulture(TArray<struct FString> AvailableCultures, const struct FString& CultureToMatch, const struct FString& FallbackCulture);//Offset:Discovery.exe+0x5745A00
	struct FString STATIC_GetNativeCulture(enum class ELocalizedTextSourceCategory TextCategory);//Offset:Discovery.exe+0x5745E10
	TArray<struct FString> STATIC_GetLocalizedCultures(bool IncludeGame, bool IncludeEngine, bool IncludeEditor, bool IncludeAdditional);//Offset:Discovery.exe+0x5745BE0
	struct FString STATIC_GetCurrentLocale();//Offset:Discovery.exe+0x57462C0
	struct FString STATIC_GetCurrentLanguage();//Offset:Discovery.exe+0x5746430
	struct FString STATIC_GetCurrentCulture();//Offset:Discovery.exe+0x5746430
	struct FString STATIC_GetCurrentAssetGroupCulture(const struct FName& AssetGroup);//Offset:Discovery.exe+0x5745FC0
	struct FString STATIC_GetCultureDisplayName(const struct FString& Culture, bool Localized);//Offset:Discovery.exe+0x57458D0
	void STATIC_ClearCurrentAssetGroupCulture(const struct FName& AssetGroup, bool SaveToConfig);//Offset:Discovery.exe+0x5745EE0
};


// Class Engine.KismetMaterialLibrary
// 0x0000 (0x0028 - 0x0028)
class UKismetMaterialLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.KismetMaterialLibrary"));
		return ptr;
	}


	void STATIC_SetVectorParameterValue(class UObject* WorldContextObject, class UMaterialParameterCollection* Collection, const struct FName& ParameterName, const struct FLinearColor& ParameterValue);//Offset:Discovery.exe+0x5747420
	void STATIC_SetScalarParameterValue(class UObject* WorldContextObject, class UMaterialParameterCollection* Collection, const struct FName& ParameterName, float ParameterValue);//Offset:Discovery.exe+0x57475A0
	struct FLinearColor STATIC_GetVectorParameterValue(class UObject* WorldContextObject, class UMaterialParameterCollection* Collection, const struct FName& ParameterName);//Offset:Discovery.exe+0x57471B0
	float STATIC_GetScalarParameterValue(class UObject* WorldContextObject, class UMaterialParameterCollection* Collection, const struct FName& ParameterName);//Offset:Discovery.exe+0x57472F0
	class UMaterialInstanceDynamic* STATIC_CreateDynamicMaterialInstance(class UObject* WorldContextObject, class UMaterialInterface* Parent, const struct FName& OptionalName, enum class EMIDCreationFlags CreationFlags);//Offset:Discovery.exe+0x5747030
};


// Class Engine.KismetMathLibrary
// 0x0000 (0x0028 - 0x0028)
class UKismetMathLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.KismetMathLibrary"));
		return ptr;
	}


	int STATIC_Xor_IntInt(int A, int B);//Offset:Discovery.exe+0x577C630
	int64_t STATIC_Xor_Int64Int64(int64_t A, int64_t B);//Offset:Discovery.exe+0x577AFC0
	int STATIC_Wrap(int Value, int Min, int Max);//Offset:Discovery.exe+0x577BD60
	struct FVector STATIC_WeightedMovingAverage_FVector(const struct FVector& CurrentSample, const struct FVector& PreviousSample, float Weight);//Offset:Discovery.exe+0x57489C0
	struct FRotator STATIC_WeightedMovingAverage_FRotator(const struct FRotator& CurrentSample, const struct FRotator& PreviousSample, float Weight);//Offset:Discovery.exe+0x5748840
	float STATIC_WeightedMovingAverage_Float(float CurrentSample, float PreviousSample, float Weight);//Offset:Discovery.exe+0x5748B40
	double STATIC_VSizeXYSquared(const struct FVector& A);//Offset:Discovery.exe+0x576CFC0
	double STATIC_VSizeXY(const struct FVector& A);//Offset:Discovery.exe+0x576D060
	double STATIC_VSizeSquared(const struct FVector& A);//Offset:Discovery.exe+0x576D110
	double STATIC_VSize2DSquared(const struct FVector2D& A);//Offset:Discovery.exe+0x57720B0
	double STATIC_VSize2D(const struct FVector2D& A);//Offset:Discovery.exe+0x5772150
	double STATIC_VSize(const struct FVector& A);//Offset:Discovery.exe+0x576D1C0
	struct FVector STATIC_VLerp(const struct FVector& A, const struct FVector& B, float Alpha);//Offset:Discovery.exe+0x1BB4080
	struct FVector STATIC_VInterpTo_Constant(const struct FVector& Current, const struct FVector& Target, float DeltaTime, float InterpSpeed);//Offset:Discovery.exe+0x576BB40
	struct FVector STATIC_VInterpTo(const struct FVector& Current, const struct FVector& Target, float DeltaTime, float InterpSpeed);//Offset:Discovery.exe+0x576BD60
	struct FVector STATIC_VectorSpringInterp(const struct FVector& Current, const struct FVector& Target, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass, float TargetVelocityAmount, bool bClamp, const struct FVector& MinValue, const struct FVector& MaxValue, bool bInitializeFromTarget, struct FVectorSpringState* SpringState);//Offset:Discovery.exe+0x576B5F0
	struct FVector STATIC_Vector_Zero();//Offset:Discovery.exe+0x5772060
	struct FVector STATIC_Vector_Up();//Offset:Discovery.exe+0x5771F20
	void STATIC_Vector_UnwindEuler(struct FVector* A);//Offset:Discovery.exe+0x576F7D0
	struct FVector2D STATIC_Vector_UnitCartesianToSpherical(const struct FVector& A);//Offset:Discovery.exe+0x576DDF0
	struct FVector STATIC_Vector_ToRadians(const struct FVector& A);//Offset:Discovery.exe+0x576E0C0
	struct FVector STATIC_Vector_ToDegrees(const struct FVector& A);//Offset:Discovery.exe+0x576DFE0
	struct FVector STATIC_Vector_SnappedToGrid(const struct FVector& InVect, float InGridSize);//Offset:Discovery.exe+0x576AB10
	void STATIC_Vector_Set(double X, double Y, double Z, struct FVector* A);//Offset:Discovery.exe+0x5771A70
	struct FVector STATIC_Vector_Right();//Offset:Discovery.exe+0x5771E80
	struct FVector STATIC_Vector_Reciprocal(const struct FVector& A);//Offset:Discovery.exe+0x576B070
	struct FVector STATIC_Vector_ProjectOnToNormal(const struct FVector& V, const struct FVector& InNormal);//Offset:Discovery.exe+0x576A470
	struct FVector STATIC_Vector_One();//Offset:Discovery.exe+0x5772010
	struct FVector STATIC_Vector_NormalUnsafe(const struct FVector& A);//Offset:Discovery.exe+0x576C3D0
	void STATIC_Vector_Normalize(float Tolerance, struct FVector* A);//Offset:Discovery.exe+0x576C220
	struct FVector STATIC_Vector_Normal2D(const struct FVector& A, float Tolerance);//Offset:Discovery.exe+0x576C520
	struct FVector STATIC_Vector_MirrorByPlane(const struct FVector& A, const struct FPlane& InPlane);//Offset:Discovery.exe+0x576AD80
	struct FVector STATIC_Vector_Left();//Offset:Discovery.exe+0x5771E30
	bool STATIC_Vector_IsZero(const struct FVector& A);//Offset:Discovery.exe+0x576CD80
	bool STATIC_Vector_IsUnit(const struct FVector& A, float SquaredLenthTolerance);//Offset:Discovery.exe+0x576C9D0
	bool STATIC_Vector_IsUniform(const struct FVector& A, float Tolerance);//Offset:Discovery.exe+0x576CAF0
	bool STATIC_Vector_IsNormal(const struct FVector& A);//Offset:Discovery.exe+0x576C8F0
	bool STATIC_Vector_IsNearlyZero(const struct FVector& A, float Tolerance);//Offset:Discovery.exe+0x576CE80
	bool STATIC_Vector_IsNAN(const struct FVector& A);//Offset:Discovery.exe+0x576CCA0
	double STATIC_Vector_HeadingAngle(const struct FVector& A);//Offset:Discovery.exe+0x576E420
	struct FVector STATIC_Vector_GetSignVector(const struct FVector& A);//Offset:Discovery.exe+0x576E650
	struct FVector STATIC_Vector_GetProjection(const struct FVector& A);//Offset:Discovery.exe+0x576E570
	double STATIC_Vector_GetAbsMin(const struct FVector& A);//Offset:Discovery.exe+0x576EB10
	double STATIC_Vector_GetAbsMax(const struct FVector& A);//Offset:Discovery.exe+0x576EBE0
	struct FVector STATIC_Vector_GetAbs(const struct FVector& A);//Offset:Discovery.exe+0x576EA50
	struct FVector STATIC_Vector_Forward();//Offset:Discovery.exe+0x5771FC0
	struct FVector STATIC_Vector_Down();//Offset:Discovery.exe+0x5771ED0
	double STATIC_Vector_DistanceSquared(const struct FVector& v1, const struct FVector& v2);//Offset:Discovery.exe+0x576D460
	double STATIC_Vector_Distance2DSquared(const struct FVector& v1, const struct FVector& v2);//Offset:Discovery.exe+0x576D280
	double STATIC_Vector_Distance2D(const struct FVector& v1, const struct FVector& v2);//Offset:Discovery.exe+0x576D360
	double STATIC_Vector_Distance(const struct FVector& v1, const struct FVector& v2);//Offset:Discovery.exe+0x576D5A0
	double STATIC_Vector_CosineAngle2D(const struct FVector& A, const struct FVector& B);//Offset:Discovery.exe+0x576E1A0
	struct FVector STATIC_Vector_ComponentMin(const struct FVector& A, const struct FVector& B);//Offset:Discovery.exe+0x576E8F0
	struct FVector STATIC_Vector_ComponentMax(const struct FVector& A, const struct FVector& B);//Offset:Discovery.exe+0x576E790
	struct FVector STATIC_Vector_ClampSizeMax2D(const struct FVector& A, double Max);//Offset:Discovery.exe+0x576EE50
	struct FVector STATIC_Vector_ClampSizeMax(const struct FVector& A, double Max);//Offset:Discovery.exe+0x576F020
	struct FVector STATIC_Vector_ClampSize2D(const struct FVector& A, double Min, double Max);//Offset:Discovery.exe+0x576F220
	struct FVector STATIC_Vector_BoundedToCube(const struct FVector& InVect, float InRadius);//Offset:Discovery.exe+0x576A970
	struct FVector STATIC_Vector_BoundedToBox(const struct FVector& InVect, const struct FVector& InBoxMin, const struct FVector& InBoxMax);//Offset:Discovery.exe+0x576A580
	struct FVector STATIC_Vector_Backward();//Offset:Discovery.exe+0x5771F70
	void STATIC_Vector_Assign(const struct FVector& InVector, struct FVector* A);//Offset:Discovery.exe+0x5771C00
	void STATIC_Vector_AddBounded(const struct FVector& InAddVect, float InRadius, struct FVector* A);//Offset:Discovery.exe+0x576A740
	struct FVector4 STATIC_Vector4_Zero();//Offset:Discovery.exe+0x5768E60
	double STATIC_Vector4_SizeSquared3(const struct FVector4& A);//Offset:Discovery.exe+0x5766810
	double STATIC_Vector4_SizeSquared(const struct FVector4& A);//Offset:Discovery.exe+0x57669E0
	double STATIC_Vector4_Size3(const struct FVector4& A);//Offset:Discovery.exe+0x57668F0
	double STATIC_Vector4_Size(const struct FVector4& A);//Offset:Discovery.exe+0x5766AD0
	void STATIC_Vector4_Set(double X, double Y, double Z, double W, struct FVector4* A);//Offset:Discovery.exe+0x57674A0
	struct FVector4 STATIC_Vector4_NormalUnsafe3(const struct FVector4& A);//Offset:Discovery.exe+0x5766200
	void STATIC_Vector4_Normalize3(float Tolerance, struct FVector4* A);//Offset:Discovery.exe+0x5765FE0
	struct FVector4 STATIC_Vector4_Normal3(const struct FVector4& A, float Tolerance);//Offset:Discovery.exe+0x5766370
	struct FVector4 STATIC_Vector4_Negated(const struct FVector4& A);//Offset:Discovery.exe+0x57677D0
	struct FVector4 STATIC_Vector4_MirrorByVector3(const struct FVector4& Direction, const struct FVector4& SurfaceNormal);//Offset:Discovery.exe+0x5765E10
	bool STATIC_Vector4_IsZero(const struct FVector4& A);//Offset:Discovery.exe+0x5766BD0
	bool STATIC_Vector4_IsUnit3(const struct FVector4& A, float SquaredLenthTolerance);//Offset:Discovery.exe+0x5766680
	bool STATIC_Vector4_IsNormal3(const struct FVector4& A);//Offset:Discovery.exe+0x5766580
	bool STATIC_Vector4_IsNearlyZero3(const struct FVector4& A, float Tolerance);//Offset:Discovery.exe+0x5766D10
	bool STATIC_Vector4_IsNAN(const struct FVector4& A);//Offset:Discovery.exe+0x5766EC0
	double STATIC_Vector4_DotProduct3(const struct FVector4& A, const struct FVector4& B);//Offset:Discovery.exe+0x5766FE0
	double STATIC_Vector4_DotProduct(const struct FVector4& A, const struct FVector4& B);//Offset:Discovery.exe+0x5767130
	struct FVector4 STATIC_Vector4_CrossProduct3(const struct FVector4& A, const struct FVector4& B);//Offset:Discovery.exe+0x57672D0
	void STATIC_Vector4_Assign(const struct FVector4& InVector, struct FVector4* A);//Offset:Discovery.exe+0x57676A0
	struct FVector2D STATIC_Vector2DInterpTo_Constant(const struct FVector2D& Current, const struct FVector2D& Target, float DeltaTime, float InterpSpeed);//Offset:Discovery.exe+0x5772C90
	struct FVector2D STATIC_Vector2DInterpTo(const struct FVector2D& Current, const struct FVector2D& Target, float DeltaTime, float InterpSpeed);//Offset:Discovery.exe+0x5772E60
	struct FVector2D STATIC_Vector2D_Zero();//Offset:Discovery.exe+0x5775030
	struct FVector2D STATIC_Vector2D_Unit45Deg();//Offset:Discovery.exe+0x5775060
	struct FVector2D STATIC_Vector2D_One();//Offset:Discovery.exe+0x5775090
	struct FVector STATIC_VEase(const struct FVector& A, const struct FVector& B, float Alpha, TEnumAsByte<EEasingFunc> EasingFunc, float BlendExp, int Steps);//Offset:Discovery.exe+0x576BF80
	struct FDateTime STATIC_UtcNow();//Offset:Discovery.exe+0x5754B60
	struct FVector4 STATIC_TransformVector4(const struct FMatrix& Matrix, const struct FVector4& Vec4);//Offset:Discovery.exe+0x5765C90
	struct FRotator STATIC_TransformRotation(const struct FTransform& T, const struct FRotator& Rotation);//Offset:Discovery.exe+0x574DE30
	struct FVector STATIC_TransformLocation(const struct FTransform& T, const struct FVector& Location);//Offset:Discovery.exe+0x574E2A0
	struct FVector STATIC_TransformDirection(const struct FTransform& T, const struct FVector& Direction);//Offset:Discovery.exe+0x574DF90
	float STATIC_Transform_Determinant(const struct FTransform& Transform);//Offset:Discovery.exe+0x574C1A0
	struct FVector2D STATIC_ToSign2D(const struct FVector2D& A);//Offset:Discovery.exe+0x5772200
	struct FVector2D STATIC_ToRounded2D(const struct FVector2D& A);//Offset:Discovery.exe+0x57722E0
	void STATIC_ToDirectionAndLength2D(const struct FVector2D& A, struct FVector2D* OutDir, double* OutLength);//Offset:Discovery.exe+0x5772410
	struct FDateTime STATIC_Today();//Offset:Discovery.exe+0x5754BD0
	struct FTransform STATIC_TLerp(const struct FTransform& A, const struct FTransform& B, float Alpha, TEnumAsByte<ELerpInterpolationMode> InterpMode);//Offset:Discovery.exe+0x574C890
	struct FTransform STATIC_TInterpTo(const struct FTransform& Current, const struct FTransform& Target, float DeltaTime, float InterpSpeed);//Offset:Discovery.exe+0x574C280
	struct FTimespan STATIC_TimespanZeroValue();//Offset:Discovery.exe+0x57547C0
	float STATIC_TimespanRatio(const struct FTimespan& A, const struct FTimespan& B);//Offset:Discovery.exe+0x57527D0
	struct FTimespan STATIC_TimespanMinValue();//Offset:Discovery.exe+0x57547E0
	struct FTimespan STATIC_TimespanMaxValue();//Offset:Discovery.exe+0x5754800
	bool STATIC_TimespanFromString(const struct FString& TimespanString, struct FTimespan* Result);//Offset:Discovery.exe+0x5752640
	struct FTransform STATIC_TEase(const struct FTransform& A, const struct FTransform& B, float Alpha, TEnumAsByte<EEasingFunc> EasingFunc, float BlendExp, int Steps);//Offset:Discovery.exe+0x574C530
	double STATIC_Tan(double A);//Offset:Discovery.exe+0x5779110
	struct FVector STATIC_Subtract_VectorVector(const struct FVector& A, const struct FVector& B);//Offset:Discovery.exe+0x5770F50
	struct FVector STATIC_Subtract_VectorInt(const struct FVector& A, int B);//Offset:Discovery.exe+0x5770D10
	struct FVector STATIC_Subtract_VectorFloat(const struct FVector& A, double B);//Offset:Discovery.exe+0x5770E30
	struct FVector4 STATIC_Subtract_Vector4Vector4(const struct FVector4& A, const struct FVector4& B);//Offset:Discovery.exe+0x5768480
	struct FVector2D STATIC_Subtract_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B);//Offset:Discovery.exe+0x57748E0
	struct FVector2D STATIC_Subtract_Vector2DFloat(const struct FVector2D& A, double B);//Offset:Discovery.exe+0x57747E0
	struct FTimespan STATIC_Subtract_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);//Offset:Discovery.exe+0x5753D80
	struct FQuat STATIC_Subtract_QuatQuat(const struct FQuat& A, const struct FQuat& B);//Offset:Discovery.exe+0x575BE80
	struct FLinearColor STATIC_Subtract_LinearColorLinearColor(const struct FLinearColor& A, const struct FLinearColor& B);//Offset:Discovery.exe+0x57562E0
	struct FIntPoint STATIC_Subtract_IntPointIntPoint(const struct FIntPoint& A, const struct FIntPoint& B);//Offset:Discovery.exe+0x5775830
	struct FIntPoint STATIC_Subtract_IntPointInt(const struct FIntPoint& A, int B);//Offset:Discovery.exe+0x5775730
	int STATIC_Subtract_IntInt(int A, int B);//Offset:Discovery.exe+0x577CF80
	int64_t STATIC_Subtract_Int64Int64(int64_t A, int64_t B);//Offset:Discovery.exe+0x577B8B0
	double STATIC_Subtract_DoubleDouble(double A, double B);//Offset:Discovery.exe+0x577A230
	struct FDateTime STATIC_Subtract_DateTimeTimespan(const struct FDateTime& A, const struct FTimespan& B);//Offset:Discovery.exe+0x5753D80
	struct FTimespan STATIC_Subtract_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B);//Offset:Discovery.exe+0x5753D80
	unsigned char STATIC_Subtract_ByteByte(unsigned char A, unsigned char B);//Offset:Discovery.exe+0x577DC00
	double STATIC_Square(double A);//Offset:Discovery.exe+0x5778BA0
	double STATIC_Sqrt(double A);//Offset:Discovery.exe+0x5778C40
	struct FVector STATIC_Spherical2DToUnitCartesian(const struct FVector2D& A);//Offset:Discovery.exe+0x5772650
	double STATIC_Sin(double A);//Offset:Discovery.exe+0x57793D0
	int64_t STATIC_SignOfInteger64(int64_t A);//Offset:Discovery.exe+0x577AD50
	int STATIC_SignOfInteger(int A);//Offset:Discovery.exe+0x577C410
	double STATIC_SignOfFloat(double A);//Offset:Discovery.exe+0x57766E0
	void STATIC_SetVectorSpringStateVelocity(const struct FVector& Velocity, struct FVectorSpringState* SpringState);//Offset:Discovery.exe+0x574B0C0
	void STATIC_SetRandomStreamSeed(int NewSeed, struct FRandomStream* Stream);//Offset:Discovery.exe+0x574A520
	void STATIC_SetQuaternionSpringStateAngularVelocity(const struct FVector& AngularVelocity, struct FQuaternionSpringState* SpringState);//Offset:Discovery.exe+0x574AF80
	void STATIC_SetFloatSpringStateVelocity(float Velocity, struct FFloatSpringState* SpringState);//Offset:Discovery.exe+0x574B1E0
	void STATIC_Set2D(double X, double Y, struct FVector2D* A);//Offset:Discovery.exe+0x5773C30
	struct FVector STATIC_SelectVector(const struct FVector& A, const struct FVector& B, bool bPickA);//Offset:Discovery.exe+0x5750370
	struct FTransform STATIC_SelectTransform(const struct FTransform& A, const struct FTransform& B, bool bPickA);//Offset:Discovery.exe+0x574FF70
	struct FString STATIC_SelectString(const struct FString& A, const struct FString& B, bool bPickA);//Offset:Discovery.exe+0x5750770
	struct FRotator STATIC_SelectRotator(const struct FRotator& A, const struct FRotator& B, bool bPickA);//Offset:Discovery.exe+0x5750370
	class UObject* STATIC_SelectObject(class UObject* A, class UObject* B, bool bSelectA);//Offset:Discovery.exe+0x574FE30
	int STATIC_SelectInt(int A, int B, bool bPickA);//Offset:Discovery.exe+0x5750630
	double STATIC_SelectFloat(double A, double B, bool bPickA);//Offset:Discovery.exe+0x57504F0
	struct FLinearColor STATIC_SelectColor(const struct FLinearColor& A, const struct FLinearColor& B, bool bPickA);//Offset:Discovery.exe+0x5750220
	class UClass* STATIC_SelectClass(class UClass* A, class UClass* B, bool bSelectA);//Offset:Discovery.exe+0x574FE30
	void STATIC_SeedRandomStream(struct FRandomStream* Stream);//Offset:Discovery.exe+0x574A610
	double STATIC_SafeDivide(double A, double B);//Offset:Discovery.exe+0x5777B30
	int64_t STATIC_Round64(double A);//Offset:Discovery.exe+0x5776BB0
	int STATIC_Round(double A);//Offset:Discovery.exe+0x5776E70
	struct FRotator STATIC_RotatorFromAxisAndAngle(const struct FVector& Axis, float Angle);//Offset:Discovery.exe+0x5771460
	struct FVector STATIC_RotateAngleAxis(const struct FVector& InVect, float AngleDeg, const struct FVector& Axis);//Offset:Discovery.exe+0x576FAE0
	struct FRotator STATIC_RLerp(const struct FRotator& A, const struct FRotator& B, float Alpha, bool bShortestPath);//Offset:Discovery.exe+0x5762C70
	struct FRotator STATIC_RInterpTo_Constant(const struct FRotator& Current, const struct FRotator& Target, float DeltaTime, float InterpSpeed);//Offset:Discovery.exe+0x574B9C0
	struct FRotator STATIC_RInterpTo(const struct FRotator& Current, const struct FRotator& Target, float DeltaTime, float InterpSpeed);//Offset:Discovery.exe+0x574BBE0
	void STATIC_RGBToHSV_Vector(const struct FLinearColor& RGB, struct FLinearColor* HSV);//Offset:Discovery.exe+0x57577A0
	void STATIC_RGBToHSV(const struct FLinearColor& InColor, float* H, float* S, float* V, float* A);//Offset:Discovery.exe+0x57578D0
	struct FLinearColor STATIC_RGBLinearToHSV(const struct FLinearColor& RGB);//Offset:Discovery.exe+0x57576E0
	void STATIC_ResetVectorSpringState(struct FVectorSpringState* SpringState);//Offset:Discovery.exe+0x574B3A0
	void STATIC_ResetRandomStream(const struct FRandomStream& Stream);//Offset:Discovery.exe+0x574A6B0
	void STATIC_ResetQuaternionSpringState(struct FQuaternionSpringState* SpringState);//Offset:Discovery.exe+0x574B2D0
	void STATIC_ResetFloatSpringState(struct FFloatSpringState* SpringState);//Offset:Discovery.exe+0x574B460
	struct FRotator STATIC_REase(const struct FRotator& A, const struct FRotator& B, float Alpha, bool bShortestPath, TEnumAsByte<EEasingFunc> EasingFunc, float BlendExp, int Steps);//Offset:Discovery.exe+0x5762970
	struct FVector STATIC_RandomUnitVectorInEllipticalConeInRadiansFromStream(const struct FVector& ConeDir, float MaxYawInRadians, float MaxPitchInRadians, const struct FRandomStream& Stream);//Offset:Discovery.exe+0x574A090
	struct FVector STATIC_RandomUnitVectorInEllipticalConeInRadians(const struct FVector& ConeDir, float MaxYawInRadians, float MaxPitchInRadians);//Offset:Discovery.exe+0x5769060
	struct FVector STATIC_RandomUnitVectorInEllipticalConeInDegreesFromStream(const struct FVector& ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees, const struct FRandomStream& Stream);//Offset:Discovery.exe+0x5749EA0
	struct FVector STATIC_RandomUnitVectorInEllipticalConeInDegrees(const struct FVector& ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees);//Offset:Discovery.exe+0x5768E90
	struct FVector STATIC_RandomUnitVectorInConeInRadiansFromStream(const struct FVector& ConeDir, float ConeHalfAngleInRadians, const struct FRandomStream& Stream);//Offset:Discovery.exe+0x574A3C0
	struct FVector STATIC_RandomUnitVectorInConeInRadians(const struct FVector& ConeDir, float ConeHalfAngleInRadians);//Offset:Discovery.exe+0x5769320
	struct FVector STATIC_RandomUnitVectorInConeInDegreesFromStream(const struct FVector& ConeDir, float ConeHalfAngleInDegrees, const struct FRandomStream& Stream);//Offset:Discovery.exe+0x574A240
	struct FVector STATIC_RandomUnitVectorInConeInDegrees(const struct FVector& ConeDir, float ConeHalfAngleInDegrees);//Offset:Discovery.exe+0x57691B0
	struct FVector STATIC_RandomUnitVectorFromStream(const struct FRandomStream& Stream);//Offset:Discovery.exe+0x574A9F0
	struct FVector STATIC_RandomUnitVector();//Offset:Discovery.exe+0x5769590
	struct FRotator STATIC_RandomRotatorFromStream(bool bRoll, const struct FRandomStream& Stream);//Offset:Discovery.exe+0x574A750
	struct FRotator STATIC_RandomRotator(bool bRoll);//Offset:Discovery.exe+0x5762E60
	struct FVector STATIC_RandomPointInBoundingBoxFromStream(const struct FVector& Center, const struct FVector& HalfSize, const struct FRandomStream& Stream);//Offset:Discovery.exe+0x574A860
	struct FVector STATIC_RandomPointInBoundingBox(const struct FVector& Center, const struct FVector& HalfSize);//Offset:Discovery.exe+0x5769440
	int STATIC_RandomIntegerInRangeFromStream(int Min, int Max, const struct FRandomStream& Stream);//Offset:Discovery.exe+0x574AD50
	int STATIC_RandomIntegerInRange(int Min, int Max);//Offset:Discovery.exe+0x577C230
	int STATIC_RandomIntegerFromStream(int Max, const struct FRandomStream& Stream);//Offset:Discovery.exe+0x574AE90
	int64_t STATIC_RandomInteger64InRange(int64_t Min, int64_t Max);//Offset:Discovery.exe+0x577AAB0
	int64_t STATIC_RandomInteger64(int64_t Max);//Offset:Discovery.exe+0x577AC30
	int STATIC_RandomInteger(int Max);//Offset:Discovery.exe+0x577C340
	float STATIC_RandomFloatInRangeFromStream(float Min, float Max, const struct FRandomStream& Stream);//Offset:Discovery.exe+0x574AAB0
	double STATIC_RandomFloatInRange(double Min, double Max);//Offset:Discovery.exe+0x5778A10
	float STATIC_RandomFloatFromStream(const struct FRandomStream& Stream);//Offset:Discovery.exe+0x574ABF0
	double STATIC_RandomFloat();//Offset:Discovery.exe+0x5778B30
	bool STATIC_RandomBoolWithWeightFromStream(float Weight, const struct FRandomStream& RandomStream);//Offset:Discovery.exe+0x577E760
	bool STATIC_RandomBoolWithWeight(float Weight);//Offset:Discovery.exe+0x577E850
	bool STATIC_RandomBoolFromStream(const struct FRandomStream& Stream);//Offset:Discovery.exe+0x574ACA0
	bool STATIC_RandomBool();//Offset:Discovery.exe+0x577E8F0
	double STATIC_RadiansToDegrees(double A);//Offset:Discovery.exe+0x5778850
	struct FQuat STATIC_QuaternionSpringInterp(const struct FQuat& Current, const struct FQuat& Target, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass, float TargetVelocityAmount, bool bInitializeFromTarget, struct FQuaternionSpringState* SpringState);//Offset:Discovery.exe+0x576B1D0
	struct FVector STATIC_Quat_VectorUp(const struct FQuat& Q);//Offset:Discovery.exe+0x575A520
	struct FVector STATIC_Quat_VectorRight(const struct FQuat& Q);//Offset:Discovery.exe+0x575A770
	struct FVector STATIC_Quat_VectorForward(const struct FQuat& Q);//Offset:Discovery.exe+0x575A9F0
	struct FVector STATIC_Quat_UnrotateVector(const struct FQuat& Q, const struct FVector& V);//Offset:Discovery.exe+0x5759030
	float STATIC_Quat_SizeSquared(const struct FQuat& Q);//Offset:Discovery.exe+0x57595E0
	float STATIC_Quat_Size(const struct FQuat& Q);//Offset:Discovery.exe+0x57596F0
	void STATIC_Quat_SetFromEuler(const struct FVector& Euler, struct FQuat* Q);//Offset:Discovery.exe+0x5759AB0
	void STATIC_Quat_SetComponents(float X, float Y, float Z, float W, struct FQuat* Q);//Offset:Discovery.exe+0x5759C10
	struct FRotator STATIC_Quat_Rotator(const struct FQuat& Q);//Offset:Discovery.exe+0x5759910
	struct FVector STATIC_Quat_RotateVector(const struct FQuat& Q, const struct FVector& V);//Offset:Discovery.exe+0x5759320
	struct FQuat STATIC_Quat_Normalized(const struct FQuat& Q, float Tolerance);//Offset:Discovery.exe+0x575A160
	void STATIC_Quat_Normalize(float Tolerance, struct FQuat* Q);//Offset:Discovery.exe+0x575A350
	struct FQuat STATIC_Quat_MakeFromEuler(const struct FVector& Euler);//Offset:Discovery.exe+0x57599E0
	struct FQuat STATIC_Quat_Log(const struct FQuat& Q);//Offset:Discovery.exe+0x5759E20
	bool STATIC_Quat_IsNormalized(const struct FQuat& Q);//Offset:Discovery.exe+0x575B480
	bool STATIC_Quat_IsNonFinite(const struct FQuat& Q);//Offset:Discovery.exe+0x575B230
	bool STATIC_Quat_IsIdentity(const struct FQuat& Q, float Tolerance);//Offset:Discovery.exe+0x575B560
	bool STATIC_Quat_IsFinite(const struct FQuat& Q);//Offset:Discovery.exe+0x575B330
	struct FQuat STATIC_Quat_Inversed(const struct FQuat& Q);//Offset:Discovery.exe+0x5759EF0
	struct FQuat STATIC_Quat_Identity();//Offset:Discovery.exe+0x575C6C0
	struct FVector STATIC_Quat_GetRotationAxis(const struct FQuat& Q);//Offset:Discovery.exe+0x5759FD0
	struct FVector STATIC_Quat_GetAxisZ(const struct FQuat& Q);//Offset:Discovery.exe+0x575A520
	struct FVector STATIC_Quat_GetAxisY(const struct FQuat& Q);//Offset:Discovery.exe+0x575A770
	struct FVector STATIC_Quat_GetAxisX(const struct FQuat& Q);//Offset:Discovery.exe+0x575A9F0
	float STATIC_Quat_GetAngle(const struct FQuat& Q);//Offset:Discovery.exe+0x575AC30
	struct FQuat STATIC_Quat_Exp(const struct FQuat& Q);//Offset:Discovery.exe+0x575AD40
	struct FVector STATIC_Quat_Euler(const struct FQuat& Q);//Offset:Discovery.exe+0x575AE10
	void STATIC_Quat_EnforceShortestArcWith(const struct FQuat& B, struct FQuat* A);//Offset:Discovery.exe+0x575AEE0
	float STATIC_Quat_AngularDistance(const struct FQuat& A, const struct FQuat& B);//Offset:Discovery.exe+0x575B050
	struct FVector STATIC_ProjectVectorOnToVector(const struct FVector& V, const struct FVector& Target);//Offset:Discovery.exe+0x576A270
	struct FVector STATIC_ProjectVectorOntoPlane(const struct FVector& V, const struct FVector& PlaneNormal);//Offset:Discovery.exe+0x5769FC0
	struct FVector STATIC_ProjectPointOnToPlane(const struct FVector& Point, const struct FVector& PlaneBase, const struct FVector& PlaneNormal);//Offset:Discovery.exe+0x576A0E0
	bool STATIC_PointsAreCoplanar(TArray<struct FVector> Points, float Tolerance);//Offset:Discovery.exe+0x5749650
	float STATIC_PerlinNoise1D(float Value);//Offset:Discovery.exe+0x5749E00
	int STATIC_Percent_IntInt(int A, int B);//Offset:Discovery.exe+0x577D160
	double STATIC_Percent_FloatFloat(double A, double B);//Offset:Discovery.exe+0x578D370
	unsigned char STATIC_Percent_ByteByte(unsigned char A, unsigned char B);//Offset:Discovery.exe+0x577DDD0
	int STATIC_Or_IntInt(int A, int B);//Offset:Discovery.exe+0x577C550
	int64_t STATIC_Or_Int64Int64(int64_t A, int64_t B);//Offset:Discovery.exe+0x577AED0
	struct FDateTime STATIC_Now();//Offset:Discovery.exe+0x5754C50
	bool STATIC_NotEqualExactly_VectorVector(const struct FVector& A, const struct FVector& B);//Offset:Discovery.exe+0x5770170
	bool STATIC_NotEqualExactly_Vector4Vector4(const struct FVector4& A, const struct FVector4& B);//Offset:Discovery.exe+0x5767B60
	bool STATIC_NotEqualExactly_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B);//Offset:Discovery.exe+0x5773FB0
	bool STATIC_NotEqual_VectorVector(const struct FVector& A, const struct FVector& B, float ErrorTolerance);//Offset:Discovery.exe+0x576FFC0
	bool STATIC_NotEqual_Vector4Vector4(const struct FVector4& A, const struct FVector4& B, float ErrorTolerance);//Offset:Discovery.exe+0x57678C0
	bool STATIC_NotEqual_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B, float ErrorTolerance);//Offset:Discovery.exe+0x5773E30
	bool STATIC_NotEqual_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);//Offset:Discovery.exe+0x57539A0
	bool STATIC_NotEqual_RotatorRotator(const struct FRotator& A, const struct FRotator& B, float ErrorTolerance);//Offset:Discovery.exe+0x5763950
	bool STATIC_NotEqual_QuatQuat(const struct FQuat& A, const struct FQuat& B, float ErrorTolerance);//Offset:Discovery.exe+0x575C0E0
	bool STATIC_NotEqual_ObjectObject(class UObject* A, class UObject* B);//Offset:Discovery.exe+0x574FC70
	bool STATIC_NotEqual_NameName(const struct FName& A, const struct FName& B);//Offset:Discovery.exe+0x574F9D0
	bool STATIC_NotEqual_MatrixMatrix(const struct FMatrix& A, const struct FMatrix& B, float Tolerance);//Offset:Discovery.exe+0x5761B90
	bool STATIC_NotEqual_LinearColorLinearColor(const struct FLinearColor& A, const struct FLinearColor& B);//Offset:Discovery.exe+0x57564C0
	bool STATIC_NotEqual_IntPointIntPoint(const struct FIntPoint& A, const struct FIntPoint& B);//Offset:Discovery.exe+0x57750C0
	bool STATIC_NotEqual_IntInt(int A, int B);//Offset:Discovery.exe+0x577C9E0
	bool STATIC_NotEqual_Int64Int64(int64_t A, int64_t B);//Offset:Discovery.exe+0x577B370
	bool STATIC_NotEqual_DoubleDouble(double A, double B);//Offset:Discovery.exe+0x5779900
	bool STATIC_NotEqual_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B);//Offset:Discovery.exe+0x57539A0
	bool STATIC_NotEqual_ClassClass(class UClass* A, class UClass* B);//Offset:Discovery.exe+0x574FC70
	bool STATIC_NotEqual_ByteByte(unsigned char A, unsigned char B);//Offset:Discovery.exe+0x577D480
	bool STATIC_NotEqual_BoolBool(bool A, bool B);//Offset:Discovery.exe+0x577E1D0
	bool STATIC_Not_PreBool(bool A);//Offset:Discovery.exe+0x577E6C0
	int64_t STATIC_Not_Int64(int64_t A);//Offset:Discovery.exe+0x577AE20
	int STATIC_Not_Int(int A);//Offset:Discovery.exe+0x577C4B0
	struct FVector2D STATIC_NormalSafe2D(const struct FVector2D& A, float Tolerance);//Offset:Discovery.exe+0x5772AF0
	double STATIC_NormalizeToRange(double Value, double RangeMin, double RangeMax);//Offset:Discovery.exe+0x57765B0
	struct FRotator STATIC_NormalizedDeltaRotator(const struct FRotator& A, const struct FRotator& B);//Offset:Discovery.exe+0x5762840
	float STATIC_NormalizeAxis(float Angle);//Offset:Discovery.exe+0x5762700
	void STATIC_Normalize2D(float Tolerance, struct FVector2D* A);//Offset:Discovery.exe+0x57727E0
	struct FVector2D STATIC_Normal2D(const struct FVector2D& A);//Offset:Discovery.exe+0x5772990
	struct FVector STATIC_Normal(const struct FVector& A, float Tolerance);//Offset:Discovery.exe+0x576C700
	struct FVector STATIC_NegateVector(const struct FVector& A);//Offset:Discovery.exe+0x5770580
	struct FRotator STATIC_NegateRotator(const struct FRotator& A);//Offset:Discovery.exe+0x5763500
	struct FVector2D STATIC_Negated2D(const struct FVector2D& A);//Offset:Discovery.exe+0x5773D70
	bool STATIC_NearlyEqual_TransformTransform(const struct FTransform& A, const struct FTransform& B, float LocationTolerance, float RotationTolerance, float Scale3DTolerance);//Offset:Discovery.exe+0x574F040
	bool STATIC_NearlyEqual_FloatFloat(double A, double B, double ErrorTolerance);//Offset:Discovery.exe+0x5779A00
	double STATIC_MultiplyMultiply_FloatFloat(double Base, double Exp);//Offset:Discovery.exe+0x577A5B0
	double STATIC_MultiplyByPi(double Value);//Offset:Discovery.exe+0x5776160
	struct FVector STATIC_Multiply_VectorVector(const struct FVector& A, const struct FVector& B);//Offset:Discovery.exe+0x5770C00
	struct FVector STATIC_Multiply_VectorInt(const struct FVector& A, int B);//Offset:Discovery.exe+0x5763710
	struct FVector STATIC_Multiply_VectorFloat(const struct FVector& A, double B);//Offset:Discovery.exe+0x5770AF0
	struct FVector4 STATIC_Multiply_Vector4Vector4(const struct FVector4& A, const struct FVector4& B);//Offset:Discovery.exe+0x5768310
	struct FVector2D STATIC_Multiply_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B);//Offset:Discovery.exe+0x57746F0
	struct FVector2D STATIC_Multiply_Vector2DFloat(const struct FVector2D& A, double B);//Offset:Discovery.exe+0x57745F0
	struct FTimespan STATIC_Multiply_TimespanFloat(const struct FTimespan& A, float Scalar);//Offset:Discovery.exe+0x5753C70
	struct FRotator STATIC_Multiply_RotatorInt(const struct FRotator& A, int B);//Offset:Discovery.exe+0x5763710
	struct FRotator STATIC_Multiply_RotatorFloat(const struct FRotator& A, float B);//Offset:Discovery.exe+0x5763830
	struct FQuat STATIC_Multiply_QuatQuat(const struct FQuat& A, const struct FQuat& B);//Offset:Discovery.exe+0x575B7E0
	struct FMatrix STATIC_Multiply_MatrixMatrix(const struct FMatrix& A, const struct FMatrix& B);//Offset:Discovery.exe+0x57622B0
	struct FMatrix STATIC_Multiply_MatrixFloat(const struct FMatrix& A, double B);//Offset:Discovery.exe+0x5761E80
	struct FLinearColor STATIC_Multiply_LinearColorLinearColor(const struct FLinearColor& A, const struct FLinearColor& B);//Offset:Discovery.exe+0x57561F0
	struct FLinearColor STATIC_Multiply_LinearColorFloat(const struct FLinearColor& A, float B);//Offset:Discovery.exe+0x57560F0
	struct FIntPoint STATIC_Multiply_IntPointIntPoint(const struct FIntPoint& A, const struct FIntPoint& B);//Offset:Discovery.exe+0x5775610
	struct FIntPoint STATIC_Multiply_IntPointInt(const struct FIntPoint& A, int B);//Offset:Discovery.exe+0x5775510
	int STATIC_Multiply_IntInt(int A, int B);//Offset:Discovery.exe+0x577D390
	double STATIC_Multiply_IntFloat(int A, double B);//Offset:Discovery.exe+0x577A4C0
	int64_t STATIC_Multiply_Int64Int64(int64_t A, int64_t B);//Offset:Discovery.exe+0x577BBD0
	double STATIC_Multiply_DoubleDouble(double A, double B);//Offset:Discovery.exe+0x577A140
	unsigned char STATIC_Multiply_ByteByte(unsigned char A, unsigned char B);//Offset:Discovery.exe+0x577DFF0
	struct FVector STATIC_MirrorVectorByNormal(const struct FVector& InVect, const struct FVector& InNormal);//Offset:Discovery.exe+0x576AF20
	void STATIC_MinOfIntArray(TArray<int> IntArray, int* IndexOfMinValue, int* MinValue);//Offset:Discovery.exe+0x5777850
	void STATIC_MinOfFloatArray(TArray<float> FloatArray, int* IndexOfMinValue, float* MinValue);//Offset:Discovery.exe+0x5777570
	void STATIC_MinOfByteArray(TArray<unsigned char> ByteArray, int* IndexOfMinValue, unsigned char* MinValue);//Offset:Discovery.exe+0x5777290
	int64_t STATIC_MinInt64(int64_t A, int64_t B);//Offset:Discovery.exe+0x577A9B0
	void STATIC_MinimumAreaRectangle(class UObject* WorldContextObject, TArray<struct FVector> InVerts, const struct FVector& SampleSurfaceNormal, bool bDebugDraw, struct FVector* OutRectCenter, struct FRotator* OutRectRotation, float* OutSideLengthX, float* OutSideLengthY);//Offset:Discovery.exe+0x5749AB0
	void STATIC_MinAreaRectangle(class UObject* WorldContextObject, TArray<struct FVector> InPoints, const struct FVector& SampleSurfaceNormal, bool bDebugDraw, struct FVector* OutRectCenter, struct FRotator* OutRectRotation, float* OutRectLengthX, float* OutRectLengthY);//Offset:Discovery.exe+0x5749760
	int STATIC_Min(int A, int B);//Offset:Discovery.exe+0x577C150
	void STATIC_MaxOfIntArray(TArray<int> IntArray, int* IndexOfMaxValue, int* MaxValue);//Offset:Discovery.exe+0x57779C0
	void STATIC_MaxOfFloatArray(TArray<float> FloatArray, int* IndexOfMaxValue, float* MaxValue);//Offset:Discovery.exe+0x57776E0
	void STATIC_MaxOfByteArray(TArray<unsigned char> ByteArray, int* IndexOfMaxValue, unsigned char* MaxValue);//Offset:Discovery.exe+0x5777400
	int64_t STATIC_MaxInt64(int64_t A, int64_t B);//Offset:Discovery.exe+0x577A8B0
	int STATIC_Max(int A, int B);//Offset:Discovery.exe+0x577C070
	struct FVector4 STATIC_Matrix_TransformVector4(const struct FMatrix& M, const struct FVector4& V);//Offset:Discovery.exe+0x57619A0
	struct FVector4 STATIC_Matrix_TransformVector(const struct FMatrix& M, const struct FVector& V);//Offset:Discovery.exe+0x57613C0
	struct FVector4 STATIC_Matrix_TransformPosition(const struct FMatrix& M, const struct FVector& V);//Offset:Discovery.exe+0x57617E0
	struct FQuat STATIC_Matrix_ToQuat(const struct FMatrix& M);//Offset:Discovery.exe+0x575DA10
	void STATIC_Matrix_SetOrigin(const struct FVector& NewOrigin, struct FMatrix* M);//Offset:Discovery.exe+0x575DE90
	void STATIC_Matrix_SetColumn(TEnumAsByte<EMatrixColumns> Column, const struct FVector& Value, struct FMatrix* M);//Offset:Discovery.exe+0x575DBD0
	void STATIC_Matrix_SetAxis(TEnumAsByte<EAxis> Axis, const struct FVector& AxisVector, struct FMatrix* M);//Offset:Discovery.exe+0x575DFA0
	struct FMatrix STATIC_Matrix_ScaleTranslation(const struct FMatrix& M, const struct FVector& Scale3D);//Offset:Discovery.exe+0x575F1A0
	struct FMatrix STATIC_Matrix_RemoveTranslation(const struct FMatrix& M);//Offset:Discovery.exe+0x575F610
	void STATIC_Matrix_RemoveScaling(float Tolerance, struct FMatrix* M);//Offset:Discovery.exe+0x575FFC0
	struct FMatrix STATIC_Matrix_Mirror(const struct FMatrix& M, TEnumAsByte<EAxis> MirrorAxis, TEnumAsByte<EAxis> FlipAxis);//Offset:Discovery.exe+0x575C710
	struct FVector STATIC_Matrix_InverseTransformVector(const struct FMatrix& M, const struct FVector& V);//Offset:Discovery.exe+0x5761160
	struct FVector STATIC_Matrix_InverseTransformPosition(const struct FMatrix& M, const struct FVector& V);//Offset:Discovery.exe+0x57615A0
	struct FMatrix STATIC_Matrix_Identity();//Offset:Discovery.exe+0x5762430
	struct FVector STATIC_Matrix_GetUnitAxis(const struct FMatrix& M, TEnumAsByte<EAxis> Axis);//Offset:Discovery.exe+0x575E600
	void STATIC_Matrix_GetUnitAxes(const struct FMatrix& M, struct FVector* X, struct FVector* Y, struct FVector* Z);//Offset:Discovery.exe+0x575E110
	struct FMatrix STATIC_Matrix_GetTransposed(const struct FMatrix& M);//Offset:Discovery.exe+0x5760EB0
	struct FMatrix STATIC_Matrix_GetTransposeAdjoint(const struct FMatrix& M);//Offset:Discovery.exe+0x5760430
	struct FVector STATIC_Matrix_GetScaleVector(const struct FMatrix& M, float Tolerance);//Offset:Discovery.exe+0x575F7C0
	struct FVector STATIC_Matrix_GetScaledAxis(const struct FMatrix& M, TEnumAsByte<EAxis> Axis);//Offset:Discovery.exe+0x575EB40
	void STATIC_Matrix_GetScaledAxes(const struct FMatrix& M, struct FVector* X, struct FVector* Y, struct FVector* Z);//Offset:Discovery.exe+0x575E8F0
	float STATIC_Matrix_GetRotDeterminant(const struct FMatrix& M);//Offset:Discovery.exe+0x5760870
	struct FRotator STATIC_Matrix_GetRotator(const struct FMatrix& M);//Offset:Discovery.exe+0x575DAF0
	struct FVector STATIC_Matrix_GetOrigin(const struct FMatrix& InMatrix);//Offset:Discovery.exe+0x5762520
	float STATIC_Matrix_GetMaximumAxisScale(const struct FMatrix& M);//Offset:Discovery.exe+0x575EFA0
	struct FMatrix STATIC_Matrix_GetMatrixWithoutScale(const struct FMatrix& M, float Tolerance);//Offset:Discovery.exe+0x575FB20
	struct FMatrix STATIC_Matrix_GetInverse(const struct FMatrix& M);//Offset:Discovery.exe+0x5760770
	bool STATIC_Matrix_GetFrustumTopPlane(const struct FMatrix& M, struct FPlane* OutPlane);//Offset:Discovery.exe+0x575CE80
	bool STATIC_Matrix_GetFrustumRightPlane(const struct FMatrix& M, struct FPlane* OutPlane);//Offset:Discovery.exe+0x575D0D0
	bool STATIC_Matrix_GetFrustumNearPlane(const struct FMatrix& M, struct FPlane* OutPlane);//Offset:Discovery.exe+0x575D7C0
	bool STATIC_Matrix_GetFrustumLeftPlane(const struct FMatrix& M, struct FPlane* OutPlane);//Offset:Discovery.exe+0x575D330
	bool STATIC_Matrix_GetFrustumFarPlane(const struct FMatrix& M, struct FPlane* OutPlane);//Offset:Discovery.exe+0x575D590
	bool STATIC_Matrix_GetFrustumBottomPlane(const struct FMatrix& M, struct FPlane* OutPlane);//Offset:Discovery.exe+0x575CC30
	float STATIC_Matrix_GetDeterminant(const struct FMatrix& M);//Offset:Discovery.exe+0x5760A10
	struct FVector STATIC_Matrix_GetColumn(const struct FMatrix& M, TEnumAsByte<EMatrixColumns> Column);//Offset:Discovery.exe+0x575DD50
	bool STATIC_Matrix_ContainsNaN(const struct FMatrix& M);//Offset:Discovery.exe+0x575F380
	struct FMatrix STATIC_Matrix_ConcatenateTranslation(const struct FMatrix& M, const struct FVector& Translation);//Offset:Discovery.exe+0x575F440
	struct FMatrix STATIC_Matrix_ApplyScale(const struct FMatrix& M, float Scale);//Offset:Discovery.exe+0x575ED40
	double STATIC_MapRangeUnclamped(double Value, double InRangeA, double InRangeB, double OutRangeA, double OutRangeB);//Offset:Discovery.exe+0x57763E0
	double STATIC_MapRangeClamped(double Value, double InRangeA, double InRangeB, double OutRangeA, double OutRangeB);//Offset:Discovery.exe+0x5776210
	struct FVector_NetQuantizeNormal STATIC_MakeVector_NetQuantizeNormal(double X, double Y, double Z);//Offset:Discovery.exe+0x5748070
	struct FVector_NetQuantize100 STATIC_MakeVector_NetQuantize100(double X, double Y, double Z);//Offset:Discovery.exe+0x5748070
	struct FVector_NetQuantize10 STATIC_MakeVector_NetQuantize10(double X, double Y, double Z);//Offset:Discovery.exe+0x5748070
	struct FVector_NetQuantize STATIC_MakeVector_NetQuantize(double X, double Y, double Z);//Offset:Discovery.exe+0x5748070
	struct FVector4 STATIC_MakeVector4(double X, double Y, double Z, double W);//Offset:Discovery.exe+0x5768CB0
	struct FVector2D STATIC_MakeVector2D(double X, double Y);//Offset:Discovery.exe+0x5774F30
	struct FVector STATIC_MakeVector(double X, double Y, double Z);//Offset:Discovery.exe+0x5748070
	struct FTransform STATIC_MakeTransform(const struct FVector& Location, const struct FRotator& Rotation, const struct FVector& Scale);//Offset:Discovery.exe+0x574F790
	struct FTimespan STATIC_MakeTimespan2(int Days, int Hours, int Minutes, int Seconds, int FractionNano);//Offset:Discovery.exe+0x5754420
	struct FTimespan STATIC_MakeTimespan(int Days, int Hours, int Minutes, int Seconds, int Milliseconds);//Offset:Discovery.exe+0x57545F0
	struct FRotator STATIC_MakeRotFromZY(const struct FVector& Z, const struct FVector& Y);//Offset:Discovery.exe+0x5764AE0
	struct FRotator STATIC_MakeRotFromZX(const struct FVector& Z, const struct FVector& X);//Offset:Discovery.exe+0x5764C00
	struct FRotator STATIC_MakeRotFromZ(const struct FVector& Z);//Offset:Discovery.exe+0x57651A0
	struct FRotator STATIC_MakeRotFromYZ(const struct FVector& Y, const struct FVector& Z);//Offset:Discovery.exe+0x5764D20
	struct FRotator STATIC_MakeRotFromYX(const struct FVector& Y, const struct FVector& X);//Offset:Discovery.exe+0x5764E40
	struct FRotator STATIC_MakeRotFromY(const struct FVector& Y);//Offset:Discovery.exe+0x57654D0
	struct FRotator STATIC_MakeRotFromXZ(const struct FVector& X, const struct FVector& Z);//Offset:Discovery.exe+0x5764F60
	struct FRotator STATIC_MakeRotFromXY(const struct FVector& X, const struct FVector& Y);//Offset:Discovery.exe+0x5765080
	struct FRotator STATIC_MakeRotFromX(const struct FVector& X);//Offset:Discovery.exe+0x5765800
	struct FRotator STATIC_MakeRotator(float Roll, float Pitch, float Yaw);//Offset:Discovery.exe+0x5765B30
	struct FRotator STATIC_MakeRotationFromAxes(const struct FVector& Forward, const struct FVector& Right, const struct FVector& Up);//Offset:Discovery.exe+0x5764940
	struct FTransform STATIC_MakeRelativeTransform(const struct FTransform& A, const struct FTransform& RelativeTo);//Offset:Discovery.exe+0x574D310
	struct FRandomStream STATIC_MakeRandomStream(int InitialSeed);//Offset:Discovery.exe+0x5750AA0
	struct FQuat STATIC_MakeQuat(float X, float Y, float Z, float W);//Offset:Discovery.exe+0x575BCD0
	struct FQualifiedFrameTime STATIC_MakeQualifiedFrameTime(const struct FFrameNumber& Frame, const struct FFrameRate& FrameRate, float SubFrame);//Offset:Discovery.exe+0x5752500
	float STATIC_MakePulsatingValue(float InCurrentTime, float InPulsesPerSecond, float InPhase);//Offset:Discovery.exe+0x5775EB0
	struct FPlane STATIC_MakePlaneFromPointAndNormal(const struct FVector& Point, const struct FVector& Normal);//Offset:Discovery.exe+0x5755ED0
	struct FFrameRate STATIC_MakeFrameRate(int Numerator, int Denominator);//Offset:Discovery.exe+0x5752250
	struct FDateTime STATIC_MakeDateTime(int Year, int Month, int Day, int Hour, int Minute, int Second, int Millisecond);//Offset:Discovery.exe+0x5755C60
	struct FLinearColor STATIC_MakeColor(float R, float G, float B, float A);//Offset:Discovery.exe+0x5758D20
	struct FBoxSphereBounds STATIC_MakeBoxSphereBounds(const struct FVector& Origin, const struct FVector& BoxExtent, float SphereRadius);//Offset:Discovery.exe+0x5750D50
	struct FBox2D STATIC_MakeBox2D(const struct FVector2D& Min, const struct FVector2D& Max);//Offset:Discovery.exe+0x5750EF0
	struct FBox STATIC_MakeBox(const struct FVector& Min, const struct FVector& Max);//Offset:Discovery.exe+0x5750FF0
	double STATIC_Loge(double A);//Offset:Discovery.exe+0x5778D40
	double STATIC_Log(double A, double Base);//Offset:Discovery.exe+0x5778DE0
	bool STATIC_LinePlaneIntersection_OriginNormal(const struct FVector& LineStart, const struct FVector& LineEnd, const struct FVector& PlaneOrigin, const struct FVector& PlaneNormal, float* T, struct FVector* Intersection);//Offset:Discovery.exe+0x5748C70
	bool STATIC_LinePlaneIntersection(const struct FVector& LineStart, const struct FVector& LineEnd, const struct FPlane& APlane, float* T, struct FVector* Intersection);//Offset:Discovery.exe+0x5748F10
	struct FLinearColor STATIC_LinearColorLerpUsingHSV(const struct FLinearColor& A, const struct FLinearColor& B, float Alpha);//Offset:Discovery.exe+0x5756830
	struct FLinearColor STATIC_LinearColorLerp(const struct FLinearColor& A, const struct FLinearColor& B, float Alpha);//Offset:Discovery.exe+0x57569A0
	struct FLinearColor STATIC_LinearColor_Yellow();//Offset:Discovery.exe+0x5758EE0
	struct FLinearColor STATIC_LinearColor_White();//Offset:Discovery.exe+0x5759000
	struct FLinearColor STATIC_LinearColor_Transparent();//Offset:Discovery.exe+0x5758EB0
	struct FColor STATIC_LinearColor_ToRGBE(const struct FLinearColor& InLinearColor);//Offset:Discovery.exe+0x5757560
	struct FLinearColor STATIC_LinearColor_ToNewOpacity(const struct FLinearColor& InColor, float InOpacity);//Offset:Discovery.exe+0x5756F40
	void STATIC_LinearColor_SetTemperature(float InTemperature, struct FLinearColor* InOutColor);//Offset:Discovery.exe+0x57581E0
	void STATIC_LinearColor_SetRGBA(float R, float G, float B, float A, struct FLinearColor* InOutColor);//Offset:Discovery.exe+0x57587F0
	void STATIC_LinearColor_SetRandomHue(struct FLinearColor* InOutColor);//Offset:Discovery.exe+0x5758100
	void STATIC_LinearColor_SetFromSRGB(const struct FColor& InSRGB, struct FLinearColor* InOutColor);//Offset:Discovery.exe+0x5758450
	void STATIC_LinearColor_SetFromPow22(const struct FColor& InColor, struct FLinearColor* InOutColor);//Offset:Discovery.exe+0x5758310
	void STATIC_LinearColor_SetFromHSV(float H, float S, float V, float A, struct FLinearColor* InOutColor);//Offset:Discovery.exe+0x5758590
	void STATIC_LinearColor_Set(const struct FLinearColor& InColor, struct FLinearColor* InOutColor);//Offset:Discovery.exe+0x57589D0
	struct FLinearColor STATIC_LinearColor_Red();//Offset:Discovery.exe+0x5758F70
	struct FColor STATIC_LinearColor_QuantizeRound(const struct FLinearColor& InColor);//Offset:Discovery.exe+0x57572B0
	struct FColor STATIC_LinearColor_Quantize(const struct FLinearColor& InColor);//Offset:Discovery.exe+0x5757370
	bool STATIC_LinearColor_IsNearEqual(const struct FLinearColor& A, const struct FLinearColor& B, float Tolerance);//Offset:Discovery.exe+0x57566C0
	struct FLinearColor STATIC_LinearColor_Green();//Offset:Discovery.exe+0x5758F40
	struct FLinearColor STATIC_LinearColor_Gray();//Offset:Discovery.exe+0x5758FD0
	float STATIC_LinearColor_GetMin(const struct FLinearColor& InColor);//Offset:Discovery.exe+0x5756CC0
	float STATIC_LinearColor_GetMax(const struct FLinearColor& InColor);//Offset:Discovery.exe+0x5756DA0
	float STATIC_LinearColor_GetLuminance(const struct FLinearColor& InColor);//Offset:Discovery.exe+0x5756E80
	float STATIC_LinearColor_Distance(const struct FLinearColor& C1, const struct FLinearColor& C2);//Offset:Discovery.exe+0x5757040
	struct FLinearColor STATIC_LinearColor_Desaturated(const struct FLinearColor& InColor, float InDesaturation);//Offset:Discovery.exe+0x57571A0
	struct FLinearColor STATIC_LinearColor_Blue();//Offset:Discovery.exe+0x5758F10
	struct FLinearColor STATIC_LinearColor_Black();//Offset:Discovery.exe+0x5758FA0
	struct FVector STATIC_LessLess_VectorRotator(const struct FVector& A, const struct FRotator& B);//Offset:Discovery.exe+0x576F980
	bool STATIC_LessEqual_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);//Offset:Discovery.exe+0x57535E0
	bool STATIC_LessEqual_IntInt(int A, int B);//Offset:Discovery.exe+0x577CCB0
	bool STATIC_LessEqual_Int64Int64(int64_t A, int64_t B);//Offset:Discovery.exe+0x577B610
	bool STATIC_LessEqual_DoubleDouble(double A, double B);//Offset:Discovery.exe+0x5779D30
	bool STATIC_LessEqual_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B);//Offset:Discovery.exe+0x57535E0
	bool STATIC_LessEqual_ByteByte(unsigned char A, unsigned char B);//Offset:Discovery.exe+0x577D750
	bool STATIC_Less_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);//Offset:Discovery.exe+0x57536D0
	bool STATIC_Less_IntInt(int A, int B);//Offset:Discovery.exe+0x577CE90
	bool STATIC_Less_Int64Int64(int64_t A, int64_t B);//Offset:Discovery.exe+0x577B7D0
	bool STATIC_Less_DoubleDouble(double A, double B);//Offset:Discovery.exe+0x5779F10
	bool STATIC_Less_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B);//Offset:Discovery.exe+0x57536D0
	bool STATIC_Less_ByteByte(unsigned char A, unsigned char B);//Offset:Discovery.exe+0x577D930
	double STATIC_Lerp(double A, double B, double Alpha);//Offset:Discovery.exe+0x5777140
	bool STATIC_IsZero2D(const struct FVector2D& A);//Offset:Discovery.exe+0x5773030
	bool STATIC_IsPointInBoxWithTransform(const struct FVector& Point, const struct FTransform& BoxWorldTransform, const struct FVector& BoxExtent);//Offset:Discovery.exe+0x5749320
	bool STATIC_IsPointInBox(const struct FVector& Point, const struct FVector& BoxOrigin, const struct FVector& BoxExtent);//Offset:Discovery.exe+0x57494D0
	bool STATIC_IsNearlyZero2D(const struct FVector2D& A, float Tolerance);//Offset:Discovery.exe+0x5773120
	bool STATIC_IsMorning(const struct FDateTime& A);//Offset:Discovery.exe+0x5754F60
	bool STATIC_IsLeapYear(int Year);//Offset:Discovery.exe+0x5754CE0
	bool STATIC_IsAfternoon(const struct FDateTime& A);//Offset:Discovery.exe+0x5755080
	struct FTransform STATIC_InvertTransform(const struct FTransform& T);//Offset:Discovery.exe+0x574CB30
	struct FRotator STATIC_InverseTransformRotation(const struct FTransform& T, const struct FRotator& Rotation);//Offset:Discovery.exe+0x574D520
	struct FVector STATIC_InverseTransformLocation(const struct FTransform& T, const struct FVector& Location);//Offset:Discovery.exe+0x574D9D0
	struct FVector STATIC_InverseTransformDirection(const struct FTransform& T, const struct FVector& Direction);//Offset:Discovery.exe+0x574D680
	struct FIntPoint STATIC_IntPoint_Zero();//Offset:Discovery.exe+0x5775D50
	struct FIntPoint STATIC_IntPoint_Up();//Offset:Discovery.exe+0x5775CD0
	struct FIntPoint STATIC_IntPoint_Right();//Offset:Discovery.exe+0x5775C70
	struct FIntPoint STATIC_IntPoint_One();//Offset:Discovery.exe+0x5775D10
	struct FIntPoint STATIC_IntPoint_Left();//Offset:Discovery.exe+0x5775CA0
	struct FIntPoint STATIC_IntPoint_Down();//Offset:Discovery.exe+0x5775C30
	bool STATIC_InRange_IntInt(int Value, int Min, int Max, bool InclusiveMin, bool InclusiveMax);//Offset:Discovery.exe+0x577C810
	bool STATIC_InRange_Int64Int64(int64_t Value, int64_t Min, int64_t Max, bool InclusiveMin, bool InclusiveMax);//Offset:Discovery.exe+0x577B1A0
	bool STATIC_InRange_FloatFloat(double Value, double Min, double Max, bool InclusiveMin, bool InclusiveMax);//Offset:Discovery.exe+0x5779720
	double STATIC_Hypotenuse(double Width, double Height);//Offset:Discovery.exe+0x5779630
	struct FLinearColor STATIC_HSVToRGBLinear(const struct FLinearColor& HSV);//Offset:Discovery.exe+0x5757B80
	void STATIC_HSVToRGB_Vector(const struct FLinearColor& HSV, struct FLinearColor* RGB);//Offset:Discovery.exe+0x5757C40
	struct FLinearColor STATIC_HSVToRGB(float H, float S, float V, float A);//Offset:Discovery.exe+0x5757D70
	double STATIC_GridSnap_Float(double Location, double GridSize);//Offset:Discovery.exe+0x5779510
	struct FVector STATIC_GreaterGreater_VectorRotator(const struct FVector& A, const struct FRotator& B);//Offset:Discovery.exe+0x576FC60
	bool STATIC_GreaterEqual_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);//Offset:Discovery.exe+0x57537C0
	bool STATIC_GreaterEqual_IntInt(int A, int B);//Offset:Discovery.exe+0x577CBC0
	bool STATIC_GreaterEqual_Int64Int64(int64_t A, int64_t B);//Offset:Discovery.exe+0x577B530
	bool STATIC_GreaterEqual_DoubleDouble(double A, double B);//Offset:Discovery.exe+0x5779C40
	bool STATIC_GreaterEqual_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B);//Offset:Discovery.exe+0x57537C0
	bool STATIC_GreaterEqual_ByteByte(unsigned char A, unsigned char B);//Offset:Discovery.exe+0x577D660
	bool STATIC_Greater_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);//Offset:Discovery.exe+0x57538B0
	bool STATIC_Greater_IntInt(int A, int B);//Offset:Discovery.exe+0x577CDA0
	bool STATIC_Greater_Int64Int64(int64_t A, int64_t B);//Offset:Discovery.exe+0x577B6F0
	bool STATIC_Greater_DoubleDouble(double A, double B);//Offset:Discovery.exe+0x5779E20
	bool STATIC_Greater_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B);//Offset:Discovery.exe+0x57538B0
	bool STATIC_Greater_ByteByte(unsigned char A, unsigned char B);//Offset:Discovery.exe+0x577D840
	int STATIC_GetYear(const struct FDateTime& A);//Offset:Discovery.exe+0x57551A0
	void STATIC_GetYawPitchFromVector(const struct FVector& InVec, float* Yaw, float* Pitch);//Offset:Discovery.exe+0x576DAB0
	struct FVector STATIC_GetVectorArrayAverage(TArray<struct FVector> Vectors);//Offset:Discovery.exe+0x576D7E0
	struct FVector STATIC_GetUpVector(const struct FRotator& InRot);//Offset:Discovery.exe+0x57632C0
	float STATIC_GetTotalSeconds(const struct FTimespan& A);//Offset:Discovery.exe+0x5752C10
	float STATIC_GetTotalMinutes(const struct FTimespan& A);//Offset:Discovery.exe+0x5752CD0
	float STATIC_GetTotalMilliseconds(const struct FTimespan& A);//Offset:Discovery.exe+0x5752D90
	float STATIC_GetTotalHours(const struct FTimespan& A);//Offset:Discovery.exe+0x5752E50
	float STATIC_GetTotalDays(const struct FTimespan& A);//Offset:Discovery.exe+0x5752F10
	struct FTimespan STATIC_GetTimeOfDay(const struct FDateTime& A);//Offset:Discovery.exe+0x5755280
	double STATIC_GetTAU();//Offset:Discovery.exe+0x57789B0
	void STATIC_GetSlopeDegreeAngles(const struct FVector& MyRightYAxis, const struct FVector& FloorNormal, const struct FVector& UpVector, float* OutSlopePitchDegreeAngle, float* OutSlopeRollDegreeAngle);//Offset:Discovery.exe+0x5749120
	int STATIC_GetSeconds(const struct FTimespan& A);//Offset:Discovery.exe+0x5752FD0
	int STATIC_GetSecond(const struct FDateTime& A);//Offset:Discovery.exe+0x5752FD0
	struct FVector2D STATIC_GetRotated2D(const struct FVector2D& A, float AngleDeg);//Offset:Discovery.exe+0x5773280
	struct FVector STATIC_GetRightVector(const struct FRotator& InRot);//Offset:Discovery.exe+0x5763380
	struct FVector STATIC_GetReflectionVector(const struct FVector& Direction, const struct FVector& SurfaceNormal);//Offset:Discovery.exe+0x576AF20
	float STATIC_GetPointDistanceToSegment(const struct FVector& Point, const struct FVector& SegmentStart, const struct FVector& SegmentEnd);//Offset:Discovery.exe+0x5769780
	float STATIC_GetPointDistanceToLine(const struct FVector& Point, const struct FVector& LineOrigin, const struct FVector& LineDirection);//Offset:Discovery.exe+0x57695F0
	double STATIC_GetPI();//Offset:Discovery.exe+0x57789E0
	int STATIC_GetMonth(const struct FDateTime& A);//Offset:Discovery.exe+0x5755390
	int STATIC_GetMinutes(const struct FTimespan& A);//Offset:Discovery.exe+0x5753100
	int STATIC_GetMinute(const struct FDateTime& A);//Offset:Discovery.exe+0x5753100
	double STATIC_GetMinElement(const struct FVector& A);//Offset:Discovery.exe+0x576ED80
	double STATIC_GetMin2D(const struct FVector2D& A);//Offset:Discovery.exe+0x5773460
	int STATIC_GetMilliseconds(const struct FTimespan& A);//Offset:Discovery.exe+0x5753220
	int STATIC_GetMillisecond(const struct FDateTime& A);//Offset:Discovery.exe+0x5755470
	double STATIC_GetMaxElement(const struct FVector& A);//Offset:Discovery.exe+0x576ECB0
	double STATIC_GetMax2D(const struct FVector2D& A);//Offset:Discovery.exe+0x5773510
	int STATIC_GetHours(const struct FTimespan& A);//Offset:Discovery.exe+0x5753330
	int STATIC_GetHour12(const struct FDateTime& A);//Offset:Discovery.exe+0x5755590
	int STATIC_GetHour(const struct FDateTime& A);//Offset:Discovery.exe+0x5753330
	struct FVector STATIC_GetForwardVector(const struct FRotator& InRot);//Offset:Discovery.exe+0x5763440
	struct FTimespan STATIC_GetDuration(const struct FTimespan& A);//Offset:Discovery.exe+0x5753440
	struct FVector STATIC_GetDirectionUnitVector(const struct FVector& From, const struct FVector& To);//Offset:Discovery.exe+0x576DC00
	int STATIC_GetDays(const struct FTimespan& A);//Offset:Discovery.exe+0x5753500
	int STATIC_GetDayOfYear(const struct FDateTime& A);//Offset:Discovery.exe+0x5755670
	int STATIC_GetDay(const struct FDateTime& A);//Offset:Discovery.exe+0x5755750
	struct FDateTime STATIC_GetDate(const struct FDateTime& A);//Offset:Discovery.exe+0x5755830
	void STATIC_GetAzimuthAndElevation(const struct FVector& InDirection, const struct FTransform& ReferenceFrame, float* Azimuth, float* Elevation);//Offset:Discovery.exe+0x576D8B0
	void STATIC_GetAxes(const struct FRotator& A, struct FVector* X, struct FVector* Y, struct FVector* Z);//Offset:Discovery.exe+0x5762F10
	double STATIC_GetAbsMax2D(const struct FVector2D& A);//Offset:Discovery.exe+0x57735C0
	struct FVector2D STATIC_GetAbs2D(const struct FVector2D& A);//Offset:Discovery.exe+0x5773670
	double STATIC_FWrap(double Value, double Min, double Max);//Offset:Discovery.exe+0x5777C20
	struct FIntVector STATIC_FTruncVector(const struct FVector& InVector);//Offset:Discovery.exe+0x576D710
	int64_t STATIC_FTrunc64(double A);//Offset:Discovery.exe+0x5751A30
	int STATIC_FTrunc(double A);//Offset:Discovery.exe+0x5776D30
	struct FTimespan STATIC_FromSeconds(float Seconds);//Offset:Discovery.exe+0x57528F0
	struct FTimespan STATIC_FromMinutes(float Minutes);//Offset:Discovery.exe+0x5752990
	struct FTimespan STATIC_FromMilliseconds(float Milliseconds);//Offset:Discovery.exe+0x5752A30
	struct FTimespan STATIC_FromHours(float Hours);//Offset:Discovery.exe+0x5752AD0
	struct FTimespan STATIC_FromDays(float Days);//Offset:Discovery.exe+0x5752B70
	double STATIC_Fraction(double A);//Offset:Discovery.exe+0x577A410
	int64_t STATIC_FMod64(double Dividend, double Divisor, double* Remainder);//Offset:Discovery.exe+0x57767B0
	int STATIC_FMod(double Dividend, double Divisor, double* Remainder);//Offset:Discovery.exe+0x57768F0
	double STATIC_FMin(double A, double B);//Offset:Discovery.exe+0x5777FE0
	double STATIC_FMax(double A, double B);//Offset:Discovery.exe+0x5777EE0
	float STATIC_FloatSpringInterp(float Current, float Target, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass, float TargetVelocityAmount, bool bClamp, float MinValue, float MaxValue, bool bInitializeFromTarget, struct FFloatSpringState* SpringState);//Offset:Discovery.exe+0x574B500
	float STATIC_FixedTurn(float InCurrent, float InDesired, float InDeltaRate);//Offset:Discovery.exe+0x5775D70
	double STATIC_FInterpTo_Constant(double Current, double Target, double DeltaTime, double InterpSpeed);//Offset:Discovery.exe+0x574BE00
	double STATIC_FInterpTo(double Current, double Target, double DeltaTime, double InterpSpeed);//Offset:Discovery.exe+0x574BFD0
	double STATIC_FInterpEaseInOut(double A, double B, double Alpha, double Exponent);//Offset:Discovery.exe+0x5775FE0
	struct FRotator STATIC_FindRelativeLookAtRotation(const struct FTransform& StartTransform, const struct FVector& TargetLocation);//Offset:Discovery.exe+0x5764440
	void STATIC_FindNearestPointsOnLineSegments(const struct FVector& Segment1Start, const struct FVector& Segment1End, const struct FVector& Segment2Start, const struct FVector& Segment2End, struct FVector* Segment1Point, struct FVector* Segment2Point);//Offset:Discovery.exe+0x5769C70
	struct FRotator STATIC_FindLookAtRotation(const struct FVector& Start, const struct FVector& Target);//Offset:Discovery.exe+0x5764590
	struct FVector STATIC_FindClosestPointOnSegment(const struct FVector& Point, const struct FVector& SegmentStart, const struct FVector& SegmentEnd);//Offset:Discovery.exe+0x5769AB0
	struct FVector STATIC_FindClosestPointOnLine(const struct FVector& Point, const struct FVector& LineOrigin, const struct FVector& LineDirection);//Offset:Discovery.exe+0x5769910
	int64_t STATIC_FFloor64(double A);//Offset:Discovery.exe+0x5776AF0
	int STATIC_FFloor(double A);//Offset:Discovery.exe+0x5776DC0
	double STATIC_FClamp(double Value, double Min, double Max);//Offset:Discovery.exe+0x5777DA0
	int64_t STATIC_FCeil64(double A);//Offset:Discovery.exe+0x5776A30
	int STATIC_FCeil(double A);//Offset:Discovery.exe+0x5776C80
	double STATIC_Exp(double A);//Offset:Discovery.exe+0x5778ED0
	bool STATIC_EqualExactly_VectorVector(const struct FVector& A, const struct FVector& B);//Offset:Discovery.exe+0x5770480
	bool STATIC_EqualExactly_Vector4Vector4(const struct FVector4& A, const struct FVector4& B);//Offset:Discovery.exe+0x5767FF0
	bool STATIC_EqualExactly_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B);//Offset:Discovery.exe+0x5774250
	bool STATIC_EqualEqual_VectorVector(const struct FVector& A, const struct FVector& B, float ErrorTolerance);//Offset:Discovery.exe+0x57702C0
	bool STATIC_EqualEqual_Vector4Vector4(const struct FVector4& A, const struct FVector4& B, float ErrorTolerance);//Offset:Discovery.exe+0x5767D50
	bool STATIC_EqualEqual_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B, float ErrorTolerance);//Offset:Discovery.exe+0x57740D0
	bool STATIC_EqualEqual_TransformTransform(const struct FTransform& A, const struct FTransform& B);//Offset:Discovery.exe+0x574F2D0
	bool STATIC_EqualEqual_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);//Offset:Discovery.exe+0x5753A80
	bool STATIC_EqualEqual_RotatorRotator(const struct FRotator& A, const struct FRotator& B, float ErrorTolerance);//Offset:Discovery.exe+0x5763D00
	bool STATIC_EqualEqual_QuatQuat(const struct FQuat& A, const struct FQuat& B, float Tolerance);//Offset:Discovery.exe+0x575C3D0
	bool STATIC_EqualEqual_ObjectObject(class UObject* A, class UObject* B);//Offset:Discovery.exe+0x574FD50
	bool STATIC_EqualEqual_NameName(const struct FName& A, const struct FName& B);//Offset:Discovery.exe+0x574FAB0
	bool STATIC_EqualEqual_MatrixMatrix(const struct FMatrix& A, const struct FMatrix& B, float Tolerance);//Offset:Discovery.exe+0x5761D10
	bool STATIC_EqualEqual_LinearColorLinearColor(const struct FLinearColor& A, const struct FLinearColor& B);//Offset:Discovery.exe+0x57565E0
	bool STATIC_EqualEqual_IntInt(int A, int B);//Offset:Discovery.exe+0x577CAD0
	bool STATIC_EqualEqual_Int64Int64(int64_t A, int64_t B);//Offset:Discovery.exe+0x577B450
	bool STATIC_EqualEqual_DoubleDouble(double A, double B);//Offset:Discovery.exe+0x5779B40
	bool STATIC_EqualEqual_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B);//Offset:Discovery.exe+0x5753A80
	bool STATIC_EqualEqual_ClassClass(class UClass* A, class UClass* B);//Offset:Discovery.exe+0x574FD50
	bool STATIC_EqualEqual_ByteByte(unsigned char A, unsigned char B);//Offset:Discovery.exe+0x577D570
	bool STATIC_EqualEqual_BoolBool(bool A, bool B);//Offset:Discovery.exe+0x577E5C0
	bool STATIC_Equal_IntPointIntPoint(const struct FIntPoint& A, const struct FIntPoint& B);//Offset:Discovery.exe+0x5775190
	double STATIC_Ease(double A, double B, double Alpha, TEnumAsByte<EEasingFunc> EasingFunc, double BlendExp, int Steps);//Offset:Discovery.exe+0x5776F20
	struct FVector STATIC_DynamicWeightedMovingAverage_FVector(const struct FVector& CurrentSample, const struct FVector& PreviousSample, float MaxDistance, float MinWeight, float MaxWeight);//Offset:Discovery.exe+0x5748420
	struct FRotator STATIC_DynamicWeightedMovingAverage_FRotator(const struct FRotator& CurrentSample, const struct FRotator& PreviousSample, float MaxDistance, float MinWeight, float MaxWeight);//Offset:Discovery.exe+0x57481D0
	float STATIC_DynamicWeightedMovingAverage_Float(float CurrentSample, float PreviousSample, float MaxDistance, float MinWeight, float MaxWeight);//Offset:Discovery.exe+0x5748670
	double STATIC_DotProduct2D(const struct FVector2D& A, const struct FVector2D& B);//Offset:Discovery.exe+0x5773720
	double STATIC_Dot_VectorVector(const struct FVector& A, const struct FVector& B);//Offset:Discovery.exe+0x576FED0
	struct FVector STATIC_Divide_VectorVector(const struct FVector& A, const struct FVector& B);//Offset:Discovery.exe+0x5770950
	struct FVector STATIC_Divide_VectorInt(const struct FVector& A, int B);//Offset:Discovery.exe+0x5770640
	struct FVector STATIC_Divide_VectorFloat(const struct FVector& A, double B);//Offset:Discovery.exe+0x57707C0
	struct FVector4 STATIC_Divide_Vector4Vector4(const struct FVector4& A, const struct FVector4& B);//Offset:Discovery.exe+0x57681A0
	struct FVector2D STATIC_Divide_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B);//Offset:Discovery.exe+0x5774490
	struct FVector2D STATIC_Divide_Vector2DFloat(const struct FVector2D& A, double B);//Offset:Discovery.exe+0x5774340
	struct FTimespan STATIC_Divide_TimespanFloat(const struct FTimespan& A, float Scalar);//Offset:Discovery.exe+0x5753B60
	struct FLinearColor STATIC_Divide_LinearColorLinearColor(const struct FLinearColor& A, const struct FLinearColor& B);//Offset:Discovery.exe+0x5756000
	struct FIntPoint STATIC_Divide_IntPointIntPoint(const struct FIntPoint& A, const struct FIntPoint& B);//Offset:Discovery.exe+0x57753B0
	struct FIntPoint STATIC_Divide_IntPointInt(const struct FIntPoint& A, int B);//Offset:Discovery.exe+0x5775260
	int STATIC_Divide_IntInt(int A, int B);//Offset:Discovery.exe+0x577D280
	int64_t STATIC_Divide_Int64Int64(int64_t A, int64_t B);//Offset:Discovery.exe+0x577BA90
	double STATIC_Divide_DoubleDouble(double A, double B);//Offset:Discovery.exe+0x577A000
	unsigned char STATIC_Divide_ByteByte(unsigned char A, unsigned char B);//Offset:Discovery.exe+0x577DEE0
	double STATIC_DistanceSquared2D(const struct FVector2D& v1, const struct FVector2D& v2);//Offset:Discovery.exe+0x5773800
	double STATIC_Distance2D(const struct FVector2D& v1, const struct FVector2D& v2);//Offset:Discovery.exe+0x57738E0
	double STATIC_DegTan(double A);//Offset:Discovery.exe+0x5778420
	double STATIC_DegSin(double A);//Offset:Discovery.exe+0x57787A0
	double STATIC_DegreesToRadians(double A);//Offset:Discovery.exe+0x5778900
	double STATIC_DegCos(double A);//Offset:Discovery.exe+0x57785E0
	double STATIC_DegAtan2(double Y, double X);//Offset:Discovery.exe+0x5778250
	double STATIC_DegAtan(double A);//Offset:Discovery.exe+0x5778360
	double STATIC_DegAsin(double A);//Offset:Discovery.exe+0x5778690
	double STATIC_DegAcos(double A);//Offset:Discovery.exe+0x57784D0
	int STATIC_DaysInYear(int Year);//Offset:Discovery.exe+0x5754D90
	int STATIC_DaysInMonth(int Year, int Month);//Offset:Discovery.exe+0x5754E40
	struct FDateTime STATIC_DateTimeMinValue();//Offset:Discovery.exe+0x57547C0
	struct FDateTime STATIC_DateTimeMaxValue();//Offset:Discovery.exe+0x5754CC0
	bool STATIC_DateTimeFromString(const struct FString& DateTimeString, struct FDateTime* Result);//Offset:Discovery.exe+0x5754820
	bool STATIC_DateTimeFromIsoString(const struct FString& IsoString, struct FDateTime* Result);//Offset:Discovery.exe+0x57549B0
	double STATIC_CrossProduct2D(const struct FVector2D& A, const struct FVector2D& B);//Offset:Discovery.exe+0x57739E0
	struct FVector STATIC_Cross_VectorVector(const struct FVector& A, const struct FVector& B);//Offset:Discovery.exe+0x576FDC0
	struct FVector STATIC_CreateVectorFromYawPitch(float Yaw, float Pitch, float Length);//Offset:Discovery.exe+0x5771CF0
	double STATIC_Cos(double A);//Offset:Discovery.exe+0x5779270
	struct FTransform STATIC_ConvertTransformToRelative(const struct FTransform& Transform, const struct FTransform& ParentTransform);//Offset:Discovery.exe+0x574D0F0
	struct FVector2D STATIC_Conv_VectorToVector2D(const struct FVector& InVector);//Offset:Discovery.exe+0x5771620
	struct FTransform STATIC_Conv_VectorToTransform(const struct FVector& InLocation);//Offset:Discovery.exe+0x57716B0
	struct FRotator STATIC_Conv_VectorToRotator(const struct FVector& InVec);//Offset:Discovery.exe+0x5771560
	struct FQuat STATIC_Conv_VectorToQuaternion(const struct FVector& InVec);//Offset:Discovery.exe+0x57713A0
	struct FLinearColor STATIC_Conv_VectorToLinearColor(const struct FVector& InVec);//Offset:Discovery.exe+0x57717B0
	struct FVector STATIC_Conv_Vector4ToVector(const struct FVector4& InVector4);//Offset:Discovery.exe+0x5768940
	struct FRotator STATIC_Conv_Vector4ToRotator(const struct FVector4& InVec);//Offset:Discovery.exe+0x5768850
	struct FQuat STATIC_Conv_Vector4ToQuaternion(const struct FVector4& InVec);//Offset:Discovery.exe+0x5768760
	struct FVector STATIC_Conv_Vector2DToVector(const struct FVector2D& InVector2D, float Z);//Offset:Discovery.exe+0x5774CC0
	struct FIntPoint STATIC_Conv_Vector2DToIntPoint(const struct FVector2D& InVector2D);//Offset:Discovery.exe+0x5774BC0
	struct FMatrix STATIC_Conv_TransformToMatrix(const struct FTransform& Transform);//Offset:Discovery.exe+0x19BF540
	struct FVector STATIC_Conv_RotatorToVector(const struct FRotator& InRot);//Offset:Discovery.exe+0x5763200
	struct FTransform STATIC_Conv_RotatorToTransform(const struct FRotator& InRotator);//Offset:Discovery.exe+0x57630C0
	struct FQuat STATIC_Conv_RotatorToQuaternion(const struct FRotator& InRot);//Offset:Discovery.exe+0x5759830
	struct FTransform STATIC_Conv_MatrixToTransform(const struct FMatrix& InMatrix);//Offset:Discovery.exe+0x57625F0
	struct FRotator STATIC_Conv_MatrixToRotator(const struct FMatrix& InMatrix);//Offset:Discovery.exe+0x575DAF0
	struct FVector STATIC_Conv_LinearColorToVector(const struct FLinearColor& InLinearColor);//Offset:Discovery.exe+0x5757620
	struct FColor STATIC_Conv_LinearColorToColor(const struct FLinearColor& InLinearColor, bool InUseSRGB);//Offset:Discovery.exe+0x5757430
	struct FVector STATIC_Conv_IntVectorToVector(const struct FIntVector& InIntVector);//Offset:Discovery.exe+0x57512C0
	struct FVector STATIC_Conv_IntToVector(int inInt);//Offset:Discovery.exe+0x5751820
	struct FIntVector STATIC_Conv_IntToIntVector(int inInt);//Offset:Discovery.exe+0x57518E0
	int64_t STATIC_Conv_IntToInt64(int inInt);//Offset:Discovery.exe+0x5751DF0
	float STATIC_Conv_IntToFloat(int inInt);//Offset:Discovery.exe+0x5751F20
	double STATIC_Conv_IntToDouble(int inInt);//Offset:Discovery.exe+0x5751E90
	unsigned char STATIC_Conv_IntToByte(int inInt);//Offset:Discovery.exe+0x5751D60
	bool STATIC_Conv_IntToBool(int inInt);//Offset:Discovery.exe+0x5751780
	struct FVector2D STATIC_Conv_IntPointToVector2D(const struct FIntPoint& InIntPoint);//Offset:Discovery.exe+0x5775B70
	int STATIC_Conv_Int64ToInt(int64_t inInt);//Offset:Discovery.exe+0x5751CD0
	double STATIC_Conv_Int64ToDouble(int64_t inInt);//Offset:Discovery.exe+0x5751990
	unsigned char STATIC_Conv_Int64ToByte(int64_t inInt);//Offset:Discovery.exe+0x5751AE0
	struct FVector STATIC_Conv_FloatToVector(float InFloat);//Offset:Discovery.exe+0x5751200
	struct FLinearColor STATIC_Conv_FloatToLinearColor(float InFloat);//Offset:Discovery.exe+0x5758040
	double STATIC_Conv_FloatToDouble(float InFloat);//Offset:Discovery.exe+0x5751B70
	struct FVector STATIC_Conv_DoubleToVector(double InDouble);//Offset:Discovery.exe+0x5751140
	struct FLinearColor STATIC_Conv_DoubleToLinearColor(double InDouble);//Offset:Discovery.exe+0x5757F70
	int64_t STATIC_Conv_DoubleToInt64(double InDouble);//Offset:Discovery.exe+0x5751A30
	float STATIC_Conv_DoubleToFloat(double InDouble);//Offset:Discovery.exe+0x5751C20
	struct FLinearColor STATIC_Conv_ColorToLinearColor(const struct FColor& InColor);//Offset:Discovery.exe+0x5751390
	int64_t STATIC_Conv_ByteToInt64(unsigned char InByte);//Offset:Discovery.exe+0x5751470
	int STATIC_Conv_ByteToInt(unsigned char InByte);//Offset:Discovery.exe+0x5751500
	float STATIC_Conv_ByteToFloat(unsigned char InByte);//Offset:Discovery.exe+0x5752050
	double STATIC_Conv_ByteToDouble(unsigned char InByte);//Offset:Discovery.exe+0x5751FB0
	int STATIC_Conv_BoolToInt(bool InBool);//Offset:Discovery.exe+0x57516E0
	float STATIC_Conv_BoolToFloat(bool InBool);//Offset:Discovery.exe+0x5751620
	unsigned char STATIC_Conv_BoolToByte(bool InBool);//Offset:Discovery.exe+0x5751590
	struct FTransform STATIC_ComposeTransforms(const struct FTransform& A, const struct FTransform& B);//Offset:Discovery.exe+0x574E5F0
	struct FRotator STATIC_ComposeRotators(const struct FRotator& A, const struct FRotator& B);//Offset:Discovery.exe+0x57635E0
	bool STATIC_ClassIsChildOf(class UClass* TestClass, class UClass* ParentClass);//Offset:Discovery.exe+0x574FB90
	struct FVector STATIC_ClampVectorSize(const struct FVector& A, double Min, double Max);//Offset:Discovery.exe+0x576F4E0
	int64_t STATIC_ClampInt64(int64_t Value, int64_t Min, int64_t Max);//Offset:Discovery.exe+0x577A750
	float STATIC_ClampAxis(float Angle);//Offset:Discovery.exe+0x57627A0
	struct FVector2D STATIC_ClampAxes2D(const struct FVector2D& A, double MinAxisVal, double MaxAxisVal);//Offset:Discovery.exe+0x5773AC0
	double STATIC_ClampAngle(double AngleDegrees, double MinAngleDegrees, double MaxAngleDegrees);//Offset:Discovery.exe+0x57780E0
	int STATIC_Clamp(int Value, int Min, int Max);//Offset:Discovery.exe+0x577BF40
	struct FLinearColor STATIC_CInterpTo(const struct FLinearColor& Current, const struct FLinearColor& Target, float DeltaTime, float InterpSpeed);//Offset:Discovery.exe+0x5756AF0
	void STATIC_BreakVector_NetQuantizeNormal(const struct FVector_NetQuantizeNormal& InVec, double* X, double* Y, double* Z);//Offset:Discovery.exe+0x5747EA0
	void STATIC_BreakVector_NetQuantize100(const struct FVector_NetQuantize100& InVec, double* X, double* Y, double* Z);//Offset:Discovery.exe+0x5747EA0
	void STATIC_BreakVector_NetQuantize10(const struct FVector_NetQuantize10& InVec, double* X, double* Y, double* Z);//Offset:Discovery.exe+0x5747EA0
	void STATIC_BreakVector_NetQuantize(const struct FVector_NetQuantize& InVec, double* X, double* Y, double* Z);//Offset:Discovery.exe+0x5747EA0
	void STATIC_BreakVector4(const struct FVector4& InVec, double* X, double* Y, double* Z, double* W);//Offset:Discovery.exe+0x5768A30
	void STATIC_BreakVector3f(const struct FVector3f& InVec, float* X, float* Y, float* Z);//Offset:Discovery.exe+0x5771880
	void STATIC_BreakVector2D(const struct FVector2D& InVec, double* X, double* Y);//Offset:Discovery.exe+0x5774DC0
	void STATIC_BreakVector(const struct FVector& InVec, double* X, double* Y, double* Z);//Offset:Discovery.exe+0x5747EA0
	void STATIC_BreakTransform(const struct FTransform& InTransform, struct FVector* Location, struct FRotator* Rotation, struct FVector* Scale);//Offset:Discovery.exe+0x574F4B0
	void STATIC_BreakTimespan2(const struct FTimespan& InTimespan, int* Days, int* Hours, int* Minutes, int* Seconds, int* FractionNano);//Offset:Discovery.exe+0x5753F60
	void STATIC_BreakTimespan(const struct FTimespan& InTimespan, int* Days, int* Hours, int* Minutes, int* Seconds, int* Milliseconds);//Offset:Discovery.exe+0x57541C0
	void STATIC_BreakRotIntoAxes(const struct FRotator& InRot, struct FVector* X, struct FVector* Y, struct FVector* Z);//Offset:Discovery.exe+0x57640B0
	void STATIC_BreakRotator(const struct FRotator& InRot, float* Roll, float* Pitch, float* Yaw);//Offset:Discovery.exe+0x5764250
	void STATIC_BreakRandomStream(const struct FRandomStream& InRandomStream, int* InitialSeed);//Offset:Discovery.exe+0x57509A0
	void STATIC_BreakQuat(const struct FQuat& InQuat, float* X, float* Y, float* Z, float* W);//Offset:Discovery.exe+0x575BA50
	void STATIC_BreakQualifiedFrameTime(const struct FQualifiedFrameTime& InFrameTime, struct FFrameNumber* Frame, struct FFrameRate* FrameRate, float* SubFrame);//Offset:Discovery.exe+0x5752340
	void STATIC_BreakFrameRate(const struct FFrameRate& InFrameRate, int* Numerator, int* Denominator);//Offset:Discovery.exe+0x57520F0
	void STATIC_BreakDateTime(const struct FDateTime& InDateTime, int* Year, int* Month, int* Day, int* Hour, int* Minute, int* Second, int* Millisecond);//Offset:Discovery.exe+0x5755930
	void STATIC_BreakColor(const struct FLinearColor& InColor, float* R, float* G, float* B, float* A);//Offset:Discovery.exe+0x5758AE0
	void STATIC_BreakBoxSphereBounds(const struct FBoxSphereBounds& InBoxSphereBounds, struct FVector* Origin, struct FVector* BoxExtent, float* SphereRadius);//Offset:Discovery.exe+0x5750B40
	bool STATIC_BooleanXOR(bool A, bool B);//Offset:Discovery.exe+0x577E1D0
	bool STATIC_BooleanOR(bool A, bool B);//Offset:Discovery.exe+0x577E2D0
	bool STATIC_BooleanNOR(bool A, bool B);//Offset:Discovery.exe+0x577E0E0
	bool STATIC_BooleanNAND(bool A, bool B);//Offset:Discovery.exe+0x577E3C0
	bool STATIC_BooleanAND(bool A, bool B);//Offset:Discovery.exe+0x577E4C0
	unsigned char STATIC_BMin(unsigned char A, unsigned char B);//Offset:Discovery.exe+0x577DB10
	unsigned char STATIC_BMax(unsigned char A, unsigned char B);//Offset:Discovery.exe+0x577DA20
	double STATIC_Atan2(double Y, double X);//Offset:Discovery.exe+0x5778F70
	double STATIC_Atan(double A);//Offset:Discovery.exe+0x5779070
	double STATIC_Asin(double A);//Offset:Discovery.exe+0x5779310
	int STATIC_And_IntInt(int A, int B);//Offset:Discovery.exe+0x577C720
	int64_t STATIC_And_Int64Int64(int64_t A, int64_t B);//Offset:Discovery.exe+0x577B0B0
	struct FVector STATIC_Add_VectorVector(const struct FVector& A, const struct FVector& B);//Offset:Discovery.exe+0x5771290
	struct FVector STATIC_Add_VectorInt(const struct FVector& A, int B);//Offset:Discovery.exe+0x5771060
	struct FVector STATIC_Add_VectorFloat(const struct FVector& A, double B);//Offset:Discovery.exe+0x5771180
	struct FVector4 STATIC_Add_Vector4Vector4(const struct FVector4& A, const struct FVector4& B);//Offset:Discovery.exe+0x57685F0
	struct FVector2D STATIC_Add_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B);//Offset:Discovery.exe+0x5774AD0
	struct FVector2D STATIC_Add_Vector2DFloat(const struct FVector2D& A, double B);//Offset:Discovery.exe+0x57749D0
	struct FTimespan STATIC_Add_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);//Offset:Discovery.exe+0x5753E70
	struct FQuat STATIC_Add_QuatQuat(const struct FQuat& A, const struct FQuat& B);//Offset:Discovery.exe+0x575BFB0
	struct FMatrix STATIC_Add_MatrixMatrix(const struct FMatrix& A, const struct FMatrix& B);//Offset:Discovery.exe+0x5762080
	struct FLinearColor STATIC_Add_LinearColorLinearColor(const struct FLinearColor& A, const struct FLinearColor& B);//Offset:Discovery.exe+0x57563D0
	struct FIntPoint STATIC_Add_IntPointIntPoint(const struct FIntPoint& A, const struct FIntPoint& B);//Offset:Discovery.exe+0x5775A50
	struct FIntPoint STATIC_Add_IntPointInt(const struct FIntPoint& A, int B);//Offset:Discovery.exe+0x5775950
	int STATIC_Add_IntInt(int A, int B);//Offset:Discovery.exe+0x577D070
	int64_t STATIC_Add_Int64Int64(int64_t A, int64_t B);//Offset:Discovery.exe+0x577B9A0
	double STATIC_Add_DoubleDouble(double A, double B);//Offset:Discovery.exe+0x577A320
	struct FDateTime STATIC_Add_DateTimeTimespan(const struct FDateTime& A, const struct FTimespan& B);//Offset:Discovery.exe+0x5753E70
	struct FDateTime STATIC_Add_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B);//Offset:Discovery.exe+0x5753E70
	unsigned char STATIC_Add_ByteByte(unsigned char A, unsigned char B);//Offset:Discovery.exe+0x577DCF0
	double STATIC_Acos(double A);//Offset:Discovery.exe+0x57791B0
	int64_t STATIC_Abs_Int64(int64_t A);//Offset:Discovery.exe+0x577A6A0
	int STATIC_Abs_Int(int A);//Offset:Discovery.exe+0x577BCC0
	double STATIC_Abs(double A);//Offset:Discovery.exe+0x5779470
};


// Class Engine.KismetNodeHelperLibrary
// 0x0000 (0x0028 - 0x0028)
class UKismetNodeHelperLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.KismetNodeHelperLibrary"));
		return ptr;
	}


	void STATIC_MarkBit(int Index, int* Data);//Offset:Discovery.exe+0x5799B30
	bool STATIC_HasUnmarkedBit(int Data, int NumBits);//Offset:Discovery.exe+0x57998C0
	bool STATIC_HasMarkedBit(int Data, int NumBits);//Offset:Discovery.exe+0x57997E0
	unsigned char STATIC_GetValidValue(class UEnum* Enum, unsigned char EnumeratorValue);//Offset:Discovery.exe+0x5799110
	int STATIC_GetUnmarkedBit(int Data, int StartIdx, int NumBits, bool bRandom);//Offset:Discovery.exe+0x5799660
	int STATIC_GetRandomUnmarkedBit(int Data, int StartIdx, int NumBits);//Offset:Discovery.exe+0x5799530
	int STATIC_GetFirstUnmarkedBit(int Data, int StartIdx, int NumBits);//Offset:Discovery.exe+0x5799400
	unsigned char STATIC_GetEnumeratorValueFromIndex(class UEnum* Enum, unsigned char EnumeratorIndex);//Offset:Discovery.exe+0x5799030
	struct FString STATIC_GetEnumeratorUserFriendlyName(class UEnum* Enum, unsigned char EnumeratorValue);//Offset:Discovery.exe+0x57991F0
	struct FName STATIC_GetEnumeratorName(class UEnum* Enum, unsigned char EnumeratorValue);//Offset:Discovery.exe+0x5799310
	void STATIC_ClearBit(int Index, int* Data);//Offset:Discovery.exe+0x5799A40
	void STATIC_ClearAllBits(int* Data);//Offset:Discovery.exe+0x57999A0
	bool STATIC_BitIsMarked(int Data, int Index);//Offset:Discovery.exe+0x5799C20
};


// Class Engine.KismetRenderingLibrary
// 0x0000 (0x0028 - 0x0028)
class UKismetRenderingLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.KismetRenderingLibrary"));
		return ptr;
	}


	void STATIC_SetCastInsetShadowForAllAttachments(class UPrimitiveComponent* PrimitiveComponent, bool bCastInsetShadow, bool bLightAttachmentsAsGroup);//Offset:Discovery.exe+0x579A7D0
	class UTexture2D* STATIC_RenderTargetCreateStaticTexture2DEditorOnly(class UTextureRenderTarget2D* RenderTarget, const struct FString& Name, TEnumAsByte<ETextureCompressionSettings> CompressionSettings, TEnumAsByte<ETextureMipGenSettings> MipSettings);//Offset:Discovery.exe+0x579C7C0
	void STATIC_ReleaseRenderTarget2D(class UTextureRenderTarget2D* TextureRenderTarget);//Offset:Discovery.exe+0x1AB2B20
	struct FColor STATIC_ReadRenderTargetUV(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, float U, float V);//Offset:Discovery.exe+0x579C1E0
	TArray<struct FLinearColor> STATIC_ReadRenderTargetRawUVArea(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, const struct FBox2D& Area, bool bNormalize);//Offset:Discovery.exe+0x579B630
	struct FLinearColor STATIC_ReadRenderTargetRawUV(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, float U, float V, bool bNormalize);//Offset:Discovery.exe+0x579B9D0
	TArray<struct FLinearColor> STATIC_ReadRenderTargetRawPixelArea(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, int MinX, int MinY, int MaxX, int MaxY, bool bNormalize);//Offset:Discovery.exe+0x579BBB0
	struct FLinearColor STATIC_ReadRenderTargetRawPixel(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, int X, int Y, bool bNormalize);//Offset:Discovery.exe+0x579BE60
	bool STATIC_ReadRenderTargetRaw(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, bool bNormalize, TArray<struct FLinearColor>* OutLinearSamples);//Offset:Discovery.exe+0x579B830
	struct FColor STATIC_ReadRenderTargetPixel(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, int X, int Y);//Offset:Discovery.exe+0x579C370
	bool STATIC_ReadRenderTarget(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, bool bNormalize, TArray<struct FColor>* OutSamples);//Offset:Discovery.exe+0x579C040
	struct FSkelMeshSkinWeightInfo STATIC_MakeSkinWeightInfo(int Bone0, unsigned char Weight0, int Bone1, unsigned char Weight1, int Bone2, unsigned char Weight2, int Bone3, unsigned char Weight3);//Offset:Discovery.exe+0x579ACE0
	class UTexture2D* STATIC_ImportFileAsTexture2D(class UObject* WorldContextObject, const struct FString& Filename);//Offset:Discovery.exe+0x579B3B0
	class UTexture2D* STATIC_ImportBufferAsTexture2D(class UObject* WorldContextObject, TArray<unsigned char> Buffer);//Offset:Discovery.exe+0x579B2B0
	void STATIC_ExportTexture2D(class UObject* WorldContextObject, class UTexture2D* Texture, const struct FString& FilePath, const struct FString& Filename);//Offset:Discovery.exe+0x579B4A0
	void STATIC_ExportRenderTarget(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, const struct FString& FilePath, const struct FString& Filename);//Offset:Discovery.exe+0x579C500
	void STATIC_EndDrawCanvasToRenderTarget(class UObject* WorldContextObject, const struct FDrawToRenderTargetContext& Context);//Offset:Discovery.exe+0x579AFD0
	void STATIC_DrawMaterialToRenderTarget(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, class UMaterialInterface* Material);//Offset:Discovery.exe+0x579C9A0
	class UTextureRenderTargetVolume* STATIC_CreateRenderTargetVolume(class UObject* WorldContextObject, int Width, int Height, int Depth, TEnumAsByte<ETextureRenderTargetFormat> Format, const struct FLinearColor& ClearColor, bool bAutoGenerateMipMaps);//Offset:Discovery.exe+0x579CAD0
	class UTextureRenderTarget2DArray* STATIC_CreateRenderTarget2DArray(class UObject* WorldContextObject, int Width, int Height, int Slices, TEnumAsByte<ETextureRenderTargetFormat> Format, const struct FLinearColor& ClearColor, bool bAutoGenerateMipMaps);//Offset:Discovery.exe+0x579CD50
	class UTextureRenderTarget2D* STATIC_CreateRenderTarget2D(class UObject* WorldContextObject, const struct FName& TextureName, int Width, int Height, TEnumAsByte<ETextureRenderTargetFormat> Format, const struct FLinearColor& ClearColor, bool bAutoGenerateMipMaps);//Offset:Discovery.exe+0x579CFD0
	void STATIC_ConvertRenderTargetToTexture2DEditorOnly(class UObject* WorldContextObject, class UTextureRenderTarget2D* RenderTarget, class UTexture2D* Texture);//Offset:Discovery.exe+0x579C690
	void STATIC_ClearRenderTarget2D(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, const struct FLinearColor& ClearColor);//Offset:Discovery.exe+0x579D260
	struct FMatrix STATIC_CalculateProjectionMatrix(const struct FMinimalViewInfo& MinimalViewInfo);//Offset:Discovery.exe+0x579A620
	void STATIC_BreakSkinWeightInfo(const struct FSkelMeshSkinWeightInfo& InWeight, int* Bone0, unsigned char* Weight0, int* Bone1, unsigned char* Weight1, int* Bone2, unsigned char* Weight2, int* Bone3, unsigned char* Weight3);//Offset:Discovery.exe+0x579A900
	void STATIC_BeginDrawCanvasToRenderTarget(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, class UCanvas** Canvas, struct FVector2D* Size, struct FDrawToRenderTargetContext* Context);//Offset:Discovery.exe+0x579B0C0
};


// Class Engine.KismetStringLibrary
// 0x0000 (0x0028 - 0x0028)
class UKismetStringLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.KismetStringLibrary"));
		return ptr;
	}


	struct FString STATIC_TrimTrailing(const struct FString& SourceString);//Offset:Discovery.exe+0x579F280
	struct FString STATIC_Trim(const struct FString& SourceString);//Offset:Discovery.exe+0x579F360
	struct FString STATIC_ToUpper(const struct FString& SourceString);//Offset:Discovery.exe+0x579FC20
	struct FString STATIC_ToLower(const struct FString& SourceString);//Offset:Discovery.exe+0x579FB40
	struct FString STATIC_TimeSecondsToString(float InSeconds);//Offset:Discovery.exe+0x579E330
	bool STATIC_StartsWith(const struct FString& SourceString, const struct FString& InPrefix, TEnumAsByte<ESearchCase> SearchCase);//Offset:Discovery.exe+0x579F6E0
	bool STATIC_Split(const struct FString& SourceString, const struct FString& InStr, TEnumAsByte<ESearchCase> SearchCase, TEnumAsByte<ESearchDir> SearchDir, struct FString* LeftS, struct FString* RightS);//Offset:Discovery.exe+0x579EA30
	struct FString STATIC_RightPad(const struct FString& SourceString, int ChCount);//Offset:Discovery.exe+0x579F8E0
	struct FString STATIC_RightChop(const struct FString& SourceString, int Count);//Offset:Discovery.exe+0x579E570
	struct FString STATIC_Right(const struct FString& SourceString, int Count);//Offset:Discovery.exe+0x579E6A0
	struct FString STATIC_Reverse(const struct FString& SourceString);//Offset:Discovery.exe+0x579F050
	int STATIC_ReplaceInline(const struct FString& SearchText, const struct FString& ReplacementText, TEnumAsByte<ESearchCase> SearchCase, struct FString* SourceString);//Offset:Discovery.exe+0x579ECB0
	struct FString STATIC_Replace(const struct FString& SourceString, const struct FString& From, const struct FString& To, TEnumAsByte<ESearchCase> SearchCase);//Offset:Discovery.exe+0x579EE70
	TArray<struct FString> STATIC_ParseIntoArray(const struct FString& SourceString, const struct FString& Delimiter, bool CullEmptyStrings);//Offset:Discovery.exe+0x579FFE0
	bool STATIC_NotEqual_StrStr(const struct FString& A, const struct FString& B);//Offset:Discovery.exe+0x57A08B0
	bool STATIC_NotEqual_StriStri(const struct FString& A, const struct FString& B);//Offset:Discovery.exe+0x57A07B0
	struct FString STATIC_Mid(const struct FString& SourceString, int Start, int Count);//Offset:Discovery.exe+0x579E400
	bool STATIC_MatchesWildcard(const struct FString& SourceString, const struct FString& Wildcard, TEnumAsByte<ESearchCase> SearchCase);//Offset:Discovery.exe+0x579F440
	int STATIC_Len(const struct FString& S);//Offset:Discovery.exe+0x57A0700
	struct FString STATIC_LeftPad(const struct FString& SourceString, int ChCount);//Offset:Discovery.exe+0x579FA10
	struct FString STATIC_LeftChop(const struct FString& SourceString, int Count);//Offset:Discovery.exe+0x579E7D0
	struct FString STATIC_Left(const struct FString& SourceString, int Count);//Offset:Discovery.exe+0x579E900
	struct FString STATIC_JoinStringArray(TArray<struct FString> SourceArray, const struct FString& Separator);//Offset:Discovery.exe+0x579FE50
	bool STATIC_IsNumeric(const struct FString& SourceString);//Offset:Discovery.exe+0x579F830
	bool STATIC_IsEmpty(const struct FString& InString);//Offset:Discovery.exe+0x57A0650
	struct FString STATIC_GetSubstring(const struct FString& SourceString, int StartIndex, int Length);//Offset:Discovery.exe+0x579E400
	int STATIC_GetCharacterAsNumber(const struct FString& SourceString, int Index);//Offset:Discovery.exe+0x57A01D0
	TArray<struct FString> STATIC_GetCharacterArrayFromString(const struct FString& SourceString);//Offset:Discovery.exe+0x579FD00
	int STATIC_FindSubstring(const struct FString& SearchIn, const struct FString& Substring, bool bUseCase, bool bSearchFromEnd, int StartPosition);//Offset:Discovery.exe+0x57A0460
	bool STATIC_EqualEqual_StrStr(const struct FString& A, const struct FString& B);//Offset:Discovery.exe+0x57A0AB0
	bool STATIC_EqualEqual_StriStri(const struct FString& A, const struct FString& B);//Offset:Discovery.exe+0x57A09B0
	bool STATIC_EndsWith(const struct FString& SourceString, const struct FString& InSuffix, TEnumAsByte<ESearchCase> SearchCase);//Offset:Discovery.exe+0x579F590
	int STATIC_CullArray(const struct FString& SourceString, TArray<struct FString>* inArray);//Offset:Discovery.exe+0x579F130
	struct FString STATIC_Conv_VectorToString(const struct FVector& InVec);//Offset:Discovery.exe+0x57A32F0
	struct FString STATIC_Conv_Vector3fToString(const struct FVector3f& InVec);//Offset:Discovery.exe+0x57A3210
	struct FString STATIC_Conv_Vector2dToString(const struct FVector2D& InVec);//Offset:Discovery.exe+0x57A2F90
	struct FString STATIC_Conv_TransformToString(const struct FTransform& InTrans);//Offset:Discovery.exe+0x57A2D90
	void STATIC_Conv_StringToVector3f(const struct FString& InString, struct FVector3f* OutConvertedVector, bool* OutIsValid);//Offset:Discovery.exe+0x57A24E0
	void STATIC_Conv_StringToVector2D(const struct FString& InString, struct FVector2D* OutConvertedVector2D, bool* OutIsValid);//Offset:Discovery.exe+0x57A2390
	void STATIC_Conv_StringToVector(const struct FString& InString, struct FVector* OutConvertedVector, bool* OutIsValid);//Offset:Discovery.exe+0x57A2630
	void STATIC_Conv_StringToRotator(const struct FString& InString, struct FRotator* OutConvertedRotator, bool* OutIsValid);//Offset:Discovery.exe+0x57A2240
	struct FName STATIC_Conv_StringToName(const struct FString& InString);//Offset:Discovery.exe+0x57A2990
	int64_t STATIC_Conv_StringToInt64(const struct FString& InString);//Offset:Discovery.exe+0x57A2830
	int STATIC_Conv_StringToInt(const struct FString& InString);//Offset:Discovery.exe+0x57A28E0
	double STATIC_Conv_StringToDouble(const struct FString& InString);//Offset:Discovery.exe+0x57A2780
	void STATIC_Conv_StringToColor(const struct FString& InString, struct FLinearColor* OutConvertedColor, bool* OutIsValid);//Offset:Discovery.exe+0x57A20F0
	struct FString STATIC_Conv_RotatorToString(const struct FRotator& InRot);//Offset:Discovery.exe+0x57A2EB0
	struct FString STATIC_Conv_ObjectToString(class UObject* InObj);//Offset:Discovery.exe+0x57A2CC0
	struct FString STATIC_Conv_NameToString(const struct FName& InName);//Offset:Discovery.exe+0x57A2B20
	struct FString STATIC_Conv_MatrixToString(const struct FMatrix& InMatrix);//Offset:Discovery.exe+0x57A2A40
	struct FString STATIC_Conv_IntVectorToString(const struct FIntVector& InIntVec);//Offset:Discovery.exe+0x57A3130
	struct FString STATIC_Conv_IntToString(int inInt);//Offset:Discovery.exe+0x57A3640
	struct FString STATIC_Conv_IntPointToString(const struct FIntPoint& InIntPoint);//Offset:Discovery.exe+0x57A3060
	struct FString STATIC_Conv_Int64ToString(int64_t inInt);//Offset:Discovery.exe+0x57A3570
	struct FString STATIC_Conv_DoubleToString(double InDouble);//Offset:Discovery.exe+0x57A3710
	struct FString STATIC_Conv_ColorToString(const struct FLinearColor& InColor);//Offset:Discovery.exe+0x57A2BF0
	struct FString STATIC_Conv_ByteToString(unsigned char InByte);//Offset:Discovery.exe+0x57A34A0
	struct FString STATIC_Conv_BoolToString(bool InBool);//Offset:Discovery.exe+0x57A33D0
	bool STATIC_Contains(const struct FString& SearchIn, const struct FString& Substring, bool bUseCase, bool bSearchFromEnd);//Offset:Discovery.exe+0x57A02C0
	struct FString STATIC_Concat_StrStr(const struct FString& A, const struct FString& B);//Offset:Discovery.exe+0x57A0BB0
	struct FString STATIC_BuildString_Vector2d(const struct FString& AppendTo, const struct FString& Prefix, const struct FVector2D& InVector2D, const struct FString& Suffix);//Offset:Discovery.exe+0x57A14F0
	struct FString STATIC_BuildString_Vector(const struct FString& AppendTo, const struct FString& Prefix, const struct FVector& InVector, const struct FString& Suffix);//Offset:Discovery.exe+0x57A1900
	struct FString STATIC_BuildString_Rotator(const struct FString& AppendTo, const struct FString& Prefix, const struct FRotator& InRot, const struct FString& Suffix);//Offset:Discovery.exe+0x57A12D0
	struct FString STATIC_BuildString_Object(const struct FString& AppendTo, const struct FString& Prefix, class UObject* InObj, const struct FString& Suffix);//Offset:Discovery.exe+0x57A10E0
	struct FString STATIC_BuildString_Name(const struct FString& AppendTo, const struct FString& Prefix, const struct FName& InName, const struct FString& Suffix);//Offset:Discovery.exe+0x57A0CF0
	struct FString STATIC_BuildString_IntVector(const struct FString& AppendTo, const struct FString& Prefix, const struct FIntVector& InIntVector, const struct FString& Suffix);//Offset:Discovery.exe+0x57A16F0
	struct FString STATIC_BuildString_Int(const struct FString& AppendTo, const struct FString& Prefix, int inInt, const struct FString& Suffix);//Offset:Discovery.exe+0x57A1D10
	struct FString STATIC_BuildString_Double(const struct FString& AppendTo, const struct FString& Prefix, double InDouble, const struct FString& Suffix);//Offset:Discovery.exe+0x57A1F00
	struct FString STATIC_BuildString_Color(const struct FString& AppendTo, const struct FString& Prefix, const struct FLinearColor& InColor, const struct FString& Suffix);//Offset:Discovery.exe+0x57A0EE0
	struct FString STATIC_BuildString_Bool(const struct FString& AppendTo, const struct FString& Prefix, bool InBool, const struct FString& Suffix);//Offset:Discovery.exe+0x57A1B20
};


// Class Engine.KismetStringTableLibrary
// 0x0000 (0x0028 - 0x0028)
class UKismetStringTableLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.KismetStringTableLibrary"));
		return ptr;
	}


	bool STATIC_IsRegisteredTableId(const struct FName& TableId);//Offset:Discovery.exe+0x57A7A60
	bool STATIC_IsRegisteredTableEntry(const struct FName& TableId, const struct FString& Key);//Offset:Discovery.exe+0x57A7970
	struct FString STATIC_GetTableNamespace(const struct FName& TableId);//Offset:Discovery.exe+0x57A78A0
	struct FString STATIC_GetTableEntrySourceString(const struct FName& TableId, const struct FString& Key);//Offset:Discovery.exe+0x57A7770
	struct FString STATIC_GetTableEntryMetaData(const struct FName& TableId, const struct FString& Key, const struct FName& MetaDataId);//Offset:Discovery.exe+0x57A75F0
	TArray<struct FName> STATIC_GetRegisteredStringTables();//Offset:Discovery.exe+0x57A7570
	TArray<struct FName> STATIC_GetMetaDataIdsFromStringTableEntry(const struct FName& TableId, const struct FString& Key);//Offset:Discovery.exe+0x57A7300
	TArray<struct FString> STATIC_GetKeysFromStringTable(const struct FName& TableId);//Offset:Discovery.exe+0x57A7430
};


// Class Engine.KismetSystemLibrary
// 0x0000 (0x0028 - 0x0028)
class UKismetSystemLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.KismetSystemLibrary"));
		return ptr;
	}


	void STATIC_UnregisterForRemoteNotifications();//Offset:Discovery.exe+0x57A9B60
	void STATIC_UnloadPrimaryAssetList(TArray<struct FPrimaryAssetId> PrimaryAssetIdList);//Offset:Discovery.exe+0x57A8740
	void STATIC_UnloadPrimaryAsset(const struct FPrimaryAssetId& PrimaryAssetId);//Offset:Discovery.exe+0x57A87F0
	void STATIC_TransactObject(class UObject* Object);//Offset:Discovery.exe+0x57A9240
	void STATIC_StackTrace();//Offset:Discovery.exe+0x57C5780
	bool STATIC_SphereTraceSingleForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, struct FHitResult* OutHit);//Offset:Discovery.exe+0x57B2980
	bool STATIC_SphereTraceSingleByProfile(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, const struct FName& ProfileName, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, struct FHitResult* OutHit);//Offset:Discovery.exe+0x57AF940
	bool STATIC_SphereTraceSingle(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, struct FHitResult* OutHit);//Offset:Discovery.exe+0x57B5950
	bool STATIC_SphereTraceMultiForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, TArray<struct FHitResult>* OutHits);//Offset:Discovery.exe+0x57B23F0
	bool STATIC_SphereTraceMultiByProfile(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, const struct FName& ProfileName, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, TArray<struct FHitResult>* OutHits);//Offset:Discovery.exe+0x57AF3D0
	bool STATIC_SphereTraceMulti(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, TArray<struct FHitResult>* OutHits);//Offset:Discovery.exe+0x57B53E0
	bool STATIC_SphereOverlapComponents(class UObject* WorldContextObject, const struct FVector& SpherePos, float SphereRadius, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, class UClass* ComponentClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents);//Offset:Discovery.exe+0x57B7DE0
	bool STATIC_SphereOverlapActors(class UObject* WorldContextObject, const struct FVector& SpherePos, float SphereRadius, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, class UClass* ActorClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class AActor*>* OutActors);//Offset:Discovery.exe+0x57B8100
	void STATIC_SnapshotObject(class UObject* Object);//Offset:Discovery.exe+0x57A9240
	void STATIC_ShowPlatformSpecificLeaderboardScreen(const struct FString& CategoryName);//Offset:Discovery.exe+0x57AA2F0
	void STATIC_ShowPlatformSpecificAchievementsScreen(class APlayerController* SpecificPlayer);//Offset:Discovery.exe+0x57AA260
	void STATIC_ShowInterstitialAd();//Offset:Discovery.exe+0x57AA390
	void STATIC_ShowAdBanner(int AdIdIndex, bool bShowOnBottomOfScreen);//Offset:Discovery.exe+0x57AA510
	void STATIC_SetWindowTitle(const struct FText& Title);//Offset:Discovery.exe+0x57BC7C0
	void STATIC_SetVolumeButtonsHandledBySystem(bool bEnabled);//Offset:Discovery.exe+0x57AA130
	void STATIC_SetVectorPropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FVector& Value);//Offset:Discovery.exe+0x57B8BD0
	void STATIC_SetVector3fPropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FVector3f& Value);//Offset:Discovery.exe+0x57B8AA0
	void STATIC_SetUserActivity(const struct FUserActivity& UserActivity);//Offset:Discovery.exe+0x57A9AB0
	void STATIC_SetTransformPropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FTransform& Value);//Offset:Discovery.exe+0x57B8580
	void STATIC_SetTextPropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FText& Value);//Offset:Discovery.exe+0x57B8D00
	void STATIC_SetSuppressViewportTransitionMessage(class UObject* WorldContextObject, bool bState);//Offset:Discovery.exe+0x57A9DF0
	void STATIC_SetStructurePropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FGenericStruct& Value);//Offset:Discovery.exe+0x57C5660
	void STATIC_SetStringPropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FString& Value);//Offset:Discovery.exe+0x57B8E70
	void STATIC_SetSoftObjectPropertyByName(class UObject* Object, const struct FName& PropertyName);//Offset:Discovery.exe+0x57B9120
	void STATIC_SetSoftClassPropertyByName(class UObject* Object, const struct FName& PropertyName);//Offset:Discovery.exe+0x57B8FB0
	void STATIC_SetRotatorPropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FRotator& Value);//Offset:Discovery.exe+0x57B8970
	void STATIC_SetObjectPropertyByName(class UObject* Object, const struct FName& PropertyName, class UObject* Value);//Offset:Discovery.exe+0x57B9640
	void STATIC_SetNamePropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FName& Value);//Offset:Discovery.exe+0x57B9290
	void STATIC_SetLinearColorPropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FLinearColor& Value);//Offset:Discovery.exe+0x57B8840
	void STATIC_SetIntPropertyByName(class UObject* Object, const struct FName& PropertyName, int Value);//Offset:Discovery.exe+0x57B9C30
	void STATIC_SetInterfacePropertyByName(class UObject* Object, const struct FName& PropertyName, const TScriptInterface<class UInterface>& Value);//Offset:Discovery.exe+0x57B93D0
	void STATIC_SetInt64PropertyByName(class UObject* Object, const struct FName& PropertyName, int64_t Value);//Offset:Discovery.exe+0x57B9B00
	void STATIC_SetGamepadsBlockDeviceFeedback(bool bBlock);//Offset:Discovery.exe+0x57AA130
	void STATIC_SetFieldPathPropertyByName(class UObject* Object, const struct FName& PropertyName);//Offset:Discovery.exe+0x57B8420
	void STATIC_SetDoublePropertyByName(class UObject* Object, const struct FName& PropertyName, double Value);//Offset:Discovery.exe+0x57B98A0
	void STATIC_SetColorPropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FColor& Value);//Offset:Discovery.exe+0x57B8710
	void STATIC_SetCollisionProfileNameProperty(class UObject* Object, const struct FName& PropertyName, const struct FCollisionProfileName& Value);//Offset:Discovery.exe+0x57C5660
	void STATIC_SetClassPropertyByName(class UObject* Object, const struct FName& PropertyName, class UClass* Value);//Offset:Discovery.exe+0x57B9510
	void STATIC_SetBytePropertyByName(class UObject* Object, const struct FName& PropertyName, unsigned char Value);//Offset:Discovery.exe+0x57B99D0
	void STATIC_SetBoolPropertyByName(class UObject* Object, const struct FName& PropertyName, bool Value);//Offset:Discovery.exe+0x57B9770
	void STATIC_RetriggerableDelay(class UObject* WorldContextObject, float Duration, const struct FLatentActionInfo& LatentInfo);//Offset:Discovery.exe+0x57BBF80
	void STATIC_ResetGamepadAssignmentToController(int ControllerId);//Offset:Discovery.exe+0x57A92D0
	void STATIC_ResetGamepadAssignments();//Offset:Discovery.exe+0x155C060
	void STATIC_RegisterForRemoteNotifications();//Offset:Discovery.exe+0x57A9B60
	void STATIC_QuitGame(class UObject* WorldContextObject, class APlayerController* SpecificPlayer, TEnumAsByte<EQuitPreference> QuitPreference, bool bIgnorePlatformRestrictions);//Offset:Discovery.exe+0x57BC300
	void STATIC_PrintWarning(const struct FString& InString);//Offset:Discovery.exe+0x57BC890
	void STATIC_PrintText(class UObject* WorldContextObject, const struct FText& InText, bool bPrintToScreen, bool bPrintToLog, const struct FLinearColor& TextColor, float Duration, const struct FName& Key);//Offset:Discovery.exe+0x57BC930
	void STATIC_PrintString(class UObject* WorldContextObject, const struct FString& InString, bool bPrintToScreen, bool bPrintToLog, const struct FLinearColor& TextColor, float Duration, const struct FName& Key);//Offset:Discovery.exe+0x57BCC40
	bool STATIC_ParseParamValue(const struct FString& InString, const struct FString& InParam, struct FString* OutValue);//Offset:Discovery.exe+0x57A94F0
	bool STATIC_ParseParam(const struct FString& InString, const struct FString& InParam);//Offset:Discovery.exe+0x57A9660
	void STATIC_ParseCommandLine(const struct FString& InCmdLine, TArray<struct FString>* OutTokens, TArray<struct FString>* OutSwitches, TMap<struct FString, struct FString>* OutParams);//Offset:Discovery.exe+0x57A9760
	void OnAssetLoaded__DelegateSignature(class UObject* Loaded);//Offset:Discovery.exe+0x327F8B0
	void OnAssetClassLoaded__DelegateSignature(class UClass* Loaded);//Offset:Discovery.exe+0x327F8B0
	bool STATIC_NotEqual_SoftObjectReference();//Offset:Discovery.exe+0x57BE140
	bool STATIC_NotEqual_SoftClassReference();//Offset:Discovery.exe+0x57BE140
	bool STATIC_NotEqual_PrimaryAssetType(const struct FPrimaryAssetType& A, const struct FPrimaryAssetType& B);//Offset:Discovery.exe+0x18E0350
	bool STATIC_NotEqual_PrimaryAssetId(const struct FPrimaryAssetId& A, const struct FPrimaryAssetId& B);//Offset:Discovery.exe+0x18DFFD0
	struct FString STATIC_NormalizeFilename(const struct FString& InFilename);//Offset:Discovery.exe+0x57BF460
	void STATIC_MoveComponentTo(class USceneComponent* Component, const struct FVector& TargetRelativeLocation, const struct FRotator& TargetRelativeRotation, bool bEaseOut, bool bEaseIn, float OverTime, bool bForceShortestRotationPath, TEnumAsByte<EMoveComponentAction> MoveAction, const struct FLatentActionInfo& LatentInfo);//Offset:Discovery.exe+0x57BBBB0
	struct FSoftObjectPath STATIC_MakeSoftObjectPath(const struct FString& PathString);//Offset:Discovery.exe+0x57BEC50
	struct FSoftClassPath STATIC_MakeSoftClassPath(const struct FString& PathString);//Offset:Discovery.exe+0x57BEA10
	struct FText STATIC_MakeLiteralText(const struct FText& Value);//Offset:Discovery.exe+0x57BCFE0
	struct FString STATIC_MakeLiteralString(const struct FString& Value);//Offset:Discovery.exe+0x57BD180
	struct FName STATIC_MakeLiteralName(const struct FName& Value);//Offset:Discovery.exe+0x57BD360
	int64_t STATIC_MakeLiteralInt64(int64_t Value);//Offset:Discovery.exe+0x57BD520
	int STATIC_MakeLiteralInt(int Value);//Offset:Discovery.exe+0x57BD5B0
	float STATIC_MakeLiteralFloat(float Value);//Offset:Discovery.exe+0x57BD490
	double STATIC_MakeLiteralDouble(double Value);//Offset:Discovery.exe+0x57BD3F0
	unsigned char STATIC_MakeLiteralByte(unsigned char Value);//Offset:Discovery.exe+0x57BD2D0
	bool STATIC_MakeLiteralBool(bool Value);//Offset:Discovery.exe+0x5751590
	void STATIC_LogString(const struct FString& InString, bool bPrintToLog);//Offset:Discovery.exe+0x57BCEF0
	void STATIC_LoadInterstitialAd(int AdIdIndex);//Offset:Discovery.exe+0x57AA410
	class UClass* STATIC_LoadClassAsset_Blocking();//Offset:Discovery.exe+0x57BDFE0
	void STATIC_LoadAssetClass(class UObject* WorldContextObject, const struct FScriptDelegate& OnLoaded, const struct FLatentActionInfo& LatentInfo);//Offset:Discovery.exe+0x57BD640
	class UObject* STATIC_LoadAsset_Blocking();//Offset:Discovery.exe+0x57BE610
	void STATIC_LoadAsset(class UObject* WorldContextObject, const struct FScriptDelegate& OnLoaded, const struct FLatentActionInfo& LatentInfo);//Offset:Discovery.exe+0x57BD910
	bool STATIC_LineTraceSingleForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, struct FHitResult* OutHit);//Offset:Discovery.exe+0x57B3500
	bool STATIC_LineTraceSingleByProfile(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FName& ProfileName, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, struct FHitResult* OutHit);//Offset:Discovery.exe+0x57B0480
	bool STATIC_LineTraceSingle(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, struct FHitResult* OutHit);//Offset:Discovery.exe+0x57B6490
	bool STATIC_LineTraceMultiForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, TArray<struct FHitResult>* OutHits);//Offset:Discovery.exe+0x57B2FD0
	bool STATIC_LineTraceMultiByProfile(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FName& ProfileName, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, TArray<struct FHitResult>* OutHits);//Offset:Discovery.exe+0x57AFF70
	bool STATIC_LineTraceMulti(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, TArray<struct FHitResult>* OutHits);//Offset:Discovery.exe+0x57B5F80
	void STATIC_LaunchURL(const struct FString& URL);//Offset:Discovery.exe+0x57AA6C0
	void STATIC_K2_UnPauseTimerHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle);//Offset:Discovery.exe+0x57BAF30
	void STATIC_K2_UnPauseTimerDelegate(const struct FScriptDelegate& Delegate);//Offset:Discovery.exe+0x57BB6E0
	void STATIC_K2_UnPauseTimer(class UObject* Object, const struct FString& FunctionName);//Offset:Discovery.exe+0x57BA3A0
	bool STATIC_K2_TimerExistsHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle);//Offset:Discovery.exe+0x57BAC90
	bool STATIC_K2_TimerExistsDelegate(const struct FScriptDelegate& Delegate);//Offset:Discovery.exe+0x57BB4D0
	bool STATIC_K2_TimerExists(class UObject* Object, const struct FString& FunctionName);//Offset:Discovery.exe+0x57B9FE0
	struct FTimerHandle STATIC_K2_SetTimerForNextTickDelegate(const struct FScriptDelegate& Delegate);//Offset:Discovery.exe+0x57BB8F0
	struct FTimerHandle STATIC_K2_SetTimerForNextTick(class UObject* Object, const struct FString& FunctionName);//Offset:Discovery.exe+0x57BA730
	struct FTimerHandle STATIC_K2_SetTimerDelegate(const struct FScriptDelegate& Delegate, float Time, bool bLooping, float InitialStartDelay, float InitialStartDelayVariance);//Offset:Discovery.exe+0x57BB9B0
	struct FTimerHandle STATIC_K2_SetTimer(class UObject* Object, const struct FName& FunctionName, float Time, bool bLooping, float InitialStartDelay, float InitialStartDelayVariance);//Offset:Discovery.exe+0x57BA880
	void STATIC_K2_PauseTimerHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle);//Offset:Discovery.exe+0x57BB010
	void STATIC_K2_PauseTimerDelegate(const struct FScriptDelegate& Delegate);//Offset:Discovery.exe+0x57BB790
	void STATIC_K2_PauseTimer(class UObject* Object, const struct FString& FunctionName);//Offset:Discovery.exe+0x57BA4D0
	bool STATIC_K2_IsValidTimerHandle(const struct FTimerHandle& Handle);//Offset:Discovery.exe+0x1986550
	bool STATIC_K2_IsTimerPausedHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle);//Offset:Discovery.exe+0x57BAD70
	bool STATIC_K2_IsTimerPausedDelegate(const struct FScriptDelegate& Delegate);//Offset:Discovery.exe+0x57BB580
	bool STATIC_K2_IsTimerPaused(class UObject* Object, const struct FString& FunctionName);//Offset:Discovery.exe+0x57BA120
	bool STATIC_K2_IsTimerActiveHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle);//Offset:Discovery.exe+0x57BAE50
	bool STATIC_K2_IsTimerActiveDelegate(const struct FScriptDelegate& Delegate);//Offset:Discovery.exe+0x57BB630
	bool STATIC_K2_IsTimerActive(class UObject* Object, const struct FString& FunctionName);//Offset:Discovery.exe+0x57BA260
	struct FTimerHandle STATIC_K2_InvalidateTimerHandle(struct FTimerHandle* Handle);//Offset:Discovery.exe+0x57BB2C0
	float STATIC_K2_GetTimerRemainingTimeHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle);//Offset:Discovery.exe+0x57BAAB0
	float STATIC_K2_GetTimerRemainingTimeDelegate(const struct FScriptDelegate& Delegate);//Offset:Discovery.exe+0x57BB370
	float STATIC_K2_GetTimerRemainingTime(class UObject* Object, const struct FString& FunctionName);//Offset:Discovery.exe+0x57B9D60
	float STATIC_K2_GetTimerElapsedTimeHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle);//Offset:Discovery.exe+0x57BABA0
	float STATIC_K2_GetTimerElapsedTimeDelegate(const struct FScriptDelegate& Delegate);//Offset:Discovery.exe+0x57BB420
	float STATIC_K2_GetTimerElapsedTime(class UObject* Object, const struct FString& FunctionName);//Offset:Discovery.exe+0x57B9EA0
	void STATIC_K2_ClearTimerHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle);//Offset:Discovery.exe+0x57BB1E0
	void STATIC_K2_ClearTimerDelegate(const struct FScriptDelegate& Delegate);//Offset:Discovery.exe+0x57BB840
	void STATIC_K2_ClearTimer(class UObject* Object, const struct FString& FunctionName);//Offset:Discovery.exe+0x57BA600
	void STATIC_K2_ClearAndInvalidateTimerHandle(class UObject* WorldContextObject, struct FTimerHandle* Handle);//Offset:Discovery.exe+0x57BB0F0
	bool STATIC_IsValidSoftObjectReference();//Offset:Discovery.exe+0x57BE530
	bool STATIC_IsValidSoftClassReference();//Offset:Discovery.exe+0x57BE530
	bool STATIC_IsValidPrimaryAssetType(const struct FPrimaryAssetType& PrimaryAssetType);//Offset:Discovery.exe+0x18E05E0
	bool STATIC_IsValidPrimaryAssetId(const struct FPrimaryAssetId& PrimaryAssetId);//Offset:Discovery.exe+0x18E02B0
	bool STATIC_IsValidClass(class UClass* Class);//Offset:Discovery.exe+0x57BFE60
	bool STATIC_IsValid(class UObject* Object);//Offset:Discovery.exe+0x57BFE60
	bool STATIC_IsUnattended();//Offset:Discovery.exe+0x1BF0C00
	bool STATIC_IsStandalone(class UObject* WorldContextObject);//Offset:Discovery.exe+0x57BEFF0
	bool STATIC_IsSplitScreen(class UObject* WorldContextObject);//Offset:Discovery.exe+0x57BEF50
	bool STATIC_IsServer(class UObject* WorldContextObject);//Offset:Discovery.exe+0x57BF130
	bool STATIC_IsScreensaverEnabled();//Offset:Discovery.exe+0x1DB6450
	bool STATIC_IsPackagedForDistribution();//Offset:Discovery.exe+0x1B14430
	bool STATIC_IsLoggedIn(class APlayerController* SpecificPlayer);//Offset:Discovery.exe+0x57AA1C0
	bool STATIC_IsInterstitialAdRequested();//Offset:Discovery.exe+0x57AA3B0
	bool STATIC_IsInterstitialAdAvailable();//Offset:Discovery.exe+0x57AA3E0
	bool STATIC_IsDedicatedServer(class UObject* WorldContextObject);//Offset:Discovery.exe+0x57BF090
	bool STATIC_IsControllerAssignedToGamepad(int ControllerId);//Offset:Discovery.exe+0x57AA090
	void STATIC_HideAdBanner();//Offset:Discovery.exe+0x57AA4C0
	bool STATIC_HasMultipleLocalPlayers(class UObject* WorldContextObject);//Offset:Discovery.exe+0x57BEF50
	bool STATIC_GetVolumeButtonsHandledBySystem();//Offset:Discovery.exe+0x1B14430
	struct FString STATIC_GetUniqueDeviceId();//Offset:Discovery.exe+0x57BEED0
	struct FString STATIC_GetSystemPath(class UObject* Object);//Offset:Discovery.exe+0x57BFCC0
	bool STATIC_GetSupportedFullscreenResolutions(TArray<struct FIntPoint>* Resolutions);//Offset:Discovery.exe+0x57AA870
	void STATIC_GetSoftObjectReferenceFromPrimaryAssetId(const struct FPrimaryAssetId& PrimaryAssetId);//Offset:Discovery.exe+0x57A8FD0
	void STATIC_GetSoftClassReferenceFromPrimaryAssetId(const struct FPrimaryAssetId& PrimaryAssetId);//Offset:Discovery.exe+0x57A8EB0
	int STATIC_GetRenderingMaterialQualityLevel();//Offset:Discovery.exe+0x57AA920
	int STATIC_GetRenderingDetailMode();//Offset:Discovery.exe+0x57AA950
	struct FString STATIC_GetProjectSavedDirectory();//Offset:Discovery.exe+0x57BF700
	struct FString STATIC_GetProjectDirectory();//Offset:Discovery.exe+0x57BF800
	struct FString STATIC_GetProjectContentDirectory();//Offset:Discovery.exe+0x57BF780
	void STATIC_GetPrimaryAssetsWithBundleState(TArray<struct FName> RequiredBundles, TArray<struct FName> ExcludedBundles, TArray<struct FPrimaryAssetType> ValidTypes, bool bForceCurrentState, TArray<struct FPrimaryAssetId>* OutPrimaryAssetIdList);//Offset:Discovery.exe+0x57A8380
	void STATIC_GetPrimaryAssetIdList(const struct FPrimaryAssetType& PrimaryAssetType, TArray<struct FPrimaryAssetId>* OutPrimaryAssetIdList);//Offset:Discovery.exe+0x57A8970
	struct FPrimaryAssetId STATIC_GetPrimaryAssetIdFromSoftObjectReference();//Offset:Discovery.exe+0x57A8BF0
	struct FPrimaryAssetId STATIC_GetPrimaryAssetIdFromSoftClassReference();//Offset:Discovery.exe+0x57A8A70
	struct FPrimaryAssetId STATIC_GetPrimaryAssetIdFromObject(class UObject* Object);//Offset:Discovery.exe+0x57A8E10
	struct FPrimaryAssetId STATIC_GetPrimaryAssetIdFromClass(class UClass* Class);//Offset:Discovery.exe+0x57A8D70
	TArray<struct FString> STATIC_GetPreferredLanguages();//Offset:Discovery.exe+0x57A9D00
	struct FString STATIC_GetPlatformUserName();//Offset:Discovery.exe+0x57BF360
	struct FString STATIC_GetPlatformUserDir();//Offset:Discovery.exe+0x57BF2E0
	struct FString STATIC_GetPathName(class UObject* Object);//Offset:Discovery.exe+0x57BFD90
	class UObject* STATIC_GetOuterObject(class UObject* Object);//Offset:Discovery.exe+0x57BFA80
	struct FString STATIC_GetObjectName(class UObject* Object);//Offset:Discovery.exe+0x57A2CC0
	class UObject* STATIC_GetObjectFromPrimaryAssetId(const struct FPrimaryAssetId& PrimaryAssetId);//Offset:Discovery.exe+0x57A91A0
	int STATIC_GetMinYResolutionForUI();//Offset:Discovery.exe+0x57AA790
	int STATIC_GetMinYResolutionFor3DView();//Offset:Discovery.exe+0x57AA760
	struct FString STATIC_GetLocalCurrencySymbol();//Offset:Discovery.exe+0x57A9B80
	struct FString STATIC_GetLocalCurrencyCode();//Offset:Discovery.exe+0x57A9B80
	float STATIC_GetGameTimeInSeconds(class UObject* WorldContextObject);//Offset:Discovery.exe+0x57074B0
	struct FString STATIC_GetGamepadControllerName(int ControllerId);//Offset:Discovery.exe+0x57A9FC0
	class UTexture2D* STATIC_GetGamepadButtonGlyph(const struct FString& ButtonKey, int ControllerIndex);//Offset:Discovery.exe+0x57A9ED0
	struct FString STATIC_GetGameName();//Offset:Discovery.exe+0x57BF880
	struct FString STATIC_GetGameBundleId();//Offset:Discovery.exe+0x57BF3E0
	int64_t STATIC_GetFrameCount();//Offset:Discovery.exe+0x57BF1D0
	struct FString STATIC_GetEngineVersion();//Offset:Discovery.exe+0x57BFA00
	struct FString STATIC_GetDisplayName(class UObject* Object);//Offset:Discovery.exe+0x57BFBF0
	struct FString STATIC_GetDeviceId();//Offset:Discovery.exe+0x57A9B80
	struct FString STATIC_GetDefaultLocale();//Offset:Discovery.exe+0x57A9C00
	struct FString STATIC_GetDefaultLanguage();//Offset:Discovery.exe+0x57A9C80
	bool STATIC_GetCurrentBundleState(const struct FPrimaryAssetId& PrimaryAssetId, bool bForceCurrentState, TArray<struct FName>* OutBundles);//Offset:Discovery.exe+0x57A85E0
	bool STATIC_GetConvenientWindowedResolutions(TArray<struct FIntPoint>* Resolutions);//Offset:Discovery.exe+0x57AA7C0
	int STATIC_GetConsoleVariableIntValue(const struct FString& VariableName);//Offset:Discovery.exe+0x57BC520
	float STATIC_GetConsoleVariableFloatValue(const struct FString& VariableName);//Offset:Discovery.exe+0x57BC5D0
	bool STATIC_GetConsoleVariableBoolValue(const struct FString& VariableName);//Offset:Discovery.exe+0x57BC470
	void STATIC_GetComponentBounds(class USceneComponent* Component, struct FVector* Origin, struct FVector* BoxExtent, float* SphereRadius);//Offset:Discovery.exe+0x57AAAB0
	struct FString STATIC_GetCommandLine();//Offset:Discovery.exe+0x57A9A30
	class UClass* STATIC_GetClassFromPrimaryAssetId(const struct FPrimaryAssetId& PrimaryAssetId);//Offset:Discovery.exe+0x57A90F0
	struct FString STATIC_GetClassDisplayName(class UClass* Class);//Offset:Discovery.exe+0x57BFB20
	struct FString STATIC_GetBuildVersion();//Offset:Discovery.exe+0x57BF980
	struct FString STATIC_GetBuildConfiguration();//Offset:Discovery.exe+0x57BF900
	int STATIC_GetAdIDCount();//Offset:Discovery.exe+0x57AA4E0
	void STATIC_GetActorListFromComponentList(TArray<class UPrimitiveComponent*> ComponentList, class UClass* ActorClassFilter, TArray<class AActor*>* OutActorList);//Offset:Discovery.exe+0x57AD960
	void STATIC_GetActorBounds(class AActor* Actor, struct FVector* Origin, struct FVector* BoxExtent);//Offset:Discovery.exe+0x57AA980
	void STATIC_ForceCloseAdBanner();//Offset:Discovery.exe+0x57AA4A0
	void STATIC_FlushPersistentDebugLines(class UObject* WorldContextObject);//Offset:Discovery.exe+0x57A9240
	void STATIC_FlushDebugStrings(class UObject* WorldContextObject);//Offset:Discovery.exe+0x57A9240
	void STATIC_ExecuteConsoleCommand(class UObject* WorldContextObject, const struct FString& Command, class APlayerController* SpecificPlayer);//Offset:Discovery.exe+0x57BC680
	bool STATIC_EqualEqual_SoftObjectReference();//Offset:Discovery.exe+0x57BE2B0
	bool STATIC_EqualEqual_SoftClassReference();//Offset:Discovery.exe+0x57BE2B0
	bool STATIC_EqualEqual_PrimaryAssetType(const struct FPrimaryAssetType& A, const struct FPrimaryAssetType& B);//Offset:Discovery.exe+0x18E0430
	bool STATIC_EqualEqual_PrimaryAssetId(const struct FPrimaryAssetId& A, const struct FPrimaryAssetId& B);//Offset:Discovery.exe+0x18E00D0
	int STATIC_EndTransaction();//Offset:Discovery.exe+0x1BF8A30
	void STATIC_DrawDebugString(class UObject* WorldContextObject, const struct FVector& TextLocation, const struct FString& Text, class AActor* TestBaseActor, const struct FLinearColor& TextColor, float Duration);//Offset:Discovery.exe+0x57AB8F0
	void STATIC_DrawDebugSphere(class UObject* WorldContextObject, const struct FVector& Center, float Radius, int Segments, const struct FLinearColor& LineColor, float Duration, float Thickness);//Offset:Discovery.exe+0x57AC5D0
	void STATIC_DrawDebugPoint(class UObject* WorldContextObject, const struct FVector& Position, float Size, const struct FLinearColor& PointColor, float Duration);//Offset:Discovery.exe+0x57AD0D0
	void STATIC_DrawDebugPlane(class UObject* WorldContextObject, const struct FPlane& PlaneCoordinates, const struct FVector& Location, float Size, const struct FLinearColor& PlaneColor, float Duration);//Offset:Discovery.exe+0x57AB690
	void STATIC_DrawDebugLine(class UObject* WorldContextObject, const struct FVector& LineStart, const struct FVector& LineEnd, const struct FLinearColor& LineColor, float Duration, float Thickness);//Offset:Discovery.exe+0x57AD6E0
	void STATIC_DrawDebugFrustum(class UObject* WorldContextObject, const struct FTransform& FrustumTransform, const struct FLinearColor& FrustumColor, float Duration, float Thickness);//Offset:Discovery.exe+0x57AB460
	void STATIC_DrawDebugFloatHistoryTransform(class UObject* WorldContextObject, const struct FDebugFloatHistory& FloatHistory, const struct FTransform& DrawTransform, const struct FVector2D& DrawSize, const struct FLinearColor& DrawColor, float Duration);//Offset:Discovery.exe+0x57AB050
	void STATIC_DrawDebugFloatHistoryLocation(class UObject* WorldContextObject, const struct FDebugFloatHistory& FloatHistory, const struct FVector& DrawLocation, const struct FVector2D& DrawSize, const struct FLinearColor& DrawColor, float Duration);//Offset:Discovery.exe+0x57AADB0
	void STATIC_DrawDebugCylinder(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, int Segments, const struct FLinearColor& LineColor, float Duration, float Thickness);//Offset:Discovery.exe+0x57AC290
	void STATIC_DrawDebugCoordinateSystem(class UObject* WorldContextObject, const struct FVector& AxisLoc, const struct FRotator& AxisRot, float Scale, float Duration, float Thickness);//Offset:Discovery.exe+0x57AC890
	void STATIC_DrawDebugConeInDegrees(class UObject* WorldContextObject, const struct FVector& Origin, const struct FVector& Direction, float Length, float AngleWidth, float AngleHeight, int NumSides, const struct FLinearColor& LineColor, float Duration, float Thickness);//Offset:Discovery.exe+0x57ABE90
	void STATIC_DrawDebugCone(class UObject* WorldContextObject, const struct FVector& Origin, const struct FVector& Direction, float Length, float AngleWidth, float AngleHeight, int NumSides, const struct FLinearColor& LineColor, float Duration, float Thickness);//Offset:Discovery.exe+0x57ABE90
	void STATIC_DrawDebugCircle(class UObject* WorldContextObject, const struct FVector& Center, float Radius, int NumSegments, const struct FLinearColor& LineColor, float Duration, float Thickness, const struct FVector& YAxis, const struct FVector& ZAxis, bool bDrawAxis);//Offset:Discovery.exe+0x57AD2D0
	void STATIC_DrawDebugCapsule(class UObject* WorldContextObject, const struct FVector& Center, float HalfHeight, float Radius, const struct FRotator& Rotation, const struct FLinearColor& LineColor, float Duration, float Thickness);//Offset:Discovery.exe+0x57ABB50
	void STATIC_DrawDebugCamera(class ACameraActor* CameraActor, const struct FLinearColor& CameraColor, float Duration);//Offset:Discovery.exe+0x57AB330
	void STATIC_DrawDebugBox(class UObject* WorldContextObject, const struct FVector& Center, const struct FVector& Extent, const struct FLinearColor& LineColor, const struct FRotator& Rotation, float Duration, float Thickness);//Offset:Discovery.exe+0x57ACAF0
	void STATIC_DrawDebugArrow(class UObject* WorldContextObject, const struct FVector& LineStart, const struct FVector& LineEnd, float ArrowSize, const struct FLinearColor& LineColor, float Duration, float Thickness);//Offset:Discovery.exe+0x57ACDF0
	bool STATIC_DoesImplementInterface(class UObject* TestObject, class UClass* Interface);//Offset:Discovery.exe+0x57BF200
	void STATIC_DelayUntilNextTick(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo);//Offset:Discovery.exe+0x57BC0C0
	void STATIC_Delay(class UObject* WorldContextObject, float Duration, const struct FLatentActionInfo& LatentInfo);//Offset:Discovery.exe+0x57BC1C0
	void STATIC_CreateCopyForUndoBuffer(class UObject* ObjectToModify);//Offset:Discovery.exe+0x57A9240
	struct FString STATIC_ConvertToRelativePath(const struct FString& Filename);//Offset:Discovery.exe+0x57BF620
	struct FString STATIC_ConvertToAbsolutePath(const struct FString& Filename);//Offset:Discovery.exe+0x57BF540
	void STATIC_Conv_SoftObjPathToSoftObjRef(const struct FSoftObjectPath& SoftObjectPath);//Offset:Discovery.exe+0x57BEB20
	struct FString STATIC_Conv_SoftObjectReferenceToString();//Offset:Discovery.exe+0x57BE420
	class UObject* STATIC_Conv_SoftObjectReferenceToObject();//Offset:Discovery.exe+0x57BDF00
	struct FString STATIC_Conv_SoftClassReferenceToString();//Offset:Discovery.exe+0x57BE420
	class UClass* STATIC_Conv_SoftClassReferenceToClass();//Offset:Discovery.exe+0x57BDE10
	void STATIC_Conv_SoftClassPathToSoftClassRef(const struct FSoftClassPath& SoftClassPath);//Offset:Discovery.exe+0x57BE770
	struct FString STATIC_Conv_PrimaryAssetTypeToString(const struct FPrimaryAssetType& PrimaryAssetType);//Offset:Discovery.exe+0x18E0510
	struct FString STATIC_Conv_PrimaryAssetIdToString(const struct FPrimaryAssetId& PrimaryAssetId);//Offset:Discovery.exe+0x57A8890
	void STATIC_Conv_ObjectToSoftObjectReference(class UObject* Object);//Offset:Discovery.exe+0x57BDD00
	class UClass* STATIC_Conv_ObjectToClass(class UObject* Object, class UClass* Class);//Offset:Discovery.exe+0x57BEDF0
	class UObject* STATIC_Conv_InterfaceToObject(const TScriptInterface<class UInterface>& Interface);//Offset:Discovery.exe+0x57BED40
	void STATIC_Conv_ClassToSoftClassReference(class UClass* Class);//Offset:Discovery.exe+0x57BDBE0
	void STATIC_ControlScreensaver(bool bAllowScreenSaver);//Offset:Discovery.exe+0x57AA130
	bool STATIC_ComponentOverlapComponents(class UPrimitiveComponent* Component, const struct FTransform& ComponentTransform, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, class UClass* ComponentClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents);//Offset:Discovery.exe+0x57B6A60
	bool STATIC_ComponentOverlapActors(class UPrimitiveComponent* Component, const struct FTransform& ComponentTransform, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, class UClass* ActorClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class AActor*>* OutActors);//Offset:Discovery.exe+0x57B6D50
	void STATIC_CollectGarbage();//Offset:Discovery.exe+0x57AA5F0
	bool STATIC_CapsuleTraceSingleForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, struct FHitResult* OutHit);//Offset:Discovery.exe+0x57B1040
	bool STATIC_CapsuleTraceSingleByProfile(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, const struct FName& ProfileName, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, struct FHitResult* OutHit);//Offset:Discovery.exe+0x57AE0A0
	bool STATIC_CapsuleTraceSingle(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, struct FHitResult* OutHit);//Offset:Discovery.exe+0x57B40C0
	bool STATIC_CapsuleTraceMultiForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, TArray<struct FHitResult>* OutHits);//Offset:Discovery.exe+0x57B0A50
	bool STATIC_CapsuleTraceMultiByProfile(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, const struct FName& ProfileName, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, TArray<struct FHitResult>* OutHits);//Offset:Discovery.exe+0x57ADAD0
	bool STATIC_CapsuleTraceMulti(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, TArray<struct FHitResult>* OutHits);//Offset:Discovery.exe+0x57B3AF0
	bool STATIC_CapsuleOverlapComponents(class UObject* WorldContextObject, const struct FVector& CapsulePos, float Radius, float HalfHeight, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, class UClass* ComponentClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents);//Offset:Discovery.exe+0x57B7040
	bool STATIC_CapsuleOverlapActors(class UObject* WorldContextObject, const struct FVector& CapsulePos, float Radius, float HalfHeight, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, class UClass* ActorClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class AActor*>* OutActors);//Offset:Discovery.exe+0x57B73C0
	bool STATIC_CanLaunchURL(const struct FString& URL);//Offset:Discovery.exe+0x57AA610
	void STATIC_CancelTransaction(int Index);//Offset:Discovery.exe+0x57A92D0
	void STATIC_BreakSoftObjectPath(const struct FSoftObjectPath& InSoftObjectPath, struct FString* PathString);//Offset:Discovery.exe+0x57BE8A0
	void STATIC_BreakSoftClassPath(const struct FSoftClassPath& InSoftClassPath, struct FString* PathString);//Offset:Discovery.exe+0x57BE8A0
	bool STATIC_BoxTraceSingleForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, struct FHitResult* OutHit);//Offset:Discovery.exe+0x57B1D10
	bool STATIC_BoxTraceSingleByProfile(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, const struct FName& ProfileName, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, struct FHitResult* OutHit);//Offset:Discovery.exe+0x57AED20
	bool STATIC_BoxTraceSingle(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, struct FHitResult* OutHit);//Offset:Discovery.exe+0x57B4D30
	bool STATIC_BoxTraceMultiForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, TArray<struct FHitResult>* OutHits);//Offset:Discovery.exe+0x57B16F0
	bool STATIC_BoxTraceMultiByProfile(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, const struct FName& ProfileName, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, TArray<struct FHitResult>* OutHits);//Offset:Discovery.exe+0x57AE730
	bool STATIC_BoxTraceMulti(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, TArray<struct FHitResult>* OutHits);//Offset:Discovery.exe+0x57B4740
	bool STATIC_BoxOverlapComponents(class UObject* WorldContextObject, const struct FVector& BoxPos, const struct FVector& Extent, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, class UClass* ComponentClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents);//Offset:Discovery.exe+0x57B7740
	bool STATIC_BoxOverlapActors(class UObject* WorldContextObject, const struct FVector& BoxPos, const struct FVector& BoxExtent, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, class UClass* ActorClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class AActor*>* OutActors);//Offset:Discovery.exe+0x57B7A90
	int STATIC_BeginTransaction(const struct FString& Context, const struct FText& Description, class UObject* PrimaryObject);//Offset:Discovery.exe+0x57A9360
	struct FDebugFloatHistory STATIC_AddFloatHistorySample(float Value, const struct FDebugFloatHistory& FloatHistory);//Offset:Discovery.exe+0x57AAC40
};


// Class Engine.KismetTextLibrary
// 0x0000 (0x0028 - 0x0028)
class UKismetTextLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.KismetTextLibrary"));
		return ptr;
	}


	struct FText STATIC_TextTrimTrailing(const struct FText& InText);//Offset:Discovery.exe+0x57CEA50
	struct FText STATIC_TextTrimPrecedingAndTrailing(const struct FText& InText);//Offset:Discovery.exe+0x57CE930
	struct FText STATIC_TextTrimPreceding(const struct FText& InText);//Offset:Discovery.exe+0x57CEB70
	struct FText STATIC_TextToUpper(const struct FText& InText);//Offset:Discovery.exe+0x57CEC90
	struct FText STATIC_TextToLower(const struct FText& InText);//Offset:Discovery.exe+0x57CEDB0
	bool STATIC_TextIsTransient(const struct FText& InText);//Offset:Discovery.exe+0x57CEFB0
	bool STATIC_TextIsFromStringTable(const struct FText& Text);//Offset:Discovery.exe+0x57CBD20
	bool STATIC_TextIsEmpty(const struct FText& InText);//Offset:Discovery.exe+0x57CF090
	bool STATIC_TextIsCultureInvariant(const struct FText& InText);//Offset:Discovery.exe+0x57CEED0
	struct FText STATIC_TextFromStringTable(const struct FName& TableId, const struct FString& Key);//Offset:Discovery.exe+0x57CBBE0
	bool STATIC_StringTableIdAndKeyFromText(const struct FText& Text, struct FName* OutTableId, struct FString* OutKey);//Offset:Discovery.exe+0x57CBA20
	struct FText STATIC_PolyglotDataToText(const struct FPolyglotTextData& PolyglotData);//Offset:Discovery.exe+0x57CB6C0
	bool STATIC_NotEqual_TextText(const struct FText& A, const struct FText& B);//Offset:Discovery.exe+0x57CE2F0
	bool STATIC_NotEqual_IgnoreCase_TextText(const struct FText& A, const struct FText& B);//Offset:Discovery.exe+0x57CE190
	void STATIC_IsPolyglotDataValid(const struct FPolyglotTextData& PolyglotData, bool* IsValid, struct FText* ErrorMessage);//Offset:Discovery.exe+0x57CB820
	struct FText STATIC_GetEmptyText();//Offset:Discovery.exe+0x57CE8A0
	struct FText STATIC_Format(const struct FText& InPattern, TArray<struct FFormatArgumentData> InArgs);//Offset:Discovery.exe+0x57CBE00
	bool STATIC_FindTextInLocalizationTable(const struct FString& Namespace, const struct FString& Key, struct FText* OutText);//Offset:Discovery.exe+0x57CE710
	bool STATIC_EqualEqual_TextText(const struct FText& A, const struct FText& B);//Offset:Discovery.exe+0x57CE5B0
	bool STATIC_EqualEqual_IgnoreCase_TextText(const struct FText& A, const struct FText& B);//Offset:Discovery.exe+0x57CE450
	struct FText STATIC_Conv_VectorToText(const struct FVector& InVec);//Offset:Discovery.exe+0x57CF910
	struct FText STATIC_Conv_Vector2dToText(const struct FVector2D& InVec);//Offset:Discovery.exe+0x57CF830
	struct FText STATIC_Conv_TransformToText(const struct FTransform& InTrans);//Offset:Discovery.exe+0x57CF610
	struct FString STATIC_Conv_TextToString(const struct FText& InText);//Offset:Discovery.exe+0x57CF340
	struct FText STATIC_Conv_StringToText(const struct FString& InString);//Offset:Discovery.exe+0x57CF250
	struct FText STATIC_Conv_RotatorToText(const struct FRotator& InRot);//Offset:Discovery.exe+0x57CF740
	struct FText STATIC_Conv_ObjectToText(class UObject* InObj);//Offset:Discovery.exe+0x57CF530
	struct FText STATIC_Conv_NameToText(const struct FName& InName);//Offset:Discovery.exe+0x57CF170
	struct FText STATIC_Conv_IntToText(int Value, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits);//Offset:Discovery.exe+0x57CDDB0
	struct FText STATIC_Conv_Int64ToText(int64_t Value, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits);//Offset:Discovery.exe+0x57CDB90
	struct FText STATIC_Conv_FloatToText(float Value, TEnumAsByte<ERoundingMode> RoundingMode, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits);//Offset:Discovery.exe+0x57CD500
	struct FText STATIC_Conv_DoubleToText(double InDouble, TEnumAsByte<ERoundingMode> RoundingMode, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits);//Offset:Discovery.exe+0x57CD850
	struct FText STATIC_Conv_ColorToText(const struct FLinearColor& InColor);//Offset:Discovery.exe+0x57CF450
	struct FText STATIC_Conv_ByteToText(unsigned char Value);//Offset:Discovery.exe+0x57CDFD0
	struct FText STATIC_Conv_BoolToText(bool InBool);//Offset:Discovery.exe+0x57CE0B0
	struct FText STATIC_AsTimeZoneTime_DateTime(const struct FDateTime& InDateTime, const struct FString& InTimeZone);//Offset:Discovery.exe+0x57CC210
	struct FText STATIC_AsTimeZoneDateTime_DateTime(const struct FDateTime& InDateTime, const struct FString& InTimeZone);//Offset:Discovery.exe+0x57CC450
	struct FText STATIC_AsTimeZoneDate_DateTime(const struct FDateTime& InDateTime, const struct FString& InTimeZone);//Offset:Discovery.exe+0x57CC690
	struct FText STATIC_AsTimespan_Timespan(const struct FTimespan& InTimespan);//Offset:Discovery.exe+0x57CC120
	struct FText STATIC_AsTime_DateTime(const struct FDateTime& In);//Offset:Discovery.exe+0x57CC360
	struct FText STATIC_AsPercent_Float(float Value, TEnumAsByte<ERoundingMode> RoundingMode, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits);//Offset:Discovery.exe+0x57CC8D0
	struct FText STATIC_AsDateTime_DateTime(const struct FDateTime& In);//Offset:Discovery.exe+0x57CC5A0
	struct FText STATIC_AsDate_DateTime(const struct FDateTime& InDateTime);//Offset:Discovery.exe+0x57CC7E0
	struct FText STATIC_AsCurrencyBase(int BaseValue, const struct FString& CurrencyCode);//Offset:Discovery.exe+0x57CD3C0
	struct FText STATIC_AsCurrency_Integer(int Value, TEnumAsByte<ERoundingMode> RoundingMode, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits, const struct FString& CurrencyCode);//Offset:Discovery.exe+0x57CCFF0
	struct FText STATIC_AsCurrency_Float(float Value, TEnumAsByte<ERoundingMode> RoundingMode, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits, const struct FString& CurrencyCode);//Offset:Discovery.exe+0x57CCC20
};


// Class Engine.Layer
// 0x0020 (0x0048 - 0x0028)
class ULayer : public UObject
{
public:
	struct FName                                       LayerName;                                                // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bIsVisible : 1;                                           // 0x0030(0x0001)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0031(0x0007) MISSED OFFSET
	TArray<struct FLayerActorStats>                    ActorStats;                                               // 0x0038(0x0010) (ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.Layer"));
		return ptr;
	}

};


// Class Engine.LevelPartitionInterface
// 0x0000 (0x0028 - 0x0028)
class ULevelPartitionInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.LevelPartitionInterface"));
		return ptr;
	}

};


// Class Engine.ActorContainer
// 0x0050 (0x0078 - 0x0028)
class UActorContainer : public UObject
{
public:
	TMap<struct FName, class AActor*>                  Actors;                                                   // 0x0028(0x0050)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ActorContainer"));
		return ptr;
	}

};


// Class Engine.LevelActorContainer
// 0x0010 (0x0038 - 0x0028)
class ULevelActorContainer : public UObject
{
public:
	TArray<class AActor*>                              Actors;                                                   // 0x0028(0x0010) (ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.LevelActorContainer"));
		return ptr;
	}

};


// Class Engine.LevelBounds
// 0x0010 (0x02D8 - 0x02C8)
class ALevelBounds : public AActor
{
public:
	class UBoxComponent*                               BoxComponent;                                             // 0x02C8(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	bool                                               bAutoUpdateBounds;                                        // 0x02D0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x02D1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.LevelBounds"));
		return ptr;
	}

};


// Class Engine.LevelInstance
// 0x0050 (0x0318 - 0x02C8)
class ALevelInstance : public AActor
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x02C8(0x0028) UNKNOWN PROPERTY: CookedWorldAsset
	unsigned char                                      UnknownData01[0x28];                                      // 0x02F0(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.LevelInstance"));
		return ptr;
	}

};


// Class Engine.LevelInstanceComponent
// 0x0000 (0x02D0 - 0x02D0)
class ULevelInstanceComponent : public USceneComponent
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.LevelInstanceComponent"));
		return ptr;
	}

};


// Class Engine.LevelInstanceEditorInstanceActor
// 0x0000 (0x02C8 - 0x02C8)
class ALevelInstanceEditorInstanceActor : public AActor
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.LevelInstanceEditorInstanceActor"));
		return ptr;
	}

};


// Class Engine.World
// 0x07E8 (0x0810 - 0x0028)
class UWorld : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	class ULevel*                                      PersistentLevel;                                          // 0x0030(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UNetDriver*                                  NetDriver;                                                // 0x0038(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class ULineBatchComponent*                         LineBatcher;                                              // 0x0040(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class ULineBatchComponent*                         PersistentLineBatcher;                                    // 0x0048(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class ULineBatchComponent*                         ForegroundLineBatcher;                                    // 0x0050(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class AGameNetworkManager*                         NetworkManager;                                           // 0x0058(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UPhysicsCollisionHandler*                    PhysicsCollisionHandler;                                  // 0x0060(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TArray<class UObject*>                             ExtraReferencedObjects;                                   // 0x0068(0x0010) (ZeroConstructor, Transient)
	TArray<class UObject*>                             PerModuleDataObjects;                                     // 0x0078(0x0010) (ZeroConstructor, Transient)
	TArray<class ULevelStreaming*>                     StreamingLevels;                                          // 0x0088(0x0010) (ZeroConstructor, Transient)
	struct FStreamingLevelsToConsider                  StreamingLevelsToConsider;                                // 0x0098(0x0028) (Transient, DuplicateTransient)
	struct FString                                     StreamingLevelsPrefix;                                    // 0x00C0(0x0010) (ZeroConstructor)
	class ULevel*                                      CurrentLevelPendingVisibility;                            // 0x00D0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class ULevel*                                      CurrentLevelPendingInvisibility;                          // 0x00D8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UDemoNetDriver*                              DemoNetDriver;                                            // 0x00E0(0x0008) (ZeroConstructor, IsPlainOldData)
	class AParticleEventManager*                       MyParticleEventManager;                                   // 0x00E8(0x0008) (ZeroConstructor, IsPlainOldData)
	class APhysicsVolume*                              DefaultPhysicsVolume;                                     // 0x00F0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1E];                                      // 0x00F8(0x001E) MISSED OFFSET
	unsigned char                                      UnknownData02 : 2;                                        // 0x0116(0x0001)
	unsigned char                                      bAreConstraintsDirty : 1;                                 // 0x0116(0x0001) (Transient)
	unsigned char                                      UnknownData03[0x9];                                       // 0x0117(0x0009) MISSED OFFSET
	class UNavigationSystemBase*                       NavigationSystem;                                         // 0x0120(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class AGameModeBase*                               AuthorityGameMode;                                        // 0x0128(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class AGameStateBase*                              GameState;                                                // 0x0130(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UAISystemBase*                               AISystem;                                                 // 0x0138(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UAvoidanceManager*                           AvoidanceManager;                                         // 0x0140(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TArray<class ULevel*>                              Levels;                                                   // 0x0148(0x0010) (ZeroConstructor, Transient)
	TArray<struct FLevelCollection>                    LevelCollections;                                         // 0x0158(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData04[0x28];                                      // 0x0168(0x0028) MISSED OFFSET
	class UGameInstance*                               OwningGameInstance;                                       // 0x0190(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TArray<class UMaterialParameterCollectionInstance*> ParameterCollectionInstances;                             // 0x0198(0x0010) (ZeroConstructor, Transient)
	class UCanvas*                                     CanvasForRenderingToTarget;                               // 0x01A8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UCanvas*                                     CanvasForDrawMaterialToRenderTarget;                      // 0x01B0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData05[0x50];                                      // 0x01B8(0x0050) MISSED OFFSET
	class UPhysicsFieldComponent*                      PhysicsField;                                             // 0x0208(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	uint32_t                                           LWILastAssignedUID;                                       // 0x0210(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x4];                                       // 0x0214(0x0004) MISSED OFFSET
	unsigned char                                      UnknownData07[0x50];                                      // 0x0214(0x0050) UNKNOWN PROPERTY: ComponentsThatNeedPreEndOfFrameSync
	TArray<class UActorComponent*>                     ComponentsThatNeedEndOfFrameUpdate;                       // 0x0268(0x0010) (ExportObject, ZeroConstructor, Transient)
	TArray<class UActorComponent*>                     ComponentsThatNeedEndOfFrameUpdate_OnGameThread;          // 0x0278(0x0010) (ExportObject, ZeroConstructor, Transient)
	unsigned char                                      UnknownData08[0x3B8];                                     // 0x0288(0x03B8) MISSED OFFSET
	class UWorldComposition*                           WorldComposition;                                         // 0x0640(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData09[0xA8];                                      // 0x0648(0x00A8) MISSED OFFSET
	struct FWorldPSCPool                               PSCPool;                                                  // 0x06F0(0x0058)
	unsigned char                                      UnknownData10[0xC8];                                      // 0x0748(0x00C8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.World"));
		return ptr;
	}


	class AWorldSettings* K2_GetWorldSettings();//Offset:Discovery.exe+0x58B0C50
	void HandleTimelineScrubbed();//Offset:Discovery.exe+0x58B0C80
};


// Class Engine.LevelStreaming
// 0x0158 (0x0180 - 0x0028)
class ULevelStreaming : public UObject
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x0028(0x0028) UNKNOWN PROPERTY: WorldAsset
	int                                                StreamingPriority;                                        // 0x0050(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       PackageNameToLoad;                                        // 0x0054(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x005C(0x0004) MISSED OFFSET
	TArray<struct FName>                               LODPackageNames;                                          // 0x0060(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData02[0x10];                                      // 0x0070(0x0010) MISSED OFFSET
	struct FTransform                                  LevelTransform;                                           // 0x0080(0x0060) (Edit, BlueprintVisible, IsPlainOldData)
	bool                                               bClientOnlyVisible;                                       // 0x00E0(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x00E1(0x0003) MISSED OFFSET
	int                                                LevelLODIndex;                                            // 0x00E4(0x0004) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData04 : 3;                                        // 0x00E8(0x0001)
	unsigned char                                      bShouldBeVisible : 1;                                     // 0x00E8(0x0001) (BlueprintVisible)
	unsigned char                                      bShouldBeLoaded : 1;                                      // 0x00E8(0x0001) (BlueprintVisible)
	bool                                               bShouldBeLoadedDebug;                                     // 0x00E9(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x2];                                       // 0x00EA(0x0002) MISSED OFFSET
	unsigned char                                      Blocked : 1;                                              // 0x00EC(0x0001)
	unsigned char                                      bIsStatic : 1;                                            // 0x00EC(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      bShouldBlockOnLoad : 1;                                   // 0x00EC(0x0001) (BlueprintVisible)
	unsigned char                                      bShouldBlockOnUnload : 1;                                 // 0x00EC(0x0001) (BlueprintVisible)
	unsigned char                                      bDisableDistanceStreaming : 1;                            // 0x00EC(0x0001) (BlueprintVisible, Transient)
	unsigned char                                      bDrawOnLevelStatusMap : 1;                                // 0x00EC(0x0001) (Edit)
	unsigned char                                      bHasBeenVisible : 1;                                      // 0x00EC(0x0001) (Transient)
	unsigned char                                      UnknownData06[0x3];                                       // 0x00ED(0x0003) MISSED OFFSET
	struct FLinearColor                                LevelColor;                                               // 0x00F0(0x0010) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<class ALevelStreamingVolume*>               EditorStreamingVolumes;                                   // 0x0100(0x0010) (Edit, ZeroConstructor)
	float                                              MinTimeBetweenVolumeUnloadRequests;                       // 0x0110(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x4];                                       // 0x0114(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnLevelLoaded;                                            // 0x0118(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnLevelUnloaded;                                          // 0x0128(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnLevelShown;                                             // 0x0138(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnLevelHidden;                                            // 0x0148(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class ULevel*                                      LoadedLevel;                                              // 0x0158(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class ULevel*                                      PendingUnloadLevel;                                       // 0x0160(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData08[0x18];                                      // 0x0168(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.LevelStreaming"));
		return ptr;
	}


	bool ShouldBeLoaded();//Offset:Discovery.exe+0x1DC1420
	void SetShouldBeVisible(bool bInShouldBeVisible);//Offset:Discovery.exe+0x57D4950
	void SetShouldBeLoaded(bool bInShouldBeLoaded);//Offset:Discovery.exe+0x4B7B580
	void SetPriority(int NewPriority);//Offset:Discovery.exe+0x57D4810
	void SetLevelLODIndex(int LODIndex);//Offset:Discovery.exe+0x57D48B0
	void SetIsRequestingUnloadAndRemoval(bool bInIsRequestingUnloadAndRemoval);//Offset:Discovery.exe+0x57D4740
	bool IsStreamingStatePending();//Offset:Discovery.exe+0x57D4650
	bool IsLevelVisible();//Offset:Discovery.exe+0x57D46B0
	bool IsLevelLoaded();//Offset:Discovery.exe+0x57D4680
	struct FName GetWorldAssetPackageFName();//Offset:Discovery.exe+0x57D46E0
	class ULevel* GetLoadedLevel();//Offset:Discovery.exe+0x44D3490
	class ALevelScriptActor* GetLevelScriptActor();//Offset:Discovery.exe+0x57D4570
	bool GetIsRequestingUnloadAndRemoval();//Offset:Discovery.exe+0x57D47E0
	class ULevelStreaming* CreateInstance(const struct FString& UniqueInstanceName);//Offset:Discovery.exe+0x57D45A0
};


// Class Engine.LevelStreamingAlwaysLoaded
// 0x0000 (0x0180 - 0x0180)
class ULevelStreamingAlwaysLoaded : public ULevelStreaming
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.LevelStreamingAlwaysLoaded"));
		return ptr;
	}

};


// Class Engine.LevelStreamingLevelInstanceEditor
// 0x0000 (0x0180 - 0x0180)
class ULevelStreamingLevelInstanceEditor : public ULevelStreamingAlwaysLoaded
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.LevelStreamingLevelInstanceEditor"));
		return ptr;
	}

};


// Class Engine.LevelInstanceEditorObject
// 0x0000 (0x0028 - 0x0028)
class ULevelInstanceEditorObject : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.LevelInstanceEditorObject"));
		return ptr;
	}

};


// Class Engine.LevelInstancePivot
// 0x0000 (0x02C8 - 0x02C8)
class ALevelInstancePivot : public AActor
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.LevelInstancePivot"));
		return ptr;
	}

};


// Class Engine.LevelStreamingDynamic
// 0x0000 (0x0180 - 0x0180)
class ULevelStreamingDynamic : public ULevelStreaming
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.LevelStreamingDynamic"));
		return ptr;
	}


	class ULevelStreamingDynamic* STATIC_LoadLevelInstanceBySoftObjectPtr(class UObject* WorldContextObject, const struct FVector& Location, const struct FRotator& Rotation, const struct FString& OptionalLevelNameOverride, class UClass* OptionalLevelStreamingClass, bool bLoadAsTempPackage, bool* bOutSuccess);//Offset:Discovery.exe+0x57D5480
	class ULevelStreamingDynamic* STATIC_LoadLevelInstance(class UObject* WorldContextObject, const struct FString& LevelName, const struct FVector& Location, const struct FRotator& Rotation, const struct FString& OptionalLevelNameOverride, class UClass* OptionalLevelStreamingClass, bool bLoadAsTempPackage, bool* bOutSuccess);//Offset:Discovery.exe+0x57D58D0
};


// Class Engine.LevelStreamingLevelInstance
// 0x0020 (0x01A0 - 0x0180)
class ULevelStreamingLevelInstance : public ULevelStreamingDynamic
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0180(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.LevelStreamingLevelInstance"));
		return ptr;
	}

};


// Class Engine.LevelInstanceSubsystem
// 0x0140 (0x0170 - 0x0030)
class ULevelInstanceSubsystem : public UWorldSubsystem
{
public:
	unsigned char                                      UnknownData00[0x140];                                     // 0x0030(0x0140) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.LevelInstanceSubsystem"));
		return ptr;
	}

};


// Class Engine.LevelScriptActor
// 0x0008 (0x02D0 - 0x02C8)
class ALevelScriptActor : public AActor
{
public:
	unsigned char                                      bInputEnabled : 1;                                        // 0x02C8(0x0001)
	unsigned char                                      UnknownData00[0x7];                                       // 0x02C9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.LevelScriptActor"));
		return ptr;
	}


	void WorldOriginLocationChanged(const struct FIntVector& OldOriginLocation, const struct FIntVector& NewOriginLocation);//Offset:Discovery.exe+0x327F8B0
	void SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);//Offset:Discovery.exe+0x57D3D90
	bool RemoteEvent(const struct FName& EventName);//Offset:Discovery.exe+0x57D3F80
	void LevelReset();//Offset:Discovery.exe+0x327F8B0
};


// Class Engine.LevelScriptBlueprint
// 0x0000 (0x00A0 - 0x00A0)
class ULevelScriptBlueprint : public UBlueprint
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.LevelScriptBlueprint"));
		return ptr;
	}

};


// Class Engine.LevelStreamingPersistent
// 0x0000 (0x0180 - 0x0180)
class ULevelStreamingPersistent : public ULevelStreaming
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.LevelStreamingPersistent"));
		return ptr;
	}

};


// Class Engine.LevelStreamingVolume
// 0x0018 (0x0318 - 0x0300)
class ALevelStreamingVolume : public AVolume
{
public:
	TArray<struct FName>                               StreamingLevelNames;                                      // 0x0300(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst)
	unsigned char                                      bEditorPreVisOnly : 1;                                    // 0x0310(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bDisabled : 1;                                            // 0x0310(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0311(0x0003) MISSED OFFSET
	TEnumAsByte<EStreamingVolumeUsage>                 StreamingUsage;                                           // 0x0314(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0315(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.LevelStreamingVolume"));
		return ptr;
	}

};


// Class Engine.LightmappedSurfaceCollection
// 0x0018 (0x0040 - 0x0028)
class ULightmappedSurfaceCollection : public UObject
{
public:
	class UModel*                                      SourceModel;                                              // 0x0028(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<int>                                        Surfaces;                                                 // 0x0030(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.LightmappedSurfaceCollection"));
		return ptr;
	}

};


// Class Engine.LightMapTexture2D
// 0x0000 (0x02B0 - 0x02B0)
class ULightMapTexture2D : public UTexture2D
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.LightMapTexture2D"));
		return ptr;
	}

};


// Class Engine.LightMapVirtualTexture2D
// 0x0010 (0x02C0 - 0x02B0)
class ULightMapVirtualTexture2D : public UTexture2D
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x02B0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.LightMapVirtualTexture2D"));
		return ptr;
	}

};


// Class Engine.LightmassCharacterIndirectDetailVolume
// 0x0000 (0x0300 - 0x0300)
class ALightmassCharacterIndirectDetailVolume : public AVolume
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.LightmassCharacterIndirectDetailVolume"));
		return ptr;
	}

};


// Class Engine.LightmassImportanceVolume
// 0x0000 (0x0300 - 0x0300)
class ALightmassImportanceVolume : public AVolume
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.LightmassImportanceVolume"));
		return ptr;
	}

};


// Class Engine.LightmassPortal
// 0x0008 (0x02D0 - 0x02C8)
class ALightmassPortal : public AActor
{
public:
	class ULightmassPortalComponent*                   PortalComponent;                                          // 0x02C8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.LightmassPortal"));
		return ptr;
	}

};


// Class Engine.LightmassPortalComponent
// 0x0010 (0x02E0 - 0x02D0)
class ULightmassPortalComponent : public USceneComponent
{
public:
	class UBoxComponent*                               PreviewBox;                                               // 0x02D0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x02D8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.LightmassPortalComponent"));
		return ptr;
	}

};


// Class Engine.LightmassPrimitiveSettingsObject
// 0x0018 (0x0040 - 0x0028)
class ULightmassPrimitiveSettingsObject : public UObject
{
public:
	struct FLightmassPrimitiveSettings                 LightmassSettings;                                        // 0x0028(0x0018) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.LightmassPrimitiveSettingsObject"));
		return ptr;
	}

};


// Class Engine.LightWeightInstanceBlueprintFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class ULightWeightInstanceBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.LightWeightInstanceBlueprintFunctionLibrary"));
		return ptr;
	}


	struct FActorInstanceHandle STATIC_CreateNewLightWeightInstance(class UClass* ActorClass, const struct FTransform& Transform, class UDataLayer* Layer, class UWorld* World);//Offset:Discovery.exe+0x57DB310
	struct FActorInstanceHandle STATIC_ConvertActorToLightWeightInstance(class AActor* Actor);//Offset:Discovery.exe+0x57DB260
};


// Class Engine.ActorInstanceHandleInterface
// 0x0020 (0x0048 - 0x0028)
class UActorInstanceHandleInterface : public UObject
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0028(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ActorInstanceHandleInterface"));
		return ptr;
	}

};


// Class Engine.LightWeightInstanceManager
// 0x00A0 (0x0368 - 0x02C8)
class ALightWeightInstanceManager : public AActor
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x02C8(0x0010) MISSED OFFSET
	class UClass*                                      RepresentedClass;                                         // 0x02D8(0x0008) (Edit, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      AcceptedClass;                                            // 0x02E0(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<struct FTransform>                          InstanceTransforms;                                       // 0x02E8(0x0010) (Edit, Net, ZeroConstructor, DisableEditOnTemplate)
	unsigned char                                      UnknownData01[0x50];                                      // 0x02F8(0x0050) MISSED OFFSET
	TArray<int>                                        FreeIndices;                                              // 0x0348(0x0010) (Net, ZeroConstructor)
	TArray<bool>                                       ValidIndices;                                             // 0x0358(0x0010) (Net, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.LightWeightInstanceManager"));
		return ptr;
	}


	void OnRep_Transforms();//Offset:Discovery.exe+0x1582540
};


// Class Engine.LightWeightInstanceStaticMeshManager
// 0x0068 (0x03D0 - 0x0368)
class ALightWeightInstanceStaticMeshManager : public ALightWeightInstanceManager
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0368(0x0008) MISSED OFFSET
	unsigned char                                      UnknownData01[0x28];                                      // 0x0368(0x0028) UNKNOWN PROPERTY: StaticMesh
	class UHierarchicalInstancedStaticMeshComponent*   InstancedStaticMeshComponent;                             // 0x0398(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	TArray<int>                                        RenderingIndicesToDataIndices;                            // 0x03A0(0x0010) (Net, ZeroConstructor)
	TArray<int>                                        DataIndicesToRenderingIndices;                            // 0x03B0(0x0010) (Net, ZeroConstructor)
	unsigned char                                      UnknownData02[0x10];                                      // 0x03C0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.LightWeightInstanceStaticMeshManager"));
		return ptr;
	}


	void OnRep_StaticMesh();//Offset:Discovery.exe+0x57DBDE0
};


// Class Engine.LineBatchComponent
// 0x0040 (0x05D0 - 0x0590)
class ULineBatchComponent : public UPrimitiveComponent
{
public:
	unsigned char                                      UnknownData00[0x40];                                      // 0x0590(0x0040) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.LineBatchComponent"));
		return ptr;
	}

};


// Class Engine.LocalLightComponent
// 0x0020 (0x0430 - 0x0410)
class ULocalLightComponent : public ULightComponent
{
public:
	enum class ELightUnits                             IntensityUnits;                                           // 0x0410(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0411(0x0003) MISSED OFFSET
	float                                              InverseExposureBlend;                                     // 0x0414(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              Radius;                                                   // 0x0418(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              AttenuationRadius;                                        // 0x041C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FLightmassPointLightSettings                LightmassSettings;                                        // 0x0420(0x000C) (Edit)
	unsigned char                                      UnknownData01[0x4];                                       // 0x042C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.LocalLightComponent"));
		return ptr;
	}


	void SetIntensityUnits(enum class ELightUnits NewIntensityUnits);//Offset:Discovery.exe+0x57DC520
	void SetAttenuationRadius(float NewRadius);//Offset:Discovery.exe+0x57DC5B0
	float STATIC_GetUnitsConversionFactor(enum class ELightUnits SrcUnits, enum class ELightUnits TargetUnits, float CosHalfConeAngle);//Offset:Discovery.exe+0x57DC3F0
};


// Class Engine.LODActor
// 0x0088 (0x0350 - 0x02C8)
class ALODActor : public AActor
{
public:
	class UStaticMeshComponent*                        StaticMeshComponent;                                      // 0x02C8(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	TMap<struct FHLODInstancingKey, class UInstancedStaticMeshComponent*> InstancedStaticMeshComponents;                            // 0x02D0(0x0050) (ExportObject, Transient)
	class UHLODProxy*                                  Proxy;                                                    // 0x0320(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	struct FName                                       Key;                                                      // 0x0328(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              LODDrawDistance;                                          // 0x0330(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	int                                                LODLevel;                                                 // 0x0334(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	TArray<class AActor*>                              SubActors;                                                // 0x0338(0x0010) (Edit, ZeroConstructor, EditConst)
	unsigned char                                      CachedNumHLODLevels;                                      // 0x0348(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0349(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.LODActor"));
		return ptr;
	}

};


// Class Engine.LODSyncComponent
// 0x0098 (0x0150 - 0x00B8)
class ULODSyncComponent : public UActorComponent
{
public:
	int                                                NumLODs;                                                  // 0x00B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                ForcedLOD;                                                // 0x00BC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                MinLOD;                                                   // 0x00C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00C4(0x0004) MISSED OFFSET
	TArray<struct FComponentSync>                      ComponentsToSync;                                         // 0x00C8(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TMap<struct FName, struct FLODMappingData>         CustomLODMapping;                                         // 0x00D8(0x0050) (Edit, BlueprintVisible)
	int                                                CurrentLOD;                                               // 0x0128(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	int                                                CurrentNumLODs;                                           // 0x012C(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	TArray<class UPrimitiveComponent*>                 DriveComponents;                                          // 0x0130(0x0010) (ExportObject, ZeroConstructor, Transient)
	TArray<class UPrimitiveComponent*>                 SubComponents;                                            // 0x0140(0x0010) (ExportObject, ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.LODSyncComponent"));
		return ptr;
	}


	struct FString GetLODSyncDebugText();//Offset:Discovery.exe+0x57DD070
};


// Class Engine.LODSyncInterface
// 0x0000 (0x0028 - 0x0028)
class ULODSyncInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.LODSyncInterface"));
		return ptr;
	}

};


// Class Engine.MapBuildDataRegistry
// 0x0210 (0x0238 - 0x0028)
class UMapBuildDataRegistry : public UObject
{
public:
	TEnumAsByte<ELightingBuildQuality>                 LevelLightingQuality;                                     // 0x0028(0x0001) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x20F];                                     // 0x0029(0x020F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MapBuildDataRegistry"));
		return ptr;
	}

};


// Class Engine.Material
// 0x0230 (0x02C8 - 0x0098)
class UMaterial : public UMaterialInterface
{
public:
	class UPhysicalMaterial*                           PhysMaterial;                                             // 0x0098(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UPhysicalMaterialMask*                       PhysMaterialMask;                                         // 0x00A0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UPhysicalMaterial*                           PhysicalMaterialMap[0x8];                                 // 0x00A8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FColorMaterialInput                         BaseColor;                                                // 0x00E8(0x0014)
	struct FScalarMaterialInput                        Metallic;                                                 // 0x00FC(0x0014)
	struct FScalarMaterialInput                        Specular;                                                 // 0x0110(0x0014)
	struct FScalarMaterialInput                        Roughness;                                                // 0x0124(0x0014)
	struct FScalarMaterialInput                        Anisotropy;                                               // 0x0138(0x0014)
	struct FVectorMaterialInput                        Normal;                                                   // 0x014C(0x0014)
	struct FVectorMaterialInput                        Tangent;                                                  // 0x0160(0x0014)
	struct FColorMaterialInput                         EmissiveColor;                                            // 0x0174(0x0014)
	TEnumAsByte<EMaterialDomain>                       MaterialDomain;                                           // 0x0188(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EBlendMode>                            BlendMode;                                                // 0x0189(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EDecalBlendMode>                       DecalBlendMode;                                           // 0x018A(0x0001) (ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EMaterialDecalResponse>                MaterialDecalResponse;                                    // 0x018B(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EMaterialShadingModel>                 ShadingModel;                                             // 0x018C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bCastDynamicShadowAsMasked : 1;                           // 0x018D(0x0001) (Edit)
	struct FMaterialShadingModelField                  ShadingModels;                                            // 0x018E(0x0002)
	float                                              OpacityMaskClipValue;                                     // 0x0190(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVectorMaterialInput                        WorldPositionOffset;                                      // 0x0194(0x0014)
	struct FScalarMaterialInput                        AmbientOcclusion;                                         // 0x01A8(0x0014)
	struct FScalarMaterialInput                        Refraction;                                               // 0x01BC(0x0014)
	struct FMaterialAttributesInput                    MaterialAttributes;                                       // 0x01D0(0x0018)
	struct FScalarMaterialInput                        PixelDepthOffset;                                         // 0x01E8(0x0014)
	struct FShadingModelMaterialInput                  ShadingModelFromMaterialExpression;                       // 0x01FC(0x0014) (ZeroConstructor, IsPlainOldData)
	struct FStrataMaterialInput                        FrontMaterial;                                            // 0x0210(0x0014) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bEnableSeparateTranslucency : 1;                          // 0x0224(0x0001) (Deprecated)
	unsigned char                                      bEnableResponsiveAA : 1;                                  // 0x0224(0x0001) (Edit)
	unsigned char                                      bScreenSpaceReflections : 1;                              // 0x0224(0x0001) (Edit)
	unsigned char                                      bContactShadows : 1;                                      // 0x0224(0x0001) (Edit)
	unsigned char                                      TwoSided : 1;                                             // 0x0224(0x0001) (Edit)
	unsigned char                                      DitheredLODTransition : 1;                                // 0x0224(0x0001) (Edit)
	unsigned char                                      DitherOpacityMask : 1;                                    // 0x0224(0x0001) (Edit)
	unsigned char                                      bAllowNegativeEmissiveColor : 1;                          // 0x0224(0x0001) (Edit)
	TEnumAsByte<EMaterialTranslucencyPass>             TranslucencyPass;                                         // 0x0225(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ETranslucencyLightingMode>             TranslucencyLightingMode;                                 // 0x0226(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bEnableMobileSeparateTranslucency : 1;                    // 0x0227(0x0001) (Edit)
	int                                                NumCustomizedUVs;                                         // 0x0228(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TranslucencyDirectionalLightingIntensity;                 // 0x022C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TranslucentShadowDensityScale;                            // 0x0230(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TranslucentSelfShadowDensityScale;                        // 0x0234(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TranslucentSelfShadowSecondDensityScale;                  // 0x0238(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TranslucentSelfShadowSecondOpacity;                       // 0x023C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TranslucentBackscatteringExponent;                        // 0x0240(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                TranslucentMultipleScatteringExtinction;                  // 0x0244(0x0010) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TranslucentShadowStartOffset;                             // 0x0254(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bDisableDepthTest : 1;                                    // 0x0258(0x0001) (Edit)
	unsigned char                                      bWriteOnlyAlpha : 1;                                      // 0x0258(0x0001) (Edit)
	unsigned char                                      bGenerateSphericalParticleNormals : 1;                    // 0x0258(0x0001) (Edit)
	unsigned char                                      bTangentSpaceNormal : 1;                                  // 0x0258(0x0001) (Edit)
	unsigned char                                      bUseEmissiveForDynamicAreaLighting : 1;                   // 0x0258(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUsedAsSpecialEngineMaterial : 1;                         // 0x0258(0x0001) (DuplicateTransient)
	unsigned char                                      bUsedWithSkeletalMesh : 1;                                // 0x0258(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithEditorCompositing : 1;                           // 0x0258(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithParticleSprites : 1;                             // 0x0259(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithBeamTrails : 1;                                  // 0x0259(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithMeshParticles : 1;                               // 0x0259(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithNiagaraSprites : 1;                              // 0x0259(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithNiagaraRibbons : 1;                              // 0x0259(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithNiagaraMeshParticles : 1;                        // 0x0259(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithGeometryCache : 1;                               // 0x0259(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithStaticLighting : 1;                              // 0x0259(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithMorphTargets : 1;                                // 0x025A(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithSplineMeshes : 1;                                // 0x025A(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithInstancedStaticMeshes : 1;                       // 0x025A(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithGeometryCollections : 1;                         // 0x025A(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsesDistortion : 1;                                      // 0x025A(0x0001)
	unsigned char                                      bUsedWithClothing : 1;                                    // 0x025A(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x1];                                       // 0x025B(0x0001) MISSED OFFSET
	unsigned char                                      bUsedWithWater : 1;                                       // 0x025C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithHairStrands : 1;                                 // 0x025C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithLidarPointCloud : 1;                             // 0x025C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithVirtualHeightfieldMesh : 1;                      // 0x025C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithNanite : 1;                                      // 0x025C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithCompositeMesh : 1;                               // 0x025C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData01[0x3];                                       // 0x025D(0x0003) MISSED OFFSET
	unsigned char                                      bUsedWithUI : 1;                                          // 0x0260(0x0001) (Deprecated)
	unsigned char                                      bAutomaticallySetUsageInEditor : 1;                       // 0x0260(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bFullyRough : 1;                                          // 0x0260(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUseFullPrecision : 1;                                    // 0x0260(0x0001) (Deprecated)
	TEnumAsByte<EMaterialFloatPrecisionMode>           FloatPrecisionMode;                                       // 0x0261(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUseLightmapDirectionality : 1;                           // 0x0262(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bMobileEnableHighQualityBRDF : 1;                         // 0x0262(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUseAlphaToCoverage : 1;                                  // 0x0262(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData02[0x1];                                       // 0x0263(0x0001) MISSED OFFSET
	unsigned char                                      bForwardRenderUsePreintegratedGFForSimpleIBL : 1;         // 0x0264(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0265(0x0003) MISSED OFFSET
	unsigned char                                      bUseHQForwardReflections : 1;                             // 0x0268(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bForwardBlendsSkyLightCubemaps : 1;                       // 0x0268(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsePlanarForwardReflections : 1;                         // 0x0268(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bNormalCurvatureToRoughness : 1;                          // 0x0268(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      AllowTranslucentCustomDepthWrites : 1;                    // 0x0268(0x0001) (Edit)
	unsigned char                                      Wireframe : 1;                                            // 0x0268(0x0001) (Edit)
	TEnumAsByte<EMaterialShadingRate>                  ShadingRate;                                              // 0x0269(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bCanMaskedBeAssumedOpaque : 1;                            // 0x026A(0x0001)
	unsigned char                                      bIsMasked : 1;                                            // 0x026A(0x0001) (Deprecated)
	unsigned char                                      bIsPreviewMaterial : 1;                                   // 0x026A(0x0001) (Transient, DuplicateTransient)
	unsigned char                                      bIsFunctionPreviewMaterial : 1;                           // 0x026A(0x0001) (Transient, DuplicateTransient)
	unsigned char                                      bUseMaterialAttributes : 1;                               // 0x026A(0x0001) (Edit)
	unsigned char                                      bEnableExecWire : 1;                                      // 0x026A(0x0001) (Edit)
	unsigned char                                      bEnableNewHLSLGenerator : 1;                              // 0x026A(0x0001) (Edit)
	unsigned char                                      bCastRayTracedShadows : 1;                                // 0x026A(0x0001) (Edit)
	unsigned char                                      bUseTranslucencyVertexFog : 1;                            // 0x026B(0x0001) (Edit)
	unsigned char                                      bApplyCloudFogging : 1;                                   // 0x026B(0x0001) (Edit)
	unsigned char                                      bIsSky : 1;                                               // 0x026B(0x0001) (Edit)
	unsigned char                                      bComputeFogPerPixel : 1;                                  // 0x026B(0x0001) (Edit)
	unsigned char                                      bOutputTranslucentVelocity : 1;                           // 0x026B(0x0001) (Edit)
	unsigned char                                      bAllowDevelopmentShaderCompile : 1;                       // 0x026B(0x0001) (Transient, DuplicateTransient)
	unsigned char                                      bIsMaterialEditorStatsMaterial : 1;                       // 0x026B(0x0001) (Transient, DuplicateTransient)
	TEnumAsByte<EBlendableLocation>                    BlendableLocation;                                        // 0x026C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      BlendableOutputAlpha : 1;                                 // 0x026D(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bEnableStencilTest : 1;                                   // 0x026D(0x0001) (Edit)
	TEnumAsByte<EMaterialStencilCompare>               StencilCompare;                                           // 0x026E(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      StencilRefValue;                                          // 0x026F(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ERefractionMode>                       RefractionMode;                                           // 0x0270(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x0271(0x0003) MISSED OFFSET
	int                                                BlendablePriority;                                        // 0x0274(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bIsBlendable : 1;                                         // 0x0278(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData05[0x3];                                       // 0x0279(0x0003) MISSED OFFSET
	uint32_t                                           UsageFlagWarnings;                                        // 0x027C(0x0004) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)
	float                                              RefractionDepthBias;                                      // 0x0280(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FGuid                                       StateId;                                                  // 0x0284(0x0010) (ZeroConstructor, IsPlainOldData)
	enum class EBillboardMode                          BillboardMode;                                            // 0x0294(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bOutputVelocity : 1;                                      // 0x0295(0x0001) (Edit)
	unsigned char                                      bContactShadowsDeferred : 1;                              // 0x0295(0x0001) (Edit)
	unsigned char                                      UnknownData06[0x32];                                      // 0x0296(0x0032) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.Material"));
		return ptr;
	}

};


// Class Engine.MaterialBillboardComponent
// 0x0010 (0x05A0 - 0x0590)
class UMaterialBillboardComponent : public UPrimitiveComponent
{
public:
	TArray<struct FMaterialSpriteElement>              Elements;                                                 // 0x0590(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialBillboardComponent"));
		return ptr;
	}


	void SetElements(TArray<struct FMaterialSpriteElement> NewElements);//Offset:Discovery.exe+0x57DEBC0
	void AddElement(class UMaterialInterface* Material, class UCurveFloat* DistanceToOpacityCurve, bool bSizeIsInScreenSpace, float BaseSizeX, float BaseSizeY, class UCurveFloat* DistanceToSizeCurve);//Offset:Discovery.exe+0x57DE990
};


// Class Engine.MaterialExpressionAbs
// 0x0018 (0x0058 - 0x0040)
class UMaterialExpressionAbs : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0040(0x0014)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0054(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionAbs"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionAbsorptionMediumMaterialOutput
// 0x0018 (0x0058 - 0x0040)
class UMaterialExpressionAbsorptionMediumMaterialOutput : public UMaterialExpressionCustomOutput
{
public:
	struct FExpressionInput                            TransmittanceColor;                                       // 0x0040(0x0014)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0054(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionAbsorptionMediumMaterialOutput"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionActorPositionWS
// 0x0000 (0x0040 - 0x0040)
class UMaterialExpressionActorPositionWS : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionActorPositionWS"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionAdd
// 0x0030 (0x0070 - 0x0040)
class UMaterialExpressionAdd : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x0040(0x0014)
	struct FExpressionInput                            B;                                                        // 0x0054(0x0014)
	float                                              ConstA;                                                   // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ConstB;                                                   // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionAdd"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureBase
// 0x0008 (0x0048 - 0x0040)
class UMaterialExpressionTextureBase : public UMaterialExpression
{
public:
	class UTexture*                                    Texture;                                                  // 0x0040(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionTextureBase"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureSample
// 0x0018 (0x0060 - 0x0048)
class UMaterialExpressionTextureSample : public UMaterialExpressionTextureBase
{
public:
	struct FExpressionInput                            Coordinates;                                              // 0x0048(0x0014)
	unsigned char                                      UnknownData00[0x4];                                       // 0x005C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionTextureSample"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureSampleParameter
// 0x0020 (0x0080 - 0x0060)
class UMaterialExpressionTextureSampleParameter : public UMaterialExpressionTextureSample
{
public:
	struct FName                                       ParameterName;                                            // 0x0060(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FGuid                                       ExpressionGuid;                                           // 0x0068(0x0010) (ZeroConstructor, IsPlainOldData)
	struct FName                                       Group;                                                    // 0x0078(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionTextureSampleParameter"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureSampleParameter2D
// 0x0000 (0x0080 - 0x0080)
class UMaterialExpressionTextureSampleParameter2D : public UMaterialExpressionTextureSampleParameter
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionTextureSampleParameter2D"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionAntialiasedTextureMask
// 0x0008 (0x0088 - 0x0080)
class UMaterialExpressionAntialiasedTextureMask : public UMaterialExpressionTextureSampleParameter2D
{
public:
	float                                              Threshold;                                                // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ETextureColorChannel>                  Channel;                                                  // 0x0084(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0085(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionAntialiasedTextureMask"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionAppendVector
// 0x0028 (0x0068 - 0x0040)
class UMaterialExpressionAppendVector : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x0040(0x0014)
	struct FExpressionInput                            B;                                                        // 0x0054(0x0014)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionAppendVector"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionArccosine
// 0x0018 (0x0058 - 0x0040)
class UMaterialExpressionArccosine : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0040(0x0014)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0054(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionArccosine"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionArccosineFast
// 0x0018 (0x0058 - 0x0040)
class UMaterialExpressionArccosineFast : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0040(0x0014)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0054(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionArccosineFast"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionArcsine
// 0x0018 (0x0058 - 0x0040)
class UMaterialExpressionArcsine : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0040(0x0014)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0054(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionArcsine"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionArcsineFast
// 0x0018 (0x0058 - 0x0040)
class UMaterialExpressionArcsineFast : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0040(0x0014)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0054(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionArcsineFast"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionArctangent
// 0x0018 (0x0058 - 0x0040)
class UMaterialExpressionArctangent : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0040(0x0014)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0054(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionArctangent"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionArctangent2
// 0x0028 (0x0068 - 0x0040)
class UMaterialExpressionArctangent2 : public UMaterialExpression
{
public:
	struct FExpressionInput                            Y;                                                        // 0x0040(0x0014)
	struct FExpressionInput                            X;                                                        // 0x0054(0x0014)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionArctangent2"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionArctangent2Fast
// 0x0028 (0x0068 - 0x0040)
class UMaterialExpressionArctangent2Fast : public UMaterialExpression
{
public:
	struct FExpressionInput                            Y;                                                        // 0x0040(0x0014)
	struct FExpressionInput                            X;                                                        // 0x0054(0x0014)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionArctangent2Fast"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionArctangentFast
// 0x0018 (0x0058 - 0x0040)
class UMaterialExpressionArctangentFast : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0040(0x0014)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0054(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionArctangentFast"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionAtmosphericFogColor
// 0x0018 (0x0058 - 0x0040)
class UMaterialExpressionAtmosphericFogColor : public UMaterialExpression
{
public:
	struct FExpressionInput                            WorldPosition;                                            // 0x0040(0x0014)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0054(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionAtmosphericFogColor"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionAtmosphericLightColor
// 0x0000 (0x0040 - 0x0040)
class UMaterialExpressionAtmosphericLightColor : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionAtmosphericLightColor"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionAtmosphericLightVector
// 0x0000 (0x0040 - 0x0040)
class UMaterialExpressionAtmosphericLightVector : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionAtmosphericLightVector"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionBentNormalCustomOutput
// 0x0018 (0x0058 - 0x0040)
class UMaterialExpressionBentNormalCustomOutput : public UMaterialExpressionCustomOutput
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0040(0x0014)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0054(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionBentNormalCustomOutput"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionBillboardRotation
// 0x0000 (0x0040 - 0x0040)
class UMaterialExpressionBillboardRotation : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionBillboardRotation"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionBinaryOp
// 0x0030 (0x0070 - 0x0040)
class UMaterialExpressionBinaryOp : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x0040(0x0014)
	struct FExpressionInput                            B;                                                        // 0x0054(0x0014)
	float                                              ConstA;                                                   // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ConstB;                                                   // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionBinaryOp"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionLess
// 0x0000 (0x0070 - 0x0070)
class UMaterialExpressionLess : public UMaterialExpressionBinaryOp
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionLess"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionBlackBody
// 0x0018 (0x0058 - 0x0040)
class UMaterialExpressionBlackBody : public UMaterialExpression
{
public:
	struct FExpressionInput                            Temp;                                                     // 0x0040(0x0014)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0054(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionBlackBody"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionBlendMaterialAttributes
// 0x0048 (0x0088 - 0x0040)
class UMaterialExpressionBlendMaterialAttributes : public UMaterialExpression
{
public:
	struct FMaterialAttributesInput                    A;                                                        // 0x0040(0x0018)
	struct FMaterialAttributesInput                    B;                                                        // 0x0058(0x0018)
	struct FExpressionInput                            Alpha;                                                    // 0x0070(0x0014)
	TEnumAsByte<EMaterialAttributeBlend>               PixelAttributeBlendType;                                  // 0x0084(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EMaterialAttributeBlend>               VertexAttributeBlendType;                                 // 0x0085(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0086(0x0002) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionBlendMaterialAttributes"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionBreakMaterialAttributes
// 0x0018 (0x0058 - 0x0040)
class UMaterialExpressionBreakMaterialAttributes : public UMaterialExpression
{
public:
	struct FMaterialAttributesInput                    MaterialAttributes;                                       // 0x0040(0x0018)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionBreakMaterialAttributes"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionBumpOffset
// 0x0048 (0x0088 - 0x0040)
class UMaterialExpressionBumpOffset : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinate;                                               // 0x0040(0x0014)
	struct FExpressionInput                            Height;                                                   // 0x0054(0x0014)
	struct FExpressionInput                            HeightRatioInput;                                         // 0x0068(0x0014)
	float                                              HeightRatio;                                              // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ReferencePlane;                                           // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	uint32_t                                           ConstCoordinate;                                          // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionBumpOffset"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionCameraPositionWS
// 0x0000 (0x0040 - 0x0040)
class UMaterialExpressionCameraPositionWS : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionCameraPositionWS"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionCameraVectorWS
// 0x0000 (0x0040 - 0x0040)
class UMaterialExpressionCameraVectorWS : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionCameraVectorWS"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionCeil
// 0x0018 (0x0058 - 0x0040)
class UMaterialExpressionCeil : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0040(0x0014)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0054(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionCeil"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionParameter
// 0x0018 (0x0058 - 0x0040)
class UMaterialExpressionParameter : public UMaterialExpression
{
public:
	struct FName                                       ParameterName;                                            // 0x0040(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FGuid                                       ExpressionGuid;                                           // 0x0048(0x0010) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionParameter"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionVectorParameter
// 0x0018 (0x0070 - 0x0058)
class UMaterialExpressionVectorParameter : public UMaterialExpressionParameter
{
public:
	struct FLinearColor                                DefaultValue;                                             // 0x0058(0x0010) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bUseCustomPrimitiveData;                                  // 0x0068(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      PrimitiveDataIndex;                                       // 0x0069(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x006A(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionVectorParameter"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionChannelMaskParameter
// 0x0008 (0x0078 - 0x0070)
class UMaterialExpressionChannelMaskParameter : public UMaterialExpressionVectorParameter
{
public:
	TEnumAsByte<EChannelMaskParameterColor>            MaskChannel;                                              // 0x0070(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0071(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionChannelMaskParameter"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionClamp
// 0x0048 (0x0088 - 0x0040)
class UMaterialExpressionClamp : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0040(0x0014)
	struct FExpressionInput                            Min;                                                      // 0x0054(0x0014)
	struct FExpressionInput                            Max;                                                      // 0x0068(0x0014)
	TEnumAsByte<EClampMode>                            ClampMode;                                                // 0x007C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x007D(0x0003) MISSED OFFSET
	float                                              MinDefault;                                               // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxDefault;                                               // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionClamp"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionClearCoatNormalCustomOutput
// 0x0018 (0x0058 - 0x0040)
class UMaterialExpressionClearCoatNormalCustomOutput : public UMaterialExpressionCustomOutput
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0040(0x0014)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0054(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionClearCoatNormalCustomOutput"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionCloudSampleAttribute
// 0x0000 (0x0040 - 0x0040)
class UMaterialExpressionCloudSampleAttribute : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionCloudSampleAttribute"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionCollectionParameter
// 0x0020 (0x0060 - 0x0040)
class UMaterialExpressionCollectionParameter : public UMaterialExpression
{
public:
	class UMaterialParameterCollection*                Collection;                                               // 0x0040(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FName                                       ParameterName;                                            // 0x0048(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FGuid                                       ParameterId;                                              // 0x0050(0x0010) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionCollectionParameter"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionComment
// 0x0030 (0x0070 - 0x0040)
class UMaterialExpressionComment : public UMaterialExpression
{
public:
	int                                                SizeX;                                                    // 0x0040(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                SizeY;                                                    // 0x0044(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FString                                     Text;                                                     // 0x0048(0x0010) (Edit, ZeroConstructor)
	struct FLinearColor                                CommentColor;                                             // 0x0058(0x0010) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                FontSize;                                                 // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x006C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionComment"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionComponentMask
// 0x0018 (0x0058 - 0x0040)
class UMaterialExpressionComponentMask : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0040(0x0014)
	unsigned char                                      R : 1;                                                    // 0x0054(0x0001) (Edit)
	unsigned char                                      G : 1;                                                    // 0x0054(0x0001) (Edit)
	unsigned char                                      B : 1;                                                    // 0x0054(0x0001) (Edit)
	unsigned char                                      A : 1;                                                    // 0x0054(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0055(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionComponentMask"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionComposite
// 0x0020 (0x0060 - 0x0040)
class UMaterialExpressionComposite : public UMaterialExpression
{
public:
	struct FString                                     SubgraphName;                                             // 0x0040(0x0010) (Edit, ZeroConstructor)
	class UMaterialExpressionPinBase*                  InputExpressions;                                         // 0x0050(0x0008) (ZeroConstructor, IsPlainOldData)
	class UMaterialExpressionPinBase*                  OutputExpressions;                                        // 0x0058(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionComposite"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionConstant
// 0x0008 (0x0048 - 0x0040)
class UMaterialExpressionConstant : public UMaterialExpression
{
public:
	float                                              R;                                                        // 0x0040(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0044(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionConstant"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionConstant2Vector
// 0x0008 (0x0048 - 0x0040)
class UMaterialExpressionConstant2Vector : public UMaterialExpression
{
public:
	float                                              R;                                                        // 0x0040(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              G;                                                        // 0x0044(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionConstant2Vector"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionConstant3Vector
// 0x0010 (0x0050 - 0x0040)
class UMaterialExpressionConstant3Vector : public UMaterialExpression
{
public:
	struct FLinearColor                                Constant;                                                 // 0x0040(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionConstant3Vector"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionConstant4Vector
// 0x0010 (0x0050 - 0x0040)
class UMaterialExpressionConstant4Vector : public UMaterialExpression
{
public:
	struct FLinearColor                                Constant;                                                 // 0x0040(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionConstant4Vector"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionConstantBiasScale
// 0x0020 (0x0060 - 0x0040)
class UMaterialExpressionConstantBiasScale : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0040(0x0014)
	float                                              Bias;                                                     // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Scale;                                                    // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x005C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionConstantBiasScale"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionCosine
// 0x0018 (0x0058 - 0x0040)
class UMaterialExpressionCosine : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0040(0x0014)
	float                                              Period;                                                   // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionCosine"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionCrossProduct
// 0x0028 (0x0068 - 0x0040)
class UMaterialExpressionCrossProduct : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x0040(0x0014)
	struct FExpressionInput                            B;                                                        // 0x0054(0x0014)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionCrossProduct"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionScalarParameter
// 0x0008 (0x0060 - 0x0058)
class UMaterialExpressionScalarParameter : public UMaterialExpressionParameter
{
public:
	float                                              DefaultValue;                                             // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bUseCustomPrimitiveData;                                  // 0x005C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      PrimitiveDataIndex;                                       // 0x005D(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x005E(0x0002) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionScalarParameter"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionCurveAtlasRowParameter
// 0x0028 (0x0088 - 0x0060)
class UMaterialExpressionCurveAtlasRowParameter : public UMaterialExpressionScalarParameter
{
public:
	class UCurveLinearColor*                           Curve;                                                    // 0x0060(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UCurveLinearColorAtlas*                      Atlas;                                                    // 0x0068(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FExpressionInput                            InputTime;                                                // 0x0070(0x0014)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0084(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionCurveAtlasRowParameter"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionCustom
// 0x0068 (0x00A8 - 0x0040)
class UMaterialExpressionCustom : public UMaterialExpression
{
public:
	struct FString                                     Code;                                                     // 0x0040(0x0010) (Edit, ZeroConstructor)
	TEnumAsByte<ECustomMaterialOutputType>             OutputType;                                               // 0x0050(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0051(0x0007) MISSED OFFSET
	struct FString                                     Description;                                              // 0x0058(0x0010) (Edit, ZeroConstructor)
	TArray<struct FCustomInput>                        Inputs;                                                   // 0x0068(0x0010) (Edit, ZeroConstructor)
	TArray<struct FCustomOutput>                       AdditionalOutputs;                                        // 0x0078(0x0010) (Edit, ZeroConstructor)
	TArray<struct FCustomDefine>                       AdditionalDefines;                                        // 0x0088(0x0010) (Edit, ZeroConstructor)
	TArray<struct FString>                             IncludeFilePaths;                                         // 0x0098(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionCustom"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionDBufferTexture
// 0x0018 (0x0058 - 0x0040)
class UMaterialExpressionDBufferTexture : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinates;                                              // 0x0040(0x0014)
	TEnumAsByte<EDBufferTextureId>                     DBufferTextureId;                                         // 0x0054(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0055(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionDBufferTexture"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionDDX
// 0x0018 (0x0058 - 0x0040)
class UMaterialExpressionDDX : public UMaterialExpression
{
public:
	struct FExpressionInput                            Value;                                                    // 0x0040(0x0014)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0054(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionDDX"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionDDY
// 0x0018 (0x0058 - 0x0040)
class UMaterialExpressionDDY : public UMaterialExpression
{
public:
	struct FExpressionInput                            Value;                                                    // 0x0040(0x0014)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0054(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionDDY"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionDecalDerivative
// 0x0000 (0x0040 - 0x0040)
class UMaterialExpressionDecalDerivative : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionDecalDerivative"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionDecalLifetimeOpacity
// 0x0000 (0x0040 - 0x0040)
class UMaterialExpressionDecalLifetimeOpacity : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionDecalLifetimeOpacity"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionDecalMipmapLevel
// 0x0020 (0x0060 - 0x0040)
class UMaterialExpressionDecalMipmapLevel : public UMaterialExpression
{
public:
	struct FExpressionInput                            TextureSize;                                              // 0x0040(0x0014)
	float                                              ConstWidth;                                               // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ConstHeight;                                              // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x005C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionDecalMipmapLevel"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionDeltaTime
// 0x0000 (0x0040 - 0x0040)
class UMaterialExpressionDeltaTime : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionDeltaTime"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionDepthFade
// 0x0030 (0x0070 - 0x0040)
class UMaterialExpressionDepthFade : public UMaterialExpression
{
public:
	struct FExpressionInput                            InOpacity;                                                // 0x0040(0x0014)
	struct FExpressionInput                            FadeDistance;                                             // 0x0054(0x0014)
	float                                              OpacityDefault;                                           // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              FadeDistanceDefault;                                      // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionDepthFade"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionDepthOfFieldFunction
// 0x0018 (0x0058 - 0x0040)
class UMaterialExpressionDepthOfFieldFunction : public UMaterialExpression
{
public:
	TEnumAsByte<EDepthOfFieldFunctionValue>            FunctionValue;                                            // 0x0040(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0041(0x0003) MISSED OFFSET
	struct FExpressionInput                            Depth;                                                    // 0x0044(0x0014)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionDepthOfFieldFunction"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionDeriveNormalZ
// 0x0018 (0x0058 - 0x0040)
class UMaterialExpressionDeriveNormalZ : public UMaterialExpression
{
public:
	struct FExpressionInput                            InXY;                                                     // 0x0040(0x0014)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0054(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionDeriveNormalZ"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionDesaturation
// 0x0038 (0x0078 - 0x0040)
class UMaterialExpressionDesaturation : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0040(0x0014)
	struct FExpressionInput                            Fraction;                                                 // 0x0054(0x0014)
	struct FLinearColor                                LuminanceFactors;                                         // 0x0068(0x0010) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionDesaturation"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionDistance
// 0x0028 (0x0068 - 0x0040)
class UMaterialExpressionDistance : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x0040(0x0014)
	struct FExpressionInput                            B;                                                        // 0x0054(0x0014)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionDistance"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionDistanceCullFade
// 0x0000 (0x0040 - 0x0040)
class UMaterialExpressionDistanceCullFade : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionDistanceCullFade"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionDistanceFieldGradient
// 0x0018 (0x0058 - 0x0040)
class UMaterialExpressionDistanceFieldGradient : public UMaterialExpression
{
public:
	struct FExpressionInput                            Position;                                                 // 0x0040(0x0014)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0054(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionDistanceFieldGradient"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionDistanceFieldsRenderingSwitch
// 0x0028 (0x0068 - 0x0040)
class UMaterialExpressionDistanceFieldsRenderingSwitch : public UMaterialExpression
{
public:
	struct FExpressionInput                            No;                                                       // 0x0040(0x0014)
	struct FExpressionInput                            Yes;                                                      // 0x0054(0x0014)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionDistanceFieldsRenderingSwitch"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionDistanceToNearestSurface
// 0x0018 (0x0058 - 0x0040)
class UMaterialExpressionDistanceToNearestSurface : public UMaterialExpression
{
public:
	struct FExpressionInput                            Position;                                                 // 0x0040(0x0014)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0054(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionDistanceToNearestSurface"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionDivide
// 0x0030 (0x0070 - 0x0040)
class UMaterialExpressionDivide : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x0040(0x0014)
	struct FExpressionInput                            B;                                                        // 0x0054(0x0014)
	float                                              ConstA;                                                   // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ConstB;                                                   // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionDivide"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionDotProduct
// 0x0028 (0x0068 - 0x0040)
class UMaterialExpressionDotProduct : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x0040(0x0014)
	struct FExpressionInput                            B;                                                        // 0x0054(0x0014)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionDotProduct"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionDoubleVectorParameter
// 0x0028 (0x0080 - 0x0058)
class UMaterialExpressionDoubleVectorParameter : public UMaterialExpressionParameter
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0058(0x0008) MISSED OFFSET
	struct FVector4d                                   DefaultValue;                                             // 0x0060(0x0020) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionDoubleVectorParameter"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionDynamicParameter
// 0x0028 (0x0068 - 0x0040)
class UMaterialExpressionDynamicParameter : public UMaterialExpression
{
public:
	TArray<struct FString>                             ParamNames;                                               // 0x0040(0x0010) (Edit, EditFixedSize, ZeroConstructor)
	struct FLinearColor                                DefaultValue;                                             // 0x0050(0x0010) (Edit, ZeroConstructor, IsPlainOldData)
	uint32_t                                           ParameterIndex;                                           // 0x0060(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0064(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionDynamicParameter"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionExecBegin
// 0x0008 (0x0048 - 0x0040)
class UMaterialExpressionExecBegin : public UMaterialExpression
{
public:
	struct FExpressionExecOutput                       Exec;                                                     // 0x0040(0x0008)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionExecBegin"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionExecEnd
// 0x0000 (0x0040 - 0x0040)
class UMaterialExpressionExecEnd : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionExecEnd"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionEyeAdaptation
// 0x0000 (0x0040 - 0x0040)
class UMaterialExpressionEyeAdaptation : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionEyeAdaptation"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionEyeAdaptationInverse
// 0x0028 (0x0068 - 0x0040)
class UMaterialExpressionEyeAdaptationInverse : public UMaterialExpression
{
public:
	struct FExpressionInput                            LightValueInput;                                          // 0x0040(0x0014)
	struct FExpressionInput                            AlphaInput;                                               // 0x0054(0x0014)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionEyeAdaptationInverse"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionFeatureLevelSwitch
// 0x0018 (0x0058 - 0x0040)
class UMaterialExpressionFeatureLevelSwitch : public UMaterialExpression
{
public:
	struct FExpressionInput                            Default;                                                  // 0x0040(0x0014)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0054(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionFeatureLevelSwitch"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionFloor
// 0x0018 (0x0058 - 0x0040)
class UMaterialExpressionFloor : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0040(0x0014)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0054(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionFloor"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionFmod
// 0x0028 (0x0068 - 0x0040)
class UMaterialExpressionFmod : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x0040(0x0014)
	struct FExpressionInput                            B;                                                        // 0x0054(0x0014)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionFmod"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionFontSample
// 0x0010 (0x0050 - 0x0040)
class UMaterialExpressionFontSample : public UMaterialExpression
{
public:
	class UFont*                                       Font;                                                     // 0x0040(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                FontTexturePage;                                          // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x004C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionFontSample"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionFontSampleParameter
// 0x0020 (0x0070 - 0x0050)
class UMaterialExpressionFontSampleParameter : public UMaterialExpressionFontSample
{
public:
	struct FName                                       ParameterName;                                            // 0x0050(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FGuid                                       ExpressionGuid;                                           // 0x0058(0x0010) (ZeroConstructor, IsPlainOldData)
	struct FName                                       Group;                                                    // 0x0068(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionFontSampleParameter"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionForLoop
// 0x0050 (0x0090 - 0x0040)
class UMaterialExpressionForLoop : public UMaterialExpression
{
public:
	struct FExpressionExecOutput                       LoopBody;                                                 // 0x0040(0x0008)
	struct FExpressionExecOutput                       Completed;                                                // 0x0048(0x0008)
	struct FExpressionInput                            StartIndex;                                               // 0x0050(0x0014)
	struct FExpressionInput                            EndIndex;                                                 // 0x0064(0x0014)
	struct FExpressionInput                            IndexStep;                                                // 0x0078(0x0014)
	unsigned char                                      UnknownData00[0x4];                                       // 0x008C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionForLoop"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionFrac
// 0x0018 (0x0058 - 0x0040)
class UMaterialExpressionFrac : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0040(0x0014)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0054(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionFrac"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionFresnel
// 0x0048 (0x0088 - 0x0040)
class UMaterialExpressionFresnel : public UMaterialExpression
{
public:
	struct FExpressionInput                            ExponentIn;                                               // 0x0040(0x0014)
	float                                              Exponent;                                                 // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FExpressionInput                            BaseReflectFractionIn;                                    // 0x0058(0x0014)
	float                                              BaseReflectFraction;                                      // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FExpressionInput                            Normal;                                                   // 0x0070(0x0014)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0084(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionFresnel"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionFunctionInput
// 0x0090 (0x00D0 - 0x0040)
class UMaterialExpressionFunctionInput : public UMaterialExpression
{
public:
	struct FExpressionInput                            Preview;                                                  // 0x0040(0x0014)
	struct FName                                       InputName;                                                // 0x0054(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x005C(0x0004) MISSED OFFSET
	struct FString                                     Description;                                              // 0x0060(0x0010) (Edit, ZeroConstructor)
	struct FGuid                                       ID;                                                       // 0x0070(0x0010) (ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EFunctionInputType>                    InputType;                                                // 0x0080(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0xF];                                       // 0x0081(0x000F) MISSED OFFSET
	struct FVector4                                    PreviewValue;                                             // 0x0090(0x0020) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUsePreviewValueAsDefault : 1;                            // 0x00B0(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData02[0x3];                                       // 0x00B1(0x0003) MISSED OFFSET
	int                                                SortPriority;                                             // 0x00B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bCompilingFunctionPreview : 1;                            // 0x00B8(0x0001) (Transient)
	unsigned char                                      UnknownData03[0x17];                                      // 0x00B9(0x0017) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionFunctionInput"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionFunctionOutput
// 0x0048 (0x0088 - 0x0040)
class UMaterialExpressionFunctionOutput : public UMaterialExpression
{
public:
	struct FName                                       OutputName;                                               // 0x0040(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FString                                     Description;                                              // 0x0048(0x0010) (Edit, ZeroConstructor)
	int                                                SortPriority;                                             // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FExpressionInput                            A;                                                        // 0x005C(0x0014)
	unsigned char                                      bLastPreviewed : 1;                                       // 0x0070(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0071(0x0003) MISSED OFFSET
	struct FGuid                                       ID;                                                       // 0x0074(0x0010) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0084(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionFunctionOutput"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionGenericConstant
// 0x0000 (0x0040 - 0x0040)
class UMaterialExpressionGenericConstant : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionGenericConstant"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionConstantDouble
// 0x0008 (0x0048 - 0x0040)
class UMaterialExpressionConstantDouble : public UMaterialExpressionGenericConstant
{
public:
	double                                             Value;                                                    // 0x0040(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionConstantDouble"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionGetLocal
// 0x0008 (0x0048 - 0x0040)
class UMaterialExpressionGetLocal : public UMaterialExpression
{
public:
	struct FName                                       LocalName;                                                // 0x0040(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionGetLocal"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionGetMaterialAttributes
// 0x0028 (0x0068 - 0x0040)
class UMaterialExpressionGetMaterialAttributes : public UMaterialExpression
{
public:
	struct FMaterialAttributesInput                    MaterialAttributes;                                       // 0x0040(0x0018)
	TArray<struct FGuid>                               AttributeGetTypes;                                        // 0x0058(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionGetMaterialAttributes"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionGIReplace
// 0x0040 (0x0080 - 0x0040)
class UMaterialExpressionGIReplace : public UMaterialExpression
{
public:
	struct FExpressionInput                            Default;                                                  // 0x0040(0x0014)
	struct FExpressionInput                            StaticIndirect;                                           // 0x0054(0x0014)
	struct FExpressionInput                            DynamicIndirect;                                          // 0x0068(0x0014)
	unsigned char                                      UnknownData00[0x4];                                       // 0x007C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionGIReplace"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionHairAttributes
// 0x0008 (0x0048 - 0x0040)
class UMaterialExpressionHairAttributes : public UMaterialExpression
{
public:
	unsigned char                                      bUseTangentSpace : 1;                                     // 0x0040(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0041(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionHairAttributes"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionHairColor
// 0x0040 (0x0080 - 0x0040)
class UMaterialExpressionHairColor : public UMaterialExpression
{
public:
	struct FExpressionInput                            Melanin;                                                  // 0x0040(0x0014)
	struct FExpressionInput                            Redness;                                                  // 0x0054(0x0014)
	struct FExpressionInput                            DyeColor;                                                 // 0x0068(0x0014)
	unsigned char                                      UnknownData00[0x4];                                       // 0x007C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionHairColor"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionIf
// 0x0070 (0x00B0 - 0x0040)
class UMaterialExpressionIf : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x0040(0x0014)
	struct FExpressionInput                            B;                                                        // 0x0054(0x0014)
	struct FExpressionInput                            AGreaterThanB;                                            // 0x0068(0x0014)
	struct FExpressionInput                            AEqualsB;                                                 // 0x007C(0x0014)
	struct FExpressionInput                            ALessThanB;                                               // 0x0090(0x0014)
	float                                              EqualsThreshold;                                          // 0x00A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ConstB;                                                   // 0x00A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ConstAEqualsB;                                            // 0x00AC(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionIf"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionIfThenElse
// 0x0028 (0x0068 - 0x0040)
class UMaterialExpressionIfThenElse : public UMaterialExpression
{
public:
	struct FExpressionExecOutput                       Then;                                                     // 0x0040(0x0008)
	struct FExpressionExecOutput                       Else;                                                     // 0x0048(0x0008)
	struct FExpressionInput                            Condition;                                                // 0x0050(0x0014)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0064(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionIfThenElse"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionInverseLinearInterpolate
// 0x0050 (0x0090 - 0x0040)
class UMaterialExpressionInverseLinearInterpolate : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x0040(0x0014)
	struct FExpressionInput                            B;                                                        // 0x0054(0x0014)
	struct FExpressionInput                            Value;                                                    // 0x0068(0x0014)
	float                                              ConstA;                                                   // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ConstB;                                                   // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ConstValue;                                               // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bClampResult;                                             // 0x0088(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0089(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionInverseLinearInterpolate"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionLightmapUVs
// 0x0000 (0x0040 - 0x0040)
class UMaterialExpressionLightmapUVs : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionLightmapUVs"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionLightmassReplace
// 0x0028 (0x0068 - 0x0040)
class UMaterialExpressionLightmassReplace : public UMaterialExpression
{
public:
	struct FExpressionInput                            Realtime;                                                 // 0x0040(0x0014)
	struct FExpressionInput                            Lightmass;                                                // 0x0054(0x0014)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionLightmassReplace"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionLightVector
// 0x0000 (0x0040 - 0x0040)
class UMaterialExpressionLightVector : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionLightVector"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionLinearInterpolate
// 0x0048 (0x0088 - 0x0040)
class UMaterialExpressionLinearInterpolate : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x0040(0x0014)
	struct FExpressionInput                            B;                                                        // 0x0054(0x0014)
	struct FExpressionInput                            Alpha;                                                    // 0x0068(0x0014)
	float                                              ConstA;                                                   // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ConstB;                                                   // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ConstAlpha;                                               // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionLinearInterpolate"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionLogarithm10
// 0x0018 (0x0058 - 0x0040)
class UMaterialExpressionLogarithm10 : public UMaterialExpression
{
public:
	struct FExpressionInput                            X;                                                        // 0x0040(0x0014)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0054(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionLogarithm10"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionLogarithm2
// 0x0018 (0x0058 - 0x0040)
class UMaterialExpressionLogarithm2 : public UMaterialExpression
{
public:
	struct FExpressionInput                            X;                                                        // 0x0040(0x0014)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0054(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionLogarithm2"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionMakeMaterialAttributes
// 0x0208 (0x0248 - 0x0040)
class UMaterialExpressionMakeMaterialAttributes : public UMaterialExpression
{
public:
	struct FExpressionInput                            BaseColor;                                                // 0x0040(0x0014)
	struct FExpressionInput                            Metallic;                                                 // 0x0054(0x0014)
	struct FExpressionInput                            Specular;                                                 // 0x0068(0x0014)
	struct FExpressionInput                            Roughness;                                                // 0x007C(0x0014)
	struct FExpressionInput                            Anisotropy;                                               // 0x0090(0x0014)
	struct FExpressionInput                            EmissiveColor;                                            // 0x00A4(0x0014)
	struct FExpressionInput                            Opacity;                                                  // 0x00B8(0x0014)
	struct FExpressionInput                            OpacityMask;                                              // 0x00CC(0x0014)
	struct FExpressionInput                            Normal;                                                   // 0x00E0(0x0014)
	struct FExpressionInput                            Tangent;                                                  // 0x00F4(0x0014)
	struct FExpressionInput                            WorldPositionOffset;                                      // 0x0108(0x0014)
	struct FExpressionInput                            SubsurfaceColor;                                          // 0x011C(0x0014)
	struct FExpressionInput                            ClearCoat;                                                // 0x0130(0x0014)
	struct FExpressionInput                            ClearCoatRoughness;                                       // 0x0144(0x0014)
	struct FExpressionInput                            AmbientOcclusion;                                         // 0x0158(0x0014)
	struct FExpressionInput                            Refraction;                                               // 0x016C(0x0014)
	struct FExpressionInput                            CustomizedUVs[0x8];                                       // 0x0180(0x0014)
	struct FExpressionInput                            PixelDepthOffset;                                         // 0x0220(0x0014)
	struct FExpressionInput                            ShadingModel;                                             // 0x0234(0x0014)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionMakeMaterialAttributes"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionMapARPassthroughCameraUV
// 0x0018 (0x0058 - 0x0040)
class UMaterialExpressionMapARPassthroughCameraUV : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinates;                                              // 0x0040(0x0014)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0054(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionMapARPassthroughCameraUV"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionMaterialAttributeLayers
// 0x0070 (0x00B0 - 0x0040)
class UMaterialExpressionMaterialAttributeLayers : public UMaterialExpression
{
public:
	struct FMaterialAttributesInput                    Input;                                                    // 0x0040(0x0018)
	struct FMaterialLayersFunctions                    DefaultLayers;                                            // 0x0058(0x0020) (Edit)
	TArray<class UMaterialExpressionMaterialFunctionCall*> LayerCallers;                                             // 0x0078(0x0010) (ZeroConstructor, Transient)
	int                                                NumActiveLayerCallers;                                    // 0x0088(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x008C(0x0004) MISSED OFFSET
	TArray<class UMaterialExpressionMaterialFunctionCall*> BlendCallers;                                             // 0x0090(0x0010) (ZeroConstructor, Transient)
	int                                                NumActiveBlendCallers;                                    // 0x00A0(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bIsLayerGraphBuilt;                                       // 0x00A4(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0xB];                                       // 0x00A5(0x000B) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionMaterialAttributeLayers"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionMaterialFunctionCall
// 0x0018 (0x0058 - 0x0040)
class UMaterialExpressionMaterialFunctionCall : public UMaterialExpression
{
public:
	class UMaterialFunctionInterface*                  MaterialFunction;                                         // 0x0040(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FMaterialParameterInfo                      FunctionParameterInfo;                                    // 0x0048(0x0010) (Transient)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionMaterialFunctionCall"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionMaterialLayerOutput
// 0x0000 (0x0088 - 0x0088)
class UMaterialExpressionMaterialLayerOutput : public UMaterialExpressionFunctionOutput
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionMaterialLayerOutput"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionMaterialProxyReplace
// 0x0028 (0x0068 - 0x0040)
class UMaterialExpressionMaterialProxyReplace : public UMaterialExpression
{
public:
	struct FExpressionInput                            Realtime;                                                 // 0x0040(0x0014)
	struct FExpressionInput                            MaterialProxy;                                            // 0x0054(0x0014)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionMaterialProxyReplace"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionMax
// 0x0030 (0x0070 - 0x0040)
class UMaterialExpressionMax : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x0040(0x0014)
	struct FExpressionInput                            B;                                                        // 0x0054(0x0014)
	float                                              ConstA;                                                   // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ConstB;                                                   // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionMax"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionMin
// 0x0030 (0x0070 - 0x0040)
class UMaterialExpressionMin : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x0040(0x0014)
	struct FExpressionInput                            B;                                                        // 0x0054(0x0014)
	float                                              ConstA;                                                   // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ConstB;                                                   // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionMin"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionMultiply
// 0x0030 (0x0070 - 0x0040)
class UMaterialExpressionMultiply : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x0040(0x0014)
	struct FExpressionInput                            B;                                                        // 0x0054(0x0014)
	float                                              ConstA;                                                   // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ConstB;                                                   // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionMultiply"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionRerouteBase
// 0x0000 (0x0040 - 0x0040)
class UMaterialExpressionRerouteBase : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionRerouteBase"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionNamedRerouteBase
// 0x0000 (0x0040 - 0x0040)
class UMaterialExpressionNamedRerouteBase : public UMaterialExpressionRerouteBase
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionNamedRerouteBase"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionNamedRerouteDeclaration
// 0x0030 (0x0070 - 0x0040)
class UMaterialExpressionNamedRerouteDeclaration : public UMaterialExpressionNamedRerouteBase
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0040(0x0014)
	struct FName                                       Name;                                                     // 0x0054(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FGuid                                       VariableGuid;                                             // 0x005C(0x0010) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x006C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionNamedRerouteDeclaration"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionNamedRerouteUsage
// 0x0018 (0x0058 - 0x0040)
class UMaterialExpressionNamedRerouteUsage : public UMaterialExpressionNamedRerouteBase
{
public:
	class UMaterialExpressionNamedRerouteDeclaration*  Declaration;                                              // 0x0040(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FGuid                                       DeclarationGuid;                                          // 0x0048(0x0010) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionNamedRerouteUsage"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionNoise
// 0x0050 (0x0090 - 0x0040)
class UMaterialExpressionNoise : public UMaterialExpression
{
public:
	struct FExpressionInput                            Position;                                                 // 0x0040(0x0014)
	struct FExpressionInput                            FilterWidth;                                              // 0x0054(0x0014)
	float                                              Scale;                                                    // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                Quality;                                                  // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ENoiseFunction>                        NoiseFunction;                                            // 0x0070(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0071(0x0003) MISSED OFFSET
	unsigned char                                      bTurbulence : 1;                                          // 0x0074(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0075(0x0003) MISSED OFFSET
	int                                                Levels;                                                   // 0x0078(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              OutputMin;                                                // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              OutputMax;                                                // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              LevelScale;                                               // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bTiling : 1;                                              // 0x0088(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0089(0x0003) MISSED OFFSET
	uint32_t                                           RepeatSize;                                               // 0x008C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionNoise"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionNormalize
// 0x0018 (0x0058 - 0x0040)
class UMaterialExpressionNormalize : public UMaterialExpression
{
public:
	struct FExpressionInput                            VectorInput;                                              // 0x0040(0x0014)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0054(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionNormalize"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionObjectBounds
// 0x0000 (0x0040 - 0x0040)
class UMaterialExpressionObjectBounds : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionObjectBounds"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionObjectOrientation
// 0x0000 (0x0040 - 0x0040)
class UMaterialExpressionObjectOrientation : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionObjectOrientation"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionObjectPositionWS
// 0x0000 (0x0040 - 0x0040)
class UMaterialExpressionObjectPositionWS : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionObjectPositionWS"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionObjectRadius
// 0x0000 (0x0040 - 0x0040)
class UMaterialExpressionObjectRadius : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionObjectRadius"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionOneMinus
// 0x0018 (0x0058 - 0x0040)
class UMaterialExpressionOneMinus : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0040(0x0014)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0054(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionOneMinus"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionPanner
// 0x0050 (0x0090 - 0x0040)
class UMaterialExpressionPanner : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinate;                                               // 0x0040(0x0014)
	struct FExpressionInput                            Time;                                                     // 0x0054(0x0014)
	struct FExpressionInput                            Speed;                                                    // 0x0068(0x0014)
	float                                              SpeedX;                                                   // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              SpeedY;                                                   // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	uint32_t                                           ConstCoordinate;                                          // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bFractionalPart;                                          // 0x0088(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0089(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionPanner"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionParticleColor
// 0x0000 (0x0040 - 0x0040)
class UMaterialExpressionParticleColor : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionParticleColor"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionParticleDirection
// 0x0000 (0x0040 - 0x0040)
class UMaterialExpressionParticleDirection : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionParticleDirection"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionParticleMacroUV
// 0x0000 (0x0040 - 0x0040)
class UMaterialExpressionParticleMacroUV : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionParticleMacroUV"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionParticleMotionBlurFade
// 0x0000 (0x0040 - 0x0040)
class UMaterialExpressionParticleMotionBlurFade : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionParticleMotionBlurFade"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionParticlePositionWS
// 0x0000 (0x0040 - 0x0040)
class UMaterialExpressionParticlePositionWS : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionParticlePositionWS"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionParticleRadius
// 0x0000 (0x0040 - 0x0040)
class UMaterialExpressionParticleRadius : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionParticleRadius"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionParticleRandom
// 0x0000 (0x0040 - 0x0040)
class UMaterialExpressionParticleRandom : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionParticleRandom"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionParticleRelativeTime
// 0x0000 (0x0040 - 0x0040)
class UMaterialExpressionParticleRelativeTime : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionParticleRelativeTime"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionParticleSize
// 0x0000 (0x0040 - 0x0040)
class UMaterialExpressionParticleSize : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionParticleSize"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionParticleSpeed
// 0x0000 (0x0040 - 0x0040)
class UMaterialExpressionParticleSpeed : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionParticleSpeed"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionParticleSubUV
// 0x0008 (0x0068 - 0x0060)
class UMaterialExpressionParticleSubUV : public UMaterialExpressionTextureSample
{
public:
	unsigned char                                      bBlend : 1;                                               // 0x0060(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0061(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionParticleSubUV"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionParticleSubUVProperties
// 0x0000 (0x0040 - 0x0040)
class UMaterialExpressionParticleSubUVProperties : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionParticleSubUVProperties"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionPathTracingQualitySwitch
// 0x0028 (0x0068 - 0x0040)
class UMaterialExpressionPathTracingQualitySwitch : public UMaterialExpression
{
public:
	struct FExpressionInput                            Normal;                                                   // 0x0040(0x0014)
	struct FExpressionInput                            PathTraced;                                               // 0x0054(0x0014)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionPathTracingQualitySwitch"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionPerInstanceCustomData
// 0x0020 (0x0060 - 0x0040)
class UMaterialExpressionPerInstanceCustomData : public UMaterialExpression
{
public:
	struct FExpressionInput                            DefaultValue;                                             // 0x0040(0x0014)
	float                                              ConstDefaultValue;                                        // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	uint32_t                                           DataIndex;                                                // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x005C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionPerInstanceCustomData"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionPerInstanceCustomData3Vector
// 0x0028 (0x0068 - 0x0040)
class UMaterialExpressionPerInstanceCustomData3Vector : public UMaterialExpression
{
public:
	struct FExpressionInput                            DefaultValue;                                             // 0x0040(0x0014)
	struct FLinearColor                                ConstDefaultValue;                                        // 0x0054(0x0010) (Edit, ZeroConstructor, IsPlainOldData)
	uint32_t                                           DataIndex;                                                // 0x0064(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionPerInstanceCustomData3Vector"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionPerInstanceFadeAmount
// 0x0000 (0x0040 - 0x0040)
class UMaterialExpressionPerInstanceFadeAmount : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionPerInstanceFadeAmount"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionPerInstanceRandom
// 0x0000 (0x0040 - 0x0040)
class UMaterialExpressionPerInstanceRandom : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionPerInstanceRandom"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionPinBase
// 0x0018 (0x0058 - 0x0040)
class UMaterialExpressionPinBase : public UMaterialExpression
{
public:
	TArray<struct FCompositeReroute>                   ReroutePins;                                              // 0x0040(0x0010) (Edit, ZeroConstructor)
	TEnumAsByte<EEdGraphPinDirection>                  PinDirection;                                             // 0x0050(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0051(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionPinBase"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionPixelDepth
// 0x0000 (0x0040 - 0x0040)
class UMaterialExpressionPixelDepth : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionPixelDepth"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionPixelNormalWS
// 0x0000 (0x0040 - 0x0040)
class UMaterialExpressionPixelNormalWS : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionPixelNormalWS"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionPower
// 0x0030 (0x0070 - 0x0040)
class UMaterialExpressionPower : public UMaterialExpression
{
public:
	struct FExpressionInput                            Base;                                                     // 0x0040(0x0014)
	struct FExpressionInput                            Exponent;                                                 // 0x0054(0x0014)
	float                                              ConstExponent;                                            // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x006C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionPower"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionPrecomputedAOMask
// 0x0000 (0x0040 - 0x0040)
class UMaterialExpressionPrecomputedAOMask : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionPrecomputedAOMask"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionPreSkinnedLocalBounds
// 0x0000 (0x0040 - 0x0040)
class UMaterialExpressionPreSkinnedLocalBounds : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionPreSkinnedLocalBounds"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionPreSkinnedNormal
// 0x0000 (0x0040 - 0x0040)
class UMaterialExpressionPreSkinnedNormal : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionPreSkinnedNormal"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionPreSkinnedPosition
// 0x0000 (0x0040 - 0x0040)
class UMaterialExpressionPreSkinnedPosition : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionPreSkinnedPosition"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionPreviousFrameSwitch
// 0x0028 (0x0068 - 0x0040)
class UMaterialExpressionPreviousFrameSwitch : public UMaterialExpression
{
public:
	struct FExpressionInput                            CurrentFrame;                                             // 0x0040(0x0014)
	struct FExpressionInput                            PreviousFrame;                                            // 0x0054(0x0014)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionPreviousFrameSwitch"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionQualitySwitch
// 0x0068 (0x00A8 - 0x0040)
class UMaterialExpressionQualitySwitch : public UMaterialExpression
{
public:
	struct FExpressionInput                            Default;                                                  // 0x0040(0x0014)
	struct FExpressionInput                            Inputs[0x4];                                              // 0x0054(0x0014)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00A4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionQualitySwitch"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionRayTracingQualitySwitch
// 0x0028 (0x0068 - 0x0040)
class UMaterialExpressionRayTracingQualitySwitch : public UMaterialExpression
{
public:
	struct FExpressionInput                            Normal;                                                   // 0x0040(0x0014)
	struct FExpressionInput                            RayTraced;                                                // 0x0054(0x0014)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionRayTracingQualitySwitch"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionReflectionCapturePassSwitch
// 0x0028 (0x0068 - 0x0040)
class UMaterialExpressionReflectionCapturePassSwitch : public UMaterialExpression
{
public:
	struct FExpressionInput                            Default;                                                  // 0x0040(0x0014)
	struct FExpressionInput                            Reflection;                                               // 0x0054(0x0014)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionReflectionCapturePassSwitch"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionReflectionVectorWS
// 0x0018 (0x0058 - 0x0040)
class UMaterialExpressionReflectionVectorWS : public UMaterialExpression
{
public:
	struct FExpressionInput                            CustomWorldNormal;                                        // 0x0040(0x0014)
	unsigned char                                      bNormalizeCustomWorldNormal : 1;                          // 0x0054(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0055(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionReflectionVectorWS"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionReroute
// 0x0018 (0x0058 - 0x0040)
class UMaterialExpressionReroute : public UMaterialExpressionRerouteBase
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0040(0x0014)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0054(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionReroute"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionRotateAboutAxis
// 0x0058 (0x0098 - 0x0040)
class UMaterialExpressionRotateAboutAxis : public UMaterialExpression
{
public:
	struct FExpressionInput                            NormalizedRotationAxis;                                   // 0x0040(0x0014)
	struct FExpressionInput                            RotationAngle;                                            // 0x0054(0x0014)
	struct FExpressionInput                            PivotPoint;                                               // 0x0068(0x0014)
	struct FExpressionInput                            Position;                                                 // 0x007C(0x0014)
	float                                              Period;                                                   // 0x0090(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0094(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionRotateAboutAxis"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionRotator
// 0x0038 (0x0078 - 0x0040)
class UMaterialExpressionRotator : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinate;                                               // 0x0040(0x0014)
	struct FExpressionInput                            Time;                                                     // 0x0054(0x0014)
	float                                              CenterX;                                                  // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              CenterY;                                                  // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Speed;                                                    // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	uint32_t                                           ConstCoordinate;                                          // 0x0074(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionRotator"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionRound
// 0x0018 (0x0058 - 0x0040)
class UMaterialExpressionRound : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0040(0x0014)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0054(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionRound"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionRuntimeVirtualTextureOutput
// 0x0090 (0x00D0 - 0x0040)
class UMaterialExpressionRuntimeVirtualTextureOutput : public UMaterialExpressionCustomOutput
{
public:
	struct FExpressionInput                            BaseColor;                                                // 0x0040(0x0014)
	struct FExpressionInput                            Specular;                                                 // 0x0054(0x0014)
	struct FExpressionInput                            Roughness;                                                // 0x0068(0x0014)
	struct FExpressionInput                            Normal;                                                   // 0x007C(0x0014)
	struct FExpressionInput                            WorldHeight;                                              // 0x0090(0x0014)
	struct FExpressionInput                            Opacity;                                                  // 0x00A4(0x0014)
	struct FExpressionInput                            Mask;                                                     // 0x00B8(0x0014)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00CC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionRuntimeVirtualTextureOutput"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionRuntimeVirtualTextureReplace
// 0x0028 (0x0068 - 0x0040)
class UMaterialExpressionRuntimeVirtualTextureReplace : public UMaterialExpression
{
public:
	struct FExpressionInput                            Default;                                                  // 0x0040(0x0014)
	struct FExpressionInput                            VirtualTextureOutput;                                     // 0x0054(0x0014)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionRuntimeVirtualTextureReplace"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionRuntimeVirtualTextureSample
// 0x0050 (0x0090 - 0x0040)
class UMaterialExpressionRuntimeVirtualTextureSample : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinates;                                              // 0x0040(0x0014)
	struct FExpressionInput                            WorldPosition;                                            // 0x0054(0x0014)
	struct FExpressionInput                            MipValue;                                                 // 0x0068(0x0014)
	unsigned char                                      UnknownData00[0x4];                                       // 0x007C(0x0004) MISSED OFFSET
	class URuntimeVirtualTexture*                      VirtualTexture;                                           // 0x0080(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	enum class ERuntimeVirtualTextureMaterialType      MaterialType;                                             // 0x0088(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bSinglePhysicalSpace;                                     // 0x0089(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bAdaptive;                                                // 0x008A(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ERuntimeVirtualTextureMipValueMode>    MipValueMode;                                             // 0x008B(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ERuntimeVirtualTextureTextureAddressMode> TextureAddressMode;                                       // 0x008C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bAllowFeedback;                                           // 0x008D(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x008E(0x0002) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionRuntimeVirtualTextureSample"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionRuntimeVirtualTextureSampleParameter
// 0x0020 (0x00B0 - 0x0090)
class UMaterialExpressionRuntimeVirtualTextureSampleParameter : public UMaterialExpressionRuntimeVirtualTextureSample
{
public:
	struct FName                                       ParameterName;                                            // 0x0090(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FGuid                                       ExpressionGuid;                                           // 0x0098(0x0010) (ZeroConstructor, IsPlainOldData)
	struct FName                                       Group;                                                    // 0x00A8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionRuntimeVirtualTextureSampleParameter"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionSamplePhysicsVectorField
// 0x0018 (0x0058 - 0x0040)
class UMaterialExpressionSamplePhysicsVectorField : public UMaterialExpression
{
public:
	struct FExpressionInput                            WorldPosition;                                            // 0x0040(0x0014)
	TEnumAsByte<EFieldVectorType>                      FieldTarget;                                              // 0x0054(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0055(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionSamplePhysicsVectorField"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionSamplePhysicsScalarField
// 0x0018 (0x0058 - 0x0040)
class UMaterialExpressionSamplePhysicsScalarField : public UMaterialExpression
{
public:
	struct FExpressionInput                            WorldPosition;                                            // 0x0040(0x0014)
	TEnumAsByte<EFieldScalarType>                      FieldTarget;                                              // 0x0054(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0055(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionSamplePhysicsScalarField"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionSamplePhysicsIntegerField
// 0x0018 (0x0058 - 0x0040)
class UMaterialExpressionSamplePhysicsIntegerField : public UMaterialExpression
{
public:
	struct FExpressionInput                            WorldPosition;                                            // 0x0040(0x0014)
	TEnumAsByte<EFieldIntegerType>                     FieldTarget;                                              // 0x0054(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0055(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionSamplePhysicsIntegerField"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionSaturate
// 0x0018 (0x0058 - 0x0040)
class UMaterialExpressionSaturate : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0040(0x0014)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0054(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionSaturate"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionScalarCheckboxParameter
// 0x0000 (0x0060 - 0x0060)
class UMaterialExpressionScalarCheckboxParameter : public UMaterialExpressionScalarParameter
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionScalarCheckboxParameter"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionSceneColor
// 0x0040 (0x0080 - 0x0040)
class UMaterialExpressionSceneColor : public UMaterialExpression
{
public:
	TEnumAsByte<EMaterialSceneAttributeInputMode>      InputMode;                                                // 0x0040(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0041(0x0003) MISSED OFFSET
	struct FExpressionInput                            Input;                                                    // 0x0044(0x0014)
	struct FExpressionInput                            OffsetFraction;                                           // 0x0058(0x0014) (Deprecated)
	unsigned char                                      UnknownData01[0x4];                                       // 0x006C(0x0004) MISSED OFFSET
	struct FVector2D                                   ConstInput;                                               // 0x0070(0x0010) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionSceneColor"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionSceneDepth
// 0x0040 (0x0080 - 0x0040)
class UMaterialExpressionSceneDepth : public UMaterialExpression
{
public:
	TEnumAsByte<EMaterialSceneAttributeInputMode>      InputMode;                                                // 0x0040(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0041(0x0003) MISSED OFFSET
	struct FExpressionInput                            Input;                                                    // 0x0044(0x0014)
	struct FExpressionInput                            Coordinates;                                              // 0x0058(0x0014) (Deprecated)
	unsigned char                                      UnknownData01[0x4];                                       // 0x006C(0x0004) MISSED OFFSET
	struct FVector2D                                   ConstInput;                                               // 0x0070(0x0010) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionSceneDepth"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionSceneDepthWithoutWater
// 0x0030 (0x0070 - 0x0040)
class UMaterialExpressionSceneDepthWithoutWater : public UMaterialExpression
{
public:
	TEnumAsByte<EMaterialSceneAttributeInputMode>      InputMode;                                                // 0x0040(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0041(0x0003) MISSED OFFSET
	struct FExpressionInput                            Input;                                                    // 0x0044(0x0014)
	struct FVector2D                                   ConstInput;                                               // 0x0058(0x0010) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              FallbackDepth;                                            // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x006C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionSceneDepthWithoutWater"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionSceneTexelSize
// 0x0000 (0x0040 - 0x0040)
class UMaterialExpressionSceneTexelSize : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionSceneTexelSize"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionSceneTexture
// 0x0018 (0x0058 - 0x0040)
class UMaterialExpressionSceneTexture : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinates;                                              // 0x0040(0x0014)
	TEnumAsByte<ESceneTextureId>                       SceneTextureId;                                           // 0x0054(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bFiltered;                                                // 0x0055(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0056(0x0002) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionSceneTexture"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionScreenPosition
// 0x0000 (0x0040 - 0x0040)
class UMaterialExpressionScreenPosition : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionScreenPosition"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionSetLocal
// 0x0028 (0x0068 - 0x0040)
class UMaterialExpressionSetLocal : public UMaterialExpression
{
public:
	struct FExpressionExecOutput                       Exec;                                                     // 0x0040(0x0008)
	struct FExpressionInput                            Value;                                                    // 0x0048(0x0014)
	struct FName                                       LocalName;                                                // 0x005C(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0064(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionSetLocal"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionSetMaterialAttributes
// 0x0020 (0x0060 - 0x0040)
class UMaterialExpressionSetMaterialAttributes : public UMaterialExpression
{
public:
	TArray<struct FExpressionInput>                    Inputs;                                                   // 0x0040(0x0010) (ZeroConstructor)
	TArray<struct FGuid>                               AttributeSetTypes;                                        // 0x0050(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionSetMaterialAttributes"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionShaderStageSwitch
// 0x0028 (0x0068 - 0x0040)
class UMaterialExpressionShaderStageSwitch : public UMaterialExpression
{
public:
	struct FExpressionInput                            PixelShader;                                              // 0x0040(0x0014)
	struct FExpressionInput                            VertexShader;                                             // 0x0054(0x0014)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionShaderStageSwitch"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionShadingModel
// 0x0008 (0x0048 - 0x0040)
class UMaterialExpressionShadingModel : public UMaterialExpression
{
public:
	TEnumAsByte<EMaterialShadingModel>                 ShadingModel;                                             // 0x0040(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0041(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionShadingModel"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionShadingPathSwitch
// 0x0050 (0x0090 - 0x0040)
class UMaterialExpressionShadingPathSwitch : public UMaterialExpression
{
public:
	struct FExpressionInput                            Default;                                                  // 0x0040(0x0014)
	struct FExpressionInput                            Inputs[0x3];                                              // 0x0054(0x0014)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionShadingPathSwitch"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionShadowReplace
// 0x0028 (0x0068 - 0x0040)
class UMaterialExpressionShadowReplace : public UMaterialExpression
{
public:
	struct FExpressionInput                            Default;                                                  // 0x0040(0x0014)
	struct FExpressionInput                            Shadow;                                                   // 0x0054(0x0014)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionShadowReplace"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionSign
// 0x0018 (0x0058 - 0x0040)
class UMaterialExpressionSign : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0040(0x0014)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0054(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionSign"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionSine
// 0x0018 (0x0058 - 0x0040)
class UMaterialExpressionSine : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0040(0x0014)
	float                                              Period;                                                   // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionSine"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionSingleLayerWaterMaterialOutput
// 0x0050 (0x0090 - 0x0040)
class UMaterialExpressionSingleLayerWaterMaterialOutput : public UMaterialExpressionCustomOutput
{
public:
	struct FExpressionInput                            ScatteringCoefficients;                                   // 0x0040(0x0014)
	struct FExpressionInput                            AbsorptionCoefficients;                                   // 0x0054(0x0014)
	struct FExpressionInput                            PhaseG;                                                   // 0x0068(0x0014)
	struct FExpressionInput                            ColorScaleBehindWater;                                    // 0x007C(0x0014)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionSingleLayerWaterMaterialOutput"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionSkyAtmosphereLightDirection
// 0x0008 (0x0048 - 0x0040)
class UMaterialExpressionSkyAtmosphereLightDirection : public UMaterialExpression
{
public:
	int                                                LightIndex;                                               // 0x0040(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0044(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionSkyAtmosphereLightDirection"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionSkyAtmosphereLightIlluminance
// 0x0018 (0x0058 - 0x0040)
class UMaterialExpressionSkyAtmosphereLightIlluminance : public UMaterialExpression
{
public:
	int                                                LightIndex;                                               // 0x0040(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FExpressionInput                            WorldPosition;                                            // 0x0044(0x0014)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionSkyAtmosphereLightIlluminance"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionSkyAtmosphereLightDiskLuminance
// 0x0008 (0x0048 - 0x0040)
class UMaterialExpressionSkyAtmosphereLightDiskLuminance : public UMaterialExpression
{
public:
	int                                                LightIndex;                                               // 0x0040(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0044(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionSkyAtmosphereLightDiskLuminance"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionSkyAtmosphereAerialPerspective
// 0x0018 (0x0058 - 0x0040)
class UMaterialExpressionSkyAtmosphereAerialPerspective : public UMaterialExpression
{
public:
	struct FExpressionInput                            WorldPosition;                                            // 0x0040(0x0014)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0054(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionSkyAtmosphereAerialPerspective"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionSkyAtmosphereDistantLightScatteredLuminance
// 0x0000 (0x0040 - 0x0040)
class UMaterialExpressionSkyAtmosphereDistantLightScatteredLuminance : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionSkyAtmosphereDistantLightScatteredLuminance"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionSkyAtmosphereViewLuminance
// 0x0000 (0x0040 - 0x0040)
class UMaterialExpressionSkyAtmosphereViewLuminance : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionSkyAtmosphereViewLuminance"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionSkyLightEnvMapSample
// 0x0028 (0x0068 - 0x0040)
class UMaterialExpressionSkyLightEnvMapSample : public UMaterialExpression
{
public:
	struct FExpressionInput                            Direction;                                                // 0x0040(0x0014)
	struct FExpressionInput                            Roughness;                                                // 0x0054(0x0014)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionSkyLightEnvMapSample"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionSmoothStep
// 0x0048 (0x0088 - 0x0040)
class UMaterialExpressionSmoothStep : public UMaterialExpression
{
public:
	struct FExpressionInput                            Min;                                                      // 0x0040(0x0014)
	struct FExpressionInput                            Max;                                                      // 0x0054(0x0014)
	struct FExpressionInput                            Value;                                                    // 0x0068(0x0014)
	float                                              ConstMin;                                                 // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ConstMax;                                                 // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ConstValue;                                               // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionSmoothStep"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionSobol
// 0x0050 (0x0090 - 0x0040)
class UMaterialExpressionSobol : public UMaterialExpression
{
public:
	struct FExpressionInput                            Cell;                                                     // 0x0040(0x0014)
	struct FExpressionInput                            Index;                                                    // 0x0054(0x0014)
	struct FExpressionInput                            Seed;                                                     // 0x0068(0x0014)
	uint32_t                                           ConstIndex;                                               // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector2D                                   ConstSeed;                                                // 0x0080(0x0010) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionSobol"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionSpeedTree
// 0x0060 (0x00A0 - 0x0040)
class UMaterialExpressionSpeedTree : public UMaterialExpression
{
public:
	struct FExpressionInput                            GeometryInput;                                            // 0x0040(0x0014)
	struct FExpressionInput                            WindInput;                                                // 0x0054(0x0014)
	struct FExpressionInput                            LODInput;                                                 // 0x0068(0x0014)
	struct FExpressionInput                            ExtraBendWS;                                              // 0x007C(0x0014)
	TEnumAsByte<ESpeedTreeGeometryType>                GeometryType;                                             // 0x0090(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ESpeedTreeWindType>                    WindType;                                                 // 0x0091(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ESpeedTreeLODType>                     LODType;                                                  // 0x0092(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0093(0x0001) MISSED OFFSET
	float                                              BillboardThreshold;                                       // 0x0094(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bAccurateWindVelocities;                                  // 0x0098(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0099(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionSpeedTree"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionSphereMask
// 0x0058 (0x0098 - 0x0040)
class UMaterialExpressionSphereMask : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x0040(0x0014)
	struct FExpressionInput                            B;                                                        // 0x0054(0x0014)
	struct FExpressionInput                            Radius;                                                   // 0x0068(0x0014)
	struct FExpressionInput                            Hardness;                                                 // 0x007C(0x0014)
	float                                              AttenuationRadius;                                        // 0x0090(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              HardnessPercent;                                          // 0x0094(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionSphereMask"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionSphericalParticleOpacity
// 0x0018 (0x0058 - 0x0040)
class UMaterialExpressionSphericalParticleOpacity : public UMaterialExpression
{
public:
	struct FExpressionInput                            Density;                                                  // 0x0040(0x0014)
	float                                              ConstantDensity;                                          // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionSphericalParticleOpacity"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionSquareRoot
// 0x0018 (0x0058 - 0x0040)
class UMaterialExpressionSquareRoot : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0040(0x0014)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0054(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionSquareRoot"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionStaticBool
// 0x0008 (0x0048 - 0x0040)
class UMaterialExpressionStaticBool : public UMaterialExpression
{
public:
	unsigned char                                      Value : 1;                                                // 0x0040(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0041(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionStaticBool"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionStaticBoolParameter
// 0x0008 (0x0060 - 0x0058)
class UMaterialExpressionStaticBoolParameter : public UMaterialExpressionParameter
{
public:
	unsigned char                                      DefaultValue : 1;                                         // 0x0058(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0059(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionStaticBoolParameter"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionStaticComponentMaskParameter
// 0x0008 (0x0060 - 0x0058)
class UMaterialExpressionStaticComponentMaskParameter : public UMaterialExpressionParameter
{
public:
	unsigned char                                      DefaultR : 1;                                             // 0x0058(0x0001) (Edit)
	unsigned char                                      DefaultG : 1;                                             // 0x0058(0x0001) (Edit)
	unsigned char                                      DefaultB : 1;                                             // 0x0058(0x0001) (Edit)
	unsigned char                                      DefaultA : 1;                                             // 0x0058(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0059(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionStaticComponentMaskParameter"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionStaticSwitch
// 0x0040 (0x0080 - 0x0040)
class UMaterialExpressionStaticSwitch : public UMaterialExpression
{
public:
	unsigned char                                      DefaultValue : 1;                                         // 0x0040(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0041(0x0003) MISSED OFFSET
	struct FExpressionInput                            A;                                                        // 0x0044(0x0014)
	struct FExpressionInput                            B;                                                        // 0x0058(0x0014)
	struct FExpressionInput                            Value;                                                    // 0x006C(0x0014)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionStaticSwitch"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionStaticSwitchParameter
// 0x0000 (0x0060 - 0x0060)
class UMaterialExpressionStaticSwitchParameter : public UMaterialExpressionStaticBoolParameter
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionStaticSwitchParameter"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionStep
// 0x0030 (0x0070 - 0x0040)
class UMaterialExpressionStep : public UMaterialExpression
{
public:
	struct FExpressionInput                            Y;                                                        // 0x0040(0x0014)
	struct FExpressionInput                            X;                                                        // 0x0054(0x0014)
	float                                              ConstY;                                                   // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ConstX;                                                   // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionStep"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionStrataBSDF
// 0x0000 (0x0040 - 0x0040)
class UMaterialExpressionStrataBSDF : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionStrataBSDF"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionStrataLegacyConversion
// 0x01A0 (0x01E0 - 0x0040)
class UMaterialExpressionStrataLegacyConversion : public UMaterialExpressionStrataBSDF
{
public:
	struct FExpressionInput                            BaseColor;                                                // 0x0040(0x0014)
	struct FExpressionInput                            Metallic;                                                 // 0x0054(0x0014)
	struct FExpressionInput                            Specular;                                                 // 0x0068(0x0014)
	struct FExpressionInput                            Roughness;                                                // 0x007C(0x0014)
	struct FExpressionInput                            Anisotropy;                                               // 0x0090(0x0014)
	struct FExpressionInput                            EmissiveColor;                                            // 0x00A4(0x0014)
	struct FExpressionInput                            Normal;                                                   // 0x00B8(0x0014)
	struct FExpressionInput                            Tangent;                                                  // 0x00CC(0x0014)
	struct FExpressionInput                            SubsurfaceColor;                                          // 0x00E0(0x0014)
	struct FExpressionInput                            ClearCoat;                                                // 0x00F4(0x0014)
	struct FExpressionInput                            ClearCoatRoughness;                                       // 0x0108(0x0014)
	struct FExpressionInput                            Opacity;                                                  // 0x011C(0x0014)
	struct FExpressionInput                            TransmittanceColor;                                       // 0x0130(0x0014)
	struct FExpressionInput                            WaterScatteringCoefficients;                              // 0x0144(0x0014)
	struct FExpressionInput                            WaterAbsorptionCoefficients;                              // 0x0158(0x0014)
	struct FExpressionInput                            WaterPhaseG;                                              // 0x016C(0x0014)
	struct FExpressionInput                            ColorScaleBehindWater;                                    // 0x0180(0x0014)
	struct FExpressionInput                            ClearCoatNormal;                                          // 0x0194(0x0014)
	struct FExpressionInput                            ShadingModel;                                             // 0x01A8(0x0014)
	unsigned char                                      UnknownData00[0x4];                                       // 0x01BC(0x0004) MISSED OFFSET
	class USubsurfaceProfile*                          SubsurfaceProfile;                                        // 0x01C0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FStrataMaterialInfo                         ConvertedStrataMaterialInfo;                              // 0x01C8(0x0018)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionStrataLegacyConversion"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionStrataSlabBSDF
// 0x0190 (0x01D0 - 0x0040)
class UMaterialExpressionStrataSlabBSDF : public UMaterialExpressionStrataBSDF
{
public:
	struct FExpressionInput                            BaseColor;                                                // 0x0040(0x0014)
	struct FExpressionInput                            EdgeColor;                                                // 0x0054(0x0014)
	struct FExpressionInput                            Metallic;                                                 // 0x0068(0x0014)
	struct FExpressionInput                            Specular;                                                 // 0x007C(0x0014)
	struct FExpressionInput                            DiffuseAlbedo;                                            // 0x0090(0x0014)
	struct FExpressionInput                            F0;                                                       // 0x00A4(0x0014)
	struct FExpressionInput                            F90;                                                      // 0x00B8(0x0014)
	struct FExpressionInput                            Roughness;                                                // 0x00CC(0x0014)
	struct FExpressionInput                            Anisotropy;                                               // 0x00E0(0x0014)
	struct FExpressionInput                            Normal;                                                   // 0x00F4(0x0014)
	struct FExpressionInput                            Tangent;                                                  // 0x0108(0x0014)
	struct FExpressionInput                            SSSDMFP;                                                  // 0x011C(0x0014)
	struct FExpressionInput                            SSSDMFPScale;                                             // 0x0130(0x0014)
	struct FExpressionInput                            EmissiveColor;                                            // 0x0144(0x0014)
	struct FExpressionInput                            Haziness;                                                 // 0x0158(0x0014)
	struct FExpressionInput                            ThinFilmThickness;                                        // 0x016C(0x0014)
	struct FExpressionInput                            Thickness;                                                // 0x0180(0x0014)
	struct FExpressionInput                            FuzzAmount;                                               // 0x0194(0x0014)
	struct FExpressionInput                            FuzzColor;                                                // 0x01A8(0x0014)
	unsigned char                                      UnknownData00[0x4];                                       // 0x01BC(0x0004) MISSED OFFSET
	class USubsurfaceProfile*                          SubsurfaceProfile;                                        // 0x01C0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUseMetalness : 1;                                        // 0x01C8(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x7];                                       // 0x01C9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionStrataSlabBSDF"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionStrataVolumetricFogCloudBSDF
// 0x0050 (0x0090 - 0x0040)
class UMaterialExpressionStrataVolumetricFogCloudBSDF : public UMaterialExpressionStrataBSDF
{
public:
	struct FExpressionInput                            Albedo;                                                   // 0x0040(0x0014)
	struct FExpressionInput                            Extinction;                                               // 0x0054(0x0014)
	struct FExpressionInput                            EmissiveColor;                                            // 0x0068(0x0014)
	struct FExpressionInput                            AmbientOcclusion;                                         // 0x007C(0x0014)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionStrataVolumetricFogCloudBSDF"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionStrataUnlitBSDF
// 0x0028 (0x0068 - 0x0040)
class UMaterialExpressionStrataUnlitBSDF : public UMaterialExpressionStrataBSDF
{
public:
	struct FExpressionInput                            EmissiveColor;                                            // 0x0040(0x0014)
	struct FExpressionInput                            TransmittanceColor;                                       // 0x0054(0x0014)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionStrataUnlitBSDF"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionStrataHairBSDF
// 0x0090 (0x00D0 - 0x0040)
class UMaterialExpressionStrataHairBSDF : public UMaterialExpressionStrataBSDF
{
public:
	struct FExpressionInput                            BaseColor;                                                // 0x0040(0x0014)
	struct FExpressionInput                            Scatter;                                                  // 0x0054(0x0014)
	struct FExpressionInput                            Specular;                                                 // 0x0068(0x0014)
	struct FExpressionInput                            Roughness;                                                // 0x007C(0x0014)
	struct FExpressionInput                            Backlit;                                                  // 0x0090(0x0014)
	struct FExpressionInput                            Tangent;                                                  // 0x00A4(0x0014)
	struct FExpressionInput                            EmissiveColor;                                            // 0x00B8(0x0014)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00CC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionStrataHairBSDF"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionStrataSingleLayerWaterBSDF
// 0x00E0 (0x0120 - 0x0040)
class UMaterialExpressionStrataSingleLayerWaterBSDF : public UMaterialExpressionStrataBSDF
{
public:
	struct FExpressionInput                            BaseColor;                                                // 0x0040(0x0014)
	struct FExpressionInput                            Metallic;                                                 // 0x0054(0x0014)
	struct FExpressionInput                            Specular;                                                 // 0x0068(0x0014)
	struct FExpressionInput                            Roughness;                                                // 0x007C(0x0014)
	struct FExpressionInput                            Normal;                                                   // 0x0090(0x0014)
	struct FExpressionInput                            EmissiveColor;                                            // 0x00A4(0x0014)
	struct FExpressionInput                            TopMaterialOpacity;                                       // 0x00B8(0x0014)
	struct FExpressionInput                            WaterAlbedo;                                              // 0x00CC(0x0014)
	struct FExpressionInput                            WaterExtinction;                                          // 0x00E0(0x0014)
	struct FExpressionInput                            WaterPhaseG;                                              // 0x00F4(0x0014)
	struct FExpressionInput                            ColorScaleBehindWater;                                    // 0x0108(0x0014)
	unsigned char                                      UnknownData00[0x4];                                       // 0x011C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionStrataSingleLayerWaterBSDF"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionStrataHorizontalMixing
// 0x0040 (0x0080 - 0x0040)
class UMaterialExpressionStrataHorizontalMixing : public UMaterialExpressionStrataBSDF
{
public:
	struct FExpressionInput                            Background;                                               // 0x0040(0x0014)
	struct FExpressionInput                            Foreground;                                               // 0x0054(0x0014)
	struct FExpressionInput                            Mix;                                                      // 0x0068(0x0014)
	unsigned char                                      bUseParameterBlending : 1;                                // 0x007C(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x007D(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionStrataHorizontalMixing"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionStrataVerticalLayering
// 0x0030 (0x0070 - 0x0040)
class UMaterialExpressionStrataVerticalLayering : public UMaterialExpressionStrataBSDF
{
public:
	struct FExpressionInput                            Top;                                                      // 0x0040(0x0014)
	struct FExpressionInput                            Base;                                                     // 0x0054(0x0014)
	unsigned char                                      bUseParameterBlending : 1;                                // 0x0068(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0069(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionStrataVerticalLayering"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionStrataAdd
// 0x0030 (0x0070 - 0x0040)
class UMaterialExpressionStrataAdd : public UMaterialExpressionStrataBSDF
{
public:
	struct FExpressionInput                            A;                                                        // 0x0040(0x0014)
	struct FExpressionInput                            B;                                                        // 0x0054(0x0014)
	unsigned char                                      bUseParameterBlending : 1;                                // 0x0068(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0069(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionStrataAdd"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionStrataWeight
// 0x0028 (0x0068 - 0x0040)
class UMaterialExpressionStrataWeight : public UMaterialExpressionStrataBSDF
{
public:
	struct FExpressionInput                            A;                                                        // 0x0040(0x0014)
	struct FExpressionInput                            Weight;                                                   // 0x0054(0x0014)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionStrataWeight"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionStrataTransmittanceToMFP
// 0x0028 (0x0068 - 0x0040)
class UMaterialExpressionStrataTransmittanceToMFP : public UMaterialExpressionStrataBSDF
{
public:
	struct FExpressionInput                            TransmittanceColor;                                       // 0x0040(0x0014)
	struct FExpressionInput                            Thickness;                                                // 0x0054(0x0014)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionStrataTransmittanceToMFP"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionSubtract
// 0x0030 (0x0070 - 0x0040)
class UMaterialExpressionSubtract : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x0040(0x0014)
	struct FExpressionInput                            B;                                                        // 0x0054(0x0014)
	float                                              ConstA;                                                   // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ConstB;                                                   // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionSubtract"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionTangent
// 0x0018 (0x0058 - 0x0040)
class UMaterialExpressionTangent : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0040(0x0014)
	float                                              Period;                                                   // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionTangent"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionTangentOutput
// 0x0018 (0x0058 - 0x0040)
class UMaterialExpressionTangentOutput : public UMaterialExpressionCustomOutput
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0040(0x0014)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0054(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionTangentOutput"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionTemporalSobol
// 0x0040 (0x0080 - 0x0040)
class UMaterialExpressionTemporalSobol : public UMaterialExpression
{
public:
	struct FExpressionInput                            Index;                                                    // 0x0040(0x0014)
	struct FExpressionInput                            Seed;                                                     // 0x0054(0x0014)
	uint32_t                                           ConstIndex;                                               // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x006C(0x0004) MISSED OFFSET
	struct FVector2D                                   ConstSeed;                                                // 0x0070(0x0010) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionTemporalSobol"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureCoordinate
// 0x0010 (0x0050 - 0x0040)
class UMaterialExpressionTextureCoordinate : public UMaterialExpression
{
public:
	int                                                CoordinateIndex;                                          // 0x0040(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              UTiling;                                                  // 0x0044(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              VTiling;                                                  // 0x0048(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnMirrorU : 1;                                            // 0x004C(0x0001) (Edit)
	unsigned char                                      UnMirrorV : 1;                                            // 0x004C(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x004D(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionTextureCoordinate"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureObject
// 0x0000 (0x0048 - 0x0048)
class UMaterialExpressionTextureObject : public UMaterialExpressionTextureBase
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionTextureObject"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureObjectParameter
// 0x0000 (0x0080 - 0x0080)
class UMaterialExpressionTextureObjectParameter : public UMaterialExpressionTextureSampleParameter
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionTextureObjectParameter"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureProperty
// 0x0018 (0x0058 - 0x0040)
class UMaterialExpressionTextureProperty : public UMaterialExpression
{
public:
	struct FExpressionInput                            TextureObject;                                            // 0x0040(0x0014)
	TEnumAsByte<EMaterialExposedTextureProperty>       Property;                                                 // 0x0054(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0055(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionTextureProperty"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureSampleParameter2DArray
// 0x0000 (0x0080 - 0x0080)
class UMaterialExpressionTextureSampleParameter2DArray : public UMaterialExpressionTextureSampleParameter
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionTextureSampleParameter2DArray"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureSampleParameterCube
// 0x0000 (0x0080 - 0x0080)
class UMaterialExpressionTextureSampleParameterCube : public UMaterialExpressionTextureSampleParameter
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionTextureSampleParameterCube"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureSampleParameterCubeArray
// 0x0000 (0x0080 - 0x0080)
class UMaterialExpressionTextureSampleParameterCubeArray : public UMaterialExpressionTextureSampleParameter
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionTextureSampleParameterCubeArray"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureSampleParameterSubUV
// 0x0008 (0x0088 - 0x0080)
class UMaterialExpressionTextureSampleParameterSubUV : public UMaterialExpressionTextureSampleParameter2D
{
public:
	unsigned char                                      bBlend : 1;                                               // 0x0080(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0081(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionTextureSampleParameterSubUV"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureSampleParameterVolume
// 0x0000 (0x0080 - 0x0080)
class UMaterialExpressionTextureSampleParameterVolume : public UMaterialExpressionTextureSampleParameter
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionTextureSampleParameterVolume"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionThinTranslucentMaterialOutput
// 0x0018 (0x0058 - 0x0040)
class UMaterialExpressionThinTranslucentMaterialOutput : public UMaterialExpressionCustomOutput
{
public:
	struct FExpressionInput                            TransmittanceColor;                                       // 0x0040(0x0014)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0054(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionThinTranslucentMaterialOutput"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionTime
// 0x0008 (0x0048 - 0x0040)
class UMaterialExpressionTime : public UMaterialExpression
{
public:
	unsigned char                                      bIgnorePause : 1;                                         // 0x0040(0x0001) (Edit)
	unsigned char                                      bOverride_Period : 1;                                     // 0x0040(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0041(0x0003) MISSED OFFSET
	float                                              Period;                                                   // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionTime"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionTransform
// 0x0018 (0x0058 - 0x0040)
class UMaterialExpressionTransform : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0040(0x0014)
	TEnumAsByte<EMaterialVectorCoordTransformSource>   TransformSourceType;                                      // 0x0054(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EMaterialVectorCoordTransform>         TransformType;                                            // 0x0055(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0056(0x0002) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionTransform"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionTransformPosition
// 0x0018 (0x0058 - 0x0040)
class UMaterialExpressionTransformPosition : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0040(0x0014)
	TEnumAsByte<EMaterialPositionTransformSource>      TransformSourceType;                                      // 0x0054(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EMaterialPositionTransformSource>      TransformType;                                            // 0x0055(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0056(0x0002) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionTransformPosition"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionTruncate
// 0x0018 (0x0058 - 0x0040)
class UMaterialExpressionTruncate : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0040(0x0014)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0054(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionTruncate"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionTwoSidedSign
// 0x0000 (0x0040 - 0x0040)
class UMaterialExpressionTwoSidedSign : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionTwoSidedSign"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionVectorNoise
// 0x0028 (0x0068 - 0x0040)
class UMaterialExpressionVectorNoise : public UMaterialExpression
{
public:
	struct FExpressionInput                            Position;                                                 // 0x0040(0x0014)
	TEnumAsByte<EVectorNoiseFunction>                  NoiseFunction;                                            // 0x0054(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0055(0x0003) MISSED OFFSET
	int                                                Quality;                                                  // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bTiling : 1;                                              // 0x005C(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x005D(0x0003) MISSED OFFSET
	uint32_t                                           TileSize;                                                 // 0x0060(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0064(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionVectorNoise"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionVertexColor
// 0x0000 (0x0040 - 0x0040)
class UMaterialExpressionVertexColor : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionVertexColor"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionVertexInterpolator
// 0x0020 (0x0060 - 0x0040)
class UMaterialExpressionVertexInterpolator : public UMaterialExpressionCustomOutput
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0040(0x0014)
	unsigned char                                      UnknownData00[0xC];                                       // 0x0054(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionVertexInterpolator"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionVertexNormalWS
// 0x0000 (0x0040 - 0x0040)
class UMaterialExpressionVertexNormalWS : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionVertexNormalWS"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionVertexTangentWS
// 0x0000 (0x0040 - 0x0040)
class UMaterialExpressionVertexTangentWS : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionVertexTangentWS"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionViewProperty
// 0x0008 (0x0048 - 0x0040)
class UMaterialExpressionViewProperty : public UMaterialExpression
{
public:
	TEnumAsByte<EMaterialExposedViewProperty>          Property;                                                 // 0x0040(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0041(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionViewProperty"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionViewSize
// 0x0000 (0x0040 - 0x0040)
class UMaterialExpressionViewSize : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionViewSize"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionVirtualTextureFeatureSwitch
// 0x0028 (0x0068 - 0x0040)
class UMaterialExpressionVirtualTextureFeatureSwitch : public UMaterialExpression
{
public:
	struct FExpressionInput                            No;                                                       // 0x0040(0x0014)
	struct FExpressionInput                            Yes;                                                      // 0x0054(0x0014)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionVirtualTextureFeatureSwitch"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionVolumetricAdvancedMaterialInput
// 0x0000 (0x0040 - 0x0040)
class UMaterialExpressionVolumetricAdvancedMaterialInput : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionVolumetricAdvancedMaterialInput"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionVolumetricAdvancedMaterialOutput
// 0x00B0 (0x00F0 - 0x0040)
class UMaterialExpressionVolumetricAdvancedMaterialOutput : public UMaterialExpressionCustomOutput
{
public:
	struct FExpressionInput                            PhaseG;                                                   // 0x0040(0x0014)
	struct FExpressionInput                            PhaseG2;                                                  // 0x0054(0x0014)
	struct FExpressionInput                            PhaseBlend;                                               // 0x0068(0x0014)
	struct FExpressionInput                            MultiScatteringContribution;                              // 0x007C(0x0014)
	struct FExpressionInput                            MultiScatteringOcclusion;                                 // 0x0090(0x0014)
	struct FExpressionInput                            MultiScatteringEccentricity;                              // 0x00A4(0x0014)
	struct FExpressionInput                            ConservativeDensity;                                      // 0x00B8(0x0014)
	float                                              ConstPhaseG;                                              // 0x00CC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ConstPhaseG2;                                             // 0x00D0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ConstPhaseBlend;                                          // 0x00D4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               PerSamplePhaseEvaluation;                                 // 0x00D8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00D9(0x0003) MISSED OFFSET
	uint32_t                                           MultiScatteringApproximationOctaveCount;                  // 0x00DC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ConstMultiScatteringContribution;                         // 0x00E0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ConstMultiScatteringOcclusion;                            // 0x00E4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ConstMultiScatteringEccentricity;                         // 0x00E8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bGroundContribution;                                      // 0x00EC(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bGrayScaleMaterial;                                       // 0x00ED(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bRayMarchVolumeShadow;                                    // 0x00EE(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x00EF(0x0001) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionVolumetricAdvancedMaterialOutput"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionWhileLoop
// 0x0028 (0x0068 - 0x0040)
class UMaterialExpressionWhileLoop : public UMaterialExpression
{
public:
	struct FExpressionExecOutput                       LoopBody;                                                 // 0x0040(0x0008)
	struct FExpressionExecOutput                       Completed;                                                // 0x0048(0x0008)
	struct FExpressionInput                            Condition;                                                // 0x0050(0x0014)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0064(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionWhileLoop"));
		return ptr;
	}

};


// Class Engine.MaterialExpressionWorldPosition
// 0x0008 (0x0048 - 0x0040)
class UMaterialExpressionWorldPosition : public UMaterialExpression
{
public:
	TEnumAsByte<EWorldPositionIncludedOffsets>         WorldPositionShaderOffset;                                // 0x0040(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0041(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialExpressionWorldPosition"));
		return ptr;
	}

};


// Class Engine.MaterialFunctionInterface
// 0x0018 (0x0040 - 0x0028)
class UMaterialFunctionInterface : public UObject
{
public:
	struct FGuid                                       StateId;                                                  // 0x0028(0x0010) (ZeroConstructor, DuplicateTransient, IsPlainOldData)
	enum class EMaterialFunctionUsage                  MaterialFunctionUsage;                                    // 0x0038(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0039(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialFunctionInterface"));
		return ptr;
	}

};


// Class Engine.MaterialFunction
// 0x0018 (0x0058 - 0x0040)
class UMaterialFunction : public UMaterialFunctionInterface
{
public:
	struct FString                                     Description;                                              // 0x0040(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      bExposeToLibrary : 1;                                     // 0x0050(0x0001) (Edit)
	unsigned char                                      bPrefixParameterNames : 1;                                // 0x0050(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0051(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialFunction"));
		return ptr;
	}

};


// Class Engine.MaterialFunctionInstance
// 0x0090 (0x00D0 - 0x0040)
class UMaterialFunctionInstance : public UMaterialFunctionInterface
{
public:
	class UMaterialFunctionInterface*                  Parent;                                                   // 0x0040(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UMaterialFunctionInterface*                  Base;                                                     // 0x0048(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<struct FScalarParameterValue>               ScalarParameterValues;                                    // 0x0050(0x0010) (Edit, ZeroConstructor)
	TArray<struct FVectorParameterValue>               VectorParameterValues;                                    // 0x0060(0x0010) (Edit, ZeroConstructor)
	TArray<struct FDoubleVectorParameterValue>         DoubleVectorParameterValues;                              // 0x0070(0x0010) (Edit, ZeroConstructor)
	TArray<struct FTextureParameterValue>              TextureParameterValues;                                   // 0x0080(0x0010) (Edit, ZeroConstructor)
	TArray<struct FFontParameterValue>                 FontParameterValues;                                      // 0x0090(0x0010) (Edit, ZeroConstructor)
	TArray<struct FStaticSwitchParameter>              StaticSwitchParameterValues;                              // 0x00A0(0x0010) (Edit, ZeroConstructor)
	TArray<struct FStaticComponentMaskParameter>       StaticComponentMaskParameterValues;                       // 0x00B0(0x0010) (Edit, ZeroConstructor)
	TArray<struct FRuntimeVirtualTextureParameterValue> RuntimeVirtualTextureParameterValues;                     // 0x00C0(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialFunctionInstance"));
		return ptr;
	}

};


// Class Engine.MaterialFunctionMaterialLayer
// 0x0000 (0x0058 - 0x0058)
class UMaterialFunctionMaterialLayer : public UMaterialFunction
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialFunctionMaterialLayer"));
		return ptr;
	}

};


// Class Engine.MaterialFunctionMaterialLayerInstance
// 0x0000 (0x00D0 - 0x00D0)
class UMaterialFunctionMaterialLayerInstance : public UMaterialFunctionInstance
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialFunctionMaterialLayerInstance"));
		return ptr;
	}

};


// Class Engine.MaterialFunctionMaterialLayerBlend
// 0x0000 (0x0058 - 0x0058)
class UMaterialFunctionMaterialLayerBlend : public UMaterialFunction
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialFunctionMaterialLayerBlend"));
		return ptr;
	}

};


// Class Engine.MaterialFunctionMaterialLayerBlendInstance
// 0x0000 (0x00D0 - 0x00D0)
class UMaterialFunctionMaterialLayerBlendInstance : public UMaterialFunctionInstance
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialFunctionMaterialLayerBlendInstance"));
		return ptr;
	}

};


// Class Engine.MaterialInstanceActor
// 0x0010 (0x02D8 - 0x02C8)
class AMaterialInstanceActor : public AActor
{
public:
	TArray<class AActor*>                              TargetActors;                                             // 0x02C8(0x0010) (Edit, BlueprintVisible, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialInstanceActor"));
		return ptr;
	}

};


// Class Engine.MaterialInstanceDynamic
// 0x0050 (0x0248 - 0x01F8)
class UMaterialInstanceDynamic : public UMaterialInstance
{
public:
	unsigned char                                      UnknownData00[0x50];                                      // 0x01F8(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialInstanceDynamic"));
		return ptr;
	}


	void SetVectorParameterValueByInfo(const struct FMaterialParameterInfo& ParameterInfo, const struct FLinearColor& Value);//Offset:Discovery.exe+0x57F4200
	void SetVectorParameterValue(const struct FName& ParameterName, const struct FLinearColor& Value);//Offset:Discovery.exe+0x57F43F0
	void SetTextureParameterValueByInfo(const struct FMaterialParameterInfo& ParameterInfo, class UTexture* Value);//Offset:Discovery.exe+0x57F4780
	void SetTextureParameterValue(const struct FName& ParameterName, class UTexture* Value);//Offset:Discovery.exe+0x57F4880
	void SetScalarParameterValueByInfo(const struct FMaterialParameterInfo& ParameterInfo, float Value);//Offset:Discovery.exe+0x57F4A20
	void SetScalarParameterValue(const struct FName& ParameterName, float Value);//Offset:Discovery.exe+0x57F4B20
	void SetRuntimeVirtualTextureParameterValueByInfo(const struct FMaterialParameterInfo& ParameterInfo, class URuntimeVirtualTexture* Value);//Offset:Discovery.exe+0x57F45A0
	void SetRuntimeVirtualTextureParameterValue(const struct FName& ParameterName, class URuntimeVirtualTexture* Value);//Offset:Discovery.exe+0x57F46A0
	void SetDoubleVectorParameterValue(const struct FName& ParameterName, const struct FVector& Value);//Offset:Discovery.exe+0x57F4300
	void K2_InterpolateMaterialInstanceParams(class UMaterialInstance* SourceA, class UMaterialInstance* SourceB, float Alpha);//Offset:Discovery.exe+0x57F3F50
	struct FLinearColor K2_GetVectorParameterValueByInfo(const struct FMaterialParameterInfo& ParameterInfo);//Offset:Discovery.exe+0x57F4080
	struct FLinearColor K2_GetVectorParameterValue(const struct FName& ParameterName);//Offset:Discovery.exe+0x57F4150
	class UTexture* K2_GetTextureParameterValueByInfo(const struct FMaterialParameterInfo& ParameterInfo);//Offset:Discovery.exe+0x57F44E0
	class UTexture* K2_GetTextureParameterValue(const struct FName& ParameterName);//Offset:Discovery.exe+0x57F3850
	float K2_GetScalarParameterValueByInfo(const struct FMaterialParameterInfo& ParameterInfo);//Offset:Discovery.exe+0x57F4960
	float K2_GetScalarParameterValue(const struct FName& ParameterName);//Offset:Discovery.exe+0x57F38F0
	void K2_CopyMaterialInstanceParameters(class UMaterialInterface* Source, bool bQuickParametersOnly);//Offset:Discovery.exe+0x57F3E60
	void CopyParameterOverrides(class UMaterialInstance* MaterialInstance);//Offset:Discovery.exe+0x57F3D20
	void CopyInterpParameters(class UMaterialInstance* Source);//Offset:Discovery.exe+0x57F3DC0
};


// Class Engine.MaterialParameterCollection
// 0x0048 (0x0070 - 0x0028)
class UMaterialParameterCollection : public UObject
{
public:
	struct FGuid                                       StateId;                                                  // 0x0028(0x0010) (ZeroConstructor, DuplicateTransient, IsPlainOldData)
	TArray<struct FCollectionScalarParameter>          ScalarParameters;                                         // 0x0038(0x0010) (Edit, ZeroConstructor)
	TArray<struct FCollectionVectorParameter>          VectorParameters;                                         // 0x0048(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData00[0x18];                                      // 0x0058(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialParameterCollection"));
		return ptr;
	}


	TArray<struct FName> GetVectorParameterNames();//Offset:Discovery.exe+0x57F7580
	struct FLinearColor GetVectorParameterDefaultValue(const struct FName& ParameterName, bool* bParameterFound);//Offset:Discovery.exe+0x57F7380
	TArray<struct FName> GetScalarParameterNames();//Offset:Discovery.exe+0x57F7600
	float GetScalarParameterDefaultValue(const struct FName& ParameterName, bool* bParameterFound);//Offset:Discovery.exe+0x57F7480
};


// Class Engine.MaterialParameterCollectionInstance
// 0x00F8 (0x0120 - 0x0028)
class UMaterialParameterCollectionInstance : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	class UMaterialParameterCollection*                Collection;                                               // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0xE8];                                      // 0x0038(0x00E8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MaterialParameterCollectionInstance"));
		return ptr;
	}

};


// Class Engine.MatineeActor
// 0x00A8 (0x0370 - 0x02C8)
class AMatineeActor : public AActor
{
public:
	class UInterpData*                                 MatineeData;                                              // 0x02C8(0x0008) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	struct FName                                       MatineeControllerName;                                    // 0x02D0(0x0008) (ZeroConstructor, IsPlainOldData)
	float                                              PlayRate;                                                 // 0x02D8(0x0004) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bPlayOnLevelLoad : 1;                                     // 0x02DC(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bForceStartPos : 1;                                       // 0x02DC(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x3];                                       // 0x02DD(0x0003) MISSED OFFSET
	float                                              ForceStartPosition;                                       // 0x02E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bLooping : 1;                                             // 0x02E4(0x0001) (Edit, BlueprintVisible, Net)
	unsigned char                                      bRewindOnPlay : 1;                                        // 0x02E4(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bNoResetOnRewind : 1;                                     // 0x02E4(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bRewindIfAlreadyPlaying : 1;                              // 0x02E4(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bDisableRadioFilter : 1;                                  // 0x02E4(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bClientSideOnly : 1;                                      // 0x02E4(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bSkipUpdateIfNotVisible : 1;                              // 0x02E4(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bIsSkippable : 1;                                         // 0x02E4(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData01[0x3];                                       // 0x02E5(0x0003) MISSED OFFSET
	int                                                PreferredSplitScreenNum;                                  // 0x02E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bDisableMovementInput : 1;                                // 0x02EC(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bDisableLookAtInput : 1;                                  // 0x02EC(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bHidePlayer : 1;                                          // 0x02EC(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bHideHud : 1;                                             // 0x02EC(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData02[0x3];                                       // 0x02ED(0x0003) MISSED OFFSET
	TArray<struct FInterpGroupActorInfo>               GroupActorInfos;                                          // 0x02F0(0x0010) (Net, ZeroConstructor)
	unsigned char                                      bShouldShowGore : 1;                                      // 0x0300(0x0001) (Transient)
	unsigned char                                      UnknownData03[0x7];                                       // 0x0301(0x0007) MISSED OFFSET
	TArray<class UInterpGroupInst*>                    GroupInst;                                                // 0x0308(0x0010) (ZeroConstructor, Transient)
	TArray<struct FCameraCutInfo>                      CameraCuts;                                               // 0x0318(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      bIsPlaying : 1;                                           // 0x0328(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, Net, Transient, EditConst)
	unsigned char                                      bReversePlayback : 1;                                     // 0x0328(0x0001) (Net)
	unsigned char                                      bPaused : 1;                                              // 0x0328(0x0001) (Net, Transient)
	unsigned char                                      bPendingStop : 1;                                         // 0x0328(0x0001) (Net, Transient)
	unsigned char                                      UnknownData04[0x3];                                       // 0x0329(0x0003) MISSED OFFSET
	float                                              InterpPosition;                                           // 0x032C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x0330(0x0004) MISSED OFFSET
	unsigned char                                      ReplicationForceIsPlaying;                                // 0x0334(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x3];                                       // 0x0335(0x0003) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnPlay;                                                   // 0x0338(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnStop;                                                   // 0x0348(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPause;                                                  // 0x0358(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData07[0x8];                                       // 0x0368(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MatineeActor"));
		return ptr;
	}


	void Stop();//Offset:Discovery.exe+0x1462490
	void SetPosition(float NewPosition, bool bJump);//Offset:Discovery.exe+0x57F8060
	void SetLoopingState(bool bNewLooping);//Offset:Discovery.exe+0x234EFC0
	void Reverse();//Offset:Discovery.exe+0x14624B0
	void Play();//Offset:Discovery.exe+0x1462470
	void Pause();//Offset:Discovery.exe+0x157BE70
	void EnableGroupByName(const struct FString& GroupName, bool bEnable);//Offset:Discovery.exe+0x57F7F20
	void ChangePlaybackDirection();//Offset:Discovery.exe+0x56A5150
};


// Class Engine.MatineeActorCameraAnim
// 0x0008 (0x0378 - 0x0370)
class AMatineeActorCameraAnim : public AMatineeActor
{
public:
	class UCameraAnim*                                 CameraAnim;                                               // 0x0370(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MatineeActorCameraAnim"));
		return ptr;
	}

};


// Class Engine.MatineeAnimInterface
// 0x0000 (0x0028 - 0x0028)
class UMatineeAnimInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MatineeAnimInterface"));
		return ptr;
	}

};


// Class Engine.MatineeInterface
// 0x0000 (0x0028 - 0x0028)
class UMatineeInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MatineeInterface"));
		return ptr;
	}

};


// Class Engine.MeshDeformer
// 0x0000 (0x0028 - 0x0028)
class UMeshDeformer : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MeshDeformer"));
		return ptr;
	}

};


// Class Engine.MeshDeformerInstance
// 0x0000 (0x0028 - 0x0028)
class UMeshDeformerInstance : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MeshDeformerInstance"));
		return ptr;
	}

};


// Class Engine.MeshMergeCullingVolume
// 0x0000 (0x0300 - 0x0300)
class AMeshMergeCullingVolume : public AVolume
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MeshMergeCullingVolume"));
		return ptr;
	}

};


// Class Engine.MeshSimplificationSettings
// 0x0010 (0x0048 - 0x0038)
class UMeshSimplificationSettings : public UDeveloperSettings
{
public:
	struct FName                                       MeshReductionModuleName;                                  // 0x0038(0x0008) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bMeshReductionBackwardCompatible;                         // 0x0040(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0041(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MeshSimplificationSettings"));
		return ptr;
	}

};


// Class Engine.MeshVertexPainterKismetLibrary
// 0x0000 (0x0028 - 0x0028)
class UMeshVertexPainterKismetLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MeshVertexPainterKismetLibrary"));
		return ptr;
	}


	void STATIC_RemovePaintedVertices(class UStaticMeshComponent* StaticMeshComponent);//Offset:Discovery.exe+0x57FC2C0
	void STATIC_PaintVerticesSingleColor(class UStaticMeshComponent* StaticMeshComponent, const struct FLinearColor& FillColor, bool bConvertToSRGB);//Offset:Discovery.exe+0x57FC520
	void STATIC_PaintVerticesLerpAlongAxis(class UStaticMeshComponent* StaticMeshComponent, const struct FLinearColor& StartColor, const struct FLinearColor& EndColor, enum class EVertexPaintAxis Axis, bool bConvertToSRGB);//Offset:Discovery.exe+0x57FC350
};


// Class Engine.MicroTransactionBase
// 0x0030 (0x0068 - 0x0038)
class UMicroTransactionBase : public UPlatformInterfaceBase
{
public:
	TArray<struct FPurchaseInfo>                       AvailableProducts;                                        // 0x0038(0x0010) (ZeroConstructor)
	struct FString                                     LastError;                                                // 0x0048(0x0010) (ZeroConstructor)
	struct FString                                     LastErrorSolution;                                        // 0x0058(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MicroTransactionBase"));
		return ptr;
	}

};


// Class Engine.MirrorDataTable
// 0x00F0 (0x01A0 - 0x00B0)
class UMirrorDataTable : public UDataTable
{
public:
	TArray<struct FMirrorFindReplaceExpression>        MirrorFindReplaceExpressions;                             // 0x00B0(0x0010) (Edit, ZeroConstructor)
	TEnumAsByte<EAxis>                                 MirrorAxis;                                               // 0x00C0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00C1(0x0007) MISSED OFFSET
	class USkeleton*                                   Skeleton;                                                 // 0x00C8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0xD0];                                      // 0x00D0(0x00D0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MirrorDataTable"));
		return ptr;
	}

};


// Class Engine.ModelComponent
// 0x0040 (0x05D0 - 0x0590)
class UModelComponent : public UPrimitiveComponent
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0590(0x0018) MISSED OFFSET
	class UBodySetup*                                  ModelBodySetup;                                           // 0x05A8(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x20];                                      // 0x05B0(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ModelComponent"));
		return ptr;
	}

};


// Class Engine.MorphTarget
// 0x0018 (0x0040 - 0x0028)
class UMorphTarget : public UObject
{
public:
	class USkeletalMesh*                               BaseSkelMesh;                                             // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0030(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.MorphTarget"));
		return ptr;
	}

};


// Class Engine.NavAgentInterface
// 0x0000 (0x0028 - 0x0028)
class UNavAgentInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.NavAgentInterface"));
		return ptr;
	}

};


// Class Engine.NavAreaBase
// 0x0008 (0x0030 - 0x0028)
class UNavAreaBase : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.NavAreaBase"));
		return ptr;
	}

};


// Class Engine.NavCollisionBase
// 0x0048 (0x0070 - 0x0028)
class UNavCollisionBase : public UObject
{
public:
	unsigned char                                      bIsDynamicObstacle : 1;                                   // 0x0028(0x0001) (Edit, Config)
	unsigned char                                      UnknownData00[0x47];                                      // 0x0029(0x0047) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.NavCollisionBase"));
		return ptr;
	}

};


// Class Engine.NavEdgeProviderInterface
// 0x0000 (0x0028 - 0x0028)
class UNavEdgeProviderInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.NavEdgeProviderInterface"));
		return ptr;
	}

};


// Class Engine.NavigationDataChunk
// 0x0008 (0x0030 - 0x0028)
class UNavigationDataChunk : public UObject
{
public:
	struct FName                                       NavigationDataName;                                       // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.NavigationDataChunk"));
		return ptr;
	}

};


// Class Engine.NavigationDataChunkActor
// 0x0048 (0x0310 - 0x02C8)
class ANavigationDataChunkActor : public APartitionActor
{
public:
	TArray<class UNavigationDataChunk*>                NavDataChunks;                                            // 0x02C8(0x0010) (ZeroConstructor)
	struct FBox                                        DataChunkActorBounds;                                     // 0x02D8(0x0038) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.NavigationDataChunkActor"));
		return ptr;
	}

};


// Class Engine.NavigationDataInterface
// 0x0000 (0x0028 - 0x0028)
class UNavigationDataInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.NavigationDataInterface"));
		return ptr;
	}

};


// Class Engine.NavigationObjectBase
// 0x0028 (0x02F0 - 0x02C8)
class ANavigationObjectBase : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x02C8(0x0008) MISSED OFFSET
	class UCapsuleComponent*                           CapsuleComponent;                                         // 0x02D0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UBillboardComponent*                         GoodSprite;                                               // 0x02D8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UBillboardComponent*                         BadSprite;                                                // 0x02E0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      bIsPIEPlayerStart : 1;                                    // 0x02E8(0x0001)
	unsigned char                                      UnknownData01[0x7];                                       // 0x02E9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.NavigationObjectBase"));
		return ptr;
	}

};


// Class Engine.NavigationSystemBase
// 0x0000 (0x0028 - 0x0028)
class UNavigationSystemBase : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.NavigationSystemBase"));
		return ptr;
	}

};


// Class Engine.NavigationSystemConfig
// 0x0028 (0x0050 - 0x0028)
class UNavigationSystemConfig : public UObject
{
public:
	struct FSoftClassPath                              NavigationSystemClass;                                    // 0x0028(0x0018) (Edit, ZeroConstructor)
	struct FNavAgentSelector                           SupportedAgentsMask;                                      // 0x0040(0x0004) (Edit)
	struct FName                                       DefaultAgentName;                                         // 0x0044(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bIsOverriden : 1;                                         // 0x004C(0x0001) (Edit, EditConst)
	unsigned char                                      UnknownData00[0x3];                                       // 0x004D(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.NavigationSystemConfig"));
		return ptr;
	}

};


// Class Engine.NullNavSysConfig
// 0x0000 (0x0050 - 0x0050)
class UNullNavSysConfig : public UNavigationSystemConfig
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.NullNavSysConfig"));
		return ptr;
	}

};


// Class Engine.NavLinkDefinition
// 0x0028 (0x0050 - 0x0028)
class UNavLinkDefinition : public UObject
{
public:
	TArray<struct FNavigationLink>                     Links;                                                    // 0x0028(0x0010) (Edit, ZeroConstructor)
	TArray<struct FNavigationSegmentLink>              SegmentLinks;                                             // 0x0038(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0048(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.NavLinkDefinition"));
		return ptr;
	}

};


// Class Engine.NavPathObserverInterface
// 0x0000 (0x0028 - 0x0028)
class UNavPathObserverInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.NavPathObserverInterface"));
		return ptr;
	}

};


// Class Engine.NavRelevantInterface
// 0x0000 (0x0028 - 0x0028)
class UNavRelevantInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.NavRelevantInterface"));
		return ptr;
	}

};


// Class Engine.SimulatedClientNetConnection
// 0x0000 (0x3240 - 0x3240)
class USimulatedClientNetConnection : public UNetConnection
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SimulatedClientNetConnection"));
		return ptr;
	}

};


// Class Engine.NetFaultConfig
// 0x0000 (0x0088 - 0x0088)
class UNetFaultConfig : public UEscalationManagerConfig
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.NetFaultConfig"));
		return ptr;
	}

};


// Class Engine.NetPushModelHelpers
// 0x0000 (0x0028 - 0x0028)
class UNetPushModelHelpers : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.NetPushModelHelpers"));
		return ptr;
	}


	void STATIC_MarkPropertyDirtyFromRepIndex(class UObject* Object, int RepIndex, const struct FName& PropertyName);//Offset:Discovery.exe+0x5802550
	void STATIC_MarkPropertyDirty(class UObject* Object, const struct FName& PropertyName);//Offset:Discovery.exe+0x5802680
};


// Class Engine.NetworkPredictionInterface
// 0x0000 (0x0028 - 0x0028)
class UNetworkPredictionInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.NetworkPredictionInterface"));
		return ptr;
	}

};


// Class Engine.NetworkSettings
// 0x0020 (0x0058 - 0x0038)
class UNetworkSettings : public UDeveloperSettings
{
public:
	unsigned char                                      bVerifyPeer : 1;                                          // 0x0038(0x0001) (Edit, Config)
	unsigned char                                      bEnableMultiplayerWorldOriginRebasing : 1;                // 0x0038(0x0001) (Edit, Config)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0039(0x0003) MISSED OFFSET
	int                                                MaxRepArraySize;                                          // 0x003C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	int                                                MaxRepArrayMemory;                                        // 0x0040(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0044(0x0004) MISSED OFFSET
	TArray<struct FNetworkEmulationProfileDescription> NetworkEmulationProfiles;                                 // 0x0048(0x0010) (ZeroConstructor, Config)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.NetworkSettings"));
		return ptr;
	}

};


// Class Engine.NodeMappingContainer
// 0x0140 (0x0168 - 0x0028)
class UNodeMappingContainer : public UObject
{
public:
	TMap<struct FName, struct FNodeItem>               SourceItems;                                              // 0x0028(0x0050) (Edit, EditConst)
	TMap<struct FName, struct FNodeItem>               TargetItems;                                              // 0x0078(0x0050) (Edit, EditConst)
	TMap<struct FName, struct FName>                   SourceToTarget;                                           // 0x00C8(0x0050) (Edit)
	unsigned char                                      UnknownData00[0x28];                                      // 0x0118(0x0028) UNKNOWN PROPERTY: SourceAsset
	unsigned char                                      UnknownData01[0x28];                                      // 0x0140(0x0028) UNKNOWN PROPERTY: TargetAsset

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.NodeMappingContainer"));
		return ptr;
	}

};


// Class Engine.NodeMappingProviderInterface
// 0x0000 (0x0028 - 0x0028)
class UNodeMappingProviderInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.NodeMappingProviderInterface"));
		return ptr;
	}

};


// Class Engine.Note
// 0x0000 (0x02C8 - 0x02C8)
class ANote : public AActor
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.Note"));
		return ptr;
	}

};


// Class Engine.ObjectElementAssetDataInterface
// 0x0008 (0x0030 - 0x0028)
class UObjectElementAssetDataInterface : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ObjectElementAssetDataInterface"));
		return ptr;
	}

};


// Class Engine.ObjectElementCounterInterface
// 0x0008 (0x0030 - 0x0028)
class UObjectElementCounterInterface : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ObjectElementCounterInterface"));
		return ptr;
	}

};


// Class Engine.ObjectElementObjectInterface
// 0x0008 (0x0030 - 0x0028)
class UObjectElementObjectInterface : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ObjectElementObjectInterface"));
		return ptr;
	}

};


// Class Engine.ObjectElementSelectionInterface
// 0x0008 (0x0030 - 0x0028)
class UObjectElementSelectionInterface : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ObjectElementSelectionInterface"));
		return ptr;
	}

};


// Class Engine.ObjectLibrary
// 0x0080 (0x00A8 - 0x0028)
class UObjectLibrary : public UObject
{
public:
	class UClass*                                      ObjectBaseClass;                                          // 0x0028(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bHasBlueprintClasses;                                     // 0x0030(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0031(0x0007) MISSED OFFSET
	TArray<class UObject*>                             Objects;                                                  // 0x0038(0x0010) (Edit, ZeroConstructor)
	TArray<TWeakObjectPtr<class UObject>>              WeakObjects;                                              // 0x0048(0x0010) (ZeroConstructor)
	bool                                               bUseWeakReferences;                                       // 0x0058(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bIsFullyLoaded;                                           // 0x0059(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4E];                                      // 0x005A(0x004E) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ObjectLibrary"));
		return ptr;
	}

};


// Class Engine.ObjectReferencer
// 0x0010 (0x0038 - 0x0028)
class UObjectReferencer : public UObject
{
public:
	TArray<class UObject*>                             ReferencedObjects;                                        // 0x0028(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ObjectReferencer"));
		return ptr;
	}

};


// Class Engine.ObjectTraceWorldSubsystem
// 0x0010 (0x0040 - 0x0030)
class UObjectTraceWorldSubsystem : public UWorldSubsystem
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0030(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ObjectTraceWorldSubsystem"));
		return ptr;
	}

};


// Class Engine.PackageMapClient
// 0x0328 (0x0408 - 0x00E0)
class UPackageMapClient : public UPackageMap
{
public:
	unsigned char                                      UnknownData00[0x328];                                     // 0x00E0(0x0328) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.PackageMapClient"));
		return ptr;
	}

};


// Class Engine.PackedLevelActor
// 0x0000 (0x0318 - 0x0318)
class APackedLevelActor : public ALevelInstance
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.PackedLevelActor"));
		return ptr;
	}

};


// Class Engine.PainCausingVolume
// 0x0028 (0x0338 - 0x0310)
class APainCausingVolume : public APhysicsVolume
{
public:
	unsigned char                                      bPainCausing : 1;                                         // 0x0310(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0311(0x0003) MISSED OFFSET
	float                                              DamagePerSec;                                             // 0x0314(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UClass*                                      DamageType;                                               // 0x0318(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PainInterval;                                             // 0x0320(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bEntryPain : 1;                                           // 0x0324(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      BACKUP_bPainCausing : 1;                                  // 0x0324(0x0001)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0325(0x0003) MISSED OFFSET
	class AController*                                 DamageInstigator;                                         // 0x0328(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0330(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.PainCausingVolume"));
		return ptr;
	}

};


// Class Engine.ParticleEmitter
// 0x0198 (0x01C0 - 0x0028)
class UParticleEmitter : public UObject
{
public:
	struct FName                                       EmitterName;                                              // 0x0028(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                SubUVDataOffset;                                          // 0x0030(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	TEnumAsByte<EEmitterRenderMode>                    EmitterRenderMode;                                        // 0x0034(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	enum class EParticleSignificanceLevel              SignificanceLevel;                                        // 0x0035(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0036(0x0001) MISSED OFFSET
	unsigned char                                      bUseLegacySpawningBehavior : 1;                           // 0x0037(0x0001) (Edit)
	unsigned char                                      UnknownData01 : 3;                                        // 0x0037(0x0001)
	unsigned char                                      ConvertedModules : 1;                                     // 0x0037(0x0001)
	unsigned char                                      bIsSoloing : 1;                                           // 0x0037(0x0001) (Transient)
	unsigned char                                      bCookedOut : 1;                                           // 0x0037(0x0001)
	unsigned char                                      bDisabledLODsKeepEmitterAlive : 1;                        // 0x0037(0x0001) (Edit)
	unsigned char                                      bDisableWhenInsignficant : 1;                             // 0x0038(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0039(0x0007) MISSED OFFSET
	TArray<class UParticleLODLevel*>                   LODLevels;                                                // 0x0040(0x0010) (ExportObject, ZeroConstructor)
	int                                                PeakActiveParticles;                                      // 0x0050(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                InitialAllocationCount;                                   // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              QualityLevelSpawnRateScale;                               // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	uint32_t                                           DetailModeBitmask;                                        // 0x005C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x160];                                     // 0x0060(0x0160) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleEmitter"));
		return ptr;
	}

};


// Class Engine.ParticleEventManager
// 0x0000 (0x02C8 - 0x02C8)
class AParticleEventManager : public AActor
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleEventManager"));
		return ptr;
	}

};


// Class Engine.ParticleLODLevel
// 0x0090 (0x00B8 - 0x0028)
class UParticleLODLevel : public UObject
{
public:
	int                                                Level;                                                    // 0x0028(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bEnabled : 1;                                             // 0x002C(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x002D(0x0003) MISSED OFFSET
	class UParticleModuleRequired*                     RequiredModule;                                           // 0x0030(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	TArray<class UParticleModule*>                     Modules;                                                  // 0x0038(0x0010) (ExportObject, ZeroConstructor)
	class UParticleModuleTypeDataBase*                 TypeDataModule;                                           // 0x0048(0x0008) (ExportObject, ZeroConstructor, IsPlainOldData)
	class UParticleModuleSpawn*                        SpawnModule;                                              // 0x0050(0x0008) (ExportObject, ZeroConstructor, IsPlainOldData)
	class UParticleModuleEventGenerator*               EventGenerator;                                           // 0x0058(0x0008) (ExportObject, ZeroConstructor, IsPlainOldData)
	TArray<class UParticleModuleSpawnBase*>            SpawningModules;                                          // 0x0060(0x0010) (ZeroConstructor, Transient, DuplicateTransient)
	TArray<class UParticleModule*>                     SpawnModules;                                             // 0x0070(0x0010) (ZeroConstructor, Transient, DuplicateTransient)
	TArray<class UParticleModule*>                     UpdateModules;                                            // 0x0080(0x0010) (ZeroConstructor, Transient, DuplicateTransient)
	TArray<class UParticleModuleOrbit*>                OrbitModules;                                             // 0x0090(0x0010) (ZeroConstructor, Transient, DuplicateTransient)
	TArray<class UParticleModuleEventReceiverBase*>    EventReceiverModules;                                     // 0x00A0(0x0010) (ZeroConstructor, Transient, DuplicateTransient)
	unsigned char                                      ConvertedModules : 1;                                     // 0x00B0(0x0001)
	unsigned char                                      UnknownData01[0x3];                                       // 0x00B1(0x0003) MISSED OFFSET
	int                                                PeakActiveParticles;                                      // 0x00B4(0x0004) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleLODLevel"));
		return ptr;
	}

};


// Class Engine.ParticleSystem
// 0x0128 (0x0158 - 0x0030)
class UParticleSystem : public UFXSystemAsset
{
public:
	float                                              UpdateTime_FPS;                                           // 0x0030(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              UpdateTime_Delta;                                         // 0x0034(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              WarmupTime;                                               // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              WarmupTickRate;                                           // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<class UParticleEmitter*>                    Emitters;                                                 // 0x0040(0x0010) (ExportObject, ZeroConstructor)
	class UParticleSystemComponent*                    PreviewComponent;                                         // 0x0050(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UInterpCurveEdSetup*                         CurveEdSetup;                                             // 0x0058(0x0008) (ExportObject, ZeroConstructor, IsPlainOldData)
	float                                              LODDistanceCheckTime;                                     // 0x0060(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MacroUVRadius;                                            // 0x0064(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<float>                                      LODDistances;                                             // 0x0068(0x0010) (Edit, EditFixedSize, ZeroConstructor)
	TArray<struct FParticleSystemLOD>                  LODSettings;                                              // 0x0078(0x0010) (Edit, ZeroConstructor)
	struct FBox                                        FixedRelativeBoundingBox;                                 // 0x0088(0x0038) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              SecondsBeforeInactive;                                    // 0x00C0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Delay;                                                    // 0x00C4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DelayLow;                                                 // 0x00C8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bOrientZAxisTowardCamera : 1;                             // 0x00CC(0x0001) (Edit)
	unsigned char                                      bUseFixedRelativeBoundingBox : 1;                         // 0x00CC(0x0001) (Edit)
	unsigned char                                      bShouldResetPeakCounts : 1;                               // 0x00CC(0x0001)
	unsigned char                                      bHasPhysics : 1;                                          // 0x00CC(0x0001) (Transient)
	unsigned char                                      bUseRealtimeThumbnail : 1;                                // 0x00CC(0x0001) (Edit)
	unsigned char                                      ThumbnailImageOutOfDate : 1;                              // 0x00CC(0x0001)
	unsigned char                                      UnknownData00 : 2;                                        // 0x00CC(0x0001)
	unsigned char                                      bUseDelayRange : 1;                                       // 0x00CD(0x0001) (Edit)
	unsigned char                                      bAllowManagedTicking : 1;                                 // 0x00CD(0x0001) (Edit)
	unsigned char                                      bAutoDeactivate : 1;                                      // 0x00CD(0x0001) (Edit)
	unsigned char                                      bRegenerateLODDuplicate : 1;                              // 0x00CD(0x0001)
	TEnumAsByte<EParticleSystemUpdateMode>             SystemUpdateMode;                                         // 0x00CE(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EParticleSystemLODMethod>              LODMethod;                                                // 0x00CF(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	enum class EParticleSystemInsignificanceReaction   InsignificantReaction;                                    // 0x00D0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EParticleSystemOcclusionBoundsMethod>  OcclusionBoundsMethod;                                    // 0x00D1(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x00D2(0x0001) MISSED OFFSET
	enum class EParticleSignificanceLevel              MaxSignificanceLevel;                                     // 0x00D3(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	uint32_t                                           MinTimeBetweenTicks;                                      // 0x00D4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              InsignificanceDelay;                                      // 0x00D8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x00DC(0x0004) MISSED OFFSET
	struct FVector                                     MacroUVPosition;                                          // 0x00E0(0x0018) (Edit, ZeroConstructor, IsPlainOldData)
	struct FBox                                        CustomOcclusionBounds;                                    // 0x00F8(0x0038) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<struct FLODSoloTrack>                       SoloTracking;                                             // 0x0130(0x0010) (ZeroConstructor, Transient)
	TArray<struct FNamedEmitterMaterial>               NamedMaterialSlots;                                       // 0x0140(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0150(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleSystem"));
		return ptr;
	}


	bool ContainsEmitterType(class UClass* TypeData);//Offset:Discovery.exe+0x5810660
};


// Class Engine.ParticleModule
// 0x0008 (0x0030 - 0x0028)
class UParticleModule : public UObject
{
public:
	unsigned char                                      bSpawnModule : 1;                                         // 0x0028(0x0001)
	unsigned char                                      bUpdateModule : 1;                                        // 0x0028(0x0001)
	unsigned char                                      bFinalUpdateModule : 1;                                   // 0x0028(0x0001)
	unsigned char                                      bUpdateForGPUEmitter : 1;                                 // 0x0028(0x0001)
	unsigned char                                      bCurvesAsColor : 1;                                       // 0x0028(0x0001)
	unsigned char                                      b3DDrawMode : 1;                                          // 0x0028(0x0001) (Edit)
	unsigned char                                      bSupported3DDrawMode : 1;                                 // 0x0028(0x0001)
	unsigned char                                      bEnabled : 1;                                             // 0x0028(0x0001)
	unsigned char                                      bEditable : 1;                                            // 0x0029(0x0001)
	unsigned char                                      LODDuplicate : 1;                                         // 0x0029(0x0001)
	unsigned char                                      bSupportsRandomSeed : 1;                                  // 0x0029(0x0001)
	unsigned char                                      bRequiresLoopingNotification : 1;                         // 0x0029(0x0001)
	unsigned char                                      LODValidity;                                              // 0x002A(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x5];                                       // 0x002B(0x0005) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModule"));
		return ptr;
	}

};


// Class Engine.ParticleModuleAccelerationBase
// 0x0008 (0x0038 - 0x0030)
class UParticleModuleAccelerationBase : public UParticleModule
{
public:
	unsigned char                                      bAlwaysInWorldSpace : 1;                                  // 0x0030(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0031(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleAccelerationBase"));
		return ptr;
	}

};


// Class Engine.ParticleModuleAcceleration
// 0x0068 (0x00A0 - 0x0038)
class UParticleModuleAcceleration : public UParticleModuleAccelerationBase
{
public:
	struct FRawDistributionVector                      Acceleration;                                             // 0x0038(0x0060) (Edit)
	unsigned char                                      bApplyOwnerScale : 1;                                     // 0x0098(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0099(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleAcceleration"));
		return ptr;
	}

};


// Class Engine.ParticleModuleAccelerationConstant
// 0x0018 (0x0050 - 0x0038)
class UParticleModuleAccelerationConstant : public UParticleModuleAccelerationBase
{
public:
	struct FVector                                     Acceleration;                                             // 0x0038(0x0018) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleAccelerationConstant"));
		return ptr;
	}

};


// Class Engine.ParticleModuleAccelerationDrag
// 0x0038 (0x0070 - 0x0038)
class UParticleModuleAccelerationDrag : public UParticleModuleAccelerationBase
{
public:
	class UDistributionFloat*                          DragCoefficient;                                          // 0x0038(0x0008) (ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData)
	struct FRawDistributionFloat                       DragCoefficientRaw;                                       // 0x0040(0x0030) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleAccelerationDrag"));
		return ptr;
	}

};


// Class Engine.ParticleModuleAccelerationDragScaleOverLife
// 0x0038 (0x0070 - 0x0038)
class UParticleModuleAccelerationDragScaleOverLife : public UParticleModuleAccelerationBase
{
public:
	class UDistributionFloat*                          DragScale;                                                // 0x0038(0x0008) (ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData)
	struct FRawDistributionFloat                       DragScaleRaw;                                             // 0x0040(0x0030) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleAccelerationDragScaleOverLife"));
		return ptr;
	}

};


// Class Engine.ParticleModuleAccelerationOverLifetime
// 0x0060 (0x0098 - 0x0038)
class UParticleModuleAccelerationOverLifetime : public UParticleModuleAccelerationBase
{
public:
	struct FRawDistributionVector                      AccelOverLife;                                            // 0x0038(0x0060) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleAccelerationOverLifetime"));
		return ptr;
	}

};


// Class Engine.ParticleModuleAttractorBase
// 0x0000 (0x0030 - 0x0030)
class UParticleModuleAttractorBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleAttractorBase"));
		return ptr;
	}

};


// Class Engine.ParticleModuleAttractorLine
// 0x0090 (0x00C0 - 0x0030)
class UParticleModuleAttractorLine : public UParticleModuleAttractorBase
{
public:
	struct FVector                                     EndPoint0;                                                // 0x0030(0x0018) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector                                     EndPoint1;                                                // 0x0048(0x0018) (Edit, ZeroConstructor, IsPlainOldData)
	struct FRawDistributionFloat                       Range;                                                    // 0x0060(0x0030) (Edit)
	struct FRawDistributionFloat                       Strength;                                                 // 0x0090(0x0030) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleAttractorLine"));
		return ptr;
	}

};


// Class Engine.ParticleModuleAttractorParticle
// 0x0080 (0x00B0 - 0x0030)
class UParticleModuleAttractorParticle : public UParticleModuleAttractorBase
{
public:
	struct FName                                       EmitterName;                                              // 0x0030(0x0008) (Edit, ExportObject, ZeroConstructor, NoClear, IsPlainOldData)
	struct FRawDistributionFloat                       Range;                                                    // 0x0038(0x0030) (Edit)
	unsigned char                                      bStrengthByDistance : 1;                                  // 0x0068(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0069(0x0007) MISSED OFFSET
	struct FRawDistributionFloat                       Strength;                                                 // 0x0070(0x0030) (Edit)
	unsigned char                                      bAffectBaseVelocity : 1;                                  // 0x00A0(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x00A1(0x0003) MISSED OFFSET
	TEnumAsByte<EAttractorParticleSelectionMethod>     SelectionMethod;                                          // 0x00A4(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x00A5(0x0003) MISSED OFFSET
	unsigned char                                      bRenewSource : 1;                                         // 0x00A8(0x0001) (Edit)
	unsigned char                                      bInheritSourceVel : 1;                                    // 0x00A8(0x0001) (Edit)
	unsigned char                                      UnknownData03[0x3];                                       // 0x00A9(0x0003) MISSED OFFSET
	int                                                LastSelIndex;                                             // 0x00AC(0x0004) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleAttractorParticle"));
		return ptr;
	}

};


// Class Engine.ParticleModuleAttractorPoint
// 0x00C8 (0x00F8 - 0x0030)
class UParticleModuleAttractorPoint : public UParticleModuleAttractorBase
{
public:
	struct FRawDistributionVector                      Position;                                                 // 0x0030(0x0060) (Edit)
	struct FRawDistributionFloat                       Range;                                                    // 0x0090(0x0030) (Edit)
	struct FRawDistributionFloat                       Strength;                                                 // 0x00C0(0x0030) (Edit)
	unsigned char                                      StrengthByDistance : 1;                                   // 0x00F0(0x0001) (Edit)
	unsigned char                                      bAffectBaseVelocity : 1;                                  // 0x00F0(0x0001) (Edit)
	unsigned char                                      bOverrideVelocity : 1;                                    // 0x00F0(0x0001) (Edit)
	unsigned char                                      bUseWorldSpacePosition : 1;                               // 0x00F0(0x0001) (Edit)
	unsigned char                                      Positive_X : 1;                                           // 0x00F0(0x0001) (Edit)
	unsigned char                                      Positive_Y : 1;                                           // 0x00F0(0x0001) (Edit)
	unsigned char                                      Positive_Z : 1;                                           // 0x00F0(0x0001) (Edit)
	unsigned char                                      Negative_X : 1;                                           // 0x00F0(0x0001) (Edit)
	unsigned char                                      Negative_Y : 1;                                           // 0x00F1(0x0001) (Edit)
	unsigned char                                      Negative_Z : 1;                                           // 0x00F1(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x6];                                       // 0x00F2(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleAttractorPoint"));
		return ptr;
	}

};


// Class Engine.ParticleModuleAttractorPointGravity
// 0x0058 (0x0088 - 0x0030)
class UParticleModuleAttractorPointGravity : public UParticleModuleAttractorBase
{
public:
	struct FVector                                     Position;                                                 // 0x0030(0x0018) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Radius;                                                   // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x004C(0x0004) MISSED OFFSET
	class UDistributionFloat*                          Strength;                                                 // 0x0050(0x0008) (ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData)
	struct FRawDistributionFloat                       StrengthRaw;                                              // 0x0058(0x0030) (Edit, NoClear)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleAttractorPointGravity"));
		return ptr;
	}

};


// Class Engine.ParticleModuleBeamBase
// 0x0000 (0x0030 - 0x0030)
class UParticleModuleBeamBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleBeamBase"));
		return ptr;
	}

};


// Class Engine.ParticleModuleBeamModifier
// 0x0108 (0x0138 - 0x0030)
class UParticleModuleBeamModifier : public UParticleModuleBeamBase
{
public:
	TEnumAsByte<EBeamModifierType>                     ModifierType;                                             // 0x0030(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0031(0x0003) MISSED OFFSET
	struct FBeamModifierOptions                        PositionOptions;                                          // 0x0034(0x0004) (Edit)
	struct FRawDistributionVector                      Position;                                                 // 0x0038(0x0060) (Edit)
	struct FBeamModifierOptions                        TangentOptions;                                           // 0x0098(0x0004) (Edit)
	unsigned char                                      UnknownData01[0x4];                                       // 0x009C(0x0004) MISSED OFFSET
	struct FRawDistributionVector                      Tangent;                                                  // 0x00A0(0x0060) (Edit)
	unsigned char                                      bAbsoluteTangent : 1;                                     // 0x0100(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0101(0x0003) MISSED OFFSET
	struct FBeamModifierOptions                        StrengthOptions;                                          // 0x0104(0x0004) (Edit)
	struct FRawDistributionFloat                       Strength;                                                 // 0x0108(0x0030) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleBeamModifier"));
		return ptr;
	}

};


// Class Engine.ParticleModuleBeamNoise
// 0x0190 (0x01C0 - 0x0030)
class UParticleModuleBeamNoise : public UParticleModuleBeamBase
{
public:
	unsigned char                                      bLowFreq_Enabled : 1;                                     // 0x0030(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0031(0x0003) MISSED OFFSET
	int                                                Frequency;                                                // 0x0034(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                Frequency_LowRange;                                       // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x003C(0x0004) MISSED OFFSET
	struct FRawDistributionVector                      NoiseRange;                                               // 0x0040(0x0060) (Edit)
	struct FRawDistributionFloat                       NoiseRangeScale;                                          // 0x00A0(0x0030) (Edit)
	unsigned char                                      bNRScaleEmitterTime : 1;                                  // 0x00D0(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x7];                                       // 0x00D1(0x0007) MISSED OFFSET
	struct FRawDistributionVector                      NoiseSpeed;                                               // 0x00D8(0x0060) (Edit)
	unsigned char                                      bSmooth : 1;                                              // 0x0138(0x0001) (Edit)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0139(0x0003) MISSED OFFSET
	float                                              NoiseLockRadius;                                          // 0x013C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bNoiseLock : 1;                                           // 0x0140(0x0001)
	unsigned char                                      bOscillate : 1;                                           // 0x0140(0x0001) (Edit)
	unsigned char                                      UnknownData04[0x3];                                       // 0x0141(0x0003) MISSED OFFSET
	float                                              NoiseLockTime;                                            // 0x0144(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              NoiseTension;                                             // 0x0148(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUseNoiseTangents : 1;                                    // 0x014C(0x0001) (Edit)
	unsigned char                                      UnknownData05[0x3];                                       // 0x014D(0x0003) MISSED OFFSET
	struct FRawDistributionFloat                       NoiseTangentStrength;                                     // 0x0150(0x0030) (Edit)
	int                                                NoiseTessellation;                                        // 0x0180(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bTargetNoise : 1;                                         // 0x0184(0x0001) (Edit)
	unsigned char                                      UnknownData06[0x3];                                       // 0x0185(0x0003) MISSED OFFSET
	float                                              FrequencyDistance;                                        // 0x0188(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bApplyNoiseScale : 1;                                     // 0x018C(0x0001) (Edit)
	unsigned char                                      UnknownData07[0x3];                                       // 0x018D(0x0003) MISSED OFFSET
	struct FRawDistributionFloat                       NoiseScale;                                               // 0x0190(0x0030) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleBeamNoise"));
		return ptr;
	}

};


// Class Engine.ParticleModuleBeamSource
// 0x0118 (0x0148 - 0x0030)
class UParticleModuleBeamSource : public UParticleModuleBeamBase
{
public:
	TEnumAsByte<EBeam2SourceTargetMethod>              SourceMethod;                                             // 0x0030(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0031(0x0003) MISSED OFFSET
	struct FName                                       SourceName;                                               // 0x0034(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bSourceAbsolute : 1;                                      // 0x003C(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x003D(0x0003) MISSED OFFSET
	struct FRawDistributionVector                      Source;                                                   // 0x0040(0x0060) (Edit)
	unsigned char                                      bLockSource : 1;                                          // 0x00A0(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x3];                                       // 0x00A1(0x0003) MISSED OFFSET
	TEnumAsByte<EBeam2SourceTargetTangentMethod>       SourceTangentMethod;                                      // 0x00A4(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x00A5(0x0003) MISSED OFFSET
	struct FRawDistributionVector                      SourceTangent;                                            // 0x00A8(0x0060) (Edit)
	unsigned char                                      bLockSourceTangent : 1;                                   // 0x0108(0x0001) (Edit)
	unsigned char                                      UnknownData04[0x7];                                       // 0x0109(0x0007) MISSED OFFSET
	struct FRawDistributionFloat                       SourceStrength;                                           // 0x0110(0x0030) (Edit)
	unsigned char                                      bLockSourceStength : 1;                                   // 0x0140(0x0001) (Edit)
	unsigned char                                      UnknownData05[0x7];                                       // 0x0141(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleBeamSource"));
		return ptr;
	}

};


// Class Engine.ParticleModuleBeamTarget
// 0x0120 (0x0150 - 0x0030)
class UParticleModuleBeamTarget : public UParticleModuleBeamBase
{
public:
	TEnumAsByte<EBeam2SourceTargetMethod>              TargetMethod;                                             // 0x0030(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0031(0x0003) MISSED OFFSET
	struct FName                                       TargetName;                                               // 0x0034(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x003C(0x0004) MISSED OFFSET
	struct FRawDistributionVector                      Target;                                                   // 0x0040(0x0060) (Edit)
	unsigned char                                      bTargetAbsolute : 1;                                      // 0x00A0(0x0001) (Edit)
	unsigned char                                      bLockTarget : 1;                                          // 0x00A0(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x3];                                       // 0x00A1(0x0003) MISSED OFFSET
	TEnumAsByte<EBeam2SourceTargetTangentMethod>       TargetTangentMethod;                                      // 0x00A4(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x00A5(0x0003) MISSED OFFSET
	struct FRawDistributionVector                      TargetTangent;                                            // 0x00A8(0x0060) (Edit)
	unsigned char                                      bLockTargetTangent : 1;                                   // 0x0108(0x0001) (Edit)
	unsigned char                                      UnknownData04[0x7];                                       // 0x0109(0x0007) MISSED OFFSET
	struct FRawDistributionFloat                       TargetStrength;                                           // 0x0110(0x0030) (Edit)
	unsigned char                                      bLockTargetStength : 1;                                   // 0x0140(0x0001) (Edit)
	unsigned char                                      UnknownData05[0x3];                                       // 0x0141(0x0003) MISSED OFFSET
	float                                              LockRadius;                                               // 0x0144(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x8];                                       // 0x0148(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleBeamTarget"));
		return ptr;
	}

};


// Class Engine.ParticleModuleCameraBase
// 0x0000 (0x0030 - 0x0030)
class UParticleModuleCameraBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleCameraBase"));
		return ptr;
	}

};


// Class Engine.ParticleModuleCameraOffset
// 0x0038 (0x0068 - 0x0030)
class UParticleModuleCameraOffset : public UParticleModuleCameraBase
{
public:
	struct FRawDistributionFloat                       CameraOffset;                                             // 0x0030(0x0030) (Edit)
	unsigned char                                      bSpawnTimeOnly : 1;                                       // 0x0060(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0061(0x0003) MISSED OFFSET
	TEnumAsByte<EParticleCameraOffsetUpdateMethod>     UpdateMethod;                                             // 0x0064(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0065(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleCameraOffset"));
		return ptr;
	}

};


// Class Engine.ParticleModuleCollisionBase
// 0x0000 (0x0030 - 0x0030)
class UParticleModuleCollisionBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleCollisionBase"));
		return ptr;
	}

};


// Class Engine.ParticleModuleCollision
// 0x0190 (0x01C0 - 0x0030)
class UParticleModuleCollision : public UParticleModuleCollisionBase
{
public:
	struct FRawDistributionVector                      DampingFactor;                                            // 0x0030(0x0060) (Edit)
	struct FRawDistributionVector                      DampingFactorRotation;                                    // 0x0090(0x0060) (Edit)
	struct FRawDistributionFloat                       MaxCollisions;                                            // 0x00F0(0x0030) (Edit)
	TEnumAsByte<EParticleCollisionComplete>            CollisionCompletionOption;                                // 0x0120(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0121(0x0007) MISSED OFFSET
	TArray<TEnumAsByte<EObjectTypeQuery>>              CollisionTypes;                                           // 0x0128(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0138(0x0008) MISSED OFFSET
	unsigned char                                      bApplyPhysics : 1;                                        // 0x0140(0x0001) (Edit)
	unsigned char                                      bIgnoreTriggerVolumes : 1;                                // 0x0140(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0141(0x0007) MISSED OFFSET
	struct FRawDistributionFloat                       ParticleMass;                                             // 0x0148(0x0030) (Edit)
	float                                              DirScalar;                                                // 0x0178(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bPawnsDoNotDecrementCount : 1;                            // 0x017C(0x0001) (Edit)
	unsigned char                                      bOnlyVerticalNormalsDecrementCount : 1;                   // 0x017C(0x0001) (Edit)
	unsigned char                                      UnknownData03[0x3];                                       // 0x017D(0x0003) MISSED OFFSET
	float                                              VerticalFudgeFactor;                                      // 0x0180(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x0184(0x0004) MISSED OFFSET
	struct FRawDistributionFloat                       DelayAmount;                                              // 0x0188(0x0030) (Edit)
	unsigned char                                      bDropDetail : 1;                                          // 0x01B8(0x0001) (Edit)
	unsigned char                                      bCollideOnlyIfVisible : 1;                                // 0x01B8(0x0001) (Edit)
	unsigned char                                      bIgnoreSourceActor : 1;                                   // 0x01B8(0x0001) (Edit)
	unsigned char                                      UnknownData05[0x3];                                       // 0x01B9(0x0003) MISSED OFFSET
	float                                              MaxCollisionDistance;                                     // 0x01BC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleCollision"));
		return ptr;
	}

};


// Class Engine.ParticleModuleCollisionGPU
// 0x0078 (0x00A8 - 0x0030)
class UParticleModuleCollisionGPU : public UParticleModuleCollisionBase
{
public:
	struct FRawDistributionFloat                       Resilience;                                               // 0x0030(0x0030) (Edit)
	struct FRawDistributionFloat                       ResilienceScaleOverLife;                                  // 0x0060(0x0030) (Edit)
	float                                              Friction;                                                 // 0x0090(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              RandomSpread;                                             // 0x0094(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              RandomDistribution;                                       // 0x0098(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              RadiusScale;                                              // 0x009C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              RadiusBias;                                               // 0x00A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EParticleCollisionResponse>            Response;                                                 // 0x00A4(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EParticleCollisionMode>                CollisionMode;                                            // 0x00A5(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x00A6(0x0002) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleCollisionGPU"));
		return ptr;
	}

};


// Class Engine.ParticleModuleColorBase
// 0x0000 (0x0030 - 0x0030)
class UParticleModuleColorBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleColorBase"));
		return ptr;
	}

};


// Class Engine.ParticleModuleColor
// 0x0098 (0x00C8 - 0x0030)
class UParticleModuleColor : public UParticleModuleColorBase
{
public:
	struct FRawDistributionVector                      StartColor;                                               // 0x0030(0x0060) (Edit)
	struct FRawDistributionFloat                       StartAlpha;                                               // 0x0090(0x0030) (Edit)
	unsigned char                                      bClampAlpha : 1;                                          // 0x00C0(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00C1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleColor"));
		return ptr;
	}

};


// Class Engine.ParticleModuleColorOverLife
// 0x0098 (0x00C8 - 0x0030)
class UParticleModuleColorOverLife : public UParticleModuleColorBase
{
public:
	struct FRawDistributionVector                      ColorOverLife;                                            // 0x0030(0x0060) (Edit)
	struct FRawDistributionFloat                       AlphaOverLife;                                            // 0x0090(0x0030) (Edit)
	unsigned char                                      bClampAlpha : 1;                                          // 0x00C0(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00C1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleColorOverLife"));
		return ptr;
	}

};


// Class Engine.ParticleModuleColorScaleOverLife
// 0x0098 (0x00C8 - 0x0030)
class UParticleModuleColorScaleOverLife : public UParticleModuleColorBase
{
public:
	struct FRawDistributionVector                      ColorScaleOverLife;                                       // 0x0030(0x0060) (Edit)
	struct FRawDistributionFloat                       AlphaScaleOverLife;                                       // 0x0090(0x0030) (Edit)
	unsigned char                                      bEmitterTime : 1;                                         // 0x00C0(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00C1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleColorScaleOverLife"));
		return ptr;
	}

};


// Class Engine.ParticleModuleColor_Seeded
// 0x0020 (0x00E8 - 0x00C8)
class UParticleModuleColor_Seeded : public UParticleModuleColor
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                           // 0x00C8(0x0020) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleColor_Seeded"));
		return ptr;
	}

};


// Class Engine.ParticleModuleEventBase
// 0x0000 (0x0030 - 0x0030)
class UParticleModuleEventBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleEventBase"));
		return ptr;
	}

};


// Class Engine.ParticleModuleEventGenerator
// 0x0010 (0x0040 - 0x0030)
class UParticleModuleEventGenerator : public UParticleModuleEventBase
{
public:
	TArray<struct FParticleEvent_GenerateInfo>         Events;                                                   // 0x0030(0x0010) (Edit, ExportObject, ZeroConstructor, NoClear)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleEventGenerator"));
		return ptr;
	}

};


// Class Engine.ParticleModuleEventReceiverBase
// 0x0010 (0x0040 - 0x0030)
class UParticleModuleEventReceiverBase : public UParticleModuleEventBase
{
public:
	TEnumAsByte<EParticleEventType>                    EventGeneratorType;                                       // 0x0030(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0031(0x0003) MISSED OFFSET
	struct FName                                       EventName;                                                // 0x0034(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x003C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleEventReceiverBase"));
		return ptr;
	}

};


// Class Engine.ParticleModuleEventReceiverKillParticles
// 0x0008 (0x0048 - 0x0040)
class UParticleModuleEventReceiverKillParticles : public UParticleModuleEventReceiverBase
{
public:
	unsigned char                                      bStopSpawning : 1;                                        // 0x0040(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0041(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleEventReceiverKillParticles"));
		return ptr;
	}

};


// Class Engine.ParticleModuleEventReceiverSpawn
// 0x00B0 (0x00F0 - 0x0040)
class UParticleModuleEventReceiverSpawn : public UParticleModuleEventReceiverBase
{
public:
	struct FRawDistributionFloat                       SpawnCount;                                               // 0x0040(0x0030) (Edit)
	unsigned char                                      bUseParticleTime : 1;                                     // 0x0070(0x0001) (Edit)
	unsigned char                                      bUsePSysLocation : 1;                                     // 0x0070(0x0001) (Edit)
	unsigned char                                      bInheritVelocity : 1;                                     // 0x0070(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0071(0x0007) MISSED OFFSET
	struct FRawDistributionVector                      InheritVelocityScale;                                     // 0x0078(0x0060) (Edit)
	TArray<class UPhysicalMaterial*>                   PhysicalMaterials;                                        // 0x00D8(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      bBanPhysicalMaterials : 1;                                // 0x00E8(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x7];                                       // 0x00E9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleEventReceiverSpawn"));
		return ptr;
	}

};


// Class Engine.ParticleModuleEventSendToGame
// 0x0000 (0x0028 - 0x0028)
class UParticleModuleEventSendToGame : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleEventSendToGame"));
		return ptr;
	}

};


// Class Engine.ParticleModuleKillBase
// 0x0000 (0x0030 - 0x0030)
class UParticleModuleKillBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleKillBase"));
		return ptr;
	}

};


// Class Engine.ParticleModuleKillBox
// 0x00C8 (0x00F8 - 0x0030)
class UParticleModuleKillBox : public UParticleModuleKillBase
{
public:
	struct FRawDistributionVector                      LowerLeftCorner;                                          // 0x0030(0x0060) (Edit)
	struct FRawDistributionVector                      UpperRightCorner;                                         // 0x0090(0x0060) (Edit)
	unsigned char                                      bAbsolute : 1;                                            // 0x00F0(0x0001) (Edit)
	unsigned char                                      bKillInside : 1;                                          // 0x00F0(0x0001) (Edit)
	unsigned char                                      bAxisAlignedAndFixedSize : 1;                             // 0x00F0(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00F1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleKillBox"));
		return ptr;
	}

};


// Class Engine.ParticleModuleKillHeight
// 0x0038 (0x0068 - 0x0030)
class UParticleModuleKillHeight : public UParticleModuleKillBase
{
public:
	struct FRawDistributionFloat                       Height;                                                   // 0x0030(0x0030) (Edit)
	unsigned char                                      bAbsolute : 1;                                            // 0x0060(0x0001) (Edit)
	unsigned char                                      bFloor : 1;                                               // 0x0060(0x0001) (Edit)
	unsigned char                                      bApplyPSysScale : 1;                                      // 0x0060(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0061(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleKillHeight"));
		return ptr;
	}

};


// Class Engine.ParticleModuleLifetimeBase
// 0x0000 (0x0030 - 0x0030)
class UParticleModuleLifetimeBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleLifetimeBase"));
		return ptr;
	}

};


// Class Engine.ParticleModuleLifetime
// 0x0030 (0x0060 - 0x0030)
class UParticleModuleLifetime : public UParticleModuleLifetimeBase
{
public:
	struct FRawDistributionFloat                       Lifetime;                                                 // 0x0030(0x0030) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleLifetime"));
		return ptr;
	}

};


// Class Engine.ParticleModuleLifetime_Seeded
// 0x0020 (0x0080 - 0x0060)
class UParticleModuleLifetime_Seeded : public UParticleModuleLifetime
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                           // 0x0060(0x0020) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleLifetime_Seeded"));
		return ptr;
	}

};


// Class Engine.ParticleModuleLightBase
// 0x0000 (0x0030 - 0x0030)
class UParticleModuleLightBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleLightBase"));
		return ptr;
	}

};


// Class Engine.ParticleModuleLight
// 0x0110 (0x0140 - 0x0030)
class UParticleModuleLight : public UParticleModuleLightBase
{
public:
	bool                                               bUseInverseSquaredFalloff;                                // 0x0030(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bAffectsTranslucency;                                     // 0x0031(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0032(0x0002) MISSED OFFSET
	unsigned char                                      bOverrideInverseExposureBlend : 1;                        // 0x0034(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0035(0x0003) MISSED OFFSET
	bool                                               bPreviewLightRadius;                                      // 0x0038(0x0001) (Edit, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0039(0x0003) MISSED OFFSET
	float                                              SpawnFraction;                                            // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FRawDistributionVector                      ColorScaleOverLife;                                       // 0x0040(0x0060) (Edit)
	struct FRawDistributionFloat                       BrightnessOverLife;                                       // 0x00A0(0x0030) (Edit)
	struct FRawDistributionFloat                       RadiusScale;                                              // 0x00D0(0x0030) (Edit)
	struct FRawDistributionFloat                       LightExponent;                                            // 0x0100(0x0030) (Edit)
	float                                              InverseExposureBlend;                                     // 0x0130(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FLightingChannels                           LightingChannels;                                         // 0x0134(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0135(0x0003) MISSED OFFSET
	float                                              VolumetricScatteringIntensity;                            // 0x0138(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bHighQualityLights;                                       // 0x013C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bShadowCastingLights;                                     // 0x013D(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x2];                                       // 0x013E(0x0002) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleLight"));
		return ptr;
	}

};


// Class Engine.ParticleModuleLight_Seeded
// 0x0020 (0x0160 - 0x0140)
class UParticleModuleLight_Seeded : public UParticleModuleLight
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                           // 0x0140(0x0020) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleLight_Seeded"));
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationBase
// 0x0000 (0x0030 - 0x0030)
class UParticleModuleLocationBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleLocationBase"));
		return ptr;
	}

};


// Class Engine.ParticleModuleLocation
// 0x0068 (0x0098 - 0x0030)
class UParticleModuleLocation : public UParticleModuleLocationBase
{
public:
	struct FRawDistributionVector                      StartLocation;                                            // 0x0030(0x0060) (Edit)
	float                                              DistributeOverNPoints;                                    // 0x0090(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DistributeThreshold;                                      // 0x0094(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleLocation"));
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationBoneSocket
// 0x0050 (0x0080 - 0x0030)
class UParticleModuleLocationBoneSocket : public UParticleModuleLocationBase
{
public:
	TEnumAsByte<ELocationBoneSocketSource>             SourceType;                                               // 0x0030(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0031(0x0007) MISSED OFFSET
	struct FVector                                     UniversalOffset;                                          // 0x0038(0x0018) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<struct FLocationBoneSocketInfo>             SourceLocations;                                          // 0x0050(0x0010) (Edit, ZeroConstructor)
	TEnumAsByte<ELocationBoneSocketSelectionMethod>    SelectionMethod;                                          // 0x0060(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0061(0x0003) MISSED OFFSET
	unsigned char                                      bUpdatePositionEachFrame : 1;                             // 0x0064(0x0001) (Edit)
	unsigned char                                      bOrientMeshEmitters : 1;                                  // 0x0064(0x0001)
	unsigned char                                      bInheritBoneVelocity : 1;                                 // 0x0064(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0065(0x0003) MISSED OFFSET
	float                                              InheritVelocityScale;                                     // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FName                                       SkelMeshActorParamName;                                   // 0x006C(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                NumPreSelectedIndices;                                    // 0x0074(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0078(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleLocationBoneSocket"));
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationDirect
// 0x0180 (0x01B0 - 0x0030)
class UParticleModuleLocationDirect : public UParticleModuleLocationBase
{
public:
	struct FRawDistributionVector                      Location;                                                 // 0x0030(0x0060) (Edit)
	struct FRawDistributionVector                      LocationOffset;                                           // 0x0090(0x0060) (Edit)
	struct FRawDistributionVector                      ScaleFactor;                                              // 0x00F0(0x0060) (Edit)
	struct FRawDistributionVector                      Direction;                                                // 0x0150(0x0060) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleLocationDirect"));
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationEmitter
// 0x0020 (0x0050 - 0x0030)
class UParticleModuleLocationEmitter : public UParticleModuleLocationBase
{
public:
	struct FName                                       EmitterName;                                              // 0x0030(0x0008) (Edit, ExportObject, ZeroConstructor, NoClear, IsPlainOldData)
	TEnumAsByte<ELocationEmitterSelectionMethod>       SelectionMethod;                                          // 0x0038(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0039(0x0003) MISSED OFFSET
	unsigned char                                      InheritSourceVelocity : 1;                                // 0x003C(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x003D(0x0003) MISSED OFFSET
	float                                              InheritSourceVelocityScale;                               // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bInheritSourceRotation : 1;                               // 0x0044(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0045(0x0003) MISSED OFFSET
	float                                              InheritSourceRotationScale;                               // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x004C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleLocationEmitter"));
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationEmitterDirect
// 0x0008 (0x0038 - 0x0030)
class UParticleModuleLocationEmitterDirect : public UParticleModuleLocationBase
{
public:
	struct FName                                       EmitterName;                                              // 0x0030(0x0008) (Edit, ExportObject, ZeroConstructor, NoClear, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleLocationEmitterDirect"));
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationPrimitiveBase
// 0x0098 (0x00C8 - 0x0030)
class UParticleModuleLocationPrimitiveBase : public UParticleModuleLocationBase
{
public:
	unsigned char                                      Positive_X : 1;                                           // 0x0030(0x0001) (Edit)
	unsigned char                                      Positive_Y : 1;                                           // 0x0030(0x0001) (Edit)
	unsigned char                                      Positive_Z : 1;                                           // 0x0030(0x0001) (Edit)
	unsigned char                                      Negative_X : 1;                                           // 0x0030(0x0001) (Edit)
	unsigned char                                      Negative_Y : 1;                                           // 0x0030(0x0001) (Edit)
	unsigned char                                      Negative_Z : 1;                                           // 0x0030(0x0001) (Edit)
	unsigned char                                      SurfaceOnly : 1;                                          // 0x0030(0x0001) (Edit)
	unsigned char                                      Velocity : 1;                                             // 0x0030(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0031(0x0007) MISSED OFFSET
	struct FRawDistributionFloat                       VelocityScale;                                            // 0x0038(0x0030) (Edit)
	struct FRawDistributionVector                      StartLocation;                                            // 0x0068(0x0060) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleLocationPrimitiveBase"));
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationPrimitiveCylinder
// 0x0070 (0x0138 - 0x00C8)
class UParticleModuleLocationPrimitiveCylinder : public UParticleModuleLocationPrimitiveBase
{
public:
	unsigned char                                      RadialVelocity : 1;                                       // 0x00C8(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00C9(0x0007) MISSED OFFSET
	struct FRawDistributionFloat                       StartRadius;                                              // 0x00D0(0x0030) (Edit)
	struct FRawDistributionFloat                       StartHeight;                                              // 0x0100(0x0030) (Edit)
	TEnumAsByte<ECylinderHeightAxis>                   HeightAxis;                                               // 0x0130(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0131(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleLocationPrimitiveCylinder"));
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationPrimitiveCylinder_Seeded
// 0x0020 (0x0158 - 0x0138)
class UParticleModuleLocationPrimitiveCylinder_Seeded : public UParticleModuleLocationPrimitiveCylinder
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                           // 0x0138(0x0020) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleLocationPrimitiveCylinder_Seeded"));
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationPrimitiveSphere
// 0x0030 (0x00F8 - 0x00C8)
class UParticleModuleLocationPrimitiveSphere : public UParticleModuleLocationPrimitiveBase
{
public:
	struct FRawDistributionFloat                       StartRadius;                                              // 0x00C8(0x0030) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleLocationPrimitiveSphere"));
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationPrimitiveSphere_Seeded
// 0x0020 (0x0118 - 0x00F8)
class UParticleModuleLocationPrimitiveSphere_Seeded : public UParticleModuleLocationPrimitiveSphere
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                           // 0x00F8(0x0020) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleLocationPrimitiveSphere_Seeded"));
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationPrimitiveTriangle
// 0x00F0 (0x0120 - 0x0030)
class UParticleModuleLocationPrimitiveTriangle : public UParticleModuleLocationBase
{
public:
	struct FRawDistributionVector                      StartOffset;                                              // 0x0030(0x0060) (Edit)
	struct FRawDistributionFloat                       Height;                                                   // 0x0090(0x0030) (Edit)
	struct FRawDistributionFloat                       Angle;                                                    // 0x00C0(0x0030) (Edit)
	struct FRawDistributionFloat                       Thickness;                                                // 0x00F0(0x0030) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleLocationPrimitiveTriangle"));
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationSkelVertSurface
// 0x0080 (0x00B0 - 0x0030)
class UParticleModuleLocationSkelVertSurface : public UParticleModuleLocationBase
{
public:
	TEnumAsByte<ELocationSkelVertSurfaceSource>        SourceType;                                               // 0x0030(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0031(0x0007) MISSED OFFSET
	struct FVector                                     UniversalOffset;                                          // 0x0038(0x0018) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUpdatePositionEachFrame : 1;                             // 0x0050(0x0001) (Edit)
	unsigned char                                      bOrientMeshEmitters : 1;                                  // 0x0050(0x0001) (Edit)
	unsigned char                                      bInheritBoneVelocity : 1;                                 // 0x0050(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0051(0x0003) MISSED OFFSET
	float                                              InheritVelocityScale;                                     // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FName                                       SkelMeshActorParamName;                                   // 0x0058(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<struct FName>                               ValidAssociatedBones;                                     // 0x0060(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      bEnforceNormalCheck : 1;                                  // 0x0070(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0071(0x0007) MISSED OFFSET
	struct FVector                                     NormalToCompare;                                          // 0x0078(0x0018) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              NormalCheckToleranceDegrees;                              // 0x0090(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              NormalCheckTolerance;                                     // 0x0094(0x0004) (ZeroConstructor, IsPlainOldData)
	TArray<int>                                        ValidMaterialIndices;                                     // 0x0098(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      bInheritVertexColor : 1;                                  // 0x00A8(0x0001) (Edit)
	unsigned char                                      bInheritUV : 1;                                           // 0x00A8(0x0001) (Edit)
	unsigned char                                      UnknownData03[0x3];                                       // 0x00A9(0x0003) MISSED OFFSET
	uint32_t                                           InheritUVChannel;                                         // 0x00AC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleLocationSkelVertSurface"));
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationWorldOffset
// 0x0000 (0x0098 - 0x0098)
class UParticleModuleLocationWorldOffset : public UParticleModuleLocation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleLocationWorldOffset"));
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationWorldOffset_Seeded
// 0x0020 (0x00B8 - 0x0098)
class UParticleModuleLocationWorldOffset_Seeded : public UParticleModuleLocationWorldOffset
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                           // 0x0098(0x0020) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleLocationWorldOffset_Seeded"));
		return ptr;
	}

};


// Class Engine.ParticleModuleLocation_Seeded
// 0x0020 (0x00B8 - 0x0098)
class UParticleModuleLocation_Seeded : public UParticleModuleLocation
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                           // 0x0098(0x0020) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleLocation_Seeded"));
		return ptr;
	}

};


// Class Engine.ParticleModuleMaterialBase
// 0x0000 (0x0030 - 0x0030)
class UParticleModuleMaterialBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleMaterialBase"));
		return ptr;
	}

};


// Class Engine.ParticleModuleMeshMaterial
// 0x0010 (0x0040 - 0x0030)
class UParticleModuleMeshMaterial : public UParticleModuleMaterialBase
{
public:
	TArray<class UMaterialInterface*>                  MeshMaterials;                                            // 0x0030(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleMeshMaterial"));
		return ptr;
	}

};


// Class Engine.ParticleModuleRotationBase
// 0x0000 (0x0030 - 0x0030)
class UParticleModuleRotationBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleRotationBase"));
		return ptr;
	}

};


// Class Engine.ParticleModuleMeshRotation
// 0x0068 (0x0098 - 0x0030)
class UParticleModuleMeshRotation : public UParticleModuleRotationBase
{
public:
	struct FRawDistributionVector                      StartRotation;                                            // 0x0030(0x0060) (Edit)
	unsigned char                                      bInheritParent : 1;                                       // 0x0090(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0091(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleMeshRotation"));
		return ptr;
	}

};


// Class Engine.ParticleModuleRotationRateBase
// 0x0000 (0x0030 - 0x0030)
class UParticleModuleRotationRateBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleRotationRateBase"));
		return ptr;
	}

};


// Class Engine.ParticleModuleMeshRotationRate
// 0x0060 (0x0090 - 0x0030)
class UParticleModuleMeshRotationRate : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionVector                      StartRotationRate;                                        // 0x0030(0x0060) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleMeshRotationRate"));
		return ptr;
	}

};


// Class Engine.ParticleModuleMeshRotationRateMultiplyLife
// 0x0060 (0x0090 - 0x0030)
class UParticleModuleMeshRotationRateMultiplyLife : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionVector                      LifeMultiplier;                                           // 0x0030(0x0060) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleMeshRotationRateMultiplyLife"));
		return ptr;
	}

};


// Class Engine.ParticleModuleMeshRotationRateOverLife
// 0x0068 (0x0098 - 0x0030)
class UParticleModuleMeshRotationRateOverLife : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionVector                      RotRate;                                                  // 0x0030(0x0060) (Edit)
	unsigned char                                      bScaleRotRate : 1;                                        // 0x0090(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0091(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleMeshRotationRateOverLife"));
		return ptr;
	}

};


// Class Engine.ParticleModuleMeshRotationRate_Seeded
// 0x0020 (0x00B0 - 0x0090)
class UParticleModuleMeshRotationRate_Seeded : public UParticleModuleMeshRotationRate
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                           // 0x0090(0x0020) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleMeshRotationRate_Seeded"));
		return ptr;
	}

};


// Class Engine.ParticleModuleMeshRotation_Seeded
// 0x0020 (0x00B8 - 0x0098)
class UParticleModuleMeshRotation_Seeded : public UParticleModuleMeshRotation
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                           // 0x0098(0x0020) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleMeshRotation_Seeded"));
		return ptr;
	}

};


// Class Engine.ParticleModuleOrbitBase
// 0x0008 (0x0038 - 0x0030)
class UParticleModuleOrbitBase : public UParticleModule
{
public:
	unsigned char                                      bUseEmitterTime : 1;                                      // 0x0030(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0031(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleOrbitBase"));
		return ptr;
	}

};


// Class Engine.ParticleModuleOrbit
// 0x0140 (0x0178 - 0x0038)
class UParticleModuleOrbit : public UParticleModuleOrbitBase
{
public:
	TEnumAsByte<EOrbitChainMode>                       ChainMode;                                                // 0x0038(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0039(0x0007) MISSED OFFSET
	struct FRawDistributionVector                      OffsetAmount;                                             // 0x0040(0x0060) (Edit)
	struct FOrbitOptions                               OffsetOptions;                                            // 0x00A0(0x0004) (Edit)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00A4(0x0004) MISSED OFFSET
	struct FRawDistributionVector                      RotationAmount;                                           // 0x00A8(0x0060) (Edit)
	struct FOrbitOptions                               RotationOptions;                                          // 0x0108(0x0004) (Edit)
	unsigned char                                      UnknownData02[0x4];                                       // 0x010C(0x0004) MISSED OFFSET
	struct FRawDistributionVector                      RotationRateAmount;                                       // 0x0110(0x0060) (Edit)
	struct FOrbitOptions                               RotationRateOptions;                                      // 0x0170(0x0004) (Edit)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0174(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleOrbit"));
		return ptr;
	}

};


// Class Engine.ParticleModuleOrientationBase
// 0x0000 (0x0030 - 0x0030)
class UParticleModuleOrientationBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleOrientationBase"));
		return ptr;
	}

};


// Class Engine.ParticleModuleOrientationAxisLock
// 0x0008 (0x0038 - 0x0030)
class UParticleModuleOrientationAxisLock : public UParticleModuleOrientationBase
{
public:
	TEnumAsByte<EParticleAxisLock>                     LockAxisFlags;                                            // 0x0030(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0031(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleOrientationAxisLock"));
		return ptr;
	}

};


// Class Engine.ParticleModuleParameterBase
// 0x0000 (0x0030 - 0x0030)
class UParticleModuleParameterBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleParameterBase"));
		return ptr;
	}

};


// Class Engine.ParticleModuleParameterDynamic
// 0x0018 (0x0048 - 0x0030)
class UParticleModuleParameterDynamic : public UParticleModuleParameterBase
{
public:
	TArray<struct FEmitterDynamicParameter>            DynamicParams;                                            // 0x0030(0x0010) (Edit, EditFixedSize, ZeroConstructor)
	int                                                UpdateFlags;                                              // 0x0040(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUsesVelocity : 1;                                        // 0x0044(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0045(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleParameterDynamic"));
		return ptr;
	}

};


// Class Engine.ParticleModuleParameterDynamic_Seeded
// 0x0020 (0x0068 - 0x0048)
class UParticleModuleParameterDynamic_Seeded : public UParticleModuleParameterDynamic
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                           // 0x0048(0x0020) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleParameterDynamic_Seeded"));
		return ptr;
	}

};


// Class Engine.ParticleModulePivotOffset
// 0x0010 (0x0040 - 0x0030)
class UParticleModulePivotOffset : public UParticleModuleLocationBase
{
public:
	struct FVector2D                                   PivotOffset;                                              // 0x0030(0x0010) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModulePivotOffset"));
		return ptr;
	}

};


// Class Engine.ParticleModuleRequired
// 0x0148 (0x0178 - 0x0030)
class UParticleModuleRequired : public UParticleModule
{
public:
	class UMaterialInterface*                          Material;                                                 // 0x0030(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MinFacingCameraBlendDistance;                             // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxFacingCameraBlendDistance;                             // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector                                     EmitterOrigin;                                            // 0x0040(0x0018) (Edit, ZeroConstructor, IsPlainOldData)
	struct FRotator                                    EmitterRotation;                                          // 0x0058(0x0018) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EParticleScreenAlignment>              ScreenAlignment;                                          // 0x0070(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUseLocalSpace : 1;                                       // 0x0071(0x0001) (Edit)
	unsigned char                                      bKillOnDeactivate : 1;                                    // 0x0071(0x0001) (Edit)
	unsigned char                                      bKillOnCompleted : 1;                                     // 0x0071(0x0001) (Edit)
	TEnumAsByte<EParticleSortMode>                     SortMode;                                                 // 0x0072(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUseLegacyEmitterTime : 1;                                // 0x0073(0x0001) (Edit)
	unsigned char                                      bRemoveHMDRoll : 1;                                       // 0x0073(0x0001) (Edit)
	unsigned char                                      bSupportLargeWorldCoordinates : 1;                        // 0x0073(0x0001) (Edit)
	unsigned char                                      bEmitterDurationUseRange : 1;                             // 0x0073(0x0001) (Edit)
	float                                              EmitterDuration;                                          // 0x0074(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FRawDistributionFloat                       SpawnRate;                                                // 0x0078(0x0030)
	TArray<struct FParticleBurst>                      BurstList;                                                // 0x00A8(0x0010) (ExportObject, ZeroConstructor, NoClear)
	float                                              EmitterDelay;                                             // 0x00B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              EmitterDelayLow;                                          // 0x00BC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bDelayFirstLoopOnly : 1;                                  // 0x00C0(0x0001) (Edit)
	TEnumAsByte<EParticleSubUVInterpMethod>            InterpolationMethod;                                      // 0x00C1(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bScaleUV : 1;                                             // 0x00C2(0x0001) (Edit)
	unsigned char                                      bEmitterDelayUseRange : 1;                                // 0x00C2(0x0001) (Edit)
	TEnumAsByte<EParticleBurstMethod>                  ParticleBurstMethod;                                      // 0x00C3(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bOverrideSystemMacroUV : 1;                               // 0x00C4(0x0001) (Edit)
	unsigned char                                      bUseMaxDrawCount : 1;                                     // 0x00C4(0x0001) (Edit)
	TEnumAsByte<EOpacitySourceMode>                    OpacitySourceMode;                                        // 0x00C5(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EEmitterNormalsMode>                   EmitterNormalsMode;                                       // 0x00C6(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bOrbitModuleAffectsVelocityAlignment : 1;                 // 0x00C7(0x0001) (Edit)
	int                                                SubImages_Horizontal;                                     // 0x00C8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                SubImages_Vertical;                                       // 0x00CC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              RandomImageTime;                                          // 0x00D0(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                RandomImageChanges;                                       // 0x00D4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector                                     MacroUVPosition;                                          // 0x00D8(0x0018) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MacroUVRadius;                                            // 0x00F0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	enum class EParticleUVFlipMode                     UVFlippingMode;                                           // 0x00F4(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ESubUVBoundingVertexCount>             BoundingMode;                                             // 0x00F5(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bDurationRecalcEachLoop : 1;                              // 0x00F6(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x1];                                       // 0x00F7(0x0001) MISSED OFFSET
	struct FVector                                     NormalsSphereCenter;                                      // 0x00F8(0x0018) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AlphaThreshold;                                           // 0x0110(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                EmitterLoops;                                             // 0x0114(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  CutoutTexture;                                            // 0x0118(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                MaxDrawCount;                                             // 0x0120(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              EmitterDurationLow;                                       // 0x0124(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector                                     NormalsCylinderDirection;                                 // 0x0128(0x0018) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<struct FName>                               NamedMaterialOverrides;                                   // 0x0140(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData01[0x28];                                      // 0x0150(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleRequired"));
		return ptr;
	}

};


// Class Engine.ParticleModuleRotation
// 0x0030 (0x0060 - 0x0030)
class UParticleModuleRotation : public UParticleModuleRotationBase
{
public:
	struct FRawDistributionFloat                       StartRotation;                                            // 0x0030(0x0030) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleRotation"));
		return ptr;
	}

};


// Class Engine.ParticleModuleRotationOverLifetime
// 0x0038 (0x0068 - 0x0030)
class UParticleModuleRotationOverLifetime : public UParticleModuleRotationBase
{
public:
	struct FRawDistributionFloat                       RotationOverLife;                                         // 0x0030(0x0030) (Edit)
	unsigned char                                      Scale : 1;                                                // 0x0060(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0061(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleRotationOverLifetime"));
		return ptr;
	}

};


// Class Engine.ParticleModuleRotationRate
// 0x0030 (0x0060 - 0x0030)
class UParticleModuleRotationRate : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionFloat                       StartRotationRate;                                        // 0x0030(0x0030) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleRotationRate"));
		return ptr;
	}

};


// Class Engine.ParticleModuleRotationRateMultiplyLife
// 0x0030 (0x0060 - 0x0030)
class UParticleModuleRotationRateMultiplyLife : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionFloat                       LifeMultiplier;                                           // 0x0030(0x0030) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleRotationRateMultiplyLife"));
		return ptr;
	}

};


// Class Engine.ParticleModuleRotationRate_Seeded
// 0x0020 (0x0080 - 0x0060)
class UParticleModuleRotationRate_Seeded : public UParticleModuleRotationRate
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                           // 0x0060(0x0020) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleRotationRate_Seeded"));
		return ptr;
	}

};


// Class Engine.ParticleModuleRotation_Seeded
// 0x0020 (0x0080 - 0x0060)
class UParticleModuleRotation_Seeded : public UParticleModuleRotation
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                           // 0x0060(0x0020) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleRotation_Seeded"));
		return ptr;
	}

};


// Class Engine.ParticleModuleSizeBase
// 0x0000 (0x0030 - 0x0030)
class UParticleModuleSizeBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleSizeBase"));
		return ptr;
	}

};


// Class Engine.ParticleModuleSize
// 0x0060 (0x0090 - 0x0030)
class UParticleModuleSize : public UParticleModuleSizeBase
{
public:
	struct FRawDistributionVector                      StartSize;                                                // 0x0030(0x0060) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleSize"));
		return ptr;
	}

};


// Class Engine.ParticleModuleSizeMultiplyLife
// 0x0068 (0x0098 - 0x0030)
class UParticleModuleSizeMultiplyLife : public UParticleModuleSizeBase
{
public:
	struct FRawDistributionVector                      LifeMultiplier;                                           // 0x0030(0x0060) (Edit)
	unsigned char                                      MultiplyX : 1;                                            // 0x0090(0x0001) (Edit)
	unsigned char                                      MultiplyY : 1;                                            // 0x0090(0x0001) (Edit)
	unsigned char                                      MultiplyZ : 1;                                            // 0x0090(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0091(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleSizeMultiplyLife"));
		return ptr;
	}

};


// Class Engine.ParticleModuleSizeScale
// 0x0068 (0x0098 - 0x0030)
class UParticleModuleSizeScale : public UParticleModuleSizeBase
{
public:
	struct FRawDistributionVector                      SizeScale;                                                // 0x0030(0x0060) (Edit)
	unsigned char                                      EnableX : 1;                                              // 0x0090(0x0001) (Edit)
	unsigned char                                      EnableY : 1;                                              // 0x0090(0x0001) (Edit)
	unsigned char                                      EnableZ : 1;                                              // 0x0090(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0091(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleSizeScale"));
		return ptr;
	}

};


// Class Engine.ParticleModuleSizeScaleBySpeed
// 0x0020 (0x0050 - 0x0030)
class UParticleModuleSizeScaleBySpeed : public UParticleModuleSizeBase
{
public:
	struct FVector2D                                   SpeedScale;                                               // 0x0030(0x0010) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector2D                                   MaxScale;                                                 // 0x0040(0x0010) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleSizeScaleBySpeed"));
		return ptr;
	}

};


// Class Engine.ParticleModuleSize_Seeded
// 0x0020 (0x00B0 - 0x0090)
class UParticleModuleSize_Seeded : public UParticleModuleSize
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                           // 0x0090(0x0020) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleSize_Seeded"));
		return ptr;
	}

};


// Class Engine.ParticleModuleSourceMovement
// 0x0060 (0x0090 - 0x0030)
class UParticleModuleSourceMovement : public UParticleModuleLocationBase
{
public:
	struct FRawDistributionVector                      SourceMovementScale;                                      // 0x0030(0x0060) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleSourceMovement"));
		return ptr;
	}

};


// Class Engine.ParticleModuleSpawnBase
// 0x0008 (0x0038 - 0x0030)
class UParticleModuleSpawnBase : public UParticleModule
{
public:
	unsigned char                                      bProcessSpawnRate : 1;                                    // 0x0030(0x0001) (Edit)
	unsigned char                                      bProcessBurstList : 1;                                    // 0x0030(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0031(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleSpawnBase"));
		return ptr;
	}

};


// Class Engine.ParticleModuleSpawn
// 0x00B0 (0x00E8 - 0x0038)
class UParticleModuleSpawn : public UParticleModuleSpawnBase
{
public:
	struct FRawDistributionFloat                       Rate;                                                     // 0x0038(0x0030) (Edit)
	struct FRawDistributionFloat                       RateScale;                                                // 0x0068(0x0030) (Edit)
	TEnumAsByte<EParticleBurstMethod>                  ParticleBurstMethod;                                      // 0x0098(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0099(0x0007) MISSED OFFSET
	TArray<struct FParticleBurst>                      BurstList;                                                // 0x00A0(0x0010) (Edit, ExportObject, ZeroConstructor, NoClear)
	struct FRawDistributionFloat                       BurstScale;                                               // 0x00B0(0x0030) (Edit)
	unsigned char                                      bApplyGlobalSpawnRateScale : 1;                           // 0x00E0(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x7];                                       // 0x00E1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleSpawn"));
		return ptr;
	}

};


// Class Engine.ParticleModuleSpawnPerUnit
// 0x0040 (0x0078 - 0x0038)
class UParticleModuleSpawnPerUnit : public UParticleModuleSpawnBase
{
public:
	float                                              UnitScalar;                                               // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MovementTolerance;                                        // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FRawDistributionFloat                       SpawnPerUnit;                                             // 0x0040(0x0030) (Edit)
	float                                              MaxFrameDistance;                                         // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bIgnoreSpawnRateWhenMoving : 1;                           // 0x0074(0x0001) (Edit)
	unsigned char                                      bIgnoreMovementAlongX : 1;                                // 0x0074(0x0001) (Edit)
	unsigned char                                      bIgnoreMovementAlongY : 1;                                // 0x0074(0x0001) (Edit)
	unsigned char                                      bIgnoreMovementAlongZ : 1;                                // 0x0074(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0075(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleSpawnPerUnit"));
		return ptr;
	}

};


// Class Engine.ParticleModuleSubUVBase
// 0x0000 (0x0030 - 0x0030)
class UParticleModuleSubUVBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleSubUVBase"));
		return ptr;
	}

};


// Class Engine.ParticleModuleSubUV
// 0x0040 (0x0070 - 0x0030)
class UParticleModuleSubUV : public UParticleModuleSubUVBase
{
public:
	class USubUVAnimation*                             Animation;                                                // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FRawDistributionFloat                       SubImageIndex;                                            // 0x0038(0x0030) (Edit)
	unsigned char                                      bUseRealTime : 1;                                         // 0x0068(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0069(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleSubUV"));
		return ptr;
	}

};


// Class Engine.ParticleModuleSubUVMovie
// 0x0040 (0x00B0 - 0x0070)
class UParticleModuleSubUVMovie : public UParticleModuleSubUV
{
public:
	unsigned char                                      bUseEmitterTime : 1;                                      // 0x0070(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0071(0x0007) MISSED OFFSET
	struct FRawDistributionFloat                       FrameRate;                                                // 0x0078(0x0030) (Edit)
	int                                                StartingFrame;                                            // 0x00A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00AC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleSubUVMovie"));
		return ptr;
	}

};


// Class Engine.ParticleModuleTrailBase
// 0x0000 (0x0030 - 0x0030)
class UParticleModuleTrailBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleTrailBase"));
		return ptr;
	}

};


// Class Engine.ParticleModuleTrailSource
// 0x0060 (0x0090 - 0x0030)
class UParticleModuleTrailSource : public UParticleModuleTrailBase
{
public:
	TEnumAsByte<ETrail2SourceMethod>                   SourceMethod;                                             // 0x0030(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0031(0x0003) MISSED OFFSET
	struct FName                                       SourceName;                                               // 0x0034(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x003C(0x0004) MISSED OFFSET
	struct FRawDistributionFloat                       SourceStrength;                                           // 0x0040(0x0030) (Edit)
	unsigned char                                      bLockSourceStength : 1;                                   // 0x0070(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0071(0x0003) MISSED OFFSET
	int                                                SourceOffsetCount;                                        // 0x0074(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<struct FVector>                             SourceOffsetDefaults;                                     // 0x0078(0x0010) (Edit, EditFixedSize, ZeroConstructor)
	TEnumAsByte<EParticleSourceSelectionMethod>        SelectionMethod;                                          // 0x0088(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0089(0x0003) MISSED OFFSET
	unsigned char                                      bInheritRotation : 1;                                     // 0x008C(0x0001) (Edit)
	unsigned char                                      UnknownData04[0x3];                                       // 0x008D(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleTrailSource"));
		return ptr;
	}

};


// Class Engine.ParticleModuleTypeDataBase
// 0x0000 (0x0030 - 0x0030)
class UParticleModuleTypeDataBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleTypeDataBase"));
		return ptr;
	}

};


// Class Engine.ParticleModuleTypeDataAnimTrail
// 0x0018 (0x0048 - 0x0030)
class UParticleModuleTypeDataAnimTrail : public UParticleModuleTypeDataBase
{
public:
	unsigned char                                      bDeadTrailsOnDeactivate : 1;                              // 0x0030(0x0001) (Edit)
	unsigned char                                      bEnablePreviousTangentRecalculation : 1;                  // 0x0030(0x0001) (Edit)
	unsigned char                                      bTangentRecalculationEveryFrame : 1;                      // 0x0030(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0031(0x0003) MISSED OFFSET
	float                                              TilingDistance;                                           // 0x0034(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DistanceTessellationStepSize;                             // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TangentTessellationStepSize;                              // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              WidthTessellationStepSize;                                // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0044(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleTypeDataAnimTrail"));
		return ptr;
	}

};


// Class Engine.ParticleModuleTypeDataBeam2
// 0x0120 (0x0150 - 0x0030)
class UParticleModuleTypeDataBeam2 : public UParticleModuleTypeDataBase
{
public:
	TEnumAsByte<EBeam2Method>                          BeamMethod;                                               // 0x0030(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0031(0x0003) MISSED OFFSET
	int                                                TextureTile;                                              // 0x0034(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TextureTileDistance;                                      // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                Sheets;                                                   // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                MaxBeamCount;                                             // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Speed;                                                    // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                InterpolationPoints;                                      // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bAlwaysOn : 1;                                            // 0x004C(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x004D(0x0003) MISSED OFFSET
	int                                                UpVectorStepSize;                                         // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FName                                       BranchParentName;                                         // 0x0054(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x005C(0x0004) MISSED OFFSET
	struct FRawDistributionFloat                       Distance;                                                 // 0x0060(0x0030) (Edit)
	TEnumAsByte<EBeamTaperMethod>                      TaperMethod;                                              // 0x0090(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x7];                                       // 0x0091(0x0007) MISSED OFFSET
	struct FRawDistributionFloat                       TaperFactor;                                              // 0x0098(0x0030) (Edit)
	struct FRawDistributionFloat                       TaperScale;                                               // 0x00C8(0x0030) (Edit)
	unsigned char                                      RenderGeometry : 1;                                       // 0x00F8(0x0001) (Edit)
	unsigned char                                      RenderDirectLine : 1;                                     // 0x00F8(0x0001) (Edit)
	unsigned char                                      RenderLines : 1;                                          // 0x00F8(0x0001) (Edit)
	unsigned char                                      RenderTessellation : 1;                                   // 0x00F8(0x0001) (Edit)
	unsigned char                                      UnknownData04[0x57];                                      // 0x00F9(0x0057) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleTypeDataBeam2"));
		return ptr;
	}

};


// Class Engine.ParticleModuleTypeDataGpu
// 0x05A0 (0x05D0 - 0x0030)
class UParticleModuleTypeDataGpu : public UParticleModuleTypeDataBase
{
public:
	struct FGPUSpriteEmitterInfo                       EmitterInfo;                                              // 0x0030(0x0350)
	struct FGPUSpriteResourceData                      ResourceData;                                             // 0x0380(0x0240)
	float                                              CameraMotionBlurAmount;                                   // 0x05C0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bClearExistingParticlesOnInit : 1;                        // 0x05C4(0x0001) (Edit)
	unsigned char                                      UnknownData00[0xB];                                       // 0x05C5(0x000B) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleTypeDataGpu"));
		return ptr;
	}

};


// Class Engine.ParticleModuleTypeDataMesh
// 0x0080 (0x00B0 - 0x0030)
class UParticleModuleTypeDataMesh : public UParticleModuleTypeDataBase
{
public:
	class UStaticMesh*                                 Mesh;                                                     // 0x0030(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0038(0x0008) MISSED OFFSET
	float                                              LODSizeScale;                                             // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUseStaticMeshLODs : 1;                                   // 0x0044(0x0001) (Edit)
	unsigned char                                      CastShadows : 1;                                          // 0x0044(0x0001)
	unsigned char                                      DoCollisions : 1;                                         // 0x0044(0x0001)
	TEnumAsByte<EMeshScreenAlignment>                  MeshAlignment;                                            // 0x0045(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bOverrideMaterial : 1;                                    // 0x0046(0x0001) (Edit)
	unsigned char                                      bOverrideDefaultMotionBlurSettings : 1;                   // 0x0046(0x0001) (Edit)
	unsigned char                                      bEnableMotionBlur : 1;                                    // 0x0046(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x1];                                       // 0x0047(0x0001) MISSED OFFSET
	struct FRawDistributionVector                      RollPitchYawRange;                                        // 0x0048(0x0060) (Edit)
	TEnumAsByte<EParticleAxisLock>                     AxisLockOption;                                           // 0x00A8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bCameraFacing : 1;                                        // 0x00A9(0x0001) (Edit)
	TEnumAsByte<EMeshCameraFacingUpAxis>               CameraFacingUpAxisOption;                                 // 0x00AA(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData)
	TEnumAsByte<EMeshCameraFacingOptions>              CameraFacingOption;                                       // 0x00AB(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bApplyParticleRotationAsSpin : 1;                         // 0x00AC(0x0001) (Edit)
	unsigned char                                      bFaceCameraDirectionRatherThanPosition : 1;               // 0x00AC(0x0001) (Edit)
	unsigned char                                      bCollisionsConsiderPartilceSize : 1;                      // 0x00AC(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x3];                                       // 0x00AD(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleTypeDataMesh"));
		return ptr;
	}

};


// Class Engine.ParticleModuleTypeDataRibbon
// 0x0030 (0x0060 - 0x0030)
class UParticleModuleTypeDataRibbon : public UParticleModuleTypeDataBase
{
public:
	int                                                MaxTessellationBetweenParticles;                          // 0x0030(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                SheetsPerTrail;                                           // 0x0034(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                MaxTrailCount;                                            // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                MaxParticleInTrailCount;                                  // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bDeadTrailsOnDeactivate : 1;                              // 0x0040(0x0001) (Edit)
	unsigned char                                      bDeadTrailsOnSourceLoss : 1;                              // 0x0040(0x0001) (Edit)
	unsigned char                                      bClipSourceSegement : 1;                                  // 0x0040(0x0001) (Edit)
	unsigned char                                      bEnablePreviousTangentRecalculation : 1;                  // 0x0040(0x0001) (Edit)
	unsigned char                                      bTangentRecalculationEveryFrame : 1;                      // 0x0040(0x0001) (Edit)
	unsigned char                                      bSpawnInitialParticle : 1;                                // 0x0040(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0041(0x0003) MISSED OFFSET
	TEnumAsByte<ETrailsRenderAxisOption>               RenderAxis;                                               // 0x0044(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0045(0x0003) MISSED OFFSET
	float                                              TangentSpawningScalar;                                    // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bRenderGeometry : 1;                                      // 0x004C(0x0001) (Edit)
	unsigned char                                      bRenderSpawnPoints : 1;                                   // 0x004C(0x0001) (Edit)
	unsigned char                                      bRenderTangents : 1;                                      // 0x004C(0x0001) (Edit)
	unsigned char                                      bRenderTessellation : 1;                                  // 0x004C(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x3];                                       // 0x004D(0x0003) MISSED OFFSET
	float                                              TilingDistance;                                           // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DistanceTessellationStepSize;                             // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bEnableTangentDiffInterpScale : 1;                        // 0x0058(0x0001) (Edit)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0059(0x0003) MISSED OFFSET
	float                                              TangentTessellationScalar;                                // 0x005C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleTypeDataRibbon"));
		return ptr;
	}

};


// Class Engine.ParticleModuleVectorFieldBase
// 0x0000 (0x0030 - 0x0030)
class UParticleModuleVectorFieldBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleVectorFieldBase"));
		return ptr;
	}

};


// Class Engine.ParticleModuleVectorFieldGlobal
// 0x0010 (0x0040 - 0x0030)
class UParticleModuleVectorFieldGlobal : public UParticleModuleVectorFieldBase
{
public:
	unsigned char                                      bOverrideGlobalVectorFieldTightness : 1;                  // 0x0030(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0031(0x0003) MISSED OFFSET
	float                                              GlobalVectorFieldScale;                                   // 0x0034(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              GlobalVectorFieldTightness;                               // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x003C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleVectorFieldGlobal"));
		return ptr;
	}

};


// Class Engine.ParticleModuleVectorFieldLocal
// 0x0060 (0x0090 - 0x0030)
class UParticleModuleVectorFieldLocal : public UParticleModuleVectorFieldBase
{
public:
	class UVectorField*                                VectorField;                                              // 0x0030(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector                                     RelativeTranslation;                                      // 0x0038(0x0018) (Edit, ZeroConstructor, IsPlainOldData)
	struct FRotator                                    RelativeRotation;                                         // 0x0050(0x0018) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector                                     RelativeScale3D;                                          // 0x0068(0x0018) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Intensity;                                                // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Tightness;                                                // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bIgnoreComponentTransform : 1;                            // 0x0088(0x0001) (Edit)
	unsigned char                                      bTileX : 1;                                               // 0x0088(0x0001) (Edit)
	unsigned char                                      bTileY : 1;                                               // 0x0088(0x0001) (Edit)
	unsigned char                                      bTileZ : 1;                                               // 0x0088(0x0001) (Edit)
	unsigned char                                      bUseFixDT : 1;                                            // 0x0088(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0089(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleVectorFieldLocal"));
		return ptr;
	}

};


// Class Engine.ParticleModuleVectorFieldRotation
// 0x0030 (0x0060 - 0x0030)
class UParticleModuleVectorFieldRotation : public UParticleModuleVectorFieldBase
{
public:
	struct FVector                                     MinInitialRotation;                                       // 0x0030(0x0018) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector                                     MaxInitialRotation;                                       // 0x0048(0x0018) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleVectorFieldRotation"));
		return ptr;
	}

};


// Class Engine.ParticleModuleVectorFieldRotationRate
// 0x0018 (0x0048 - 0x0030)
class UParticleModuleVectorFieldRotationRate : public UParticleModuleVectorFieldBase
{
public:
	struct FVector                                     RotationRate;                                             // 0x0030(0x0018) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleVectorFieldRotationRate"));
		return ptr;
	}

};


// Class Engine.ParticleModuleVectorFieldScale
// 0x0038 (0x0068 - 0x0030)
class UParticleModuleVectorFieldScale : public UParticleModuleVectorFieldBase
{
public:
	class UDistributionFloat*                          VectorFieldScale;                                         // 0x0030(0x0008) (ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData)
	struct FRawDistributionFloat                       VectorFieldScaleRaw;                                      // 0x0038(0x0030) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleVectorFieldScale"));
		return ptr;
	}

};


// Class Engine.ParticleModuleVectorFieldScaleOverLife
// 0x0038 (0x0068 - 0x0030)
class UParticleModuleVectorFieldScaleOverLife : public UParticleModuleVectorFieldBase
{
public:
	class UDistributionFloat*                          VectorFieldScaleOverLife;                                 // 0x0030(0x0008) (ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData)
	struct FRawDistributionFloat                       VectorFieldScaleOverLifeRaw;                              // 0x0038(0x0030) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleVectorFieldScaleOverLife"));
		return ptr;
	}

};


// Class Engine.ParticleModuleVelocityBase
// 0x0008 (0x0038 - 0x0030)
class UParticleModuleVelocityBase : public UParticleModule
{
public:
	unsigned char                                      bInWorldSpace : 1;                                        // 0x0030(0x0001) (Edit)
	unsigned char                                      bApplyOwnerScale : 1;                                     // 0x0030(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0031(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleVelocityBase"));
		return ptr;
	}

};


// Class Engine.ParticleModuleVelocity
// 0x0090 (0x00C8 - 0x0038)
class UParticleModuleVelocity : public UParticleModuleVelocityBase
{
public:
	struct FRawDistributionVector                      StartVelocity;                                            // 0x0038(0x0060) (Edit)
	struct FRawDistributionFloat                       StartVelocityRadial;                                      // 0x0098(0x0030) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleVelocity"));
		return ptr;
	}

};


// Class Engine.ParticleModuleVelocityCone
// 0x0078 (0x00B0 - 0x0038)
class UParticleModuleVelocityCone : public UParticleModuleVelocityBase
{
public:
	struct FRawDistributionFloat                       Angle;                                                    // 0x0038(0x0030) (Edit)
	struct FRawDistributionFloat                       Velocity;                                                 // 0x0068(0x0030) (Edit)
	struct FVector                                     Direction;                                                // 0x0098(0x0018) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleVelocityCone"));
		return ptr;
	}

};


// Class Engine.ParticleModuleVelocityInheritParent
// 0x0060 (0x0098 - 0x0038)
class UParticleModuleVelocityInheritParent : public UParticleModuleVelocityBase
{
public:
	struct FRawDistributionVector                      Scale;                                                    // 0x0038(0x0060) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleVelocityInheritParent"));
		return ptr;
	}

};


// Class Engine.ParticleModuleVelocityOverLifetime
// 0x0068 (0x00A0 - 0x0038)
class UParticleModuleVelocityOverLifetime : public UParticleModuleVelocityBase
{
public:
	struct FRawDistributionVector                      VelOverLife;                                              // 0x0038(0x0060) (Edit)
	unsigned char                                      Absolute : 1;                                             // 0x0098(0x0001) (Edit, ExportObject)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0099(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleVelocityOverLifetime"));
		return ptr;
	}

};


// Class Engine.ParticleModuleVelocity_Seeded
// 0x0020 (0x00E8 - 0x00C8)
class UParticleModuleVelocity_Seeded : public UParticleModuleVelocity
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                           // 0x00C8(0x0020) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleModuleVelocity_Seeded"));
		return ptr;
	}

};


// Class Engine.ParticleSpriteEmitter
// 0x0000 (0x01C0 - 0x01C0)
class UParticleSpriteEmitter : public UParticleEmitter
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleSpriteEmitter"));
		return ptr;
	}

};


// Class Engine.ParticleSystemComponent
// 0x0310 (0x08A0 - 0x0590)
class UParticleSystemComponent : public UFXSystemComponent
{
public:
	class UParticleSystem*                             Template;                                                 // 0x0590(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<class UMaterialInterface*>                  EmitterMaterials;                                         // 0x0598(0x0010) (ZeroConstructor, Transient, DuplicateTransient)
	TArray<class USkeletalMeshComponent*>              SkelMeshComponents;                                       // 0x05A8(0x0010) (ExportObject, ZeroConstructor, Transient, DuplicateTransient)
	unsigned char                                      UnknownData00[0x1];                                       // 0x05B8(0x0001) MISSED OFFSET
	unsigned char                                      bResetOnDetach : 1;                                       // 0x05B9(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUpdateOnDedicatedServer : 1;                             // 0x05B9(0x0001)
	unsigned char                                      UnknownData01 : 2;                                        // 0x05B9(0x0001)
	unsigned char                                      bAllowRecycling : 1;                                      // 0x05B9(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bAutoManageAttachment : 1;                                // 0x05B9(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bAutoAttachWeldSimulatedBodies : 1;                       // 0x05B9(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData02 : 1;                                        // 0x05B9(0x0001)
	unsigned char                                      UnknownData03 : 1;                                        // 0x05BA(0x0001)
	unsigned char                                      bWarmingUp : 1;                                           // 0x05BA(0x0001)
	unsigned char                                      bOverrideLODMethod : 1;                                   // 0x05BA(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bSkipUpdateDynamicDataDuringTick : 1;                     // 0x05BA(0x0001)
	unsigned char                                      UnknownData04[0xA];                                       // 0x05BB(0x000A) MISSED OFFSET
	TEnumAsByte<EParticleSystemLODMethod>              LODMethod;                                                // 0x05C5(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	enum class EParticleSignificanceLevel              RequiredSignificance;                                     // 0x05C6(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x1];                                       // 0x05C7(0x0001) MISSED OFFSET
	TArray<struct FParticleSysParam>                   InstanceParameters;                                       // 0x05C8(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FScriptMulticastDelegate                    OnParticleSpawn;                                          // 0x05D8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnParticleBurst;                                          // 0x05E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnParticleDeath;                                          // 0x05F8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnParticleCollide;                                        // 0x0608(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               bOldPositionValid;                                        // 0x0618(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x7];                                       // 0x0619(0x0007) MISSED OFFSET
	struct FVector                                     OldPosition;                                              // 0x0620(0x0018) (ZeroConstructor, IsPlainOldData)
	struct FVector                                     PartSysVelocity;                                          // 0x0638(0x0018) (ZeroConstructor, IsPlainOldData)
	float                                              WarmupTime;                                               // 0x0650(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              WarmupTickRate;                                           // 0x0654(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x4];                                       // 0x0658(0x0004) MISSED OFFSET
	float                                              SecondsBeforeInactive;                                    // 0x065C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData08[0x4];                                       // 0x0660(0x0004) MISSED OFFSET
	float                                              MaxTimeBeforeForceUpdateTransform;                        // 0x0664(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData09[0x20];                                      // 0x0668(0x0020) MISSED OFFSET
	TArray<class UParticleSystemReplay*>               ReplayClips;                                              // 0x0688(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData10[0x8];                                       // 0x0698(0x0008) MISSED OFFSET
	float                                              CustomTimeDilation;                                       // 0x06A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData11[0x54];                                      // 0x06A4(0x0054) MISSED OFFSET
	TWeakObjectPtr<class USceneComponent>              AutoAttachParent;                                         // 0x06F8(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, IsPlainOldData)
	struct FName                                       AutoAttachSocketName;                                     // 0x0700(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	enum class EAttachmentRule                         AutoAttachLocationRule;                                   // 0x0708(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	enum class EAttachmentRule                         AutoAttachRotationRule;                                   // 0x0709(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	enum class EAttachmentRule                         AutoAttachScaleRule;                                      // 0x070A(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData12[0x55];                                      // 0x070B(0x0055) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnSystemFinished;                                         // 0x0760(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData13[0x130];                                     // 0x0770(0x0130) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleSystemComponent"));
		return ptr;
	}


	void SetTrailSourceData(const struct FName& InFirstSocketName, const struct FName& InSecondSocketName, TEnumAsByte<ETrailWidthMode> InWidthMode, float InWidth);//Offset:Discovery.exe+0x58122A0
	void SetTemplate(class UParticleSystem* NewTemplate);//Offset:Discovery.exe+0x58125F0
	void SetMaterialParameter(const struct FName& ParameterName, class UMaterialInterface* Param);//Offset:Discovery.exe+0x5812690
	void SetBeamTargetTangent(int EmitterIndex, const struct FVector& NewTangentPoint, int TargetIndex);//Offset:Discovery.exe+0x5813130
	void SetBeamTargetStrength(int EmitterIndex, float NewTargetStrength, int TargetIndex);//Offset:Discovery.exe+0x5813000
	void SetBeamTargetPoint(int EmitterIndex, const struct FVector& NewTargetPoint, int TargetIndex);//Offset:Discovery.exe+0x5813270
	void SetBeamSourceTangent(int EmitterIndex, const struct FVector& NewTangentPoint, int SourceIndex);//Offset:Discovery.exe+0x58134E0
	void SetBeamSourceStrength(int EmitterIndex, float NewSourceStrength, int SourceIndex);//Offset:Discovery.exe+0x58133B0
	void SetBeamSourcePoint(int EmitterIndex, const struct FVector& NewSourcePoint, int SourceIndex);//Offset:Discovery.exe+0x5813620
	void SetBeamEndPoint(int EmitterIndex, const struct FVector& NewEndPoint);//Offset:Discovery.exe+0x5813760
	void SetAutoAttachParams(class USceneComponent* Parent, const struct FName& SocketName, TEnumAsByte<EAttachLocation> LocationType);//Offset:Discovery.exe+0x5813850
	int GetNumActiveParticles();//Offset:Discovery.exe+0x58125C0
	class UMaterialInterface* GetNamedMaterial(const struct FName& InName);//Offset:Discovery.exe+0x5812110
	bool GetBeamTargetTangent(int EmitterIndex, int TargetIndex, struct FVector* OutTangentPoint);//Offset:Discovery.exe+0x58128C0
	bool GetBeamTargetStrength(int EmitterIndex, int TargetIndex, float* OutTargetStrength);//Offset:Discovery.exe+0x5812770
	bool GetBeamTargetPoint(int EmitterIndex, int TargetIndex, struct FVector* OutTargetPoint);//Offset:Discovery.exe+0x5812A00
	bool GetBeamSourceTangent(int EmitterIndex, int SourceIndex, struct FVector* OutTangentPoint);//Offset:Discovery.exe+0x5812C90
	bool GetBeamSourceStrength(int EmitterIndex, int SourceIndex, float* OutSourceStrength);//Offset:Discovery.exe+0x5812B40
	bool GetBeamSourcePoint(int EmitterIndex, int SourceIndex, struct FVector* OutSourcePoint);//Offset:Discovery.exe+0x5812DD0
	bool GetBeamEndPoint(int EmitterIndex, struct FVector* OutEndPoint);//Offset:Discovery.exe+0x5812F10
	void GenerateParticleEvent(const struct FName& InEventName, float InEmitterTime, const struct FVector& InLocation, const struct FVector& InDirection, const struct FVector& InVelocity);//Offset:Discovery.exe+0x5811ED0
	void EndTrails();//Offset:Discovery.exe+0x5812420
	class UMaterialInstanceDynamic* CreateNamedDynamicMaterialInstance(const struct FName& InName, class UMaterialInterface* SourceMaterial);//Offset:Discovery.exe+0x58121B0
	void BeginTrails(const struct FName& InFirstSocketName, const struct FName& InSecondSocketName, TEnumAsByte<ETrailWidthMode> InWidthMode, float InWidth);//Offset:Discovery.exe+0x5812440
};


// Class Engine.ParticleSystemReplay
// 0x0018 (0x0040 - 0x0028)
class UParticleSystemReplay : public UObject
{
public:
	int                                                ClipIDNumber;                                             // 0x0028(0x0004) (Edit, ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x14];                                      // 0x002C(0x0014) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ParticleSystemReplay"));
		return ptr;
	}

};


// Class Engine.PathFollowingAgentInterface
// 0x0000 (0x0028 - 0x0028)
class UPathFollowingAgentInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.PathFollowingAgentInterface"));
		return ptr;
	}

};


// Class Engine.PawnNoiseEmitterComponent
// 0x0038 (0x00F0 - 0x00B8)
class UPawnNoiseEmitterComponent : public UActorComponent
{
public:
	unsigned char                                      bAIPerceptionSystemCompatibilityMode : 1;                 // 0x00B8(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00B9(0x0007) MISSED OFFSET
	struct FVector                                     LastRemoteNoisePosition;                                  // 0x00C0(0x0018) (ZeroConstructor, IsPlainOldData)
	float                                              NoiseLifetime;                                            // 0x00D8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              LastRemoteNoiseVolume;                                    // 0x00DC(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              LastRemoteNoiseTime;                                      // 0x00E0(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              LastLocalNoiseVolume;                                     // 0x00E4(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              LastLocalNoiseTime;                                       // 0x00E8(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00EC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.PawnNoiseEmitterComponent"));
		return ptr;
	}


	void MakeNoise(class AActor* NoiseMaker, float Loudness, const struct FVector& NoiseLocation);//Offset:Discovery.exe+0x5817D40
};


// Class Engine.PhysicalAnimationComponent
// 0x0040 (0x00F8 - 0x00B8)
class UPhysicalAnimationComponent : public UActorComponent
{
public:
	float                                              StrengthMultiplyer;                                       // 0x00B8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00BC(0x0004) MISSED OFFSET
	class USkeletalMeshComponent*                      SkeletalMeshComponent;                                    // 0x00C0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData01[0x30];                                      // 0x00C8(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.PhysicalAnimationComponent"));
		return ptr;
	}


	void SetStrengthMultiplyer(float InStrengthMultiplyer);//Offset:Discovery.exe+0x5818820
	void SetSkeletalMeshComponent(class USkeletalMeshComponent* InSkeletalMeshComponent);//Offset:Discovery.exe+0x5818B30
	struct FTransform GetBodyTargetTransform(const struct FName& BodyName);//Offset:Discovery.exe+0x58185A0
	void ApplyPhysicalAnimationSettingsBelow(const struct FName& BodyName, const struct FPhysicalAnimationData& PhysicalAnimationData, bool bIncludeSelf);//Offset:Discovery.exe+0x58188C0
	void ApplyPhysicalAnimationSettings(const struct FName& BodyName, const struct FPhysicalAnimationData& PhysicalAnimationData);//Offset:Discovery.exe+0x5818A20
	void ApplyPhysicalAnimationProfileBelow(const struct FName& BodyName, const struct FName& ProfileName, bool bIncludeSelf, bool bClearNotFound);//Offset:Discovery.exe+0x5818690
};


// Class Engine.PhysicalMaterialMask
// 0x0008 (0x0030 - 0x0028)
class UPhysicalMaterialMask : public UObject
{
public:
	int                                                UVChannelIndex;                                           // 0x0028(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ETextureAddress>                       AddressX;                                                 // 0x002C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ETextureAddress>                       AddressY;                                                 // 0x002D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x002E(0x0002) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.PhysicalMaterialMask"));
		return ptr;
	}

};


// Class Engine.PhysicsAsset
// 0x0158 (0x0180 - 0x0028)
class UPhysicsAsset : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0028(0x0010) MISSED OFFSET
	unsigned char                                      UnknownData01[0x28];                                      // 0x0028(0x0028) UNKNOWN PROPERTY: ComplexCollisionMesh
	TArray<int>                                        BoundsBodies;                                             // 0x0060(0x0010) (ZeroConstructor)
	TArray<class USkeletalBodySetup*>                  SkeletalBodySetups;                                       // 0x0070(0x0010) (ExportObject, ZeroConstructor)
	TArray<class UPhysicsConstraintTemplate*>          ConstraintSetup;                                          // 0x0080(0x0010) (ExportObject, ZeroConstructor)
	struct FPhysicsAssetSolverSettings                 SolverSettings;                                           // 0x0090(0x0018) (Edit, Config)
	struct FSolverIterations                           SolverIterations;                                         // 0x00A8(0x0018) (Config)
	enum class EPhysicsAssetSolverType                 SolverType;                                               // 0x00C0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bNotForDedicatedServer : 1;                               // 0x00C1(0x0001) (Edit)
	unsigned char                                      UnknownData02[0xA6];                                      // 0x00C2(0x00A6) MISSED OFFSET
	class UThumbnailInfo*                              ThumbnailInfo;                                            // 0x0168(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	TArray<class UBodySetup*>                          BodySetup;                                                // 0x0170(0x0010) (ExportObject, ZeroConstructor, Deprecated)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.PhysicsAsset"));
		return ptr;
	}


	void Combine(TArray<class UPhysicsAsset*> Others);//Offset:Discovery.exe+0x58193A0
	void ClearConstraintsAndBodySetups();//Offset:Discovery.exe+0x5819450
};


// Class Engine.SkeletalBodySetup
// 0x0018 (0x02F8 - 0x02E0)
class USkeletalBodySetup : public UBodySetup
{
public:
	bool                                               bSkipScaleFromAnimation;                                  // 0x02E0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x02E1(0x0007) MISSED OFFSET
	TArray<struct FPhysicalAnimationProfile>           PhysicalAnimationData;                                    // 0x02E8(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SkeletalBodySetup"));
		return ptr;
	}

};


// Class Engine.PhysicsCollisionHandler
// 0x0018 (0x0040 - 0x0028)
class UPhysicsCollisionHandler : public UObject
{
public:
	float                                              ImpactThreshold;                                          // 0x0028(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ImpactReFireDelay;                                        // 0x002C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class USoundBase*                                  DefaultImpactSound;                                       // 0x0030(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              LastImpactSoundTime;                                      // 0x0038(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x003C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.PhysicsCollisionHandler"));
		return ptr;
	}

};


// Class Engine.RigidBodyBase
// 0x0000 (0x02C8 - 0x02C8)
class ARigidBodyBase : public AActor
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.RigidBodyBase"));
		return ptr;
	}

};


// Class Engine.PhysicsConstraintActor
// 0x0020 (0x02E8 - 0x02C8)
class APhysicsConstraintActor : public ARigidBodyBase
{
public:
	class UPhysicsConstraintComponent*                 ConstraintComp;                                           // 0x02C8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class AActor*                                      ConstraintActor1;                                         // 0x02D0(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData)
	class AActor*                                      ConstraintActor2;                                         // 0x02D8(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData)
	unsigned char                                      bDisableCollision : 1;                                    // 0x02E0(0x0001) (Deprecated)
	unsigned char                                      UnknownData00[0x7];                                       // 0x02E1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.PhysicsConstraintActor"));
		return ptr;
	}

};


// Class Engine.PhysicsConstraintComponent
// 0x02D0 (0x05A0 - 0x02D0)
class UPhysicsConstraintComponent : public USceneComponent
{
public:
	class AActor*                                      ConstraintActor1;                                         // 0x02D0(0x0008) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	struct FConstrainComponentPropName                 ComponentName1;                                           // 0x02D8(0x0008) (Edit)
	class AActor*                                      ConstraintActor2;                                         // 0x02E0(0x0008) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	struct FConstrainComponentPropName                 ComponentName2;                                           // 0x02E8(0x0008) (Edit)
	unsigned char                                      UnknownData00[0x10];                                      // 0x02F0(0x0010) MISSED OFFSET
	class UPhysicsConstraintTemplate*                  ConstraintSetup;                                          // 0x0300(0x0008) (ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnConstraintBroken;                                       // 0x0308(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPlasticDeformation;                                     // 0x0318(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FConstraintInstance                         ConstraintInstance;                                       // 0x0328(0x0270) (Edit)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0598(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.PhysicsConstraintComponent"));
		return ptr;
	}


	void SetOrientationDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive);//Offset:Discovery.exe+0x581C420
	void SetOrientationDriveSLERP(bool bEnableSLERP);//Offset:Discovery.exe+0x581C380
	void SetLinearZLimit(TEnumAsByte<ELinearConstraintMotion> ConstraintType, float LimitSize);//Offset:Discovery.exe+0x581B8E0
	void SetLinearYLimit(TEnumAsByte<ELinearConstraintMotion> ConstraintType, float LimitSize);//Offset:Discovery.exe+0x581B9C0
	void SetLinearXLimit(TEnumAsByte<ELinearConstraintMotion> ConstraintType, float LimitSize);//Offset:Discovery.exe+0x581BAA0
	void SetLinearVelocityTarget(const struct FVector& InVelTarget);//Offset:Discovery.exe+0x581BF20
	void SetLinearVelocityDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);//Offset:Discovery.exe+0x581C610
	void SetLinearPositionTarget(const struct FVector& InPosTarget);//Offset:Discovery.exe+0x581BFC0
	void SetLinearPositionDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);//Offset:Discovery.exe+0x581C750
	void SetLinearPlasticity(bool bLinearPlasticity, float LinearPlasticityThreshold, TEnumAsByte<EConstraintPlasticityType> PlasticityType);//Offset:Discovery.exe+0x581B420
	void SetLinearDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit);//Offset:Discovery.exe+0x581BDF0
	void SetLinearBreakable(bool bLinearBreakable, float LinearBreakThreshold);//Offset:Discovery.exe+0x581B550
	void SetDisableCollision(bool bDisableCollision);//Offset:Discovery.exe+0x581AD00
	void SetContactTransferScale(float ContactTransferScale);//Offset:Discovery.exe+0x581B1A0
	void SetConstraintReferencePosition(TEnumAsByte<EConstraintFrame> Frame, const struct FVector& RefPosition);//Offset:Discovery.exe+0x581AEE0
	void SetConstraintReferenceOrientation(TEnumAsByte<EConstraintFrame> Frame, const struct FVector& PriAxis, const struct FVector& SecAxis);//Offset:Discovery.exe+0x581ADA0
	void SetConstraintReferenceFrame(TEnumAsByte<EConstraintFrame> Frame, const struct FTransform& RefFrame);//Offset:Discovery.exe+0x581AFD0
	void SetConstrainedComponents(class UPrimitiveComponent* Component1, const struct FName& BoneName1, class UPrimitiveComponent* Component2, const struct FName& BoneName2);//Offset:Discovery.exe+0x581CA70
	void SetAngularVelocityTarget(const struct FVector& InVelTarget);//Offset:Discovery.exe+0x581BCB0
	void SetAngularVelocityDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive);//Offset:Discovery.exe+0x581C190
	void SetAngularVelocityDriveSLERP(bool bEnableSLERP);//Offset:Discovery.exe+0x581C0F0
	void SetAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);//Offset:Discovery.exe+0x581C280
	void SetAngularTwistLimit(TEnumAsByte<EAngularConstraintMotion> ConstraintType, float TwistLimitAngle);//Offset:Discovery.exe+0x581B640
	void SetAngularSwing2Limit(TEnumAsByte<EAngularConstraintMotion> MotionType, float Swing2LimitAngle);//Offset:Discovery.exe+0x581B720
	void SetAngularSwing1Limit(TEnumAsByte<EAngularConstraintMotion> MotionType, float Swing1LimitAngle);//Offset:Discovery.exe+0x581B800
	void SetAngularPlasticity(bool bAngularPlasticity, float AngularPlasticityThreshold);//Offset:Discovery.exe+0x581B240
	void SetAngularOrientationTarget(const struct FRotator& InPosTarget);//Offset:Discovery.exe+0x581BD50
	void SetAngularOrientationDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);//Offset:Discovery.exe+0x581C510
	void SetAngularDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit);//Offset:Discovery.exe+0x581BB80
	void SetAngularDriveMode(TEnumAsByte<EAngularDriveMode> DriveMode);//Offset:Discovery.exe+0x581C060
	void SetAngularBreakable(bool bAngularBreakable, float AngularBreakThreshold);//Offset:Discovery.exe+0x581B330
	bool IsBroken();//Offset:Discovery.exe+0x581ABE0
	float GetCurrentTwist();//Offset:Discovery.exe+0x581B170
	float GetCurrentSwing2();//Offset:Discovery.exe+0x581B110
	float GetCurrentSwing1();//Offset:Discovery.exe+0x581B140
	void GetConstraintForce(struct FVector* OutLinearForce, struct FVector* OutAngularForce);//Offset:Discovery.exe+0x581AC10
	struct FConstraintInstanceAccessor GetConstraint();//Offset:Discovery.exe+0x581AB80
	void GetConstrainedComponents(class UPrimitiveComponent** OutComponent1, struct FName* OutBoneName1, class UPrimitiveComponent** OutComponent2, struct FName* OutBoneName2);//Offset:Discovery.exe+0x581C8B0
	void BreakConstraint();//Offset:Discovery.exe+0x581C890
};


// Class Engine.PhysicsConstraintTemplate
// 0x03D8 (0x0400 - 0x0028)
class UPhysicsConstraintTemplate : public UObject
{
public:
	struct FConstraintInstance                         DefaultInstance;                                          // 0x0028(0x0270) (Edit)
	TArray<struct FPhysicsConstraintProfileHandle>     ProfileHandles;                                           // 0x0298(0x0010) (ZeroConstructor)
	struct FConstraintProfileProperties                DefaultProfile;                                           // 0x02A8(0x0158) (Transient)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.PhysicsConstraintTemplate"));
		return ptr;
	}

};


// Class Engine.PhysicsFieldComponent
// 0x00A0 (0x0370 - 0x02D0)
class UPhysicsFieldComponent : public USceneComponent
{
public:
	unsigned char                                      UnknownData00[0xA0];                                      // 0x02D0(0x00A0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.PhysicsFieldComponent"));
		return ptr;
	}

};


// Class Engine.PhysicsHandleComponent
// 0x0108 (0x01C0 - 0x00B8)
class UPhysicsHandleComponent : public UActorComponent
{
public:
	class UPrimitiveComponent*                         GrabbedComponent;                                         // 0x00B8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x00C0(0x0008) MISSED OFFSET
	unsigned char                                      UnknownData01 : 1;                                        // 0x00C8(0x0001)
	unsigned char                                      bSoftAngularConstraint : 1;                               // 0x00C8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bSoftLinearConstraint : 1;                                // 0x00C8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bInterpolateTarget : 1;                                   // 0x00C8(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData02[0x3];                                       // 0x00C9(0x0003) MISSED OFFSET
	float                                              LinearDamping;                                            // 0x00CC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              LinearStiffness;                                          // 0x00D0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              AngularDamping;                                           // 0x00D4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              AngularStiffness;                                         // 0x00D8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0xC4];                                      // 0x00DC(0x00C4) MISSED OFFSET
	float                                              InterpolationSpeed;                                       // 0x01A0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x1C];                                      // 0x01A4(0x001C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.PhysicsHandleComponent"));
		return ptr;
	}


	void SetTargetRotation(const struct FRotator& NewRotation);//Offset:Discovery.exe+0x581E930
	void SetTargetLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation);//Offset:Discovery.exe+0x581E820
	void SetTargetLocation(const struct FVector& NewLocation);//Offset:Discovery.exe+0x581E9D0
	void SetLinearStiffness(float NewLinearStiffness);//Offset:Discovery.exe+0x581E5F0
	void SetLinearDamping(float NewLinearDamping);//Offset:Discovery.exe+0x581E690
	void SetInterpolationSpeed(float NewInterpolationSpeed);//Offset:Discovery.exe+0x581E410
	void SetAngularStiffness(float NewAngularStiffness);//Offset:Discovery.exe+0x581E4B0
	void SetAngularDamping(float NewAngularDamping);//Offset:Discovery.exe+0x581E550
	void ReleaseComponent();//Offset:Discovery.exe+0x1D0F090
	void GrabComponentAtLocationWithRotation(class UPrimitiveComponent* Component, const struct FName& InBoneName, const struct FVector& Location, const struct FRotator& Rotation);//Offset:Discovery.exe+0x581EA70
	void GrabComponentAtLocation(class UPrimitiveComponent* Component, const struct FName& InBoneName, const struct FVector& GrabLocation);//Offset:Discovery.exe+0x581EC40
	void GrabComponent(class UPrimitiveComponent* Component, const struct FName& InBoneName, const struct FVector& GrabLocation, bool bConstrainRotation);//Offset:Discovery.exe+0x581ED80
	void GetTargetLocationAndRotation(struct FVector* TargetLocation, struct FRotator* TargetRotation);//Offset:Discovery.exe+0x581E730
	class UPrimitiveComponent* GetGrabbedComponent();//Offset:Discovery.exe+0x4D22FE0
};


// Class Engine.PhysicsSettings
// 0x0108 (0x01F0 - 0x00E8)
class UPhysicsSettings : public UPhysicsSettingsCore
{
public:
	struct FRigidBodyErrorCorrection                   PhysicErrorCorrection;                                    // 0x00E8(0x0034) (Edit, Config)
	TEnumAsByte<ESettingsLockedAxis>                   LockedAxis;                                               // 0x011C(0x0001) (ZeroConstructor, Config, Deprecated, IsPlainOldData)
	TEnumAsByte<ESettingsDOF>                          DefaultDegreesOfFreedom;                                  // 0x011D(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bSuppressFaceRemapTable;                                  // 0x011E(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bSupportUVFromHitResults;                                 // 0x011F(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bDisableActiveActors;                                     // 0x0120(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bDisableKinematicStaticPairs;                             // 0x0121(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bDisableKinematicKinematicPairs;                          // 0x0122(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bDisableCCD;                                              // 0x0123(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bEnableEnhancedDeterminism;                               // 0x0124(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0125(0x0003) MISSED OFFSET
	float                                              AnimPhysicsMinDeltaTime;                                  // 0x0128(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bSimulateAnimPhysicsAfterReset;                           // 0x012C(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x012D(0x0003) MISSED OFFSET
	float                                              MinPhysicsDeltaTime;                                      // 0x0130(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              MaxPhysicsDeltaTime;                                      // 0x0134(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bSubstepping;                                             // 0x0138(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bSubsteppingAsync;                                        // 0x0139(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bTickPhysicsAsync;                                        // 0x013A(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData02[0x1];                                       // 0x013B(0x0001) MISSED OFFSET
	float                                              AsyncFixedTimeStepSize;                                   // 0x013C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              MaxSubstepDeltaTime;                                      // 0x0140(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	int                                                MaxSubsteps;                                              // 0x0144(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              SyncSceneSmoothingFactor;                                 // 0x0148(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              InitialAverageFrameRate;                                  // 0x014C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	int                                                PhysXTreeRebuildRate;                                     // 0x0150(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bUpdatePrunerTreeInParallel;                              // 0x0154(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0155(0x0003) MISSED OFFSET
	TArray<struct FPhysicalSurfaceName>                PhysicalSurfaces;                                         // 0x0158(0x0010) (Edit, ZeroConstructor, Config)
	struct FBroadphaseSettings                         DefaultBroadphaseSettings;                                // 0x0168(0x0080) (Edit, Config)
	float                                              MinDeltaVelocityForHitEvents;                             // 0x01E8(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	struct FChaosPhysicsSettings                       ChaosSettings;                                            // 0x01EC(0x0003) (Edit, Config)
	unsigned char                                      UnknownData04[0x1];                                       // 0x01EF(0x0001) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.PhysicsSettings"));
		return ptr;
	}

};


// Class Engine.PhysicsSpringComponent
// 0x0030 (0x0300 - 0x02D0)
class UPhysicsSpringComponent : public USceneComponent
{
public:
	float                                              SpringStiffness;                                          // 0x02D0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SpringDamping;                                            // 0x02D4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SpringLengthAtRest;                                       // 0x02D8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SpringRadius;                                             // 0x02DC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ECollisionChannel>                     SpringChannel;                                            // 0x02E0(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bIgnoreSelf;                                              // 0x02E1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x02E2(0x0002) MISSED OFFSET
	float                                              SpringCompression;                                        // 0x02E4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x18];                                      // 0x02E8(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.PhysicsSpringComponent"));
		return ptr;
	}


	struct FVector GetSpringRestingPoint();//Offset:Discovery.exe+0x58204E0
	struct FVector GetSpringDirection();//Offset:Discovery.exe+0x5820420
	struct FVector GetSpringCurrentEndPoint();//Offset:Discovery.exe+0x5820480
	float GetNormalizedCompressionScalar();//Offset:Discovery.exe+0x5820540
};


// Class Engine.PhysicsThruster
// 0x0008 (0x02D0 - 0x02C8)
class APhysicsThruster : public ARigidBodyBase
{
public:
	class UPhysicsThrusterComponent*                   ThrusterComponent;                                        // 0x02C8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.PhysicsThruster"));
		return ptr;
	}

};


// Class Engine.PhysicsThrusterComponent
// 0x0010 (0x02E0 - 0x02D0)
class UPhysicsThrusterComponent : public USceneComponent
{
public:
	float                                              ThrustStrength;                                           // 0x02D0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                                       // 0x02D4(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.PhysicsThrusterComponent"));
		return ptr;
	}

};


// Class Engine.SceneCapture
// 0x0010 (0x02D8 - 0x02C8)
class ASceneCapture : public AActor
{
public:
	class UStaticMeshComponent*                        MeshComp;                                                 // 0x02C8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData)
	class USceneComponent*                             SceneComponent;                                           // 0x02D0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SceneCapture"));
		return ptr;
	}

};


// Class Engine.PlanarReflection
// 0x0010 (0x02E8 - 0x02D8)
class APlanarReflection : public ASceneCapture
{
public:
	class UPlanarReflectionComponent*                  PlanarReflectionComponent;                                // 0x02D8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	bool                                               bShowPreviewPlane;                                        // 0x02E0(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x02E1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.PlanarReflection"));
		return ptr;
	}


	void OnInterpToggle(bool bEnable);//Offset:Discovery.exe+0x5820C70
};


// Class Engine.SceneCaptureComponent
// 0x00C0 (0x0390 - 0x02D0)
class USceneCaptureComponent : public USceneComponent
{
public:
	enum class ESceneCapturePrimitiveRenderMode        PrimitiveRenderMode;                                      // 0x02D0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ESceneCaptureSource>                   CaptureSource;                                            // 0x02D1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bCaptureEveryFrame : 1;                                   // 0x02D2(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bCaptureOnMovement : 1;                                   // 0x02D2(0x0001) (Edit, BlueprintVisible)
	bool                                               bAlwaysPersistRenderingState;                             // 0x02D3(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x02D4(0x0004) MISSED OFFSET
	TArray<TWeakObjectPtr<class UPrimitiveComponent>>  HiddenComponents;                                         // 0x02D8(0x0010) (ExportObject, ZeroConstructor)
	TArray<class AActor*>                              HiddenActors;                                             // 0x02E8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate)
	TArray<TWeakObjectPtr<class UPrimitiveComponent>>  ShowOnlyComponents;                                       // 0x02F8(0x0010) (ExportObject, ZeroConstructor)
	TArray<class AActor*>                              ShowOnlyActors;                                           // 0x0308(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate)
	float                                              LODDistanceFactor;                                        // 0x0318(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxViewDistanceOverride;                                  // 0x031C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                CaptureSortPriority;                                      // 0x0320(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bUseRayTracingIfEnabled;                                  // 0x0324(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0325(0x0003) MISSED OFFSET
	TArray<struct FEngineShowFlagsSetting>             ShowFlagSettings;                                         // 0x0328(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	unsigned char                                      UnknownData02[0x30];                                      // 0x0338(0x0030) MISSED OFFSET
	struct FString                                     ProfilingEventName;                                       // 0x0368(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	unsigned char                                      UnknownData03[0x18];                                      // 0x0378(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SceneCaptureComponent"));
		return ptr;
	}


	void ShowOnlyComponent(class UPrimitiveComponent* InComponent);//Offset:Discovery.exe+0x5857070
	void ShowOnlyActorComponents(class AActor* InActor, bool bIncludeFromChildActors);//Offset:Discovery.exe+0x5856F80
	void SetCaptureSortPriority(int NewCaptureSortPriority);//Offset:Discovery.exe+0x5856D10
	void RemoveShowOnlyComponent(class UPrimitiveComponent* InComponent);//Offset:Discovery.exe+0x5856EE0
	void RemoveShowOnlyActorComponents(class AActor* InActor, bool bIncludeFromChildActors);//Offset:Discovery.exe+0x5856DF0
	void HideComponent(class UPrimitiveComponent* InComponent);//Offset:Discovery.exe+0x5857200
	void HideActorComponents(class AActor* InActor, bool bIncludeFromChildActors);//Offset:Discovery.exe+0x5857110
	void ClearShowOnlyComponents();//Offset:Discovery.exe+0x5856DD0
	void ClearHiddenComponents();//Offset:Discovery.exe+0x5856DB0
};


// Class Engine.PlanarReflectionComponent
// 0x0160 (0x04F0 - 0x0390)
class UPlanarReflectionComponent : public USceneCaptureComponent
{
public:
	float                                              NormalDistortionStrength;                                 // 0x0390(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PrefilterRoughness;                                       // 0x0394(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PrefilterRoughnessDistance;                               // 0x0398(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                ScreenPercentage;                                         // 0x039C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ExtraFOV;                                                 // 0x03A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DistanceFromPlaneFadeStart;                               // 0x03A4(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              DistanceFromPlaneFadeEnd;                                 // 0x03A8(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              DistanceFromPlaneFadeoutStart;                            // 0x03AC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DistanceFromPlaneFadeoutEnd;                              // 0x03B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AngleFromPlaneFadeStart;                                  // 0x03B4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AngleFromPlaneFadeEnd;                                    // 0x03B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bShowPreviewPlane;                                        // 0x03BC(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bRenderSceneTwoSided;                                     // 0x03BD(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x132];                                     // 0x03BE(0x0132) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.PlanarReflectionComponent"));
		return ptr;
	}

};


// Class Engine.PlaneReflectionCapture
// 0x0000 (0x02D0 - 0x02D0)
class APlaneReflectionCapture : public AReflectionCapture
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.PlaneReflectionCapture"));
		return ptr;
	}

};


// Class Engine.PlaneReflectionCaptureComponent
// 0x0010 (0x0360 - 0x0350)
class UPlaneReflectionCaptureComponent : public UReflectionCaptureComponent
{
public:
	class UDrawSphereComponent*                        PreviewInfluenceRadius;                                   // 0x0350(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UBoxComponent*                               PreviewCaptureBox;                                        // 0x0358(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.PlaneReflectionCaptureComponent"));
		return ptr;
	}

};


// Class Engine.PlatformEventsComponent
// 0x0020 (0x00D8 - 0x00B8)
class UPlatformEventsComponent : public UActorComponent
{
public:
	struct FScriptMulticastDelegate                    PlatformChangedToLaptopModeDelegate;                      // 0x00B8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    PlatformChangedToTabletModeDelegate;                      // 0x00C8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.PlatformEventsComponent"));
		return ptr;
	}


	bool SupportsConvertibleLaptops();//Offset:Discovery.exe+0x5821310
	void PlatformEventDelegate__DelegateSignature();//Offset:Discovery.exe+0x327F8B0
	bool IsInTabletMode();//Offset:Discovery.exe+0x5821340
	bool IsInLaptopMode();//Offset:Discovery.exe+0x5821370
};


// Class Engine.PlatformInterfaceWebResponse
// 0x0088 (0x00B0 - 0x0028)
class UPlatformInterfaceWebResponse : public UObject
{
public:
	struct FString                                     OriginalURL;                                              // 0x0028(0x0010) (ZeroConstructor)
	int                                                ResponseCode;                                             // 0x0038(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                Tag;                                                      // 0x003C(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FString                                     StringResponse;                                           // 0x0040(0x0010) (ZeroConstructor)
	TArray<unsigned char>                              BinaryResponse;                                           // 0x0050(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData00[0x50];                                      // 0x0060(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.PlatformInterfaceWebResponse"));
		return ptr;
	}


	int GetNumHeaders();//Offset:Discovery.exe+0x1872090
	struct FString GetHeaderValue(const struct FString& HeaderName);//Offset:Discovery.exe+0x5821A40
	void GetHeader(int HeaderIndex, struct FString* Header, struct FString* Value);//Offset:Discovery.exe+0x5821B30
};


// Class Engine.PlayerInput
// 0x0470 (0x0498 - 0x0028)
class UPlayerInput : public UObject
{
public:
	unsigned char                                      UnknownData00[0x178];                                     // 0x0028(0x0178) MISSED OFFSET
	TArray<struct FKeyBind>                            DebugExecBindings;                                        // 0x01A0(0x0010) (ZeroConstructor, Config)
	unsigned char                                      UnknownData01[0x30];                                      // 0x01B0(0x0030) MISSED OFFSET
	TArray<struct FName>                               InvertedAxis;                                             // 0x01E0(0x0010) (ZeroConstructor, Config)
	unsigned char                                      UnknownData02[0x2A8];                                     // 0x01F0(0x02A8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.PlayerInput"));
		return ptr;
	}


	void SetMouseSensitivity(float Sensitivity);//Offset:Discovery.exe+0x5837A00
	void SetBind(const struct FName& BindName, const struct FString& Command);//Offset:Discovery.exe+0x5837910
	void InvertAxisKey(const struct FKey& AxisKey);//Offset:Discovery.exe+0x5837820
	void InvertAxis(const struct FName& AxisName);//Offset:Discovery.exe+0x5837780
	void ClearSmoothing();//Offset:Discovery.exe+0x5837760
};


// Class Engine.PlayerStart
// 0x0008 (0x02F8 - 0x02F0)
class APlayerStart : public ANavigationObjectBase
{
public:
	struct FName                                       PlayerStartTag;                                           // 0x02F0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.PlayerStart"));
		return ptr;
	}

};


// Class Engine.PlayerStartPIE
// 0x0000 (0x02F8 - 0x02F8)
class APlayerStartPIE : public APlayerStart
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.PlayerStartPIE"));
		return ptr;
	}

};


// Class Engine.PluginCommandlet
// 0x0020 (0x00A0 - 0x0080)
class UPluginCommandlet : public UCommandlet
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0080(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.PluginCommandlet"));
		return ptr;
	}

};


// Class Engine.PointLight
// 0x0008 (0x02E0 - 0x02D8)
class APointLight : public ALight
{
public:
	class UPointLightComponent*                        PointLightComponent;                                      // 0x02D8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.PointLight"));
		return ptr;
	}


	void SetRadius(float NewRadius);//Offset:Discovery.exe+0x5839560
	void SetLightFalloffExponent(float NewLightFalloffExponent);//Offset:Discovery.exe+0x58394C0
};


// Class Engine.PointLightComponent
// 0x0020 (0x0450 - 0x0430)
class UPointLightComponent : public ULocalLightComponent
{
public:
	unsigned char                                      bUseInverseSquaredFalloff : 1;                            // 0x0430(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0431(0x0003) MISSED OFFSET
	float                                              LightFalloffExponent;                                     // 0x0434(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              SourceRadius;                                             // 0x0438(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              SoftSourceRadius;                                         // 0x043C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              SourceLength;                                             // 0x0440(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0xC];                                       // 0x0444(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.PointLightComponent"));
		return ptr;
	}


	void SetSourceRadius(float bNewValue);//Offset:Discovery.exe+0x5839B00
	void SetSourceLength(float NewValue);//Offset:Discovery.exe+0x58399C0
	void SetSoftSourceRadius(float bNewValue);//Offset:Discovery.exe+0x5839A60
	void SetLightFalloffExponent(float NewLightFalloffExponent);//Offset:Discovery.exe+0x5839C40
	void SetInverseExposureBlend(float NewInverseExposureBlend);//Offset:Discovery.exe+0x5839BA0
};


// Class Engine.Polys
// 0x0010 (0x0038 - 0x0028)
class UPolys : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0028(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.Polys"));
		return ptr;
	}

};


// Class Engine.PoseAsset
// 0x0080 (0x0100 - 0x0080)
class UPoseAsset : public UAnimationAsset
{
public:
	struct FPoseDataContainer                          PoseContainer;                                            // 0x0080(0x0060)
	bool                                               bAdditivePose;                                            // 0x00E0(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00E1(0x0003) MISSED OFFSET
	int                                                BasePoseIndex;                                            // 0x00E4(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FName                                       RetargetSource;                                           // 0x00E8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<struct FTransform>                          RetargetSourceAssetReferencePose;                         // 0x00F0(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.PoseAsset"));
		return ptr;
	}

};


// Class Engine.PoseWatchFolder
// 0x0000 (0x0028 - 0x0028)
class UPoseWatchFolder : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.PoseWatchFolder"));
		return ptr;
	}

};


// Class Engine.PoseWatch
// 0x0000 (0x0028 - 0x0028)
class UPoseWatch : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.PoseWatch"));
		return ptr;
	}

};


// Class Engine.PostProcessComponent
// 0x06E0 (0x09B0 - 0x02D0)
class UPostProcessComponent : public USceneComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x02D0(0x0010) MISSED OFFSET
	struct FPostProcessSettings                        Settings;                                                 // 0x02E0(0x06C0) (Edit, BlueprintVisible)
	float                                              Priority;                                                 // 0x09A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BlendRadius;                                              // 0x09A4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BlendWeight;                                              // 0x09A8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bEnabled : 1;                                             // 0x09AC(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUnbound : 1;                                             // 0x09AC(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData01[0x3];                                       // 0x09AD(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.PostProcessComponent"));
		return ptr;
	}


	void AddOrUpdateBlendable(const TScriptInterface<class UBlendableInterface>& InBlendableObject, float InWeight);//Offset:Discovery.exe+0x583B980
};


// Class Engine.PostProcessVolume
// 0x06E0 (0x09E0 - 0x0300)
class APostProcessVolume : public AVolume
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0300(0x0010) MISSED OFFSET
	struct FPostProcessSettings                        Settings;                                                 // 0x0310(0x06C0) (Edit, BlueprintVisible)
	float                                              Priority;                                                 // 0x09D0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BlendRadius;                                              // 0x09D4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BlendWeight;                                              // 0x09D8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bEnabled : 1;                                             // 0x09DC(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUnbound : 1;                                             // 0x09DC(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData01[0x3];                                       // 0x09DD(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.PostProcessVolume"));
		return ptr;
	}


	void AddOrUpdateBlendable(const TScriptInterface<class UBlendableInterface>& InBlendableObject, float InWeight);//Offset:Discovery.exe+0x583D240
};


// Class Engine.PrecomputedVisibilityOverrideVolume
// 0x0030 (0x0330 - 0x0300)
class APrecomputedVisibilityOverrideVolume : public AVolume
{
public:
	TArray<class AActor*>                              OverrideVisibleActors;                                    // 0x0300(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<class AActor*>                              OverrideInvisibleActors;                                  // 0x0310(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FName>                               OverrideInvisibleLevels;                                  // 0x0320(0x0010) (Edit, BlueprintVisible, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.PrecomputedVisibilityOverrideVolume"));
		return ptr;
	}

};


// Class Engine.PrecomputedVisibilityVolume
// 0x0000 (0x0300 - 0x0300)
class APrecomputedVisibilityVolume : public AVolume
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.PrecomputedVisibilityVolume"));
		return ptr;
	}

};


// Class Engine.PreviewCollectionInterface
// 0x0000 (0x0028 - 0x0028)
class UPreviewCollectionInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.PreviewCollectionInterface"));
		return ptr;
	}

};


// Class Engine.PreviewMeshCollection
// 0x0020 (0x0050 - 0x0030)
class UPreviewMeshCollection : public UDataAsset
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0030(0x0008) MISSED OFFSET
	class USkeleton*                                   Skeleton;                                                 // 0x0038(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	TArray<struct FPreviewMeshCollectionEntry>         SkeletalMeshes;                                           // 0x0040(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.PreviewMeshCollection"));
		return ptr;
	}

};


// Class Engine.PrimaryAssetLabel
// 0x0038 (0x0068 - 0x0030)
class UPrimaryAssetLabel : public UPrimaryDataAsset
{
public:
	struct FPrimaryAssetRules                          Rules;                                                    // 0x0030(0x000C) (Edit)
	unsigned char                                      bLabelAssetsInMyDirectory : 1;                            // 0x003C(0x0001) (Edit)
	unsigned char                                      bIsRuntimeLabel : 1;                                      // 0x003C(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x003D(0x0003) MISSED OFFSET
	unsigned char                                      UnknownData01[0x10];                                      // 0x003D(0x0010) UNKNOWN PROPERTY: ExplicitAssets
	unsigned char                                      UnknownData02[0x10];                                      // 0x0050(0x0010) UNKNOWN PROPERTY: ExplicitBlueprints
	struct FCollectionReference                        AssetCollection;                                          // 0x0060(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.PrimaryAssetLabel"));
		return ptr;
	}

};


// Class Engine.ProjectileMovementComponent
// 0x0140 (0x0260 - 0x0120)
class UProjectileMovementComponent : public UMovementComponent
{
public:
	float                                              InitialSpeed;                                             // 0x0120(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxSpeed;                                                 // 0x0124(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bRotationFollowsVelocity : 1;                             // 0x0128(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bRotationRemainsVertical : 1;                             // 0x0128(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bShouldBounce : 1;                                        // 0x0128(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bInitialVelocityInLocalSpace : 1;                         // 0x0128(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bForceSubStepping : 1;                                    // 0x0128(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bSimulationEnabled : 1;                                   // 0x0128(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bSweepCollision : 1;                                      // 0x0128(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bIsHomingProjectile : 1;                                  // 0x0128(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bBounceAngleAffectsFriction : 1;                          // 0x0129(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bIsSliding : 1;                                           // 0x0129(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst)
	unsigned char                                      bInterpMovement : 1;                                      // 0x0129(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bInterpRotation : 1;                                      // 0x0129(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x2];                                       // 0x012A(0x0002) MISSED OFFSET
	float                                              PreviousHitTime;                                          // 0x012C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	struct FVector                                     PreviousHitNormal;                                        // 0x0130(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	float                                              ProjectileGravityScale;                                   // 0x0148(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Buoyancy;                                                 // 0x014C(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              Bounciness;                                               // 0x0150(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Friction;                                                 // 0x0154(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BounceVelocityStopSimulatingThreshold;                    // 0x0158(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinFrictionFraction;                                      // 0x015C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnProjectileBounce;                                       // 0x0160(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnProjectileStop;                                         // 0x0170(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	float                                              HomingAccelerationMagnitude;                              // 0x0180(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TWeakObjectPtr<class USceneComponent>              HomingTargetComponent;                                    // 0x0184(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, IsPlainOldData)
	float                                              MaxSimulationTimeStep;                                    // 0x018C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                MaxSimulationIterations;                                  // 0x0190(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                BounceAdditionalIterations;                               // 0x0194(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              InterpLocationTime;                                       // 0x0198(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              InterpRotationTime;                                       // 0x019C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              InterpLocationMaxLagDistance;                             // 0x01A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              InterpLocationSnapToTargetDistance;                       // 0x01A4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0xB8];                                      // 0x01A8(0x00B8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ProjectileMovementComponent"));
		return ptr;
	}


	void StopSimulating(const struct FHitResult& HitResult);//Offset:Discovery.exe+0x584B710
	void SetVelocityInLocalSpace(const struct FVector& NewVelocity);//Offset:Discovery.exe+0x584B880
	void SetInterpolatedComponent(class USceneComponent* Component);//Offset:Discovery.exe+0x584B670
	void ResetInterpolation();//Offset:Discovery.exe+0x584B560
	void OnProjectileStopDelegate__DelegateSignature(const struct FHitResult& ImpactResult);//Offset:Discovery.exe+0x327F8B0
	void OnProjectileBounceDelegate__DelegateSignature(const struct FHitResult& ImpactResult, const struct FVector& ImpactVelocity);//Offset:Discovery.exe+0x327F8B0
	void MoveInterpolationTarget(const struct FVector& NewLocation, const struct FRotator& NewRotation);//Offset:Discovery.exe+0x584B580
	struct FVector LimitVelocity(const struct FVector& NewVelocity);//Offset:Discovery.exe+0x584B470
	bool IsVelocityUnderSimulationThreshold();//Offset:Discovery.exe+0x584B930
	bool IsInterpolationComplete();//Offset:Discovery.exe+0x584B530
};


// Class Engine.ProxyLODMeshSimplificationSettings
// 0x0008 (0x0040 - 0x0038)
class UProxyLODMeshSimplificationSettings : public UDeveloperSettings
{
public:
	struct FName                                       ProxyLODMeshReductionModuleName;                          // 0x0038(0x0008) (Edit, ZeroConstructor, Config, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ProxyLODMeshSimplificationSettings"));
		return ptr;
	}

};


// Class Engine.RadialForceActor
// 0x0008 (0x02D0 - 0x02C8)
class ARadialForceActor : public ARigidBodyBase
{
public:
	class URadialForceComponent*                       ForceComponent;                                           // 0x02C8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.RadialForceActor"));
		return ptr;
	}


	void ToggleForce();//Offset:Discovery.exe+0x14624B0
	void FireImpulse();//Offset:Discovery.exe+0x19BFD70
	void EnableForce();//Offset:Discovery.exe+0x1462470
	void DisableForce();//Offset:Discovery.exe+0x1462490
};


// Class Engine.RadialForceComponent
// 0x0030 (0x0300 - 0x02D0)
class URadialForceComponent : public USceneComponent
{
public:
	float                                              Radius;                                                   // 0x02D0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ERadialImpulseFalloff>                 Falloff;                                                  // 0x02D4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x02D5(0x0003) MISSED OFFSET
	float                                              ImpulseStrength;                                          // 0x02D8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bImpulseVelChange : 1;                                    // 0x02DC(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bIgnoreOwningActor : 1;                                   // 0x02DC(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData01[0x3];                                       // 0x02DD(0x0003) MISSED OFFSET
	float                                              ForceStrength;                                            // 0x02E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DestructibleDamage;                                       // 0x02E4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<TEnumAsByte<EObjectTypeQuery>>              ObjectTypesToAffect;                                      // 0x02E8(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData02[0x8];                                       // 0x02F8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.RadialForceComponent"));
		return ptr;
	}


	void RemoveObjectTypeToAffect(TEnumAsByte<EObjectTypeQuery> ObjectType);//Offset:Discovery.exe+0x584D1F0
	void FireImpulse();//Offset:Discovery.exe+0x44C2860
	void AddObjectTypeToAffect(TEnumAsByte<EObjectTypeQuery> ObjectType);//Offset:Discovery.exe+0x584D290
};


// Class Engine.RectLight
// 0x0008 (0x02E0 - 0x02D8)
class ARectLight : public ALight
{
public:
	class URectLightComponent*                         RectLightComponent;                                       // 0x02D8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.RectLight"));
		return ptr;
	}

};


// Class Engine.RectLightComponent
// 0x0020 (0x0450 - 0x0430)
class URectLightComponent : public ULocalLightComponent
{
public:
	float                                              SourceWidth;                                              // 0x0430(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              SourceHeight;                                             // 0x0434(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              BarnDoorAngle;                                            // 0x0438(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              BarnDoorLength;                                           // 0x043C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UTexture*                                    SourceTexture;                                            // 0x0440(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0448(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.RectLightComponent"));
		return ptr;
	}


	void SetSourceWidth(float bNewValue);//Offset:Discovery.exe+0x584DA70
	void SetSourceTexture(class UTexture* bNewValue);//Offset:Discovery.exe+0x584DB10
	void SetSourceHeight(float NewValue);//Offset:Discovery.exe+0x5839C40
	void SetBarnDoorLength(float NewValue);//Offset:Discovery.exe+0x584D930
	void SetBarnDoorAngle(float NewValue);//Offset:Discovery.exe+0x584D9D0
};


// Class Engine.RendererSettings
// 0x0188 (0x01C0 - 0x0038)
class URendererSettings : public UDeveloperSettings
{
public:
	unsigned char                                      bMobileDisableVertexFog : 1;                              // 0x0038(0x0001) (Edit, Config)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0039(0x0003) MISSED OFFSET
	int                                                MaxMobileCascades;                                        // 0x003C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	TEnumAsByte<EMobileAntiAliasingMethod>             MobileAntiAliasing;                                       // 0x0040(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	TEnumAsByte<EMobileFloatPrecisionMode>             MobileFloatPrecisionMode;                                 // 0x0041(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x0042(0x0002) MISSED OFFSET
	unsigned char                                      bMobileAllowDitheredLODTransition : 1;                    // 0x0044(0x0001) (Edit, Config)
	unsigned char                                      bMobileVirtualTextures : 1;                               // 0x0044(0x0001) (Edit, Config)
	unsigned char                                      bReflectionCaptureCompression : 1;                        // 0x0044(0x0001) (Edit, Config)
	unsigned char                                      bDiscardUnusedQualityLevels : 1;                          // 0x0044(0x0001) (Edit, Config)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0045(0x0003) MISSED OFFSET
	TEnumAsByte<EShaderCompressionFormat>              ShaderCompressionFormat;                                  // 0x0048(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0049(0x0003) MISSED OFFSET
	unsigned char                                      bOcclusionCulling : 1;                                    // 0x004C(0x0001) (Edit, Config)
	unsigned char                                      UnknownData04[0x3];                                       // 0x004D(0x0003) MISSED OFFSET
	float                                              MinScreenRadiusForLights;                                 // 0x0050(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              MinScreenRadiusForEarlyZPass;                             // 0x0054(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              MinScreenRadiusForCSMdepth;                               // 0x0058(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      bPrecomputedVisibilityWarning : 1;                        // 0x005C(0x0001) (Edit, Config)
	unsigned char                                      bTextureStreaming : 1;                                    // 0x005C(0x0001) (Edit, Config)
	unsigned char                                      bUseDXT5NormalMaps : 1;                                   // 0x005C(0x0001) (Edit, Config)
	unsigned char                                      bVirtualTextures : 1;                                     // 0x005C(0x0001) (Edit, Config)
	unsigned char                                      bVirtualTextureEnableAutoImport : 1;                      // 0x005C(0x0001) (Edit, Config)
	unsigned char                                      bVirtualTexturedLightmaps : 1;                            // 0x005C(0x0001) (Edit, Config)
	unsigned char                                      bVirtualTextureAnisotropicFiltering : 1;                  // 0x005C(0x0001) (Edit, Config)
	unsigned char                                      UnknownData05[0x3];                                       // 0x005D(0x0003) MISSED OFFSET
	uint32_t                                           VirtualTextureTileSize;                                   // 0x0060(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	uint32_t                                           VirtualTextureTileBorderSize;                             // 0x0064(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	uint32_t                                           VirtualTextureFeedbackFactor;                             // 0x0068(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	TEnumAsByte<EWorkingColorSpace>                    WorkingColorSpaceChoice;                                  // 0x006C(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData06[0x3];                                       // 0x006D(0x0003) MISSED OFFSET
	struct FVector2D                                   RedChromaticityCoordinate;                                // 0x0070(0x0010) (Edit, ZeroConstructor, Config, IsPlainOldData)
	struct FVector2D                                   GreenChromaticityCoordinate;                              // 0x0080(0x0010) (Edit, ZeroConstructor, Config, IsPlainOldData)
	struct FVector2D                                   BlueChromaticityCoordinate;                               // 0x0090(0x0010) (Edit, ZeroConstructor, Config, IsPlainOldData)
	struct FVector2D                                   WhiteChromaticityCoordinate;                              // 0x00A0(0x0010) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      bClearCoatEnableSecondNormal : 1;                         // 0x00B0(0x0001) (Edit, Config)
	unsigned char                                      UnknownData07[0x3];                                       // 0x00B1(0x0003) MISSED OFFSET
	TEnumAsByte<EDynamicGlobalIlluminationMethod>      DynamicGlobalIllumination;                                // 0x00B4(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	TEnumAsByte<EReflectionMethod>                     Reflections;                                              // 0x00B5(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData08[0x2];                                       // 0x00B6(0x0002) MISSED OFFSET
	int                                                ReflectionCaptureResolution;                              // 0x00B8(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      ReflectionEnvironmentLightmapMixBasedOnRoughness : 1;     // 0x00BC(0x0001) (Edit, Config)
	unsigned char                                      bUseHardwareRayTracingForLumen : 1;                       // 0x00BC(0x0001) (Edit, Config)
	unsigned char                                      UnknownData09[0x3];                                       // 0x00BD(0x0003) MISSED OFFSET
	enum class ELumenRayLightingMode                   LumenRayLightingMode;                                     // 0x00C0(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	TEnumAsByte<ELumenSoftwareTracingMode>             LumenSoftwareTracingMode;                                 // 0x00C1(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	TEnumAsByte<EShadowMapMethod>                      ShadowMapMethod;                                          // 0x00C2(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData10[0x1];                                       // 0x00C3(0x0001) MISSED OFFSET
	unsigned char                                      bEnableRayTracing : 1;                                    // 0x00C4(0x0001) (Edit, Config)
	unsigned char                                      bEnableRayTracingShadows : 1;                             // 0x00C4(0x0001) (Edit, Config)
	unsigned char                                      bEnableRayTracingSkylight : 1;                            // 0x00C4(0x0001) (Edit, Config)
	unsigned char                                      bEnableRayTracingTextureLOD : 1;                          // 0x00C4(0x0001) (Edit, Config)
	unsigned char                                      bEnablePathTracing : 1;                                   // 0x00C4(0x0001) (Edit, Config)
	unsigned char                                      bGenerateMeshDistanceFields : 1;                          // 0x00C4(0x0001) (Edit, Config)
	unsigned char                                      UnknownData11[0x3];                                       // 0x00C5(0x0003) MISSED OFFSET
	float                                              DistanceFieldVoxelDensity;                                // 0x00C8(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      bAllowStaticLighting : 1;                                 // 0x00CC(0x0001) (Edit, Config)
	unsigned char                                      bUseNormalMapsForStaticLighting : 1;                      // 0x00CC(0x0001) (Edit, Config)
	unsigned char                                      bForwardShading : 1;                                      // 0x00CC(0x0001) (Edit, Config)
	unsigned char                                      bVertexFoggingForOpaque : 1;                              // 0x00CC(0x0001) (Edit, Config)
	unsigned char                                      bSeparateTranslucency : 1;                                // 0x00CC(0x0001) (Edit, Config)
	unsigned char                                      UnknownData12[0x3];                                       // 0x00CD(0x0003) MISSED OFFSET
	TEnumAsByte<ETranslucentSortPolicy>                TranslucentSortPolicy;                                    // 0x00D0(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData13[0x7];                                       // 0x00D1(0x0007) MISSED OFFSET
	struct FVector                                     TranslucentSortAxis;                                      // 0x00D8(0x0018) (Edit, ZeroConstructor, Config, IsPlainOldData)
	TEnumAsByte<EFixedFoveationLevels>                 HMDFixedFoveationLevel;                                   // 0x00F0(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData14[0x3];                                       // 0x00F1(0x0003) MISSED OFFSET
	unsigned char                                      bHMDFixedFoveationDynamic : 1;                            // 0x00F4(0x0001) (Edit, Config)
	unsigned char                                      UnknownData15[0x3];                                       // 0x00F5(0x0003) MISSED OFFSET
	TEnumAsByte<ECustomDepthStencil>                   CustomDepthStencil;                                       // 0x00F8(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData16[0x3];                                       // 0x00F9(0x0003) MISSED OFFSET
	unsigned char                                      bCustomDepthTaaJitter : 1;                                // 0x00FC(0x0001) (Edit, Config)
	unsigned char                                      UnknownData17[0x3];                                       // 0x00FD(0x0003) MISSED OFFSET
	TEnumAsByte<EAlphaChannelMode>                     bEnableAlphaChannelInPostProcessing;                      // 0x0100(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData18[0x3];                                       // 0x0101(0x0003) MISSED OFFSET
	unsigned char                                      bDefaultFeatureBloom : 1;                                 // 0x0104(0x0001) (Edit, Config)
	unsigned char                                      bDefaultFeatureAmbientOcclusion : 1;                      // 0x0104(0x0001) (Edit, Config)
	unsigned char                                      bDefaultFeatureAmbientOcclusionStaticFraction : 1;        // 0x0104(0x0001) (Edit, Config)
	unsigned char                                      bDefaultFeatureAutoExposure : 1;                          // 0x0104(0x0001) (Edit, Config)
	unsigned char                                      UnknownData19[0x3];                                       // 0x0105(0x0003) MISSED OFFSET
	TEnumAsByte<EAutoExposureMethodUI>                 DefaultFeatureAutoExposure;                               // 0x0108(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData20[0x3];                                       // 0x0109(0x0003) MISSED OFFSET
	float                                              DefaultFeatureAutoExposureBias;                           // 0x010C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      bExtendDefaultLuminanceRangeInAutoExposureSettings : 1;   // 0x0110(0x0001) (Edit, Config)
	unsigned char                                      bDefaultFeatureMotionBlur : 1;                            // 0x0110(0x0001) (Edit, Config)
	unsigned char                                      bDefaultFeatureLensFlare : 1;                             // 0x0110(0x0001) (Edit, Config)
	unsigned char                                      bTemporalUpsampling : 1;                                  // 0x0110(0x0001) (Edit, Config)
	unsigned char                                      UnknownData21[0x3];                                       // 0x0111(0x0003) MISSED OFFSET
	TEnumAsByte<EAntiAliasingMethod>                   DefaultFeatureAntiAliasing;                               // 0x0114(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	TEnumAsByte<ECompositingSampleCount>               MSAASampleCount;                                          // 0x0115(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	enum class ELightUnits                             DefaultLightUnits;                                        // 0x0116(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	TEnumAsByte<EDefaultBackBufferPixelFormat>         DefaultBackBufferPixelFormat;                             // 0x0117(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      bRenderUnbuiltPreviewShadowsInGame : 1;                   // 0x0118(0x0001) (Edit, Config)
	unsigned char                                      bStencilForLODDither : 1;                                 // 0x0118(0x0001) (Edit, Config)
	unsigned char                                      UnknownData22[0x3];                                       // 0x0119(0x0003) MISSED OFFSET
	TEnumAsByte<EEarlyZPass>                           EarlyZPass;                                               // 0x011C(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData23[0x3];                                       // 0x011D(0x0003) MISSED OFFSET
	unsigned char                                      bEarlyZPassOnlyMaterialMasking : 1;                       // 0x0120(0x0001) (Edit, Config)
	unsigned char                                      bEnableCSMCaching : 1;                                    // 0x0120(0x0001) (Edit, Config)
	unsigned char                                      bDBuffer : 1;                                             // 0x0120(0x0001) (Edit, Config)
	unsigned char                                      UnknownData24[0x3];                                       // 0x0121(0x0003) MISSED OFFSET
	TEnumAsByte<EClearSceneOptions>                    ClearSceneMethod;                                         // 0x0124(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	TEnumAsByte<EVelocityOutputPass>                   VelocityPass;                                             // 0x0125(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	TEnumAsByte<EVertexDeformationOutputsVelocity>     VertexDeformationOutputsVelocity;                         // 0x0126(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData25[0x1];                                       // 0x0127(0x0001) MISSED OFFSET
	unsigned char                                      bSelectiveBasePassOutputs : 1;                            // 0x0128(0x0001) (Edit, Config)
	unsigned char                                      bDefaultParticleCutouts : 1;                              // 0x0128(0x0001) (Edit, Config)
	unsigned char                                      UnknownData26[0x3];                                       // 0x0129(0x0003) MISSED OFFSET
	int                                                GPUSimulationTextureSizeX;                                // 0x012C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	int                                                GPUSimulationTextureSizeY;                                // 0x0130(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      bGlobalClipPlane : 1;                                     // 0x0134(0x0001) (Edit, Config)
	unsigned char                                      UnknownData27[0x3];                                       // 0x0135(0x0003) MISSED OFFSET
	TEnumAsByte<EGBufferFormat>                        GBufferFormat;                                            // 0x0138(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData28[0x3];                                       // 0x0139(0x0003) MISSED OFFSET
	unsigned char                                      bUseGPUMorphTargets : 1;                                  // 0x013C(0x0001) (Edit, Config)
	unsigned char                                      bNvidiaAftermathEnabled : 1;                              // 0x013C(0x0001) (Edit, Config)
	unsigned char                                      bMultiView : 1;                                           // 0x013C(0x0001) (Edit, Config)
	unsigned char                                      bMobilePostProcessing : 1;                                // 0x013C(0x0001) (Edit, Config)
	unsigned char                                      bMobileMultiView : 1;                                     // 0x013C(0x0001) (Edit, Config)
	unsigned char                                      bMobileUseHWsRGBEncoding : 1;                             // 0x013C(0x0001) (Config)
	unsigned char                                      bRoundRobinOcclusion : 1;                                 // 0x013C(0x0001) (Edit, Config)
	unsigned char                                      bODSCapture : 1;                                          // 0x013C(0x0001) (Edit, Config)
	unsigned char                                      bMeshStreaming : 1;                                       // 0x013D(0x0001) (Edit, Config)
	unsigned char                                      UnknownData29[0x2];                                       // 0x013E(0x0002) MISSED OFFSET
	float                                              WireframeCullThreshold;                                   // 0x0140(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      bSupportStationarySkylight : 1;                           // 0x0144(0x0001) (Edit, Config)
	unsigned char                                      bSupportLowQualityLightmaps : 1;                          // 0x0144(0x0001) (Edit, Config)
	unsigned char                                      bSupportPointLightWholeSceneShadows : 1;                  // 0x0144(0x0001) (Edit, Config)
	unsigned char                                      bSupportSkyAtmosphere : 1;                                // 0x0144(0x0001) (Edit, Config)
	unsigned char                                      bSupportSkyAtmosphereAffectsHeightFog : 1;                // 0x0144(0x0001) (Edit, Config)
	unsigned char                                      bSupportCloudShadowOnForwardLitTranslucent : 1;           // 0x0144(0x0001) (Edit, Config)
	unsigned char                                      UnknownData30[0x7];                                       // 0x0145(0x0007) MISSED OFFSET
	unsigned char                                      bMaterialRoughDiffuse : 1;                                // 0x014C(0x0001) (Edit, Config)
	unsigned char                                      bMaterialEnergyConservation : 1;                          // 0x014C(0x0001) (Edit, Config)
	unsigned char                                      bSupportSkinCacheShaders : 1;                             // 0x014C(0x0001) (Edit, Config)
	unsigned char                                      UnknownData31[0x3];                                       // 0x014D(0x0003) MISSED OFFSET
	enum class ESkinCacheDefaultBehavior               DefaultSkinCacheBehavior;                                 // 0x0150(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData32[0x3];                                       // 0x0151(0x0003) MISSED OFFSET
	float                                              SkinCacheSceneMemoryLimitInMB;                            // 0x0154(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      bMobileEnableStaticAndCSMShadowReceivers : 1;             // 0x0158(0x0001) (Edit, Config)
	unsigned char                                      bMobileEnableMovableLightCSMShaderCulling : 1;            // 0x0158(0x0001) (Edit, Config)
	unsigned char                                      bMobileEnableNoPrecomputedLightingCSMShader : 1;          // 0x0158(0x0001) (Edit, Config)
	unsigned char                                      bMobileAllowDistanceFieldShadows : 1;                     // 0x0158(0x0001) (Edit, Config)
	unsigned char                                      bMobileAllowMovableDirectionalLights : 1;                 // 0x0158(0x0001) (Edit, Config)
	unsigned char                                      UnknownData33[0x3];                                       // 0x0159(0x0003) MISSED OFFSET
	uint32_t                                           MobileNumDynamicPointLights;                              // 0x015C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      bMobileAllowMovableSpotlights : 1;                        // 0x0160(0x0001) (Edit, Config)
	unsigned char                                      bMobileAllowMovableSpotlightShadows : 1;                  // 0x0160(0x0001) (Edit, Config)
	unsigned char                                      bSupport16BitBoneIndex : 1;                               // 0x0160(0x0001) (Edit, Config)
	unsigned char                                      bGPUSkinLimit2BoneInfluences : 1;                         // 0x0160(0x0001) (Edit, Config)
	unsigned char                                      bSupportDepthOnlyIndexBuffers : 1;                        // 0x0160(0x0001) (Edit, Config)
	unsigned char                                      bSupportReversedIndexBuffers : 1;                         // 0x0160(0x0001) (Edit, Config)
	unsigned char                                      bMobileAmbientOcclusion : 1;                              // 0x0160(0x0001) (Edit, Config)
	unsigned char                                      bUseUnlimitedBoneInfluences : 1;                          // 0x0160(0x0001) (Edit, Config)
	unsigned char                                      UnknownData34[0x3];                                       // 0x0161(0x0003) MISSED OFFSET
	int                                                UnlimitedBonInfluencesThreshold;                          // 0x0164(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	struct FPerPlatformInt                             MaxSkinBones;                                             // 0x0168(0x0004) (Edit, Config)
	TEnumAsByte<EMobilePlanarReflectionMode>           MobilePlanarReflectionMode;                               // 0x016C(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData35[0x3];                                       // 0x016D(0x0003) MISSED OFFSET
	unsigned char                                      bMobileSupportsGen4TAA : 1;                               // 0x0170(0x0001) (Edit, Config)
	unsigned char                                      UnknownData36[0x3];                                       // 0x0171(0x0003) MISSED OFFSET
	struct FPerPlatformBool                            bStreamSkeletalMeshLODs;                                  // 0x0174(0x0001) (Edit, Config)
	struct FPerPlatformBool                            bDiscardSkeletalMeshOptionalLODs;                         // 0x0175(0x0001) (Edit, Config)
	unsigned char                                      UnknownData37[0x2];                                       // 0x0176(0x0002) MISSED OFFSET
	struct FSoftObjectPath                             VisualizeCalibrationColorMaterialPath;                    // 0x0178(0x0018) (Edit, ZeroConstructor, Config)
	struct FSoftObjectPath                             VisualizeCalibrationCustomMaterialPath;                   // 0x0190(0x0018) (Edit, ZeroConstructor, Config)
	struct FSoftObjectPath                             VisualizeCalibrationGrayscaleMaterialPath;                // 0x01A8(0x0018) (Edit, ZeroConstructor, Config)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.RendererSettings"));
		return ptr;
	}

};


// Class Engine.RendererOverrideSettings
// 0x0008 (0x0040 - 0x0038)
class URendererOverrideSettings : public UDeveloperSettings
{
public:
	unsigned char                                      bSupportAllShaderPermutations : 1;                        // 0x0038(0x0001) (Edit, Config)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0039(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.RendererOverrideSettings"));
		return ptr;
	}

};


// Class Engine.ReplayNetConnection
// 0x0900 (0x3B40 - 0x3240)
class UReplayNetConnection : public UNetConnection
{
public:
	unsigned char                                      UnknownData00[0x900];                                     // 0x3240(0x0900) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ReplayNetConnection"));
		return ptr;
	}

};


// Class Engine.ReplaySubsystem
// 0x0010 (0x0040 - 0x0030)
class UReplaySubsystem : public UGameInstanceSubsystem
{
public:
	bool                                               bLoadDefaultMapOnStop;                                    // 0x0030(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xF];                                       // 0x0031(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ReplaySubsystem"));
		return ptr;
	}


	void RequestCheckpoint();//Offset:Discovery.exe+0x584FC10
	bool IsRecording();//Offset:Discovery.exe+0x584FC60
	bool IsPlaying();//Offset:Discovery.exe+0x584FC30
	float GetReplayCurrentTime();//Offset:Discovery.exe+0x584FC90
	struct FString GetActiveReplayName();//Offset:Discovery.exe+0x584FCC0
};


// Class Engine.ReporterBase
// 0x0008 (0x0030 - 0x0028)
class UReporterBase : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ReporterBase"));
		return ptr;
	}

};


// Class Engine.ReporterGraph
// 0x0098 (0x00C8 - 0x0030)
class UReporterGraph : public UReporterBase
{
public:
	unsigned char                                      UnknownData00[0x98];                                      // 0x0030(0x0098) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ReporterGraph"));
		return ptr;
	}

};


// Class Engine.ReverbEffect
// 0x0038 (0x0060 - 0x0028)
class UReverbEffect : public UObject
{
public:
	bool                                               bBypassEarlyReflections;                                  // 0x0028(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0029(0x0003) MISSED OFFSET
	float                                              ReflectionsDelay;                                         // 0x002C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              GainHF;                                                   // 0x0030(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ReflectionsGain;                                          // 0x0034(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bBypassLateReflections;                                   // 0x0038(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0039(0x0003) MISSED OFFSET
	float                                              LateDelay;                                                // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DecayTime;                                                // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Density;                                                  // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Diffusion;                                                // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AirAbsorptionGainHF;                                      // 0x004C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DecayHFRatio;                                             // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              LateGain;                                                 // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Gain;                                                     // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              RoomRolloffFactor;                                        // 0x005C(0x0004) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ReverbEffect"));
		return ptr;
	}

};


// Class Engine.Rig
// 0x0028 (0x0050 - 0x0028)
class URig : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	TArray<struct FTransformBase>                      TransformBases;                                           // 0x0030(0x0010) (Edit, EditFixedSize, ZeroConstructor)
	TArray<struct FNode>                               Nodes;                                                    // 0x0040(0x0010) (Edit, EditFixedSize, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.Rig"));
		return ptr;
	}

};


// Class Engine.RotatingMovementComponent
// 0x0038 (0x0158 - 0x0120)
class URotatingMovementComponent : public UMovementComponent
{
public:
	struct FRotator                                    RotationRate;                                             // 0x0120(0x0018) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     PivotTranslation;                                         // 0x0138(0x0018) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bRotationInLocalSpace : 1;                                // 0x0150(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0151(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.RotatingMovementComponent"));
		return ptr;
	}

};


// Class Engine.RPCDoSDetectionConfig
// 0x0050 (0x0078 - 0x0028)
class URPCDoSDetectionConfig : public UObject
{
public:
	bool                                               bRPCDoSDetection;                                         // 0x0028(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bRPCDoSAnalytics;                                         // 0x0029(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x002A(0x0002) MISSED OFFSET
	int                                                HitchTimeQuotaMS;                                         // 0x002C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                HitchSuspendDetectionTimeMS;                              // 0x0030(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0034(0x0004) MISSED OFFSET
	TArray<struct FString>                             DetectionSeverity;                                        // 0x0038(0x0010) (ZeroConstructor, Config)
	int                                                InitialConnectToleranceMS;                                // 0x0048(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x004C(0x0004) MISSED OFFSET
	TArray<struct FName>                               RPCBlockWhitelist;                                        // 0x0050(0x0010) (ZeroConstructor, Config)
	TArray<struct FRPCAnalyticsThreshold>              RPCAnalyticsThresholds;                                   // 0x0060(0x0010) (ZeroConstructor, Config)
	double                                             RPCAnalyticsOverrideChance;                               // 0x0070(0x0008) (ZeroConstructor, Config, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.RPCDoSDetectionConfig"));
		return ptr;
	}

};


// Class Engine.RuntimeVirtualTexture
// 0x00B8 (0x00E0 - 0x0028)
class URuntimeVirtualTexture : public UObject
{
public:
	int                                                TileCount;                                                // 0x0028(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                TileSize;                                                 // 0x002C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                TileBorderSize;                                           // 0x0030(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	enum class ERuntimeVirtualTextureMaterialType      MaterialType;                                             // 0x0034(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bCompressTextures;                                        // 0x0035(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bUseLowQualityCompression;                                // 0x0036(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bClearTextures;                                           // 0x0037(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bSinglePhysicalSpace;                                     // 0x0038(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bPrivateSpace;                                            // 0x0039(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bAdaptive;                                                // 0x003A(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bContinuousUpdate;                                        // 0x003B(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                RemoveLowMips;                                            // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ETextureGroup>                         LODGroup;                                                 // 0x0040(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0041(0x0003) MISSED OFFSET
	int                                                Size;                                                     // 0x0044(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	class URuntimeVirtualTextureStreamingProxy*        StreamingTexture;                                         // 0x0048(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData)
	unsigned char                                      UnknownData01[0x90];                                      // 0x0050(0x0090) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.RuntimeVirtualTexture"));
		return ptr;
	}


	int GetTileSize();//Offset:Discovery.exe+0x58529E0
	int GetTileCount();//Offset:Discovery.exe+0x5852A30
	int GetTileBorderSize();//Offset:Discovery.exe+0x5852990
	int GetSize();//Offset:Discovery.exe+0x58528C0
	int GetPageTableSize();//Offset:Discovery.exe+0x5852890
};


// Class Engine.RuntimeVirtualTextureComponent
// 0x0080 (0x0350 - 0x02D0)
class URuntimeVirtualTextureComponent : public USceneComponent
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x02D0(0x0028) UNKNOWN PROPERTY: BoundsAlignActor
	bool                                               bSetBoundsButton;                                         // 0x02F8(0x0001) (Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	bool                                               bSnapBoundsToLandscape;                                   // 0x02F9(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x6];                                       // 0x02FA(0x0006) MISSED OFFSET
	class URuntimeVirtualTexture*                      VirtualTexture;                                           // 0x0300(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bEnableScalability;                                       // 0x0308(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0309(0x0003) MISSED OFFSET
	uint32_t                                           ScalabilityGroup;                                         // 0x030C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bHidePrimitives;                                          // 0x0310(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x7];                                       // 0x0311(0x0007) MISSED OFFSET
	class UVirtualTextureBuilder*                      StreamingTexture;                                         // 0x0318(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                StreamLowMips;                                            // 0x0320(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bBuildStreamingMipsButton;                                // 0x0324(0x0001) (Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	bool                                               bUseStreamingLowMipsInEditor;                             // 0x0325(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bEnableCompressCrunch;                                    // 0x0326(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bBuildDebugStreamingMips;                                 // 0x0327(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData04[0x28];                                      // 0x0328(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.RuntimeVirtualTextureComponent"));
		return ptr;
	}


	void Invalidate(const struct FBoxSphereBounds& WorldBounds);//Offset:Discovery.exe+0x5852F40
};


// Class Engine.RuntimeVirtualTextureVolume
// 0x0008 (0x02D0 - 0x02C8)
class ARuntimeVirtualTextureVolume : public AActor
{
public:
	class URuntimeVirtualTextureComponent*             VirtualTextureComponent;                                  // 0x02C8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.RuntimeVirtualTextureVolume"));
		return ptr;
	}

};


// Class Engine.RVOAvoidanceInterface
// 0x0000 (0x0028 - 0x0028)
class URVOAvoidanceInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.RVOAvoidanceInterface"));
		return ptr;
	}

};


// Class Engine.Scene
// 0x0000 (0x0028 - 0x0028)
class UScene : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.Scene"));
		return ptr;
	}

};


// Class Engine.SceneCapture2D
// 0x0008 (0x02E0 - 0x02D8)
class ASceneCapture2D : public ASceneCapture
{
public:
	class USceneCaptureComponent2D*                    CaptureComponent2D;                                       // 0x02D8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SceneCapture2D"));
		return ptr;
	}


	void OnInterpToggle(bool bEnable);//Offset:Discovery.exe+0x5820C70
};


// Class Engine.SceneCaptureComponent2D
// 0x07D0 (0x0B60 - 0x0390)
class USceneCaptureComponent2D : public USceneCaptureComponent
{
public:
	float                                              OrthoWidth;                                               // 0x0390(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0394(0x0004) MISSED OFFSET
	class UTextureRenderTarget2D*                      TextureTarget;                                            // 0x0398(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ESceneCaptureCompositeMode>            CompositeMode;                                            // 0x03A0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0xF];                                       // 0x03A1(0x000F) MISSED OFFSET
	struct FPostProcessSettings                        PostProcessSettings;                                      // 0x03B0(0x06C0) (Edit, BlueprintVisible)
	float                                              PostProcessBlendWeight;                                   // 0x0A70(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bOverride_CustomNearClippingPlane : 1;                    // 0x0A74(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0A75(0x0003) MISSED OFFSET
	float                                              CustomNearClippingPlane;                                  // 0x0A78(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bUseCustomProjectionMatrix;                               // 0x0A7C(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0A7D(0x0003) MISSED OFFSET
	struct FMatrix                                     CustomProjectionMatrix;                                   // 0x0A80(0x0080) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bUseFauxOrthoViewPos;                                     // 0x0B00(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bEnableOrthographicTiling;                                // 0x0B01(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x2];                                       // 0x0B02(0x0002) MISSED OFFSET
	int                                                NumXTiles;                                                // 0x0B04(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                NumYTiles;                                                // 0x0B08(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bEnableClipPlane;                                         // 0x0B0C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x3];                                       // 0x0B0D(0x0003) MISSED OFFSET
	struct FVector                                     ClipPlaneBase;                                            // 0x0B10(0x0018) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     ClipPlaneNormal;                                          // 0x0B28(0x0018) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bCameraCutThisFrame : 1;                                  // 0x0B40(0x0001) (BlueprintVisible, Transient)
	unsigned char                                      bConsiderUnrenderedOpaquePixelAsFullyTranslucent : 1;     // 0x0B40(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData06[0x3];                                       // 0x0B41(0x0003) MISSED OFFSET
	bool                                               bDisableFlipCopyGLES;                                     // 0x0B44(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x1B];                                      // 0x0B45(0x001B) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SceneCaptureComponent2D"));
		return ptr;
	}


	void RemoveBlendable(const TScriptInterface<class UBlendableInterface>& InBlendableObject);//Offset:Discovery.exe+0x58579B0
	void CaptureScene();//Offset:Discovery.exe+0x5857990
	void AddOrUpdateBlendable(const TScriptInterface<class UBlendableInterface>& InBlendableObject, float InWeight);//Offset:Discovery.exe+0x5857AD0
};


// Class Engine.SceneCaptureComponentCube
// 0x0030 (0x03C0 - 0x0390)
class USceneCaptureComponentCube : public USceneCaptureComponent
{
public:
	bool                                               bCaptureRotation;                                         // 0x0390(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0391(0x0007) MISSED OFFSET
	class UTextureRenderTargetCube*                    TextureTargetLeft;                                        // 0x0398(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UTextureRenderTargetCube*                    TextureTargetRight;                                       // 0x03A0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UTextureRenderTarget2D*                      TextureTargetODS;                                         // 0x03A8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              IPD;                                                      // 0x03B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0xC];                                       // 0x03B4(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SceneCaptureComponentCube"));
		return ptr;
	}


	void CaptureScene();//Offset:Discovery.exe+0x5857990
};


// Class Engine.SceneCaptureCube
// 0x0008 (0x02E0 - 0x02D8)
class ASceneCaptureCube : public ASceneCapture
{
public:
	class USceneCaptureComponentCube*                  CaptureComponentCube;                                     // 0x02D8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SceneCaptureCube"));
		return ptr;
	}


	void OnInterpToggle(bool bEnable);//Offset:Discovery.exe+0x5820C70
};


// Class Engine.SCS_Node
// 0x00B0 (0x00D8 - 0x0028)
class USCS_Node : public UObject
{
public:
	class UClass*                                      ComponentClass;                                           // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData)
	class UActorComponent*                             ComponentTemplate;                                        // 0x0030(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FBlueprintCookedComponentInstancingData     CookedComponentInstancingData;                            // 0x0038(0x0048)
	struct FName                                       AttachToName;                                             // 0x0080(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FName                                       ParentComponentOrVariableName;                            // 0x0088(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FName                                       ParentComponentOwnerClassName;                            // 0x0090(0x0008) (ZeroConstructor, IsPlainOldData)
	bool                                               bIsParentComponentNative;                                 // 0x0098(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0099(0x0007) MISSED OFFSET
	TArray<class USCS_Node*>                           ChildNodes;                                               // 0x00A0(0x0010) (ZeroConstructor)
	TArray<struct FBPVariableMetaDataEntry>            MetaDataArray;                                            // 0x00B0(0x0010) (Edit, ZeroConstructor)
	struct FGuid                                       VariableGuid;                                             // 0x00C0(0x0010) (ZeroConstructor, IsPlainOldData)
	struct FName                                       InternalVariableName;                                     // 0x00D0(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SCS_Node"));
		return ptr;
	}

};


// Class Engine.ServerStatReplicator
// 0x00C8 (0x0390 - 0x02C8)
class AServerStatReplicator : public AInfo
{
public:
	bool                                               bUpdateStatNet;                                           // 0x02C8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bOverwriteClientStats;                                    // 0x02C9(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x02CA(0x0002) MISSED OFFSET
	uint32_t                                           Channels;                                                 // 0x02CC(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           InRate;                                                   // 0x02D0(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           OutRate;                                                  // 0x02D4(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x02D8(0x0004) MISSED OFFSET
	uint32_t                                           MaxPacketOverhead;                                        // 0x02DC(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           InRateClientMax;                                          // 0x02E0(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           InRateClientMin;                                          // 0x02E4(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           InRateClientAvg;                                          // 0x02E8(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           InPacketsClientMax;                                       // 0x02EC(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           InPacketsClientMin;                                       // 0x02F0(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           InPacketsClientAvg;                                       // 0x02F4(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           OutRateClientMax;                                         // 0x02F8(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           OutRateClientMin;                                         // 0x02FC(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           OutRateClientAvg;                                         // 0x0300(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           OutPacketsClientMax;                                      // 0x0304(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           OutPacketsClientMin;                                      // 0x0308(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           OutPacketsClientAvg;                                      // 0x030C(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           NetNumClients;                                            // 0x0310(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           InPackets;                                                // 0x0314(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           OutPackets;                                               // 0x0318(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           InBunches;                                                // 0x031C(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           OutBunches;                                               // 0x0320(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           OutLoss;                                                  // 0x0324(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           InLoss;                                                   // 0x0328(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           VoiceBytesSent;                                           // 0x032C(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           VoiceBytesRecv;                                           // 0x0330(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           VoicePacketsSent;                                         // 0x0334(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           VoicePacketsRecv;                                         // 0x0338(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           PercentInVoice;                                           // 0x033C(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           PercentOutVoice;                                          // 0x0340(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           NumActorChannels;                                         // 0x0344(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           NumConsideredActors;                                      // 0x0348(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           PrioritizedActors;                                        // 0x034C(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           NumRelevantActors;                                        // 0x0350(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           NumRelevantDeletedActors;                                 // 0x0354(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           NumReplicatedActorAttempts;                               // 0x0358(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           NumReplicatedActors;                                      // 0x035C(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           NumActors;                                                // 0x0360(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           NumNetActors;                                             // 0x0364(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           NumDormantActors;                                         // 0x0368(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           NumInitiallyDormantActors;                                // 0x036C(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           NumNetGUIDsAckd;                                          // 0x0370(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           NumNetGUIDsPending;                                       // 0x0374(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           NumNetGUIDsUnAckd;                                        // 0x0378(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           ObjPathBytes;                                             // 0x037C(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           NetGUIDOutRate;                                           // 0x0380(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           NetGUIDInRate;                                            // 0x0384(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           NetSaturated;                                             // 0x0388(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x038C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ServerStatReplicator"));
		return ptr;
	}

};


// Class Engine.ShadowMapTexture2D
// 0x0000 (0x02B0 - 0x02B0)
class UShadowMapTexture2D : public UTexture2D
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ShadowMapTexture2D"));
		return ptr;
	}

};


// Class Engine.SimpleConstructionScript
// 0x0078 (0x00A0 - 0x0028)
class USimpleConstructionScript : public UObject
{
public:
	TArray<class USCS_Node*>                           RootNodes;                                                // 0x0028(0x0010) (ZeroConstructor)
	TArray<class USCS_Node*>                           AllNodes;                                                 // 0x0038(0x0010) (ZeroConstructor)
	class USCS_Node*                                   DefaultSceneRootNode;                                     // 0x0048(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x50];                                      // 0x0050(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SimpleConstructionScript"));
		return ptr;
	}

};


// Class Engine.SkeletalMesh
// 0x03A0 (0x0470 - 0x00D0)
class USkeletalMesh : public UStreamableRenderAsset
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x00D0(0x0028) MISSED OFFSET
	class USkeleton*                                   Skeleton;                                                 // 0x00F8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	struct FBoxSphereBounds                            ImportedBounds;                                           // 0x0100(0x0038) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)
	struct FBoxSphereBounds                            ExtendedBounds;                                           // 0x0138(0x0038) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)
	struct FVector                                     PositiveBoundsExtension;                                  // 0x0170(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector                                     NegativeBoundsExtension;                                  // 0x0188(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<struct FSkeletalMaterial>                   Materials;                                                // 0x01A0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, Transient, DuplicateTransient)
	TArray<struct FBoneMirrorInfo>                     SkelMirrorTable;                                          // 0x01B0(0x0010) (Edit, EditFixedSize, ZeroConstructor)
	TArray<struct FSkeletalMeshLODInfo>                LODInfo;                                                  // 0x01C0(0x0010) (Edit, EditFixedSize, ZeroConstructor)
	unsigned char                                      UnknownData01[0x50];                                      // 0x01D0(0x0050) MISSED OFFSET
	struct FPerPlatformInt                             MinLOD;                                                   // 0x0220(0x0004) (Edit)
	struct FPerPlatformBool                            DisableBelowMinLodStripping;                              // 0x0224(0x0001) (Edit)
	TEnumAsByte<EAxis>                                 SkelMirrorAxis;                                           // 0x0225(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EAxis>                                 SkelMirrorFlipAxis;                                       // 0x0226(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUseFullPrecisionUVs : 1;                                 // 0x0227(0x0001) (Deprecated)
	unsigned char                                      bUseHighPrecisionTangentBasis : 1;                        // 0x0227(0x0001) (Deprecated)
	unsigned char                                      bHasBeenSimplified : 1;                                   // 0x0227(0x0001)
	unsigned char                                      bHasVertexColors : 1;                                     // 0x0227(0x0001)
	unsigned char                                      UnknownData02 : 1;                                        // 0x0227(0x0001)
	unsigned char                                      bEnablePerPolyCollision : 1;                              // 0x0227(0x0001) (Edit)
	class UBodySetup*                                  BodySetup;                                                // 0x0228(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UPhysicsAsset*                               PhysicsAsset;                                             // 0x0230(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UPhysicsAsset*                               ShadowPhysicsAsset;                                       // 0x0238(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<class UNodeMappingContainer*>               NodeMappingData;                                          // 0x0240(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditFixedSize, ZeroConstructor)
	unsigned char                                      bSupportRayTracing : 1;                                   // 0x0250(0x0001) (Edit)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0251(0x0003) MISSED OFFSET
	int                                                RayTracingMinLOD;                                         // 0x0254(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	enum class EClothLODBiasMode                       ClothLODBiasMode;                                         // 0x0258(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x7];                                       // 0x0259(0x0007) MISSED OFFSET
	TArray<class UMorphTarget*>                        MorphTargets;                                             // 0x0260(0x0010) (BlueprintVisible, ZeroConstructor)
	unsigned char                                      UnknownData05[0x178];                                     // 0x0270(0x0178) MISSED OFFSET
	class UClass*                                      PostProcessAnimBlueprint;                                 // 0x03E8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<class UClothingAssetBase*>                  MeshClothingAssets;                                       // 0x03F0(0x0010) (Edit, BlueprintVisible, EditFixedSize, ZeroConstructor)
	struct FSkeletalMeshSamplingInfo                   SamplingInfo;                                             // 0x0400(0x0030) (Edit)
	TArray<class UAssetUserData*>                      AssetUserData;                                            // 0x0430(0x0010) (Edit, ExportObject, ZeroConstructor)
	TArray<class USkeletalMeshSocket*>                 Sockets;                                                  // 0x0440(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData06[0x10];                                      // 0x0450(0x0010) MISSED OFFSET
	TArray<struct FSkinWeightProfileInfo>              SkinWeightProfiles;                                       // 0x0460(0x0010) (Edit, EditFixedSize, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SkeletalMesh"));
		return ptr;
	}


	void UpdateBoneTree();//Offset:Discovery.exe+0x58635D0
	void SetSkeleton(class USkeleton* InSkeleton);//Offset:Discovery.exe+0x5863530
	void SetMorphTargets(TArray<class UMorphTarget*> InMorphTargets);//Offset:Discovery.exe+0x5862CC0
	void SetMeshClothingAssets(TArray<class UClothingAssetBase*> InMeshClothingAssets);//Offset:Discovery.exe+0x58629E0
	void SetMaterials(TArray<struct FSkeletalMaterial> InMaterials);//Offset:Discovery.exe+0x5863250
	void SetLODSettings(class USkeletalMeshLODSettings* InLODSettings);//Offset:Discovery.exe+0x2CEDDA0
	void SetDefaultAnimatingRig();//Offset:Discovery.exe+0x58630F0
	int NumSockets();//Offset:Discovery.exe+0x5862600
	TArray<struct FString> K2_GetAllMorphTargetNames();//Offset:Discovery.exe+0x5862BD0
	bool IsSectionUsingCloth(int InSectionIndex, bool bCheckCorrespondingSections);//Offset:Discovery.exe+0x5862470
	class USkeletalMeshSocket* GetSocketByIndex(int Index);//Offset:Discovery.exe+0x5862560
	class USkeleton* GetSkeleton();//Offset:Discovery.exe+0x2344630
	class UPhysicsAsset* GetShadowPhysicsAsset();//Offset:Discovery.exe+0x5862FD0
	class UPhysicsAsset* GetPhysicsAsset();//Offset:Discovery.exe+0x5863000
	TArray<class UNodeMappingContainer*> GetNodeMappingData();//Offset:Discovery.exe+0x5862F50
	class UNodeMappingContainer* GetNodeMappingContainer(class UBlueprint* SourceAsset);//Offset:Discovery.exe+0x5862EB0
	TArray<class UMorphTarget*> GetMorphTargets();//Offset:Discovery.exe+0x5862E30
	TArray<class UClothingAssetBase*> GetMeshClothingAssets();//Offset:Discovery.exe+0x5862B50
	TArray<struct FSkeletalMaterial> GetMaterials();//Offset:Discovery.exe+0x58633D0
	class USkeletalMeshLODSettings* GetLODSettings();//Offset:Discovery.exe+0x57547C0
	struct FBoxSphereBounds GetImportedBounds();//Offset:Discovery.exe+0x5863450
	void GetDefaultAnimatingRig();//Offset:Discovery.exe+0x5863030
	struct FBoxSphereBounds GetBounds();//Offset:Discovery.exe+0x58634C0
	class USkeletalMeshSocket* FindSocketInfo(const struct FName& InSocketName, struct FTransform* OutTransform, int* OutBoneIndex, int* OutIndex);//Offset:Discovery.exe+0x5862630
	class USkeletalMeshSocket* FindSocketAndIndex(const struct FName& InSocketName, int* OutIndex);//Offset:Discovery.exe+0x5862840
	class USkeletalMeshSocket* FindSocket(const struct FName& InSocketName);//Offset:Discovery.exe+0x5862940
};


// Class Engine.SkeletalMeshActor
// 0x0080 (0x0348 - 0x02C8)
class ASkeletalMeshActor : public AActor
{
public:
	unsigned char                                      bShouldDoAnimNotifies : 1;                                // 0x02C8(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bWakeOnLevelStart : 1;                                    // 0x02C8(0x0001) (Deprecated)
	unsigned char                                      UnknownData00[0x7];                                       // 0x02C9(0x0007) MISSED OFFSET
	class USkeletalMeshComponent*                      SkeletalMeshComponent;                                    // 0x02D0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class USkeletalMesh*                               ReplicatedMesh;                                           // 0x02D8(0x0008) (Net, ZeroConstructor, Transient, IsPlainOldData)
	class UPhysicsAsset*                               ReplicatedPhysAsset;                                      // 0x02E0(0x0008) (Net, ZeroConstructor, Transient, IsPlainOldData)
	class UMaterialInterface*                          ReplicatedMaterial0;                                      // 0x02E8(0x0008) (Net, ZeroConstructor, IsPlainOldData)
	class UMaterialInterface*                          ReplicatedMaterial1;                                      // 0x02F0(0x0008) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x50];                                      // 0x02F8(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SkeletalMeshActor"));
		return ptr;
	}


	void OnRep_ReplicatedPhysAsset();//Offset:Discovery.exe+0x1462470
	void OnRep_ReplicatedMesh();//Offset:Discovery.exe+0x19BFD70
	void OnRep_ReplicatedMaterial1();//Offset:Discovery.exe+0x14624B0
	void OnRep_ReplicatedMaterial0();//Offset:Discovery.exe+0x1462490
};


// Class Engine.SkeletalMeshEditorData
// 0x0000 (0x0028 - 0x0028)
class USkeletalMeshEditorData : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SkeletalMeshEditorData"));
		return ptr;
	}

};


// Class Engine.SkeletalMeshLODSettings
// 0x0020 (0x0050 - 0x0030)
class USkeletalMeshLODSettings : public UDataAsset
{
public:
	struct FPerPlatformInt                             MinLOD;                                                   // 0x0030(0x0004) (Edit, Config, GlobalConfig)
	struct FPerPlatformBool                            DisableBelowMinLodStripping;                              // 0x0034(0x0001) (Edit, Config, GlobalConfig)
	bool                                               bOverrideLODStreamingSettings;                            // 0x0035(0x0001) (Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	struct FPerPlatformBool                            bSupportLODStreaming;                                     // 0x0036(0x0001) (Edit, Config, GlobalConfig)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0037(0x0001) MISSED OFFSET
	struct FPerPlatformInt                             MaxNumStreamedLODs;                                       // 0x0038(0x0004) (Edit, Config, GlobalConfig)
	struct FPerPlatformInt                             MaxNumOptionalLODs;                                       // 0x003C(0x0004) (Edit, Config, GlobalConfig)
	TArray<struct FSkeletalMeshLODGroupSettings>       LODGroups;                                                // 0x0040(0x0010) (Edit, ZeroConstructor, Config, GlobalConfig)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SkeletalMeshLODSettings"));
		return ptr;
	}

};


// Class Engine.SkeletalMeshSimplificationSettings
// 0x0008 (0x0040 - 0x0038)
class USkeletalMeshSimplificationSettings : public UDeveloperSettings
{
public:
	struct FName                                       SkeletalMeshReductionModuleName;                          // 0x0038(0x0008) (Edit, ZeroConstructor, Config, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SkeletalMeshSimplificationSettings"));
		return ptr;
	}

};


// Class Engine.SkeletalMeshSocket
// 0x0060 (0x0088 - 0x0028)
class USkeletalMeshSocket : public UObject
{
public:
	struct FName                                       SocketName;                                               // 0x0028(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	struct FName                                       BoneName;                                                 // 0x0030(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	struct FVector                                     RelativeLocation;                                         // 0x0038(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FRotator                                    RelativeRotation;                                         // 0x0050(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector                                     RelativeScale;                                            // 0x0068(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bForceAlwaysAnimated;                                     // 0x0080(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0081(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SkeletalMeshSocket"));
		return ptr;
	}


	void InitializeSocketFromLocation(class USkeletalMeshComponent* SkelComp, const struct FVector& WorldLocation, const struct FVector& WorldNormal);//Offset:Discovery.exe+0x5870280
	struct FVector GetSocketLocation(class USkeletalMeshComponent* SkelComp);//Offset:Discovery.exe+0x58703E0
};


// Class Engine.SkyAtmosphere
// 0x0008 (0x02D0 - 0x02C8)
class ASkyAtmosphere : public AInfo
{
public:
	class USkyAtmosphereComponent*                     SkyAtmosphereComponent;                                   // 0x02C8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SkyAtmosphere"));
		return ptr;
	}

};


// Class Engine.SkyLightComponent
// 0x01E0 (0x04F0 - 0x0310)
class USkyLightComponent : public ULightComponentBase
{
public:
	class UTextureCube*                                Cubemap;                                                  // 0x0310(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              SourceCubemapAngle;                                       // 0x0318(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CubemapResolution;                                        // 0x031C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              SkyDistanceThreshold;                                     // 0x0320(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bUseSeparateSkyDistanceThresholdForReflectionCaptures;    // 0x0324(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0325(0x0003) MISSED OFFSET
	float                                              ReflectionCaptureSkyDistanceThreshold;                    // 0x0328(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bCaptureEmissiveOnly;                                     // 0x032C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bLowerHemisphereIsBlack;                                  // 0x032D(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x032E(0x0002) MISSED OFFSET
	struct FLinearColor                                LowerHemisphereColor;                                     // 0x0330(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              OcclusionMaxDistance;                                     // 0x0340(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              Contrast;                                                 // 0x0344(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              OcclusionExponent;                                        // 0x0348(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MinOcclusion;                                             // 0x034C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FColor                                      OcclusionTint;                                            // 0x0350(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bCloudAmbientOcclusion : 1;                               // 0x0354(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0355(0x0003) MISSED OFFSET
	float                                              CloudAmbientOcclusionStrength;                            // 0x0358(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              CloudAmbientOcclusionExtent;                              // 0x035C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              CloudAmbientOcclusionMapResolutionScale;                  // 0x0360(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              CloudAmbientOcclusionApertureScale;                       // 0x0364(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EOcclusionCombineMode>                 OcclusionCombineMode;                                     // 0x0368(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0xAF];                                      // 0x0369(0x00AF) MISSED OFFSET
	class UTextureCube*                                BlendDestinationCubemap;                                  // 0x0418(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData04[0xD0];                                      // 0x0420(0x00D0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SkyLightComponent"));
		return ptr;
	}


	void SetVolumetricScatteringIntensity(float NewIntensity);//Offset:Discovery.exe+0x5879160
	void SetOcclusionTint(const struct FColor& InTint);//Offset:Discovery.exe+0x5878DB0
	void SetOcclusionExponent(float InOcclusionExponent);//Offset:Discovery.exe+0x5878C70
	void SetOcclusionContrast(float InOcclusionContrast);//Offset:Discovery.exe+0x5878D10
	void SetMinOcclusion(float InMinOcclusion);//Offset:Discovery.exe+0x5878BD0
	void SetLowerHemisphereColor(const struct FLinearColor& InLowerHemisphereColor);//Offset:Discovery.exe+0x5878E50
	void SetLightColor(const struct FLinearColor& NewLightColor);//Offset:Discovery.exe+0x58790C0
	void SetIntensity(float NewIntensity);//Offset:Discovery.exe+0x58792A0
	void SetIndirectLightingIntensity(float NewIntensity);//Offset:Discovery.exe+0x5879200
	void SetCubemapBlend(class UTextureCube* SourceCubemap, class UTextureCube* DestinationCubemap, float InBlendFraction);//Offset:Discovery.exe+0x5878EF0
	void SetCubemap(class UTextureCube* NewCubemap);//Offset:Discovery.exe+0x5879020
	void RecaptureSky();//Offset:Discovery.exe+0x5878BB0
};


// Class Engine.SlateBrushAsset
// 0x00D8 (0x0100 - 0x0028)
class USlateBrushAsset : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	struct FSlateBrush                                 Brush;                                                    // 0x0030(0x00D0) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SlateBrushAsset"));
		return ptr;
	}

};


// Class Engine.SlateTextureAtlasInterface
// 0x0000 (0x0028 - 0x0028)
class USlateTextureAtlasInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SlateTextureAtlasInterface"));
		return ptr;
	}

};


// Class Engine.SMInstanceElementAssetDataInterface
// 0x0008 (0x0030 - 0x0028)
class USMInstanceElementAssetDataInterface : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SMInstanceElementAssetDataInterface"));
		return ptr;
	}

};


// Class Engine.SMInstanceElementHierarchyInterface
// 0x0008 (0x0030 - 0x0028)
class USMInstanceElementHierarchyInterface : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SMInstanceElementHierarchyInterface"));
		return ptr;
	}

};


// Class Engine.SMInstanceElementIdMapTransactor
// 0x0000 (0x0028 - 0x0028)
class USMInstanceElementIdMapTransactor : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SMInstanceElementIdMapTransactor"));
		return ptr;
	}

};


// Class Engine.SMInstanceElementSelectionInterface
// 0x0008 (0x0030 - 0x0028)
class USMInstanceElementSelectionInterface : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SMInstanceElementSelectionInterface"));
		return ptr;
	}

};


// Class Engine.SMInstanceElementWorldInterface
// 0x0008 (0x0030 - 0x0028)
class USMInstanceElementWorldInterface : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SMInstanceElementWorldInterface"));
		return ptr;
	}

};


// Class Engine.SMInstanceManager
// 0x0000 (0x0028 - 0x0028)
class USMInstanceManager : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SMInstanceManager"));
		return ptr;
	}

};


// Class Engine.SMInstanceManagerProvider
// 0x0000 (0x0028 - 0x0028)
class USMInstanceManagerProvider : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SMInstanceManagerProvider"));
		return ptr;
	}

};


// Class Engine.SmokeTestCommandlet
// 0x0000 (0x0080 - 0x0080)
class USmokeTestCommandlet : public UCommandlet
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SmokeTestCommandlet"));
		return ptr;
	}

};


// Class Engine.SoundAttenuation
// 0x03C8 (0x03F0 - 0x0028)
class USoundAttenuation : public UObject
{
public:
	struct FSoundAttenuationSettings                   Attenuation;                                              // 0x0028(0x03C8) (Edit, BlueprintVisible, BlueprintReadOnly)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SoundAttenuation"));
		return ptr;
	}

};


// Class Engine.SoundClass
// 0x00A0 (0x00C8 - 0x0028)
class USoundClass : public UObject
{
public:
	struct FSoundClassProperties                       Properties;                                               // 0x0028(0x0078) (Edit, BlueprintVisible, BlueprintReadOnly)
	TArray<class USoundClass*>                         ChildClasses;                                             // 0x00A0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FPassiveSoundMixModifier>            PassiveSoundMixModifiers;                                 // 0x00B0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	class USoundClass*                                 ParentClass;                                              // 0x00C0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SoundClass"));
		return ptr;
	}

};


// Class Engine.SoundConcurrency
// 0x0028 (0x0050 - 0x0028)
class USoundConcurrency : public UObject
{
public:
	struct FSoundConcurrencySettings                   Concurrency;                                              // 0x0028(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SoundConcurrency"));
		return ptr;
	}

};


// Class Engine.SoundCue
// 0x0400 (0x0570 - 0x0170)
class USoundCue : public USoundBase
{
public:
	unsigned char                                      bPrimeOnLoad : 1;                                         // 0x0170(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0171(0x0007) MISSED OFFSET
	class USoundNode*                                  FirstNode;                                                // 0x0178(0x0008) (ZeroConstructor, IsPlainOldData)
	float                                              VolumeMultiplier;                                         // 0x0180(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              PitchMultiplier;                                          // 0x0184(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FSoundAttenuationSettings                   AttenuationOverrides;                                     // 0x0188(0x03C8) (Edit)
	float                                              SubtitlePriority;                                         // 0x0550(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0554(0x0004) MISSED OFFSET
	unsigned char                                      bOverrideAttenuation : 1;                                 // 0x0558(0x0001) (Edit)
	unsigned char                                      bExcludeFromRandomNodeBranchCulling : 1;                  // 0x0558(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0559(0x0003) MISSED OFFSET
	int                                                CookedQualityIndex;                                       // 0x055C(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bHasPlayWhenSilent : 1;                                   // 0x0560(0x0001)
	unsigned char                                      UnknownData03[0xF];                                       // 0x0561(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SoundCue"));
		return ptr;
	}

};


// Class Engine.SoundEffectPresetWidgetInterface
// 0x0000 (0x0028 - 0x0028)
class USoundEffectPresetWidgetInterface : public UAudioPanelWidgetInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SoundEffectPresetWidgetInterface"));
		return ptr;
	}


	void OnPropertyChanged(class USoundEffectPreset* Preset, const struct FName& PropertyName);//Offset:Discovery.exe+0x327F8B0
	void OnConstructed(class USoundEffectPreset* Preset);//Offset:Discovery.exe+0x327F8B0
	class UClass* GetClass();//Offset:Discovery.exe+0x327F8B0
};


// Class Engine.SoundEffectSourcePresetChain
// 0x0018 (0x0040 - 0x0028)
class USoundEffectSourcePresetChain : public UObject
{
public:
	TArray<struct FSourceEffectChainEntry>             Chain;                                                    // 0x0028(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      bPlayEffectChainTails : 1;                                // 0x0038(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0039(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SoundEffectSourcePresetChain"));
		return ptr;
	}

};


// Class Engine.SoundGroups
// 0x0060 (0x0088 - 0x0028)
class USoundGroups : public UObject
{
public:
	TArray<struct FSoundGroup>                         SoundGroupProfiles;                                       // 0x0028(0x0010) (ZeroConstructor, Config)
	unsigned char                                      UnknownData00[0x50];                                      // 0x0038(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SoundGroups"));
		return ptr;
	}

};


// Class Engine.SoundMix
// 0x0068 (0x0090 - 0x0028)
class USoundMix : public UObject
{
public:
	unsigned char                                      bApplyEQ : 1;                                             // 0x0028(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0029(0x0003) MISSED OFFSET
	float                                              EQPriority;                                               // 0x002C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FAudioEQEffect                              EQSettings;                                               // 0x0030(0x0040) (Edit)
	TArray<struct FSoundClassAdjuster>                 SoundClassEffects;                                        // 0x0070(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	float                                              InitialDelay;                                             // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              FadeInTime;                                               // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Duration;                                                 // 0x0088(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              FadeOutTime;                                              // 0x008C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SoundMix"));
		return ptr;
	}

};


// Class Engine.SoundNodeAssetReferencer
// 0x0000 (0x0048 - 0x0048)
class USoundNodeAssetReferencer : public USoundNode
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SoundNodeAssetReferencer"));
		return ptr;
	}

};


// Class Engine.SoundNodeAttenuation
// 0x03D8 (0x0420 - 0x0048)
class USoundNodeAttenuation : public USoundNode
{
public:
	class USoundAttenuation*                           AttenuationSettings;                                      // 0x0048(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FSoundAttenuationSettings                   AttenuationOverrides;                                     // 0x0050(0x03C8) (Edit)
	unsigned char                                      bOverrideAttenuation : 1;                                 // 0x0418(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0419(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SoundNodeAttenuation"));
		return ptr;
	}

};


// Class Engine.SoundNodeBranch
// 0x0008 (0x0050 - 0x0048)
class USoundNodeBranch : public USoundNode
{
public:
	struct FName                                       BoolParameterName;                                        // 0x0048(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SoundNodeBranch"));
		return ptr;
	}

};


// Class Engine.SoundNodeConcatenator
// 0x0010 (0x0058 - 0x0048)
class USoundNodeConcatenator : public USoundNode
{
public:
	TArray<float>                                      InputVolume;                                              // 0x0048(0x0010) (Edit, EditFixedSize, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SoundNodeConcatenator"));
		return ptr;
	}

};


// Class Engine.SoundNodeDelay
// 0x0008 (0x0050 - 0x0048)
class USoundNodeDelay : public USoundNode
{
public:
	float                                              DelayMin;                                                 // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DelayMax;                                                 // 0x004C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SoundNodeDelay"));
		return ptr;
	}

};


// Class Engine.SoundNodeDialoguePlayer
// 0x0028 (0x0070 - 0x0048)
class USoundNodeDialoguePlayer : public USoundNode
{
public:
	struct FDialogueWaveParameter                      DialogueWaveParameter;                                    // 0x0048(0x0020) (Edit)
	unsigned char                                      bLooping : 1;                                             // 0x0068(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0069(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SoundNodeDialoguePlayer"));
		return ptr;
	}

};


// Class Engine.SoundNodeDistanceCrossFade
// 0x0010 (0x0058 - 0x0048)
class USoundNodeDistanceCrossFade : public USoundNode
{
public:
	TArray<struct FDistanceDatum>                      CrossFadeInput;                                           // 0x0048(0x0010) (Edit, ExportObject, EditFixedSize, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SoundNodeDistanceCrossFade"));
		return ptr;
	}

};


// Class Engine.SoundNodeDoppler
// 0x0010 (0x0058 - 0x0048)
class USoundNodeDoppler : public USoundNode
{
public:
	float                                              DopplerIntensity;                                         // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bUseSmoothing;                                            // 0x004C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x004D(0x0003) MISSED OFFSET
	float                                              SmoothingInterpSpeed;                                     // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0054(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SoundNodeDoppler"));
		return ptr;
	}

};


// Class Engine.SoundNodeEnveloper
// 0x0148 (0x0190 - 0x0048)
class USoundNodeEnveloper : public USoundNode
{
public:
	float                                              LoopStart;                                                // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              LoopEnd;                                                  // 0x004C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DurationAfterLoop;                                        // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                LoopCount;                                                // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bLoopIndefinitely : 1;                                    // 0x0058(0x0001) (Edit)
	unsigned char                                      bLoop : 1;                                                // 0x0058(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0059(0x0007) MISSED OFFSET
	class UDistributionFloatConstantCurve*             VolumeInterpCurve;                                        // 0x0060(0x0008) (ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData)
	class UDistributionFloatConstantCurve*             PitchInterpCurve;                                         // 0x0068(0x0008) (ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData)
	struct FRuntimeFloatCurve                          VolumeCurve;                                              // 0x0070(0x0088) (Edit)
	struct FRuntimeFloatCurve                          PitchCurve;                                               // 0x00F8(0x0088) (Edit)
	float                                              PitchMin;                                                 // 0x0180(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PitchMax;                                                 // 0x0184(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              VolumeMin;                                                // 0x0188(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              VolumeMax;                                                // 0x018C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SoundNodeEnveloper"));
		return ptr;
	}

};


// Class Engine.SoundNodeGroupControl
// 0x0010 (0x0058 - 0x0048)
class USoundNodeGroupControl : public USoundNode
{
public:
	TArray<int>                                        GroupSizes;                                               // 0x0048(0x0010) (Edit, EditFixedSize, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SoundNodeGroupControl"));
		return ptr;
	}

};


// Class Engine.SoundNodeLooping
// 0x0008 (0x0050 - 0x0048)
class USoundNodeLooping : public USoundNode
{
public:
	int                                                LoopCount;                                                // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bLoopIndefinitely : 1;                                    // 0x004C(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x004D(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SoundNodeLooping"));
		return ptr;
	}

};


// Class Engine.SoundNodeMature
// 0x0000 (0x0048 - 0x0048)
class USoundNodeMature : public USoundNode
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SoundNodeMature"));
		return ptr;
	}

};


// Class Engine.SoundNodeMixer
// 0x0010 (0x0058 - 0x0048)
class USoundNodeMixer : public USoundNode
{
public:
	TArray<float>                                      InputVolume;                                              // 0x0048(0x0010) (Edit, ExportObject, EditFixedSize, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SoundNodeMixer"));
		return ptr;
	}

};


// Class Engine.SoundNodeModulator
// 0x0010 (0x0058 - 0x0048)
class USoundNodeModulator : public USoundNode
{
public:
	float                                              PitchMin;                                                 // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PitchMax;                                                 // 0x004C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              VolumeMin;                                                // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              VolumeMax;                                                // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SoundNodeModulator"));
		return ptr;
	}

};


// Class Engine.SoundNodeModulatorContinuous
// 0x0040 (0x0088 - 0x0048)
class USoundNodeModulatorContinuous : public USoundNode
{
public:
	struct FModulatorContinuousParams                  PitchModulationParams;                                    // 0x0048(0x0020) (Edit)
	struct FModulatorContinuousParams                  VolumeModulationParams;                                   // 0x0068(0x0020) (Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SoundNodeModulatorContinuous"));
		return ptr;
	}

};


// Class Engine.SoundNodeOscillator
// 0x0028 (0x0070 - 0x0048)
class USoundNodeOscillator : public USoundNode
{
public:
	unsigned char                                      bModulateVolume : 1;                                      // 0x0048(0x0001) (Edit)
	unsigned char                                      bModulatePitch : 1;                                       // 0x0048(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0049(0x0003) MISSED OFFSET
	float                                              AmplitudeMin;                                             // 0x004C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AmplitudeMax;                                             // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              FrequencyMin;                                             // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              FrequencyMax;                                             // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              OffsetMin;                                                // 0x005C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              OffsetMax;                                                // 0x0060(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              CenterMin;                                                // 0x0064(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              CenterMax;                                                // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x006C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SoundNodeOscillator"));
		return ptr;
	}

};


// Class Engine.SoundNodeParamCrossFade
// 0x0008 (0x0060 - 0x0058)
class USoundNodeParamCrossFade : public USoundNodeDistanceCrossFade
{
public:
	struct FName                                       ParamName;                                                // 0x0058(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SoundNodeParamCrossFade"));
		return ptr;
	}

};


// Class Engine.SoundNodeQualityLevel
// 0x0008 (0x0050 - 0x0048)
class USoundNodeQualityLevel : public USoundNode
{
public:
	int                                                CookedQualityLevelIndex;                                  // 0x0048(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x004C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SoundNodeQualityLevel"));
		return ptr;
	}

};


// Class Engine.SoundNodeRandom
// 0x0030 (0x0078 - 0x0048)
class USoundNodeRandom : public USoundNode
{
public:
	TArray<float>                                      Weights;                                                  // 0x0048(0x0010) (Edit, EditFixedSize, ZeroConstructor)
	TArray<bool>                                       HasBeenUsed;                                              // 0x0058(0x0010) (ZeroConstructor, Transient)
	int                                                NumRandomUsed;                                            // 0x0068(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	int                                                PreselectAtLevelLoad;                                     // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bShouldExcludeFromBranchCulling : 1;                      // 0x0070(0x0001) (Edit)
	unsigned char                                      bSoundCueExcludedFromBranchCulling : 1;                   // 0x0070(0x0001)
	unsigned char                                      bRandomizeWithoutReplacement : 1;                         // 0x0070(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0071(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SoundNodeRandom"));
		return ptr;
	}

};


// Class Engine.SoundNodeSoundClass
// 0x0010 (0x0058 - 0x0048)
class USoundNodeSoundClass : public USoundNode
{
public:
	class USoundClass*                                 SoundClassOverride;                                       // 0x0048(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0050(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SoundNodeSoundClass"));
		return ptr;
	}

};


// Class Engine.SoundNodeSwitch
// 0x0008 (0x0050 - 0x0048)
class USoundNodeSwitch : public USoundNode
{
public:
	struct FName                                       IntParameterName;                                         // 0x0048(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SoundNodeSwitch"));
		return ptr;
	}

};


// Class Engine.SoundNodeWaveParam
// 0x0008 (0x0050 - 0x0048)
class USoundNodeWaveParam : public USoundNode
{
public:
	struct FName                                       WaveParameterName;                                        // 0x0048(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SoundNodeWaveParam"));
		return ptr;
	}

};


// Class Engine.SoundNodeWavePlayer
// 0x0040 (0x0088 - 0x0048)
class USoundNodeWavePlayer : public USoundNodeAssetReferencer
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x0048(0x0028) UNKNOWN PROPERTY: SoundWaveAssetPtr
	class USoundWave*                                  SoundWave;                                                // 0x0070(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0078(0x0008) MISSED OFFSET
	unsigned char                                      bLooping : 1;                                             // 0x0080(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0081(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SoundNodeWavePlayer"));
		return ptr;
	}

};


// Class Engine.SoundParameterControllerInterface
// 0x0000 (0x0028 - 0x0028)
class USoundParameterControllerInterface : public UAudioParameterControllerInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SoundParameterControllerInterface"));
		return ptr;
	}

};


// Class Engine.AudioParameterConversionStatics
// 0x0000 (0x0028 - 0x0028)
class UAudioParameterConversionStatics : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.AudioParameterConversionStatics"));
		return ptr;
	}


	struct FAudioParameter STATIC_StringToAudioParameter(const struct FName& Name, const struct FString& String);//Offset:Discovery.exe+0x5880070
	struct FAudioParameter STATIC_StringArrayToAudioParameter(const struct FName& Name, TArray<struct FString> Strings);//Offset:Discovery.exe+0x587F8B0
	struct FAudioParameter STATIC_ObjectToAudioParameter(const struct FName& Name, class UObject* Object);//Offset:Discovery.exe+0x587FF50
	struct FAudioParameter STATIC_ObjectArrayToAudioParameter(const struct FName& Name, TArray<class UObject*> Objects);//Offset:Discovery.exe+0x587F730
	struct FAudioParameter STATIC_IntegerToAudioParameter(const struct FName& Name, int Integer);//Offset:Discovery.exe+0x58801F0
	struct FAudioParameter STATIC_IntegerArrayToAudioParameter(const struct FName& Name, TArray<int> Integers);//Offset:Discovery.exe+0x587FAD0
	struct FAudioParameter STATIC_FloatToAudioParameter(const struct FName& Name, float Float);//Offset:Discovery.exe+0x5880310
	struct FAudioParameter STATIC_FloatArrayToAudioParameter(const struct FName& Name, TArray<float> Floats);//Offset:Discovery.exe+0x587FC50
	struct FAudioParameter STATIC_BooleanToAudioParameter(const struct FName& Name, bool Bool);//Offset:Discovery.exe+0x5880430
	struct FAudioParameter STATIC_BooleanArrayToAudioParameter(const struct FName& Name, TArray<bool> Bools);//Offset:Discovery.exe+0x587FDD0
};


// Class Engine.SoundSourceBus
// 0x0018 (0x0350 - 0x0338)
class USoundSourceBus : public USoundWave
{
public:
	enum class ESourceBusChannels                      SourceBusChannels;                                        // 0x0338(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0339(0x0003) MISSED OFFSET
	float                                              SourceBusDuration;                                        // 0x033C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	class UAudioBus*                                   AudioBus;                                                 // 0x0340(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bAutoDeactivateWhenSilent : 1;                            // 0x0348(0x0001)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0349(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SoundSourceBus"));
		return ptr;
	}

};


// Class Engine.SoundSubmixBase
// 0x0018 (0x0040 - 0x0028)
class USoundSubmixBase : public UObject
{
public:
	bool                                               bAutoDisable;                                             // 0x0028(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0029(0x0003) MISSED OFFSET
	float                                              AutoDisableTime;                                          // 0x002C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<class USoundSubmixBase*>                    ChildSubmixes;                                            // 0x0030(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SoundSubmixBase"));
		return ptr;
	}

};


// Class Engine.SoundSubmixWithParentBase
// 0x0008 (0x0048 - 0x0040)
class USoundSubmixWithParentBase : public USoundSubmixBase
{
public:
	class USoundSubmixBase*                            ParentSubmix;                                             // 0x0040(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SoundSubmixWithParentBase"));
		return ptr;
	}

};


// Class Engine.SoundSubmix
// 0x0088 (0x00D0 - 0x0048)
class USoundSubmix : public USoundSubmixWithParentBase
{
public:
	unsigned char                                      bMuteWhenBackgrounded : 1;                                // 0x0048(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0049(0x0007) MISSED OFFSET
	TArray<class USoundEffectSubmixPreset*>            SubmixEffectChain;                                        // 0x0050(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	class USoundfieldEncodingSettingsBase*             AmbisonicsPluginSettings;                                 // 0x0060(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                EnvelopeFollowerAttackTime;                               // 0x0068(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                EnvelopeFollowerReleaseTime;                              // 0x006C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              OutputVolume;                                             // 0x0070(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              WetLevel;                                                 // 0x0074(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              DryLevel;                                                 // 0x0078(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x007C(0x0004) MISSED OFFSET
	struct FSoundModulationDestinationSettings         OutputVolumeModulation;                                   // 0x0080(0x0010) (Edit, BlueprintVisible)
	struct FSoundModulationDestinationSettings         WetLevelModulation;                                       // 0x0090(0x0010) (Edit, BlueprintVisible)
	struct FSoundModulationDestinationSettings         DryLevelModulation;                                       // 0x00A0(0x0010) (Edit, BlueprintVisible)
	class UAudioLinkSettingsAbstract*                  AudioLinkSettings;                                        // 0x00B0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnSubmixRecordedFileDone;                                 // 0x00B8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData02[0x8];                                       // 0x00C8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SoundSubmix"));
		return ptr;
	}


	void StopSpectralAnalysis(class UObject* WorldContextObject);//Offset:Discovery.exe+0x5881650
	void StopRecordingOutput(class UObject* WorldContextObject, enum class EAudioRecordingExportType ExportType, const struct FString& Name, const struct FString& Path, class USoundWave* ExistingSoundWaveToOverwrite);//Offset:Discovery.exe+0x5882000
	void StopEnvelopeFollowing(class UObject* WorldContextObject);//Offset:Discovery.exe+0x5881EC0
	void StartSpectralAnalysis(class UObject* WorldContextObject, enum class EFFTSize FFTSize, enum class EFFTPeakInterpolationMethod InterpolationMethod, enum class EFFTWindowType WindowType, float HopSize, enum class EAudioSpectrumType SpectrumType);//Offset:Discovery.exe+0x58816F0
	void StartRecordingOutput(class UObject* WorldContextObject, float ExpectedDuration);//Offset:Discovery.exe+0x5882250
	void StartEnvelopeFollowing(class UObject* WorldContextObject);//Offset:Discovery.exe+0x5881F60
	void SetSubmixWetLevel(class UObject* WorldContextObject, float InWetLevel);//Offset:Discovery.exe+0x5881490
	void SetSubmixOutputVolume(class UObject* WorldContextObject, float InOutputVolume);//Offset:Discovery.exe+0x5881570
	void SetSubmixDryLevel(class UObject* WorldContextObject, float InDryLevel);//Offset:Discovery.exe+0x58813B0
	void RemoveSpectralAnalysisDelegate(class UObject* WorldContextObject, const struct FScriptDelegate& OnSubmixSpectralAnalysisBP);//Offset:Discovery.exe+0x5881900
	void AddSpectralAnalysisDelegate(class UObject* WorldContextObject, TArray<struct FSoundSubmixSpectralAnalysisBandSettings> InBandSettings, const struct FScriptDelegate& OnSubmixSpectralAnalysisBP, float UpdateRate, float DecibelNoiseFloor, bool bDoNormalize, bool bDoAutoRange, float AutoRangeAttackTime, float AutoRangeReleaseTime);//Offset:Discovery.exe+0x5881A10
	void AddEnvelopeFollowerDelegate(class UObject* WorldContextObject, const struct FScriptDelegate& OnSubmixEnvelopeBP);//Offset:Discovery.exe+0x5881DB0
};


// Class Engine.SoundfieldSubmix
// 0x0028 (0x0070 - 0x0048)
class USoundfieldSubmix : public USoundSubmixWithParentBase
{
public:
	struct FName                                       SoundfieldEncodingFormat;                                 // 0x0048(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class USoundfieldEncodingSettingsBase*             EncodingSettings;                                         // 0x0050(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<class USoundfieldEffectBase*>               SoundfieldEffectChain;                                    // 0x0058(0x0010) (Edit, ZeroConstructor)
	class UClass*                                      EncodingSettingsClass;                                    // 0x0068(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SoundfieldSubmix"));
		return ptr;
	}

};


// Class Engine.EndpointSubmix
// 0x0018 (0x0058 - 0x0040)
class UEndpointSubmix : public USoundSubmixBase
{
public:
	struct FName                                       EndpointType;                                             // 0x0040(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UClass*                                      EndpointSettingsClass;                                    // 0x0048(0x0008) (ZeroConstructor, IsPlainOldData)
	class UAudioEndpointSettingsBase*                  EndpointSettings;                                         // 0x0050(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.EndpointSubmix"));
		return ptr;
	}

};


// Class Engine.SoundfieldEndpointSubmix
// 0x0038 (0x0078 - 0x0040)
class USoundfieldEndpointSubmix : public USoundSubmixBase
{
public:
	struct FName                                       SoundfieldEndpointType;                                   // 0x0040(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UClass*                                      EndpointSettingsClass;                                    // 0x0048(0x0008) (ZeroConstructor, IsPlainOldData)
	class USoundfieldEndpointSettingsBase*             EndpointSettings;                                         // 0x0050(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UClass*                                      EncodingSettingsClass;                                    // 0x0058(0x0008) (ZeroConstructor, IsPlainOldData)
	class USoundfieldEncodingSettingsBase*             EncodingSettings;                                         // 0x0060(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<class USoundfieldEffectBase*>               SoundfieldEffectChain;                                    // 0x0068(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SoundfieldEndpointSubmix"));
		return ptr;
	}

};


// Class Engine.SoundSubmixWidgetInterface
// 0x0000 (0x0028 - 0x0028)
class USoundSubmixWidgetInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SoundSubmixWidgetInterface"));
		return ptr;
	}


	void OnConstructed(class USoundSubmixBase* SoundSubmix);//Offset:Discovery.exe+0x327F8B0
};


// Class Engine.SpectatorPawn
// 0x0000 (0x0370 - 0x0370)
class ASpectatorPawn : public ADefaultPawn
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SpectatorPawn"));
		return ptr;
	}

};


// Class Engine.SpectatorPawnMovement
// 0x0008 (0x0188 - 0x0180)
class USpectatorPawnMovement : public UFloatingPawnMovement
{
public:
	unsigned char                                      bIgnoreTimeDilation : 1;                                  // 0x0180(0x0001)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0181(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SpectatorPawnMovement"));
		return ptr;
	}

};


// Class Engine.SphereReflectionCapture
// 0x0008 (0x02D8 - 0x02D0)
class ASphereReflectionCapture : public AReflectionCapture
{
public:
	class UDrawSphereComponent*                        DrawCaptureRadius;                                        // 0x02D0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SphereReflectionCapture"));
		return ptr;
	}

};


// Class Engine.SphereReflectionCaptureComponent
// 0x0010 (0x0360 - 0x0350)
class USphereReflectionCaptureComponent : public UReflectionCaptureComponent
{
public:
	class UDrawSphereComponent*                        PreviewInfluenceRadius;                                   // 0x0350(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0358(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SphereReflectionCaptureComponent"));
		return ptr;
	}

};


// Class Engine.SplineMetadata
// 0x0000 (0x0028 - 0x0028)
class USplineMetadata : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SplineMetadata"));
		return ptr;
	}

};


// Class Engine.SplineComponent
// 0x0100 (0x0690 - 0x0590)
class USplineComponent : public UPrimitiveComponent
{
public:
	struct FSplineCurves                               SplineCurves;                                             // 0x0590(0x0070) (Edit)
	struct FInterpCurveVector                          SplineInfo;                                               // 0x0600(0x0018) (ZeroConstructor, Deprecated)
	struct FInterpCurveQuat                            SplineRotInfo;                                            // 0x0618(0x0018) (ZeroConstructor, Deprecated)
	struct FInterpCurveVector                          SplineScaleInfo;                                          // 0x0630(0x0018) (ZeroConstructor, Deprecated)
	struct FInterpCurveFloat                           SplineReparamTable;                                       // 0x0648(0x0018) (ZeroConstructor, Deprecated)
	bool                                               bAllowSplineEditingPerInstance;                           // 0x0660(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0661(0x0003) MISSED OFFSET
	int                                                ReparamStepsPerSegment;                                   // 0x0664(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Duration;                                                 // 0x0668(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bStationaryEndpoints;                                     // 0x066C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bSplineHasBeenEdited;                                     // 0x066D(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bModifiedByConstructionScript;                            // 0x066E(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bInputSplinePointsToConstructionScript;                   // 0x066F(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bDrawDebug;                                               // 0x0670(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bClosedLoop;                                              // 0x0671(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bLoopPositionOverride;                                    // 0x0672(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x0673(0x0001) MISSED OFFSET
	float                                              LoopPosition;                                             // 0x0674(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector                                     DefaultUpVector;                                          // 0x0678(0x0018) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SplineComponent"));
		return ptr;
	}


	void UpdateSpline();//Offset:Discovery.exe+0x5828CA0
	void SetWorldLocationAtSplinePoint(int PointIndex, const struct FVector& InLocation);//Offset:Discovery.exe+0x588A3A0
	void SetUpVectorAtSplinePoint(int PointIndex, const struct FVector& InUpVector, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline);//Offset:Discovery.exe+0x5889EC0
	void SetUnselectedSplineSegmentColor(const struct FLinearColor& SegmentColor);//Offset:Discovery.exe+0x588B440
	void SetTangentsAtSplinePoint(int PointIndex, const struct FVector& InArriveTangent, const struct FVector& InLeaveTangent, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline);//Offset:Discovery.exe+0x588A040
	void SetTangentColor(const struct FLinearColor& TangentColor);//Offset:Discovery.exe+0x588B440
	void SetTangentAtSplinePoint(int PointIndex, const struct FVector& InTangent, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline);//Offset:Discovery.exe+0x588A220
	void SetSplineWorldPoints(TArray<struct FVector> Points);//Offset:Discovery.exe+0x588A700
	void SetSplinePointType(int PointIndex, TEnumAsByte<ESplinePointType> Type, bool bUpdateSpline);//Offset:Discovery.exe+0x5889A30
	void SetSplinePoints(TArray<struct FVector> Points, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline);//Offset:Discovery.exe+0x588A7D0
	void SetSplineLocalPoints(TArray<struct FVector> Points);//Offset:Discovery.exe+0x588A630
	void SetSelectedSplineSegmentColor(const struct FLinearColor& SegmentColor);//Offset:Discovery.exe+0x588B440
	void SetScaleAtSplinePoint(int PointIndex, const struct FVector& InScaleVector, bool bUpdateSpline);//Offset:Discovery.exe+0x5889C00
	void SetRotationAtSplinePoint(int PointIndex, const struct FRotator& InRotation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline);//Offset:Discovery.exe+0x5889D40
	void SetLocationAtSplinePoint(int PointIndex, const struct FVector& InLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline);//Offset:Discovery.exe+0x588A4B0
	void SetDrawDebug(bool bShow);//Offset:Discovery.exe+0x588B3A0
	void SetDefaultUpVector(const struct FVector& UpVector, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);//Offset:Discovery.exe+0x5888810
	void SetClosedLoopAtPosition(bool bInClosedLoop, float Key, bool bUpdateSpline);//Offset:Discovery.exe+0x588B170
	void SetClosedLoop(bool bInClosedLoop, bool bUpdateSpline);//Offset:Discovery.exe+0x588B2B0
	void RemoveSplinePoint(int Index, bool bUpdateSpline);//Offset:Discovery.exe+0x588AA90
	bool IsClosedLoop();//Offset:Discovery.exe+0x588B140
	struct FVector GetWorldTangentAtDistanceAlongSpline(float Distance);//Offset:Discovery.exe+0x5888120
	struct FRotator GetWorldRotationAtTime(float Time, bool bUseConstantVelocity);//Offset:Discovery.exe+0x5887100
	struct FRotator GetWorldRotationAtDistanceAlongSpline(float Distance);//Offset:Discovery.exe+0x5887F40
	struct FVector GetWorldLocationAtTime(float Time, bool bUseConstantVelocity);//Offset:Discovery.exe+0x5887770
	struct FVector GetWorldLocationAtSplinePoint(int PointIndex);//Offset:Discovery.exe+0x58897F0
	struct FVector GetWorldLocationAtDistanceAlongSpline(float Distance);//Offset:Discovery.exe+0x58884E0
	struct FVector GetWorldDirectionAtTime(float Time, bool bUseConstantVelocity);//Offset:Discovery.exe+0x58874E0
	struct FVector GetWorldDirectionAtDistanceAlongSpline(float Distance);//Offset:Discovery.exe+0x5888300
	struct FVector GetVectorPropertyAtSplinePoint(int Index, const struct FName& PropertyName);//Offset:Discovery.exe+0x5888930
	struct FVector GetVectorPropertyAtSplineInputKey(float InKey, const struct FName& PropertyName);//Offset:Discovery.exe+0x588B4E0
	struct FVector GetUpVectorAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);//Offset:Discovery.exe+0x5886FB0
	struct FVector GetUpVectorAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);//Offset:Discovery.exe+0x58892F0
	struct FVector GetUpVectorAtSplineInputKey(float InKey, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);//Offset:Discovery.exe+0x588BBB0
	struct FVector GetUpVectorAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);//Offset:Discovery.exe+0x5887E40
	struct FTransform GetTransformAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity, bool bUseScale);//Offset:Discovery.exe+0x5886C60
	struct FTransform GetTransformAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseScale);//Offset:Discovery.exe+0x5888EB0
	struct FTransform GetTransformAtSplineInputKey(float InKey, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseScale);//Offset:Discovery.exe+0x588B910
	struct FTransform GetTransformAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseScale);//Offset:Discovery.exe+0x5887A00
	struct FVector GetTangentAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);//Offset:Discovery.exe+0x5887390
	struct FVector GetTangentAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);//Offset:Discovery.exe+0x58894F0
	struct FVector GetTangentAtSplineInputKey(float InKey, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);//Offset:Discovery.exe+0x588BEB0
	struct FVector GetTangentAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);//Offset:Discovery.exe+0x5888200
	TEnumAsByte<ESplinePointType> GetSplinePointType(int PointIndex);//Offset:Discovery.exe+0x5889B60
	float GetSplineLength();//Offset:Discovery.exe+0x5888900
	struct FVector GetScaleAtTime(float Time, bool bUseConstantVelocity);//Offset:Discovery.exe+0x5886A20
	struct FVector GetScaleAtSplinePoint(int PointIndex);//Offset:Discovery.exe+0x5889050
	struct FVector GetScaleAtSplineInputKey(float InKey);//Offset:Discovery.exe+0x588B770
	struct FVector GetScaleAtDistanceAlongSpline(float Distance);//Offset:Discovery.exe+0x5887BA0
	struct FRotator GetRotationAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);//Offset:Discovery.exe+0x5887240
	struct FRotator GetRotationAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);//Offset:Discovery.exe+0x58893F0
	struct FRotator GetRotationAtSplineInputKey(float InKey, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);//Offset:Discovery.exe+0x588BCB0
	struct FRotator GetRotationAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);//Offset:Discovery.exe+0x5888020
	float GetRollAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);//Offset:Discovery.exe+0x5886B20
	float GetRollAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);//Offset:Discovery.exe+0x5889100
	float GetRollAtSplineInputKey(float InKey, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);//Offset:Discovery.exe+0x588B820
	float GetRollAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);//Offset:Discovery.exe+0x5887C50
	struct FVector GetRightVectorAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);//Offset:Discovery.exe+0x5886E60
	struct FVector GetRightVectorAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);//Offset:Discovery.exe+0x58891F0
	struct FVector GetRightVectorAtSplineInputKey(float InKey, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);//Offset:Discovery.exe+0x588BAB0
	struct FVector GetRightVectorAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);//Offset:Discovery.exe+0x5887D40
	int GetNumberOfSplineSegments();//Offset:Discovery.exe+0x58899D0
	int GetNumberOfSplinePoints();//Offset:Discovery.exe+0x5889A00
	struct FVector GetLocationAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);//Offset:Discovery.exe+0x58878B0
	struct FVector GetLocationAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);//Offset:Discovery.exe+0x58898D0
	struct FVector GetLocationAtSplineInputKey(float InKey, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);//Offset:Discovery.exe+0x588BFB0
	struct FVector GetLocationAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);//Offset:Discovery.exe+0x58885C0
	void GetLocationAndTangentAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, struct FVector* Location, struct FVector* Tangent);//Offset:Discovery.exe+0x5888D20
	void GetLocalLocationAndTangentAtSplinePoint(int PointIndex, struct FVector* LocalLocation, struct FVector* LocalTangent);//Offset:Discovery.exe+0x5888BC0
	struct FVector GetLeaveTangentAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);//Offset:Discovery.exe+0x58894F0
	float GetInputKeyAtDistanceAlongSpline(float Distance);//Offset:Discovery.exe+0x58886C0
	float GetFloatPropertyAtSplinePoint(int Index, const struct FName& PropertyName);//Offset:Discovery.exe+0x5888A30
	float GetFloatPropertyAtSplineInputKey(float InKey, const struct FName& PropertyName);//Offset:Discovery.exe+0x588B5E0
	float GetDistanceAlongSplineAtSplinePoint(int PointIndex);//Offset:Discovery.exe+0x5888B20
	float GetDistanceAlongSplineAtSplineInputKey(float InKey);//Offset:Discovery.exe+0x588B6D0
	struct FVector GetDirectionAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);//Offset:Discovery.exe+0x5887620
	struct FVector GetDirectionAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);//Offset:Discovery.exe+0x58896F0
	struct FVector GetDirectionAtSplineInputKey(float InKey, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);//Offset:Discovery.exe+0x588BDB0
	struct FVector GetDirectionAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);//Offset:Discovery.exe+0x58883E0
	struct FVector GetDefaultUpVector(TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);//Offset:Discovery.exe+0x5888760
	struct FVector GetArriveTangentAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);//Offset:Discovery.exe+0x58895F0
	struct FVector FindUpVectorClosestToWorldLocation(const struct FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);//Offset:Discovery.exe+0x5886420
	struct FTransform FindTransformClosestToWorldLocation(const struct FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseScale);//Offset:Discovery.exe+0x5885FB0
	struct FVector FindTangentClosestToWorldLocation(const struct FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);//Offset:Discovery.exe+0x5886640
	struct FVector FindScaleClosestToWorldLocation(const struct FVector& WorldLocation);//Offset:Discovery.exe+0x5886160
	struct FRotator FindRotationClosestToWorldLocation(const struct FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);//Offset:Discovery.exe+0x5886530
	float FindRollClosestToWorldLocation(const struct FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);//Offset:Discovery.exe+0x5886220
	struct FVector FindRightVectorClosestToWorldLocation(const struct FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);//Offset:Discovery.exe+0x5886310
	struct FVector FindLocationClosestToWorldLocation(const struct FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);//Offset:Discovery.exe+0x5886860
	float FindInputKeyClosestToWorldLocation(const struct FVector& WorldLocation);//Offset:Discovery.exe+0x5886970
	struct FVector FindDirectionClosestToWorldLocation(const struct FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);//Offset:Discovery.exe+0x5886750
	bool DivideSplineIntoPolylineRecursive(float StartDistanceAlongSpline, float EndDistanceAlongSpline, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, float MaxSquareDistanceFromSpline, TArray<struct FVector>* OutPoints);//Offset:Discovery.exe+0x5885DC0
	bool ConvertSplineToPolyLine(TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, float MaxSquareDistanceFromSpline, TArray<struct FVector>* OutPoints);//Offset:Discovery.exe+0x5885AD0
	bool ConvertSplineSegmentToPolyLine(int SplinePointStartIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, float MaxSquareDistanceFromSpline, TArray<struct FVector>* OutPoints);//Offset:Discovery.exe+0x5885C20
	void ClearSplinePoints(bool bUpdateSpline);//Offset:Discovery.exe+0x588B0A0
	void AddSplineWorldPoint(const struct FVector& Position);//Offset:Discovery.exe+0x588A9D0
	void AddSplinePointAtIndex(const struct FVector& Position, int Index, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline);//Offset:Discovery.exe+0x588AB80
	void AddSplinePoint(const struct FVector& Position, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline);//Offset:Discovery.exe+0x588AD00
	void AddSplineLocalPoint(const struct FVector& Position);//Offset:Discovery.exe+0x588A920
	void AddPoints(TArray<struct FSplinePoint> Points, bool bUpdateSpline);//Offset:Discovery.exe+0x588AE40
	void AddPoint(const struct FSplinePoint& Point, bool bUpdateSpline);//Offset:Discovery.exe+0x588AF50
};


// Class Engine.SplineMeshActor
// 0x0008 (0x02D0 - 0x02C8)
class ASplineMeshActor : public AActor
{
public:
	class USplineMeshComponent*                        SplineMeshComponent;                                      // 0x02C8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SplineMeshActor"));
		return ptr;
	}

};


// Class Engine.SplineMeshComponent
// 0x0100 (0x0720 - 0x0620)
class USplineMeshComponent : public UStaticMeshComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0620(0x0008) MISSED OFFSET
	struct FSplineMeshParams                           SplineParams;                                             // 0x0628(0x00B0) (Edit)
	struct FVector                                     SplineUpDir;                                              // 0x06D8(0x0018) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              SplineBoundaryMin;                                        // 0x06F0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FGuid                                       CachedMeshBodySetupGuid;                                  // 0x06F4(0x0010) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0704(0x0004) MISSED OFFSET
	class UBodySetup*                                  BodySetup;                                                // 0x0708(0x0008) (ZeroConstructor, IsPlainOldData)
	float                                              SplineBoundaryMax;                                        // 0x0710(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bAllowSplineEditingPerInstance : 1;                       // 0x0714(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      bSmoothInterpRollScale : 1;                               // 0x0714(0x0001) (Edit)
	unsigned char                                      bMeshDirty : 1;                                           // 0x0714(0x0001) (Transient)
	TEnumAsByte<ESplineMeshAxis>                       ForwardAxis;                                              // 0x0715(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x0716(0x0002) MISSED OFFSET
	float                                              VirtualTextureMainPassMaxDrawDistance;                    // 0x0718(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x071C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SplineMeshComponent"));
		return ptr;
	}


	void UpdateMesh();//Offset:Discovery.exe+0x58924F0
	void SetStartTangent(const struct FVector& StartTangent, bool bUpdateMesh);//Offset:Discovery.exe+0x5892250
	void SetStartScale(const struct FVector2D& StartScale, bool bUpdateMesh);//Offset:Discovery.exe+0x5891C20
	void SetStartRoll(float StartRoll, bool bUpdateMesh);//Offset:Discovery.exe+0x5891B00
	void SetStartPosition(const struct FVector& StartPos, bool bUpdateMesh);//Offset:Discovery.exe+0x58923A0
	void SetStartOffset(const struct FVector2D& StartOffset, bool bUpdateMesh);//Offset:Discovery.exe+0x58919C0
	void SetStartAndEnd(const struct FVector& StartPos, const struct FVector& StartTangent, const struct FVector& EndPos, const struct FVector& EndTangent, bool bUpdateMesh);//Offset:Discovery.exe+0x5891D60
	void SetSplineUpDir(const struct FVector& InSplineUpDir, bool bUpdateMesh);//Offset:Discovery.exe+0x58913C0
	void SetForwardAxis(TEnumAsByte<ESplineMeshAxis> InForwardAxis, bool bUpdateMesh);//Offset:Discovery.exe+0x5891510
	void SetEndTangent(const struct FVector& EndTangent, bool bUpdateMesh);//Offset:Discovery.exe+0x5891FB0
	void SetEndScale(const struct FVector2D& EndScale, bool bUpdateMesh);//Offset:Discovery.exe+0x5891880
	void SetEndRoll(float EndRoll, bool bUpdateMesh);//Offset:Discovery.exe+0x5891760
	void SetEndPosition(const struct FVector& EndPos, bool bUpdateMesh);//Offset:Discovery.exe+0x5892100
	void SetEndOffset(const struct FVector2D& EndOffset, bool bUpdateMesh);//Offset:Discovery.exe+0x5891620
	void SetBoundaryMin(float InBoundaryMin, bool bUpdateMesh);//Offset:Discovery.exe+0x58912A0
	void SetBoundaryMax(float InBoundaryMax, bool bUpdateMesh);//Offset:Discovery.exe+0x5891180
	struct FVector GetStartTangent();//Offset:Discovery.exe+0x5892340
	struct FVector2D GetStartScale();//Offset:Discovery.exe+0x5891D10
	float GetStartRoll();//Offset:Discovery.exe+0x5891BF0
	struct FVector GetStartPosition();//Offset:Discovery.exe+0x5892490
	struct FVector2D GetStartOffset();//Offset:Discovery.exe+0x5891AB0
	struct FVector GetSplineUpDir();//Offset:Discovery.exe+0x58914B0
	TEnumAsByte<ESplineMeshAxis> GetForwardAxis();//Offset:Discovery.exe+0x58915F0
	struct FVector GetEndTangent();//Offset:Discovery.exe+0x58920A0
	struct FVector2D GetEndScale();//Offset:Discovery.exe+0x5891970
	float GetEndRoll();//Offset:Discovery.exe+0x5891850
	struct FVector GetEndPosition();//Offset:Discovery.exe+0x58921F0
	struct FVector2D GetEndOffset();//Offset:Discovery.exe+0x5891710
	float GetBoundaryMin();//Offset:Discovery.exe+0x5891390
	float GetBoundaryMax();//Offset:Discovery.exe+0x5891270
};


// Class Engine.SpotLightComponent
// 0x0000 (0x0450 - 0x0450)
class USpotLightComponent : public UPointLightComponent
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SpotLightComponent"));
		return ptr;
	}


	void SetOuterConeAngle(float NewOuterConeAngle);//Offset:Discovery.exe+0x5893B90
	void SetInnerConeAngle(float NewInnerConeAngle);//Offset:Discovery.exe+0x5893C30
};


// Class Engine.StaticMesh
// 0x01A8 (0x0278 - 0x00D0)
class UStaticMesh : public UStreamableRenderAsset
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x00D0(0x0028) MISSED OFFSET
	struct FPerQualityLevelInt                         MinQualityLevelLOD;                                       // 0x00F8(0x0068)
	struct FPerPlatformInt                             MinLOD;                                                   // 0x0160(0x0004)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0164(0x0004) MISSED OFFSET
	TArray<struct FStaticMaterial>                     StaticMaterials;                                          // 0x0168(0x0010) (BlueprintVisible, ZeroConstructor)
	float                                              LightmapUVDensity;                                        // 0x0178(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                LightMapResolution;                                       // 0x017C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                LightMapCoordinateIndex;                                  // 0x0180(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DistanceFieldSelfShadowBias;                              // 0x0184(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	class UBodySetup*                                  BodySetup;                                                // 0x0188(0x0008) (Edit, ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData)
	int                                                LODForCollision;                                          // 0x0190(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                LODForRayTracing;                                         // 0x0194(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bGenerateMeshDistanceField : 1;                           // 0x0198(0x0001) (Edit)
	unsigned char                                      bStripComplexCollisionForConsole : 1;                     // 0x0198(0x0001) (Deprecated)
	unsigned char                                      bHasNavigationData : 1;                                   // 0x0198(0x0001) (Edit)
	unsigned char                                      bSupportUniformlyDistributedSampling : 1;                 // 0x0198(0x0001) (Edit)
	unsigned char                                      bSupportPhysicalMaterialMasks : 1;                        // 0x0198(0x0001) (Edit)
	unsigned char                                      bSupportRayTracing : 1;                                   // 0x0198(0x0001) (Edit)
	unsigned char                                      bDoFastBuild : 1;                                         // 0x0198(0x0001)
	unsigned char                                      bIsBuiltAtRuntime : 1;                                    // 0x0198(0x0001) (Deprecated)
	unsigned char                                      UnknownData02 : 1;                                        // 0x0199(0x0001)
	unsigned char                                      bAllowCPUAccess : 1;                                      // 0x0199(0x0001) (Edit)
	unsigned char                                      bSupportGpuUniformlyDistributedSampling : 1;              // 0x0199(0x0001) (Edit)
	unsigned char                                      UnknownData03[0x16];                                      // 0x019A(0x0016) MISSED OFFSET
	TArray<struct FPartBounds>                         PartBounds;                                               // 0x01B0(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData04[0x10];                                      // 0x01C0(0x0010) MISSED OFFSET
	TArray<class UStaticMeshSocket*>                   Sockets;                                                  // 0x01D0(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData05[0x10];                                      // 0x01E0(0x0010) MISSED OFFSET
	struct FVector                                     PositiveBoundsExtension;                                  // 0x01F0(0x0018) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     NegativeBoundsExtension;                                  // 0x0208(0x0018) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FBoxSphereBounds                            ExtendedBounds;                                           // 0x0220(0x0038) (ZeroConstructor, IsPlainOldData)
	int                                                ElementToIgnoreForTexFactor;                              // 0x0258(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x4];                                       // 0x025C(0x0004) MISSED OFFSET
	TArray<class UAssetUserData*>                      AssetUserData;                                            // 0x0260(0x0010) (Edit, ExportObject, ZeroConstructor)
	class UNavCollisionBase*                           NavCollision;                                             // 0x0270(0x0008) (Edit, ExportObject, ZeroConstructor, Transient, EditConst, InstancedReference, DuplicateTransient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.StaticMesh"));
		return ptr;
	}


	void SetStaticMaterials(TArray<struct FStaticMaterial> InStaticMaterials);//Offset:Discovery.exe+0x5895190
	void SetMinimumLODForPlatforms(TMap<struct FName, int> PlatformMinimumLODs);//Offset:Discovery.exe+0x5895460
	void SetMinimumLODForPlatform(const struct FName& PlatformName, int InMinLOD);//Offset:Discovery.exe+0x5895390
	void RemoveSocket(class UStaticMeshSocket* Socket);//Offset:Discovery.exe+0x5894970
	class UStaticMeshDescription* GetStaticMeshDescription(int LODIndex);//Offset:Discovery.exe+0x5894EF0
	TArray<struct FStaticMaterial> GetStaticMaterials();//Offset:Discovery.exe+0x5895310
	int GetNumSections(int InLOD);//Offset:Discovery.exe+0x5894D40
	int GetNumLODs();//Offset:Discovery.exe+0x5894EC0
	void GetMinimumLODForQualityLevels(TMap<struct FName, int>* QualityLevelMinimumLODs);//Offset:Discovery.exe+0x5895460
	int GetMinimumLODForQualityLevel(const struct FName& QualityLevel);//Offset:Discovery.exe+0x5895590
	void GetMinimumLODForPlatforms(TMap<struct FName, int>* PlatformMinimumLODs);//Offset:Discovery.exe+0x5895460
	int GetMinimumLODForPlatform(const struct FName& PlatformName);//Offset:Discovery.exe+0x5895590
	int GetMaterialIndex(const struct FName& MaterialSlotName);//Offset:Discovery.exe+0x5894B50
	class UMaterialInterface* GetMaterial(int MaterialIndex);//Offset:Discovery.exe+0x5894CA0
	struct FBoxSphereBounds GetBounds();//Offset:Discovery.exe+0x5894E50
	struct FBox GetBoundingBox();//Offset:Discovery.exe+0x5894DE0
	class UStaticMeshSocket* FindSocket(const struct FName& InSocketName);//Offset:Discovery.exe+0x5894A10
	class UStaticMeshDescription* STATIC_CreateStaticMeshDescription(class UObject* Outer);//Offset:Discovery.exe+0x58950F0
	void BuildFromStaticMeshDescriptions(TArray<class UStaticMeshDescription*> StaticMeshDescriptions, bool bBuildSimpleCollision, bool bFastBuild);//Offset:Discovery.exe+0x5894F90
	void AddSocket(class UStaticMeshSocket* Socket);//Offset:Discovery.exe+0x5894AB0
	struct FName AddMaterial(class UMaterialInterface* Material);//Offset:Discovery.exe+0x5894BF0
};


// Class Engine.StaticMeshSocket
// 0x0060 (0x0088 - 0x0028)
class UStaticMeshSocket : public UObject
{
public:
	struct FName                                       SocketName;                                               // 0x0028(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector                                     RelativeLocation;                                         // 0x0030(0x0018) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FRotator                                    RelativeRotation;                                         // 0x0048(0x0018) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     RelativeScale;                                            // 0x0060(0x0018) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FString                                     Tag;                                                      // 0x0078(0x0010) (Edit, BlueprintVisible, ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.StaticMeshSocket"));
		return ptr;
	}

};


// Class Engine.StaticMeshGameplayTagSocket
// 0x0020 (0x00A8 - 0x0088)
class UStaticMeshGameplayTagSocket : public UStaticMeshSocket
{
public:
	struct FGameplayTagContainer                       GameplayTags;                                             // 0x0088(0x0020) (Edit, BlueprintVisible)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.StaticMeshGameplayTagSocket"));
		return ptr;
	}

};


// Class Engine.StaticMeshDescriptionBulkData
// 0x0000 (0x0028 - 0x0028)
class UStaticMeshDescriptionBulkData : public UMeshDescriptionBaseBulkData
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.StaticMeshDescriptionBulkData"));
		return ptr;
	}

};


// Class Engine.StereoLayerShape
// 0x0000 (0x0028 - 0x0028)
class UStereoLayerShape : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.StereoLayerShape"));
		return ptr;
	}

};


// Class Engine.StereoLayerShapeQuad
// 0x0000 (0x0028 - 0x0028)
class UStereoLayerShapeQuad : public UStereoLayerShape
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.StereoLayerShapeQuad"));
		return ptr;
	}

};


// Class Engine.StereoLayerShapeCylinder
// 0x0010 (0x0038 - 0x0028)
class UStereoLayerShapeCylinder : public UStereoLayerShape
{
public:
	float                                              Radius;                                                   // 0x0028(0x0004) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              OverlayArc;                                               // 0x002C(0x0004) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                Height;                                                   // 0x0030(0x0004) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0034(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.StereoLayerShapeCylinder"));
		return ptr;
	}


	void SetRadius(float InRadius);//Offset:Discovery.exe+0x5898DB0
	void SetOverlayArc(float InOverlayArc);//Offset:Discovery.exe+0x5898D10
	void SetHeight(int InHeight);//Offset:Discovery.exe+0x5898C70
};


// Class Engine.StereoLayerShapeCubemap
// 0x0000 (0x0028 - 0x0028)
class UStereoLayerShapeCubemap : public UStereoLayerShape
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.StereoLayerShapeCubemap"));
		return ptr;
	}

};


// Class Engine.StereoLayerShapeEquirect
// 0x0090 (0x00B8 - 0x0028)
class UStereoLayerShapeEquirect : public UStereoLayerShape
{
public:
	struct FBox2D                                      LeftUVRect;                                               // 0x0028(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FBox2D                                      RightUVRect;                                              // 0x0050(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector2D                                   LeftScale;                                                // 0x0078(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector2D                                   RightScale;                                               // 0x0088(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector2D                                   LeftBias;                                                 // 0x0098(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector2D                                   RightBias;                                                // 0x00A8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.StereoLayerShapeEquirect"));
		return ptr;
	}


	void SetEquirectProps(const struct FEquirectProps& InScaleBiases);//Offset:Discovery.exe+0x58993C0
};


// Class Engine.StereoLayerComponent
// 0x0190 (0x0460 - 0x02D0)
class UStereoLayerComponent : public USceneComponent
{
public:
	unsigned char                                      bLiveTexture : 1;                                         // 0x02D0(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bSupportsDepth : 1;                                       // 0x02D0(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bNoAlphaChannel : 1;                                      // 0x02D0(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x7];                                       // 0x02D1(0x0007) MISSED OFFSET
	class UTexture*                                    Texture;                                                  // 0x02D8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UTexture*                                    LeftTexture;                                              // 0x02E0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bQuadPreserveTextureRatio : 1;                            // 0x02E8(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData01[0x7];                                       // 0x02E9(0x0007) MISSED OFFSET
	struct FVector2D                                   QuadSize;                                                 // 0x02F0(0x0010) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FBox2D                                      UVRect;                                                   // 0x0300(0x0028) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              CylinderRadius;                                           // 0x0328(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              CylinderOverlayArc;                                       // 0x032C(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	int                                                CylinderHeight;                                           // 0x0330(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0334(0x0004) MISSED OFFSET
	struct FEquirectProps                              EquirectProps;                                            // 0x0338(0x0090) (Deprecated)
	TEnumAsByte<EStereoLayerType>                      StereoLayerType;                                          // 0x03C8(0x0001) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EStereoLayerShape>                     StereoLayerShape;                                         // 0x03C9(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData)
	unsigned char                                      UnknownData03[0x6];                                       // 0x03CA(0x0006) MISSED OFFSET
	class UStereoLayerShape*                           Shape;                                                    // 0x03D0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoClear, IsPlainOldData)
	int                                                Priority;                                                 // 0x03D8(0x0004) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x84];                                      // 0x03DC(0x0084) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.StereoLayerComponent"));
		return ptr;
	}


	void SetUVRect(const struct FBox2D& InUVRect);//Offset:Discovery.exe+0x5899A30
	void SetTexture(class UTexture* InTexture);//Offset:Discovery.exe+0x5899C70
	void SetQuadSize(const struct FVector2D& InQuadSize);//Offset:Discovery.exe+0x5899B10
	void SetPriority(int InPriority);//Offset:Discovery.exe+0x5899810
	void SetLeftTexture(class UTexture* InTexture);//Offset:Discovery.exe+0x5899BD0
	void SetEquirectProps(const struct FEquirectProps& InScaleBiases);//Offset:Discovery.exe+0x58998B0
	void MarkTextureForUpdate();//Offset:Discovery.exe+0x58997C0
	struct FBox2D GetUVRect();//Offset:Discovery.exe+0x58999C0
	class UTexture* GetTexture();//Offset:Discovery.exe+0x2DC2F40
	struct FVector2D GetQuadSize();//Offset:Discovery.exe+0x5899AE0
	int GetPriority();//Offset:Discovery.exe+0x58997E0
	class UTexture* GetLeftTexture();//Offset:Discovery.exe+0x5899BB0
};


// Class Engine.StereoLayerFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UStereoLayerFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.StereoLayerFunctionLibrary"));
		return ptr;
	}


	void STATIC_ShowSplashScreen();//Offset:Discovery.exe+0x44F1A50
	void STATIC_SetSplashScreen(class UTexture* Texture, const struct FVector2D& Scale, const struct FVector& Offset, bool bShowLoadingMovie, bool bShowOnSet);//Offset:Discovery.exe+0x589A5F0
	void STATIC_HideSplashScreen();//Offset:Discovery.exe+0x44F1A30
	void STATIC_EnableAutoLoadingSplashScreen(bool InAutoShowEnabled);//Offset:Discovery.exe+0x589A560
};


// Class Engine.StringTable
// 0x0018 (0x0040 - 0x0028)
class UStringTable : public UObject
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0028(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.StringTable"));
		return ptr;
	}

};


// Class Engine.SubsurfaceProfile
// 0x00A0 (0x00C8 - 0x0028)
class USubsurfaceProfile : public UObject
{
public:
	struct FSubsurfaceProfileStruct                    Settings;                                                 // 0x0028(0x009C) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00C4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SubsurfaceProfile"));
		return ptr;
	}

};


// Class Engine.SubsystemBlueprintLibrary
// 0x0000 (0x0028 - 0x0028)
class USubsystemBlueprintLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SubsystemBlueprintLibrary"));
		return ptr;
	}


	class UWorldSubsystem* STATIC_GetWorldSubsystem(class UObject* ContextObject, class UClass* Class);//Offset:Discovery.exe+0x1466E00
	class ULocalPlayerSubsystem* STATIC_GetLocalPlayerSubsystemFromPlayerController(class APlayerController* PlayerController, class UClass* Class);//Offset:Discovery.exe+0x1466D10
	class ULocalPlayerSubsystem* STATIC_GetLocalPlayerSubsystem(class UObject* ContextObject, class UClass* Class);//Offset:Discovery.exe+0x1466EF0
	class UGameInstanceSubsystem* STATIC_GetGameInstanceSubsystem(class UObject* ContextObject, class UClass* Class);//Offset:Discovery.exe+0x1466FE0
	class UEngineSubsystem* STATIC_GetEngineSubsystem(class UClass* Class);//Offset:Discovery.exe+0x14670D0
	class UAudioEngineSubsystem* STATIC_GetAudioEngineSubsystem(class UObject* ContextObject, class UClass* Class);//Offset:Discovery.exe+0x589C1F0
};


// Class Engine.SubUVAnimation
// 0x0040 (0x0068 - 0x0028)
class USubUVAnimation : public UObject
{
public:
	class UTexture2D*                                  SubUVTexture;                                             // 0x0028(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                SubImages_Horizontal;                                     // 0x0030(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                SubImages_Vertical;                                       // 0x0034(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ESubUVBoundingVertexCount>             BoundingMode;                                             // 0x0038(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EOpacitySourceMode>                    OpacitySourceMode;                                        // 0x0039(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x003A(0x0002) MISSED OFFSET
	float                                              AlphaThreshold;                                           // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x28];                                      // 0x0040(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SubUVAnimation"));
		return ptr;
	}

};


// Class Engine.SystemTimeTimecodeProvider
// 0x0010 (0x0040 - 0x0030)
class USystemTimeTimecodeProvider : public UTimecodeProvider
{
public:
	struct FFrameRate                                  FrameRate;                                                // 0x0030(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bGenerateFullFrame;                                       // 0x0038(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bUseHighPerformanceClock;                                 // 0x0039(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x003A(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SystemTimeTimecodeProvider"));
		return ptr;
	}

};


// Class Engine.TargetPoint
// 0x0000 (0x02C8 - 0x02C8)
class ATargetPoint : public AActor
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.TargetPoint"));
		return ptr;
	}

};


// Class Engine.TextPropertyTestObject
// 0x0048 (0x0070 - 0x0028)
class UTextPropertyTestObject : public UObject
{
public:
	struct FText                                       DefaultedText;                                            // 0x0028(0x0018)
	struct FText                                       UndefaultedText;                                          // 0x0040(0x0018)
	struct FText                                       TransientText;                                            // 0x0058(0x0018)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.TextPropertyTestObject"));
		return ptr;
	}

};


// Class Engine.TextRenderActor
// 0x0008 (0x02D0 - 0x02C8)
class ATextRenderActor : public AActor
{
public:
	class UTextRenderComponent*                        TextRender;                                               // 0x02C8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.TextRenderActor"));
		return ptr;
	}

};


// Class Engine.TextRenderComponent
// 0x0050 (0x05E0 - 0x0590)
class UTextRenderComponent : public UPrimitiveComponent
{
public:
	struct FText                                       Text;                                                     // 0x0590(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly)
	class UMaterialInterface*                          TextMaterial;                                             // 0x05A8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UFont*                                       Font;                                                     // 0x05B0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EHorizTextAligment>                    HorizontalAlignment;                                      // 0x05B8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EVerticalTextAligment>                 VerticalAlignment;                                        // 0x05B9(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x05BA(0x0002) MISSED OFFSET
	struct FColor                                      TextRenderColor;                                          // 0x05BC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              XScale;                                                   // 0x05C0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              YScale;                                                   // 0x05C4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              WorldSize;                                                // 0x05C8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              InvDefaultSize;                                           // 0x05CC(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              HorizSpacingAdjust;                                       // 0x05D0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              VertSpacingAdjust;                                        // 0x05D4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bAlwaysRenderAsText : 1;                                  // 0x05D8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData01[0x7];                                       // 0x05D9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.TextRenderComponent"));
		return ptr;
	}


	void SetYScale(float Value);//Offset:Discovery.exe+0x589D2C0
	void SetXScale(float Value);//Offset:Discovery.exe+0x589D360
	void SetWorldSize(float Value);//Offset:Discovery.exe+0x589D0E0
	void SetVertSpacingAdjust(float Value);//Offset:Discovery.exe+0x589D180
	void SetVerticalAlignment(TEnumAsByte<EVerticalTextAligment> Value);//Offset:Discovery.exe+0x589D490
	void SetTextRenderColor(const struct FColor& Value);//Offset:Discovery.exe+0x589D400
	void SetTextMaterial(class UMaterialInterface* Material);//Offset:Discovery.exe+0x589D650
	void SetHorizSpacingAdjust(float Value);//Offset:Discovery.exe+0x589D220
	void SetHorizontalAlignment(TEnumAsByte<EHorizTextAligment> Value);//Offset:Discovery.exe+0x589D520
	void SetFont(class UFont* Value);//Offset:Discovery.exe+0x589D5B0
	void K2_SetText(const struct FText& Value);//Offset:Discovery.exe+0x589D6F0
	struct FVector GetTextWorldSize();//Offset:Discovery.exe+0x589D020
	struct FVector GetTextLocalSize();//Offset:Discovery.exe+0x589D080
};


// Class Engine.Texture2DArray
// 0x0060 (0x0250 - 0x01F0)
class UTexture2DArray : public UTexture
{
public:
	unsigned char                                      UnknownData00[0x58];                                      // 0x01F0(0x0058) MISSED OFFSET
	TEnumAsByte<ETextureAddress>                       AddressX;                                                 // 0x0248(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ETextureAddress>                       AddressY;                                                 // 0x0249(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ETextureAddress>                       AddressZ;                                                 // 0x024A(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x5];                                       // 0x024B(0x0005) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.Texture2DArray"));
		return ptr;
	}


	void Blueprint_UpdateTextureFromSourceTextures();//Offset:Discovery.exe+0x155C060
};


// Class Engine.Texture2DDynamic
// 0x0020 (0x0210 - 0x01F0)
class UTexture2DDynamic : public UTexture
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x01F0(0x0008) MISSED OFFSET
	TEnumAsByte<EPixelFormat>                          Format;                                                   // 0x01F8(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x17];                                      // 0x01F9(0x0017) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.Texture2DDynamic"));
		return ptr;
	}

};


// Class Engine.TextureCubeArray
// 0x0060 (0x0250 - 0x01F0)
class UTextureCubeArray : public UTexture
{
public:
	unsigned char                                      UnknownData00[0x60];                                      // 0x01F0(0x0060) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.TextureCubeArray"));
		return ptr;
	}

};


// Class Engine.TextureEncodingProjectSettings
// 0x0018 (0x0050 - 0x0038)
class UTextureEncodingProjectSettings : public UDeveloperSettings
{
public:
	unsigned char                                      bFinalUsesRDO : 1;                                        // 0x0038(0x0001) (Edit, Config)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0039(0x0003) MISSED OFFSET
	int8_t                                             FinalRDOLambda;                                           // 0x003C(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	enum class ETextureEncodeEffort                    FinalEffortLevel;                                         // 0x003D(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	enum class ETextureUniversalTiling                 FinalUniversalTiling;                                     // 0x003E(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x003F(0x0001) MISSED OFFSET
	unsigned char                                      bFastUsesRDO : 1;                                         // 0x0040(0x0001) (Edit, Config)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0041(0x0003) MISSED OFFSET
	int8_t                                             FastRDOLambda;                                            // 0x0044(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	enum class ETextureEncodeEffort                    FastEffortLevel;                                          // 0x0045(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	enum class ETextureUniversalTiling                 FastUniversalTiling;                                      // 0x0046(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	enum class ETextureEncodeSpeed                     CookUsesSpeed;                                            // 0x0047(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	enum class ETextureEncodeSpeed                     EditorUsesSpeed;                                          // 0x0048(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData03[0x7];                                       // 0x0049(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.TextureEncodingProjectSettings"));
		return ptr;
	}

};


// Class Engine.TextureEncodingUserSettings
// 0x0008 (0x0040 - 0x0038)
class UTextureEncodingUserSettings : public UDeveloperSettings
{
public:
	enum class ETextureEncodeSpeedOverride             ForceEncodeSpeed;                                         // 0x0038(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0039(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.TextureEncodingUserSettings"));
		return ptr;
	}

};


// Class Engine.TextureLightProfile
// 0x0000 (0x02B0 - 0x02B0)
class UTextureLightProfile : public UTexture2D
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.TextureLightProfile"));
		return ptr;
	}

};


// Class Engine.TextureMipDataProviderFactory
// 0x0000 (0x0028 - 0x0028)
class UTextureMipDataProviderFactory : public UAssetUserData
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.TextureMipDataProviderFactory"));
		return ptr;
	}

};


// Class Engine.TextureRenderTarget2DArray
// 0x0020 (0x0220 - 0x0200)
class UTextureRenderTarget2DArray : public UTextureRenderTarget
{
public:
	int                                                Slices;                                                   // 0x0200(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                ClearColor;                                               // 0x0204(0x0010) (ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EPixelFormat>                          OverrideFormat;                                           // 0x0214(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bHDR : 1;                                                 // 0x0215(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bForceLinearGamma : 1;                                    // 0x0215(0x0001)
	unsigned char                                      UnknownData00[0xA];                                       // 0x0216(0x000A) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.TextureRenderTarget2DArray"));
		return ptr;
	}

};


// Class Engine.TextureRenderTargetCube
// 0x0010 (0x0210 - 0x0200)
class UTextureRenderTargetCube : public UTextureRenderTarget
{
public:
	unsigned char                                      UnknownData00[0xC];                                       // 0x0200(0x000C) MISSED OFFSET
	TEnumAsByte<EPixelFormat>                          OverrideFormat;                                           // 0x020C(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bHDR : 1;                                                 // 0x020D(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bForceLinearGamma : 1;                                    // 0x020D(0x0001)
	unsigned char                                      UnknownData01[0x2];                                       // 0x020E(0x0002) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.TextureRenderTargetCube"));
		return ptr;
	}

};


// Class Engine.TextureRenderTargetVolume
// 0x0020 (0x0220 - 0x0200)
class UTextureRenderTargetVolume : public UTextureRenderTarget
{
public:
	int                                                SizeZ;                                                    // 0x0200(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                ClearColor;                                               // 0x0204(0x0010) (ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EPixelFormat>                          OverrideFormat;                                           // 0x0214(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bHDR : 1;                                                 // 0x0215(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bForceLinearGamma : 1;                                    // 0x0215(0x0001)
	unsigned char                                      UnknownData00[0xA];                                       // 0x0216(0x000A) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.TextureRenderTargetVolume"));
		return ptr;
	}

};


// Class Engine.ThumbnailInfo
// 0x0000 (0x0028 - 0x0028)
class UThumbnailInfo : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ThumbnailInfo"));
		return ptr;
	}

};


// Class Engine.TimelineComponent
// 0x00A0 (0x0158 - 0x00B8)
class UTimelineComponent : public UActorComponent
{
public:
	struct FTimeline                                   TheTimeline;                                              // 0x00B8(0x0098) (Net)
	unsigned char                                      bIgnoreTimeDilation : 1;                                  // 0x0150(0x0001)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0151(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.TimelineComponent"));
		return ptr;
	}


	void Stop();//Offset:Discovery.exe+0x58A27B0
	void SetVectorCurve(class UCurveVector* NewVectorCurve, const struct FName& VectorTrackName);//Offset:Discovery.exe+0x58A1FB0
	void SetTimelineLengthMode(TEnumAsByte<ETimelineLengthMode> NewLengthMode);//Offset:Discovery.exe+0x58A2240
	void SetTimelineLength(float NewLength);//Offset:Discovery.exe+0x58A22D0
	void SetPlayRate(float NewRate);//Offset:Discovery.exe+0x58A2470
	void SetPlaybackPosition(float NewPosition, bool bFireEvents, bool bFireUpdate);//Offset:Discovery.exe+0x58A2610
	void SetNewTime(float NewTime);//Offset:Discovery.exe+0x58A23D0
	void SetLooping(bool bNewLooping);//Offset:Discovery.exe+0x58A2540
	void SetLinearColorCurve(class UCurveLinearColor* NewLinearColorCurve, const struct FName& LinearColorTrackName);//Offset:Discovery.exe+0x58A1ED0
	void SetIgnoreTimeDilation(bool bNewIgnoreTimeDilation);//Offset:Discovery.exe+0x58A21A0
	void SetFloatCurve(class UCurveFloat* NewFloatCurve, const struct FName& FloatTrackName);//Offset:Discovery.exe+0x58A2090
	void ReverseFromEnd();//Offset:Discovery.exe+0x58A27D0
	void Reverse();//Offset:Discovery.exe+0x58A27F0
	void PlayFromStart();//Offset:Discovery.exe+0x58A2810
	void Play();//Offset:Discovery.exe+0x58A2830
	void OnRep_Timeline();//Offset:Discovery.exe+0x58A1EB0
	bool IsReversing();//Offset:Discovery.exe+0x58A2750
	bool IsPlaying();//Offset:Discovery.exe+0x58A2780
	bool IsLooping();//Offset:Discovery.exe+0x58A2510
	float GetTimelineLength();//Offset:Discovery.exe+0x58A23A0
	float GetScaledTimelineLength();//Offset:Discovery.exe+0x58A2370
	float GetPlayRate();//Offset:Discovery.exe+0x4B7B790
	float GetPlaybackPosition();//Offset:Discovery.exe+0x58A25E0
	bool GetIgnoreTimeDilation();//Offset:Discovery.exe+0x58A2170
};


// Class Engine.TimelineTemplate
// 0x0090 (0x00B8 - 0x0028)
class UTimelineTemplate : public UObject
{
public:
	float                                              TimelineLength;                                           // 0x0028(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ETimelineLengthMode>                   LengthMode;                                               // 0x002C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bAutoPlay : 1;                                            // 0x002D(0x0001) (Edit)
	unsigned char                                      bLoop : 1;                                                // 0x002D(0x0001) (Edit)
	unsigned char                                      bReplicated : 1;                                          // 0x002D(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bIgnoreTimeDilation : 1;                                  // 0x002D(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x002E(0x0002) MISSED OFFSET
	TArray<struct FTTEventTrack>                       EventTracks;                                              // 0x0030(0x0010) (ZeroConstructor)
	TArray<struct FTTFloatTrack>                       FloatTracks;                                              // 0x0040(0x0010) (ZeroConstructor)
	TArray<struct FTTVectorTrack>                      VectorTracks;                                             // 0x0050(0x0010) (ZeroConstructor)
	TArray<struct FTTLinearColorTrack>                 LinearColorTracks;                                        // 0x0060(0x0010) (ZeroConstructor)
	TArray<struct FBPVariableMetaDataEntry>            MetaDataArray;                                            // 0x0070(0x0010) (Edit, ZeroConstructor)
	struct FGuid                                       TimelineGuid;                                             // 0x0080(0x0010) (ZeroConstructor, DuplicateTransient, IsPlainOldData)
	TEnumAsByte<ETickingGroup>                         TimelineTickGroup;                                        // 0x0090(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0091(0x0003) MISSED OFFSET
	struct FName                                       VariableName;                                             // 0x0094(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FName                                       DirectionPropertyName;                                    // 0x009C(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FName                                       UpdateFunctionName;                                       // 0x00A4(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FName                                       FinishedFunctionName;                                     // 0x00AC(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x00B4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.TimelineTemplate"));
		return ptr;
	}

};


// Class Engine.TireType
// 0x0008 (0x0038 - 0x0030)
class UTireType : public UDataAsset
{
public:
	float                                              FrictionScale;                                            // 0x0030(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0034(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.TireType"));
		return ptr;
	}

};


// Class Engine.TouchInterface
// 0x0030 (0x0058 - 0x0028)
class UTouchInterface : public UObject
{
public:
	TArray<struct FTouchInputControl>                  Controls;                                                 // 0x0028(0x0010) (Edit, ZeroConstructor)
	float                                              ActiveOpacity;                                            // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              InactiveOpacity;                                          // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TimeUntilDeactive;                                        // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TimeUntilReset;                                           // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ActivationDelay;                                          // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bPreventRecenter;                                         // 0x004C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x004D(0x0003) MISSED OFFSET
	float                                              StartupDelay;                                             // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0054(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.TouchInterface"));
		return ptr;
	}

};


// Class Engine.TriggerBase
// 0x0008 (0x02D0 - 0x02C8)
class ATriggerBase : public AActor
{
public:
	class UShapeComponent*                             CollisionComponent;                                       // 0x02C8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.TriggerBase"));
		return ptr;
	}

};


// Class Engine.TriggerBox
// 0x0000 (0x02D0 - 0x02D0)
class ATriggerBox : public ATriggerBase
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.TriggerBox"));
		return ptr;
	}

};


// Class Engine.TriggerCapsule
// 0x0000 (0x02D0 - 0x02D0)
class ATriggerCapsule : public ATriggerBase
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.TriggerCapsule"));
		return ptr;
	}

};


// Class Engine.TriggerSphere
// 0x0000 (0x02D0 - 0x02D0)
class ATriggerSphere : public ATriggerBase
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.TriggerSphere"));
		return ptr;
	}

};


// Class Engine.TriggerVolume
// 0x0000 (0x0300 - 0x0300)
class ATriggerVolume : public AVolume
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.TriggerVolume"));
		return ptr;
	}

};


// Class Engine.TwitterIntegrationBase
// 0x0000 (0x0038 - 0x0038)
class UTwitterIntegrationBase : public UPlatformInterfaceBase
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.TwitterIntegrationBase"));
		return ptr;
	}


	bool TwitterRequest(const struct FString& URL, TArray<struct FString> ParamKeysAndValues, TEnumAsByte<ETwitterRequestMethod> RequestMethod, int AccountIndex);//Offset:Discovery.exe+0x58A55C0
	bool ShowTweetUI(const struct FString& InitialMessage, const struct FString& URL, const struct FString& Picture);//Offset:Discovery.exe+0x58A5890
	void Init();//Offset:Discovery.exe+0x1DB5730
	int GetNumAccounts();//Offset:Discovery.exe+0x1EE8890
	struct FString GetAccountName(int AccountIndex);//Offset:Discovery.exe+0x58A57B0
	bool CanShowTweetUI();//Offset:Discovery.exe+0x11BE930
	bool AuthorizeAccounts();//Offset:Discovery.exe+0x1DC1420
};


// Class Engine.TypedElementCommonActions
// 0x0800 (0x0828 - 0x0028)
class UTypedElementCommonActions : public UObject
{
public:
	unsigned char                                      UnknownData00[0x800];                                     // 0x0028(0x0800) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.TypedElementCommonActions"));
		return ptr;
	}


	TArray<struct FScriptTypedElementHandle> K2_DuplicateSelectedElements(class UTypedElementSelectionSet* SelectionSet, class UWorld* World, const struct FVector& LocationOffset);//Offset:Discovery.exe+0x58A6210
	TArray<struct FScriptTypedElementHandle> DuplicateNormalizedElements(const struct FScriptTypedElementListProxy& ElementList, class UWorld* World, const struct FVector& LocationOffset);//Offset:Discovery.exe+0x58A5FB0
	bool DeleteSelectedElements(class UTypedElementSelectionSet* SelectionSet, class UWorld* World, const struct FTypedElementDeletionOptions& DeletionOptions);//Offset:Discovery.exe+0x58A6600
	bool DeleteNormalizedElements(const struct FScriptTypedElementListProxy& ElementList, class UWorld* World, class UTypedElementSelectionSet* InSelectionSet, const struct FTypedElementDeletionOptions& DeletionOptions);//Offset:Discovery.exe+0x58A6420
};


// Class Engine.TypedElementWorldInterface
// 0x0000 (0x0028 - 0x0028)
class UTypedElementWorldInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.TypedElementWorldInterface"));
		return ptr;
	}


	bool SetWorldTransform(const struct FScriptTypedElementHandle& InElementHandle, const struct FTransform& InTransform);//Offset:Discovery.exe+0x58A7910
	bool SetRelativeTransform(const struct FScriptTypedElementHandle& InElementHandle, const struct FTransform& InTransform);//Offset:Discovery.exe+0x58A7630
	bool SetPivotOffset(const struct FScriptTypedElementHandle& InElementHandle, const struct FVector& InPivotOffset);//Offset:Discovery.exe+0x58A73F0
	void NotifyMovementStarted(const struct FScriptTypedElementHandle& InElementHandle);//Offset:Discovery.exe+0x58A7330
	void NotifyMovementOngoing(const struct FScriptTypedElementHandle& InElementHandle);//Offset:Discovery.exe+0x58A7270
	void NotifyMovementEnded(const struct FScriptTypedElementHandle& InElementHandle);//Offset:Discovery.exe+0x58A71B0
	bool IsTemplateElement(const struct FScriptTypedElementHandle& InElementHandle);//Offset:Discovery.exe+0x4772E50
	bool GetWorldTransform(const struct FScriptTypedElementHandle& InElementHandle, struct FTransform* OutTransform);//Offset:Discovery.exe+0x58A7A80
	bool GetRelativeTransform(const struct FScriptTypedElementHandle& InElementHandle, struct FTransform* OutTransform);//Offset:Discovery.exe+0x58A77A0
	bool GetPivotOffset(const struct FScriptTypedElementHandle& InElementHandle, struct FVector* OutPivotOffset);//Offset:Discovery.exe+0x58A7510
	class UWorld* GetOwnerWorld(const struct FScriptTypedElementHandle& InElementHandle);//Offset:Discovery.exe+0x58A7E20
	class ULevel* GetOwnerLevel(const struct FScriptTypedElementHandle& InElementHandle);//Offset:Discovery.exe+0x58A7EE0
	bool GetBounds(const struct FScriptTypedElementHandle& InElementHandle, struct FBoxSphereBounds* OutBounds);//Offset:Discovery.exe+0x58A7D00
	struct FScriptTypedElementHandle DuplicateElement(const struct FScriptTypedElementHandle& InElementHandle, class UWorld* InWorld, const struct FVector& InLocationOffset);//Offset:Discovery.exe+0x58A6CC0
	bool DeleteElement(const struct FScriptTypedElementHandle& InElementHandle, class UWorld* InWorld, class UTypedElementSelectionSet* InSelectionSet, const struct FTypedElementDeletionOptions& InDeletionOptions);//Offset:Discovery.exe+0x58A6F10
	bool CanMoveElement(const struct FScriptTypedElementHandle& InElementHandle, enum class ETypedElementWorldType InWorldType);//Offset:Discovery.exe+0x58A7BF0
	bool CanEditElement(const struct FScriptTypedElementHandle& InElementHandle);//Offset:Discovery.exe+0x58A7FA0
	bool CanDuplicateElement(const struct FScriptTypedElementHandle& InElementHandle);//Offset:Discovery.exe+0x58A6E40
	bool CanDeleteElement(const struct FScriptTypedElementHandle& InElementHandle);//Offset:Discovery.exe+0x58A70E0
};


// Class Engine.UserDefinedEnum
// 0x0050 (0x00B0 - 0x0060)
class UUserDefinedEnum : public UEnum
{
public:
	TMap<struct FName, struct FText>                   DisplayNameMap;                                           // 0x0060(0x0050)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.UserDefinedEnum"));
		return ptr;
	}

};


// Class Engine.UserDefinedStruct
// 0x0048 (0x0108 - 0x00C0)
class UUserDefinedStruct : public UScriptStruct
{
public:
	TEnumAsByte<EUserDefinedStructureStatus>           Status;                                                   // 0x00C0(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00C1(0x0003) MISSED OFFSET
	struct FGuid                                       Guid;                                                     // 0x00C4(0x0010) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x34];                                      // 0x00D4(0x0034) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.UserDefinedStruct"));
		return ptr;
	}

};


// Class Engine.UserInterfaceSettings
// 0x0238 (0x0270 - 0x0038)
class UUserInterfaceSettings : public UDeveloperSettings
{
public:
	enum class ERenderFocusRule                        RenderFocusRule;                                          // 0x0038(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0039(0x0007) MISSED OFFSET
	TMap<TEnumAsByte<EMouseCursor>, struct FHardwareCursorReference> HardwareCursors;                                          // 0x0040(0x0050) (Edit, Config)
	TMap<TEnumAsByte<EMouseCursor>, struct FSoftClassPath> SoftwareCursors;                                          // 0x0090(0x0050) (Edit, Config)
	struct FSoftClassPath                              DefaultCursor;                                            // 0x00E0(0x0018) (ZeroConstructor, Config, Deprecated)
	struct FSoftClassPath                              TextEditBeamCursor;                                       // 0x00F8(0x0018) (ZeroConstructor, Config, Deprecated)
	struct FSoftClassPath                              CrosshairsCursor;                                         // 0x0110(0x0018) (ZeroConstructor, Config, Deprecated)
	struct FSoftClassPath                              HandCursor;                                               // 0x0128(0x0018) (ZeroConstructor, Config, Deprecated)
	struct FSoftClassPath                              GrabHandCursor;                                           // 0x0140(0x0018) (ZeroConstructor, Config, Deprecated)
	struct FSoftClassPath                              GrabHandClosedCursor;                                     // 0x0158(0x0018) (ZeroConstructor, Config, Deprecated)
	struct FSoftClassPath                              SlashedCircleCursor;                                      // 0x0170(0x0018) (ZeroConstructor, Config, Deprecated)
	float                                              ApplicationScale;                                         // 0x0188(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	enum class EUIScalingRule                          UIScaleRule;                                              // 0x018C(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x018D(0x0003) MISSED OFFSET
	struct FSoftClassPath                              CustomScalingRuleClass;                                   // 0x0190(0x0018) (Edit, ZeroConstructor, Config)
	struct FRuntimeFloatCurve                          UIScaleCurve;                                             // 0x01A8(0x0088) (Edit, Config)
	bool                                               bAllowHighDPIInGameMode;                                  // 0x0230(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0231(0x0003) MISSED OFFSET
	struct FIntPoint                                   DesignScreenSize;                                         // 0x0234(0x0008) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bLoadWidgetsOnDedicatedServer;                            // 0x023C(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x023D(0x0003) MISSED OFFSET
	TArray<class UObject*>                             CursorClasses;                                            // 0x0240(0x0010) (ZeroConstructor, Transient)
	class UClass*                                      CustomScalingRuleClassInstance;                           // 0x0250(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UDPICustomScalingRule*                       CustomScalingRule;                                        // 0x0258(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData04[0x10];                                      // 0x0260(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.UserInterfaceSettings"));
		return ptr;
	}

};


// Class Engine.VectorField
// 0x0040 (0x0068 - 0x0028)
class UVectorField : public UObject
{
public:
	struct FBox                                        Bounds;                                                   // 0x0028(0x0038) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Intensity;                                                // 0x0060(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0064(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.VectorField"));
		return ptr;
	}

};


// Class Engine.VectorFieldAnimated
// 0x0040 (0x00A8 - 0x0068)
class UVectorFieldAnimated : public UVectorField
{
public:
	class UTexture2D*                                  Texture;                                                  // 0x0068(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EVectorFieldConstructionOp>            ConstructionOp;                                           // 0x0070(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0071(0x0003) MISSED OFFSET
	int                                                VolumeSizeX;                                              // 0x0074(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                VolumeSizeY;                                              // 0x0078(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                VolumeSizeZ;                                              // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                SubImagesX;                                               // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                SubImagesY;                                               // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                FrameCount;                                               // 0x0088(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              FramesPerSecond;                                          // 0x008C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bLoop : 1;                                                // 0x0090(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0091(0x0007) MISSED OFFSET
	class UVectorFieldStatic*                          NoiseField;                                               // 0x0098(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              NoiseScale;                                               // 0x00A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              NoiseMax;                                                 // 0x00A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.VectorFieldAnimated"));
		return ptr;
	}

};


// Class Engine.VectorFieldComponent
// 0x0030 (0x05C0 - 0x0590)
class UVectorFieldComponent : public UPrimitiveComponent
{
public:
	class UVectorField*                                VectorField;                                              // 0x0590(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Intensity;                                                // 0x0598(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Tightness;                                                // 0x059C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bPreviewVectorField : 1;                                  // 0x05A0(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x1F];                                      // 0x05A1(0x001F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.VectorFieldComponent"));
		return ptr;
	}


	void SetIntensity(float NewIntensity);//Offset:Discovery.exe+0x58AA6E0
};


// Class Engine.VectorFieldStatic
// 0x0050 (0x00B8 - 0x0068)
class UVectorFieldStatic : public UVectorField
{
public:
	int                                                SizeX;                                                    // 0x0068(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	int                                                SizeY;                                                    // 0x006C(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	int                                                SizeZ;                                                    // 0x0070(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               bAllowCPUAccess;                                          // 0x0074(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x43];                                      // 0x0075(0x0043) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.VectorFieldStatic"));
		return ptr;
	}

};


// Class Engine.VectorFieldVolume
// 0x0008 (0x02D0 - 0x02C8)
class AVectorFieldVolume : public AActor
{
public:
	class UVectorFieldComponent*                       VectorFieldComponent;                                     // 0x02C8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.VectorFieldVolume"));
		return ptr;
	}

};


// Class Engine.ViewportStatsSubsystem
// 0x0020 (0x0050 - 0x0030)
class UViewportStatsSubsystem : public UWorldSubsystem
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0030(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.ViewportStatsSubsystem"));
		return ptr;
	}


	void RemoveDisplayDelegate(int IndexToRemove);//Offset:Discovery.exe+0x58AAB80
	void AddTimedDisplay(const struct FText& Text, const struct FLinearColor& Color, float Duration, const struct FVector2D& DisplayOffset);//Offset:Discovery.exe+0x58AACF0
	int AddDisplayDelegate(const struct FScriptDelegate& Delegate);//Offset:Discovery.exe+0x58AAC20
};


// Class Engine.VirtualTexture
// 0x0000 (0x0028 - 0x0028)
class UVirtualTexture : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.VirtualTexture"));
		return ptr;
	}

};


// Class Engine.LightMapVirtualTexture
// 0x0000 (0x0028 - 0x0028)
class ULightMapVirtualTexture : public UVirtualTexture
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.LightMapVirtualTexture"));
		return ptr;
	}

};


// Class Engine.RuntimeVirtualTextureStreamingProxy
// 0x0000 (0x02B0 - 0x02B0)
class URuntimeVirtualTextureStreamingProxy : public UTexture2D
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.RuntimeVirtualTextureStreamingProxy"));
		return ptr;
	}

};


// Class Engine.VirtualTexture2D
// 0x0010 (0x02C0 - 0x02B0)
class UVirtualTexture2D : public UTexture2D
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x02B0(0x0004) MISSED OFFSET
	bool                                               bContinuousUpdate;                                        // 0x02B4(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bSinglePhysicalSpace;                                     // 0x02B5(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0xA];                                       // 0x02B6(0x000A) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.VirtualTexture2D"));
		return ptr;
	}

};


// Class Engine.VirtualTextureBuilder
// 0x0010 (0x0038 - 0x0028)
class UVirtualTextureBuilder : public UObject
{
public:
	class UVirtualTexture2D*                           Texture;                                                  // 0x0028(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	uint64_t                                           BuildHash;                                                // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.VirtualTextureBuilder"));
		return ptr;
	}

};


// Class Engine.VirtualTexturePoolConfig
// 0x0018 (0x0040 - 0x0028)
class UVirtualTexturePoolConfig : public UObject
{
public:
	int                                                DefaultSizeInMegabyte;                                    // 0x0028(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x002C(0x0004) MISSED OFFSET
	TArray<struct FVirtualTextureSpacePoolConfig>      Pools;                                                    // 0x0030(0x0010) (ZeroConstructor, Config)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.VirtualTexturePoolConfig"));
		return ptr;
	}

};


// Class Engine.VisualLoggerAutomationTests
// 0x0000 (0x0028 - 0x0028)
class UVisualLoggerAutomationTests : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.VisualLoggerAutomationTests"));
		return ptr;
	}

};


// Class Engine.VisualLoggerDebugSnapshotInterface
// 0x0000 (0x0028 - 0x0028)
class UVisualLoggerDebugSnapshotInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.VisualLoggerDebugSnapshotInterface"));
		return ptr;
	}

};


// Class Engine.VisualLoggerFilterVolume
// 0x0000 (0x0300 - 0x0300)
class AVisualLoggerFilterVolume : public AVolume
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.VisualLoggerFilterVolume"));
		return ptr;
	}

};


// Class Engine.VisualLoggerKismetLibrary
// 0x0000 (0x0028 - 0x0028)
class UVisualLoggerKismetLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.VisualLoggerKismetLibrary"));
		return ptr;
	}


	void STATIC_RedirectVislog(class UObject* SourceOwner, class UObject* DestinationOwner);//Offset:Discovery.exe+0x58AC860
	void STATIC_LogText(class UObject* WorldContextObject, const struct FString& Text, const struct FName& LogCategory, bool bAddToMessageLog);//Offset:Discovery.exe+0x58AC680
	void STATIC_LogSegment(class UObject* WorldContextObject, const struct FVector& SegmentStart, const struct FVector& SegmentEnd, const struct FString& Text, const struct FLinearColor& ObjectColor, float Thickness, const struct FName& CategoryName, bool bAddToMessageLog);//Offset:Discovery.exe+0x58ABC80
	void STATIC_LogLocation(class UObject* WorldContextObject, const struct FVector& Location, const struct FString& Text, const struct FLinearColor& ObjectColor, float Radius, const struct FName& LogCategory, bool bAddToMessageLog);//Offset:Discovery.exe+0x58AC340
	void STATIC_LogBox(class UObject* WorldContextObject, const struct FBox& BoxShape, const struct FString& Text, const struct FLinearColor& ObjectColor, const struct FName& LogCategory, bool bAddToMessageLog);//Offset:Discovery.exe+0x58AC040
	void STATIC_EnableRecording(bool bEnabled);//Offset:Discovery.exe+0x57AA130
};


// Class Engine.VoiceChannel
// 0x0010 (0x0078 - 0x0068)
class UVoiceChannel : public UChannel
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0068(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.VoiceChannel"));
		return ptr;
	}

};


// Class Engine.VOIPTalker
// 0x0040 (0x00F8 - 0x00B8)
class UVOIPTalker : public UActorComponent
{
public:
	struct FVoiceSettings                              Settings;                                                 // 0x00B8(0x0018) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x28];                                      // 0x00D0(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.VOIPTalker"));
		return ptr;
	}


	void RegisterWithPlayerState(class APlayerState* OwningState);//Offset:Discovery.exe+0x58AD050
	float GetVoiceLevel();//Offset:Discovery.exe+0x58AD020
	class UVOIPTalker* STATIC_CreateTalkerForPlayer(class APlayerState* OwningState);//Offset:Discovery.exe+0x58AD0F0
	void BPOnTalkingEnd();//Offset:Discovery.exe+0x1461490
	void BPOnTalkingBegin(class UAudioComponent* AudioComponent);//Offset:Discovery.exe+0x30340
};


// Class Engine.VOIPStatics
// 0x0000 (0x0028 - 0x0028)
class UVOIPStatics : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.VOIPStatics"));
		return ptr;
	}


	void STATIC_SetMicThreshold(float InThreshold);//Offset:Discovery.exe+0x58AD6C0
};


// Class Engine.VolumeTexture
// 0x0060 (0x0250 - 0x01F0)
class UVolumeTexture : public UTexture
{
public:
	unsigned char                                      UnknownData00[0x60];                                      // 0x01F0(0x0060) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.VolumeTexture"));
		return ptr;
	}

};


// Class Engine.VolumetricCloudComponent
// 0x0050 (0x0320 - 0x02D0)
class UVolumetricCloudComponent : public USceneComponent
{
public:
	float                                              LayerBottomAltitude;                                      // 0x02D0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              LayerHeight;                                              // 0x02D4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              TracingStartMaxDistance;                                  // 0x02D8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              TracingMaxDistance;                                       // 0x02DC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              PlanetRadius;                                             // 0x02E0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FColor                                      GroundAlbedo;                                             // 0x02E4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UMaterialInterface*                          Material;                                                 // 0x02E8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUsePerSampleAtmosphericLightTransmittance : 1;           // 0x02F0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x3];                                       // 0x02F1(0x0003) MISSED OFFSET
	float                                              SkyLightCloudBottomOcclusion;                             // 0x02F4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ViewSampleCountScale;                                     // 0x02F8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ReflectionViewSampleCountScale;                           // 0x02FC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ReflectionSampleCountScale;                               // 0x0300(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              ShadowViewSampleCountScale;                               // 0x0304(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ShadowReflectionViewSampleCountScale;                     // 0x0308(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ShadowReflectionSampleCountScale;                         // 0x030C(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              ShadowTracingDistance;                                    // 0x0310(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              StopTracingTransmittanceThreshold;                        // 0x0314(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0318(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.VolumetricCloudComponent"));
		return ptr;
	}


	void SetViewSampleCountScale(float NewValue);//Offset:Discovery.exe+0x58ADF40
	void SetTracingStartMaxDistance(float NewValue);//Offset:Discovery.exe+0x58AE1B0
	void SetTracingMaxDistance(float NewValue);//Offset:Discovery.exe+0x58779E0
	void SetStopTracingTransmittanceThreshold(float NewValue);//Offset:Discovery.exe+0x5877580
	void SetSkyLightCloudBottomOcclusion(float NewValue);//Offset:Discovery.exe+0x58ADFE0
	void SetShadowViewSampleCountScale(float NewValue);//Offset:Discovery.exe+0x58ADEA0
	void SetShadowTracingDistance(float NewValue);//Offset:Discovery.exe+0x58ADD60
	void SetShadowReflectionViewSampleCountScale(float NewValue);//Offset:Discovery.exe+0x58ADE00
	void SetShadowReflectionSampleCountScale(float NewValue);//Offset:Discovery.exe+0x58ADB80
	void SetReflectionViewSampleCountScale(float NewValue);//Offset:Discovery.exe+0x5877760
	void SetReflectionSampleCountScale(float NewValue);//Offset:Discovery.exe+0x58ADC20
	void SetPlanetRadius(float NewValue);//Offset:Discovery.exe+0x5877940
	void SetMaterial(class UMaterialInterface* NewValue);//Offset:Discovery.exe+0x58ADCC0
	void SetLayerHeight(float NewValue);//Offset:Discovery.exe+0x58AE250
	void SetLayerBottomAltitude(float NewValue);//Offset:Discovery.exe+0x58AE2F0
	void SetGroundAlbedo(const struct FColor& NewValue);//Offset:Discovery.exe+0x58AE120
	void SetbUsePerSampleAtmosphericLightTransmittance(bool NewValue);//Offset:Discovery.exe+0x58AE080
};


// Class Engine.VolumetricCloud
// 0x0008 (0x02D0 - 0x02C8)
class AVolumetricCloud : public AInfo
{
public:
	class UVolumetricCloudComponent*                   VolumetricCloudComponent;                                 // 0x02C8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.VolumetricCloud"));
		return ptr;
	}

};


// Class Engine.VolumetricLightmapDensityVolume
// 0x0008 (0x0308 - 0x0300)
class AVolumetricLightmapDensityVolume : public AVolume
{
public:
	struct FInt32Interval                              AllowedMipLevelRange;                                     // 0x0300(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.VolumetricLightmapDensityVolume"));
		return ptr;
	}

};


// Class Engine.WindDirectionalSource
// 0x0008 (0x02D0 - 0x02C8)
class AWindDirectionalSource : public AInfo
{
public:
	class UWindDirectionalSourceComponent*             Component;                                                // 0x02C8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.WindDirectionalSource"));
		return ptr;
	}

};


// Class Engine.WindDirectionalSourceComponent
// 0x0020 (0x02F0 - 0x02D0)
class UWindDirectionalSourceComponent : public USceneComponent
{
public:
	float                                              Strength;                                                 // 0x02D0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Speed;                                                    // 0x02D4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinGustAmount;                                            // 0x02D8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MaxGustAmount;                                            // 0x02DC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              Radius;                                                   // 0x02E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bPointWind : 1;                                           // 0x02E4(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0xB];                                       // 0x02E5(0x000B) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.WindDirectionalSourceComponent"));
		return ptr;
	}


	void SetWindType(enum class EWindSourceType InNewType);//Offset:Discovery.exe+0x58B0080
	void SetStrength(float InNewStrength);//Offset:Discovery.exe+0x58B0390
	void SetSpeed(float InNewSpeed);//Offset:Discovery.exe+0x58B02F0
	void SetRadius(float InNewRadius);//Offset:Discovery.exe+0x58B0110
	void SetMinimumGustAmount(float InNewMinGust);//Offset:Discovery.exe+0x58B0250
	void SetMaximumGustAmount(float InNewMaxGust);//Offset:Discovery.exe+0x58B01B0
};


// Class Engine.WorldComposition
// 0x0040 (0x0068 - 0x0028)
class UWorldComposition : public UObject
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0028(0x0020) MISSED OFFSET
	TArray<class ULevelStreaming*>                     TilesStreaming;                                           // 0x0048(0x0010) (ZeroConstructor, Transient)
	double                                             TilesStreamingTimeThreshold;                              // 0x0058(0x0008) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bLoadAllTilesDuringCinematic;                             // 0x0060(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bRebaseOriginIn3DSpace;                                   // 0x0061(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x0062(0x0002) MISSED OFFSET
	float                                              RebaseOriginDistance;                                     // 0x0064(0x0004) (ZeroConstructor, Config, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.WorldComposition"));
		return ptr;
	}

};


// Class Engine.WorldPartition
// 0x0058 (0x0088 - 0x0030)
class UWorldPartition : public UActorDescContainer
{
public:
	unsigned char                                      UnknownData00[0x30];                                      // 0x0030(0x0030) MISSED OFFSET
	class UWorldPartitionRuntimeHash*                  RuntimeHash;                                              // 0x0060(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0068(0x0008) MISSED OFFSET
	class UWorldPartitionStreamingPolicy*              StreamingPolicy;                                          // 0x0070(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x10];                                      // 0x0078(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.WorldPartition"));
		return ptr;
	}

};


// Class Engine.WorldPartitionEditorHash
// 0x0000 (0x0028 - 0x0028)
class UWorldPartitionEditorHash : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.WorldPartitionEditorHash"));
		return ptr;
	}

};


// Class Engine.WorldPartitionEditorCell
// 0x0000 (0x0028 - 0x0028)
class UWorldPartitionEditorCell : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.WorldPartitionEditorCell"));
		return ptr;
	}

};


// Class Engine.WorldPartitionEditorPerProjectUserSettings
// 0x0000 (0x0028 - 0x0028)
class UWorldPartitionEditorPerProjectUserSettings : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.WorldPartitionEditorPerProjectUserSettings"));
		return ptr;
	}

};


// Class Engine.WorldPartitionEditorSpatialHash
// 0x0000 (0x0028 - 0x0028)
class UWorldPartitionEditorSpatialHash : public UWorldPartitionEditorHash
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.WorldPartitionEditorSpatialHash"));
		return ptr;
	}

};


// Class Engine.WorldPartitionLevelStreamingDynamic
// 0x0020 (0x01A0 - 0x0180)
class UWorldPartitionLevelStreamingDynamic : public ULevelStreamingDynamic
{
public:
	bool                                               bShouldBeAlwaysLoaded;                                    // 0x0180(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0181(0x0003) MISSED OFFSET
	TWeakObjectPtr<class UWorldPartitionRuntimeLevelStreamingCell> StreamingCell;                                            // 0x0184(0x0008) (ZeroConstructor, IsPlainOldData)
	TWeakObjectPtr<class UWorldPartition>              OuterWorldPartition;                                      // 0x018C(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0xC];                                       // 0x0194(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.WorldPartitionLevelStreamingDynamic"));
		return ptr;
	}

};


// Class Engine.WorldPartitionStreamingPolicy
// 0x09C8 (0x09F0 - 0x0028)
class UWorldPartitionStreamingPolicy : public UObject
{
public:
	unsigned char                                      UnknownData00[0x9C8];                                     // 0x0028(0x09C8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.WorldPartitionStreamingPolicy"));
		return ptr;
	}

};


// Class Engine.WorldPartitionLevelStreamingPolicy
// 0x0050 (0x0A40 - 0x09F0)
class UWorldPartitionLevelStreamingPolicy : public UWorldPartitionStreamingPolicy
{
public:
	TMap<struct FName, struct FName>                   SubObjectsToCellRemapping;                                // 0x09F0(0x0050)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.WorldPartitionLevelStreamingPolicy"));
		return ptr;
	}

};


// Class Engine.WorldPartitionMiniMap
// 0x00C0 (0x0388 - 0x02C8)
class AWorldPartitionMiniMap : public AInfo
{
public:
	struct FBox                                        MiniMapWorldBounds;                                       // 0x02C8(0x0038) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	struct FBox2D                                      UVOffset;                                                 // 0x0300(0x0028) (Edit, ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  MiniMapTexture;                                           // 0x0328(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x50];                                      // 0x0330(0x0050) UNKNOWN PROPERTY: ExcludedDataLayers
	int                                                MiniMapTileSize;                                          // 0x0380(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0384(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.WorldPartitionMiniMap"));
		return ptr;
	}

};


// Class Engine.WorldPartitionReplay
// 0x0028 (0x02F0 - 0x02C8)
class AWorldPartitionReplay : public AActor
{
public:
	TArray<struct FName>                               StreamingSourceNames;                                     // 0x02C8(0x0010) (Net, ZeroConstructor, Transient)
	unsigned char                                      UnknownData00[0x18];                                      // 0x02D8(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.WorldPartitionReplay"));
		return ptr;
	}

};


// Class Engine.WorldPartitionRuntimeCell
// 0x0060 (0x0088 - 0x0028)
class UWorldPartitionRuntimeCell : public UObject
{
public:
	bool                                               bIsAlwaysLoaded;                                          // 0x0028(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0029(0x0007) MISSED OFFSET
	TArray<struct FName>                               DataLayers;                                               // 0x0030(0x0010) (ZeroConstructor)
	struct FIntVector                                  Coords;                                                   // 0x0040(0x000C) (ZeroConstructor, IsPlainOldData)
	struct FName                                       GridName;                                                 // 0x004C(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0054(0x0004) MISSED OFFSET
	struct FString                                     DebugName;                                                // 0x0058(0x0010) (ZeroConstructor)
	int                                                Priority;                                                 // 0x0068(0x0004) (ZeroConstructor, IsPlainOldData)
	bool                                               bClientOnlyVisible;                                       // 0x006C(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bIsHLOD;                                                  // 0x006D(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bBlockOnSlowLoading;                                      // 0x006E(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x19];                                      // 0x006F(0x0019) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.WorldPartitionRuntimeCell"));
		return ptr;
	}

};


// Class Engine.WorldPartitionRuntimeHash
// 0x0000 (0x0028 - 0x0028)
class UWorldPartitionRuntimeHash : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.WorldPartitionRuntimeHash"));
		return ptr;
	}

};


// Class Engine.WorldPartitionRuntimeSpatialHashCell
// 0x0040 (0x00C8 - 0x0088)
class UWorldPartitionRuntimeSpatialHashCell : public UWorldPartitionRuntimeCell
{
public:
	struct FVector                                     Position;                                                 // 0x0088(0x0018) (ZeroConstructor, IsPlainOldData)
	float                                              Extent;                                                   // 0x00A0(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                Level;                                                    // 0x00A4(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x20];                                      // 0x00A8(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.WorldPartitionRuntimeSpatialHashCell"));
		return ptr;
	}

};


// Class Engine.WorldPartitionRuntimeLevelStreamingCell
// 0x0008 (0x00D0 - 0x00C8)
class UWorldPartitionRuntimeLevelStreamingCell : public UWorldPartitionRuntimeSpatialHashCell
{
public:
	class UWorldPartitionLevelStreamingDynamic*        LevelStreaming;                                           // 0x00C8(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.WorldPartitionRuntimeLevelStreamingCell"));
		return ptr;
	}


	void OnLevelShown();//Offset:Discovery.exe+0x58B2740
	void OnLevelHidden();//Offset:Discovery.exe+0x58B2720
};


// Class Engine.SpatialHashRuntimeGridInfo
// 0x0008 (0x02D0 - 0x02C8)
class ASpatialHashRuntimeGridInfo : public AInfo
{
public:
	struct FSpatialHashRuntimeGrid                     GridSettings;                                             // 0x02C8(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x02C9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.SpatialHashRuntimeGridInfo"));
		return ptr;
	}

};


// Class Engine.WorldPartitionRuntimeSpatialHash
// 0x0060 (0x0088 - 0x0028)
class UWorldPartitionRuntimeSpatialHash : public UWorldPartitionRuntimeHash
{
public:
	TArray<struct FSpatialHashStreamingGrid>           StreamingGrids;                                           // 0x0028(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData00[0x50];                                      // 0x0038(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.WorldPartitionRuntimeSpatialHash"));
		return ptr;
	}

};


// Class Engine.WorldPartitionStreamingSourceComponent
// 0x0038 (0x00F0 - 0x00B8)
class UWorldPartitionStreamingSourceComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x00B8(0x0008) MISSED OFFSET
	struct FName                                       TargetGrid;                                               // 0x00C0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FColor                                      DebugColor;                                               // 0x00C8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00CC(0x0004) MISSED OFFSET
	class UHLODLayer*                                  TargetHLODLayer;                                          // 0x00D0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<struct FStreamingSourceShape>               Shapes;                                                   // 0x00D8(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	enum class EStreamingSourcePriority                Priority;                                                 // 0x00E8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bStreamingSourceEnabled;                                  // 0x00E9(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	enum class EStreamingSourceTargetState             TargetState;                                              // 0x00EA(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x5];                                       // 0x00EB(0x0005) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.WorldPartitionStreamingSourceComponent"));
		return ptr;
	}


	bool IsStreamingSourceEnabled();//Offset:Discovery.exe+0x58B3C10
	bool IsStreamingCompleted();//Offset:Discovery.exe+0x58B3BE0
	void EnableStreamingSource();//Offset:Discovery.exe+0x58B3C60
	void DisableStreamingSource();//Offset:Discovery.exe+0x58B3C30
};


// Class Engine.WorldPartitionSubsystem
// 0x0010 (0x0050 - 0x0040)
class UWorldPartitionSubsystem : public UTickableWorldSubsystem
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0040(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.WorldPartitionSubsystem"));
		return ptr;
	}


	bool IsStreamingCompleted(enum class EWorldPartitionRuntimeCellState QueryState, TArray<struct FWorldPartitionStreamingQuerySource> QuerySources, bool bExactState);//Offset:Discovery.exe+0x58B4090
};


// Class Engine.WorldPartitionVolume
// 0x0000 (0x0300 - 0x0300)
class AWorldPartitionVolume : public AVolume
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.WorldPartitionVolume"));
		return ptr;
	}

};


// Class Engine.HierarchicalLODSetup
// 0x0038 (0x0060 - 0x0028)
class UHierarchicalLODSetup : public UObject
{
public:
	TArray<struct FHierarchicalSimplification>         HierarchicalLODSetup;                                     // 0x0028(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData00[0x28];                                      // 0x0038(0x0028) UNKNOWN PROPERTY: OverrideBaseMaterial

	static UClass* StaticClass()
	{
		static UClass* ptr = nullptr;
		if(!ptr)
			ptr = UObject::FindClass(XorStr("Class Engine.HierarchicalLODSetup"));
		return ptr;
	}

};


}

#ifdef _MSC_VER
	#pragma pack(pop)
#endif
